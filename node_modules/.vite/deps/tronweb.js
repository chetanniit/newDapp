import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-DI52DQAC.js";

// node_modules/@tronweb3/google-protobuf/google-protobuf.js
var require_google_protobuf = __commonJS({
  "node_modules/@tronweb3/google-protobuf/google-protobuf.js"(exports) {
    var aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, b, c) {
      a != Array.prototype && a != Object.prototype && (a[b] = c.value);
    };
    var e = "undefined" != typeof window && window === exports ? exports : "undefined" != typeof global && null != global ? global : exports;
    function ba(a, b) {
      if (b) {
        var c = e;
        a = a.split(".");
        for (var d = 0; d < a.length - 1; d++) {
          var f = a[d];
          f in c || (c[f] = {});
          c = c[f];
        }
        a = a[a.length - 1];
        d = c[a];
        b = b(d);
        b != d && null != b && aa(c, a, { configurable: true, writable: true, value: b });
      }
    }
    function ca(a) {
      var b = 0;
      return function() {
        return b < a.length ? { done: false, value: a[b++] } : { done: true };
      };
    }
    function da() {
      da = function() {
      };
      e.Symbol || (e.Symbol = ea);
    }
    function fa(a, b) {
      this.a = a;
      aa(this, "description", { configurable: true, writable: true, value: b });
    }
    fa.prototype.toString = function() {
      return this.a;
    };
    var ea = /* @__PURE__ */ function() {
      function a(c) {
        if (this instanceof a) throw new TypeError("Symbol is not a constructor");
        return new fa("jscomp_symbol_" + (c || "") + "_" + b++, c);
      }
      var b = 0;
      return a;
    }();
    function ha() {
      da();
      var a = e.Symbol.iterator;
      a || (a = e.Symbol.iterator = e.Symbol("Symbol.iterator"));
      "function" != typeof Array.prototype[a] && aa(Array.prototype, a, { configurable: true, writable: true, value: function() {
        return ia(ca(this));
      } });
      ha = function() {
      };
    }
    function ia(a) {
      ha();
      a = { next: a };
      a[e.Symbol.iterator] = function() {
        return this;
      };
      return a;
    }
    function ka(a, b) {
      ha();
      a instanceof String && (a += "");
      var c = 0, d = { next: function() {
        if (c < a.length) {
          var f = c++;
          return { value: b(f, a[f]), done: false };
        }
        d.next = function() {
          return { done: true, value: void 0 };
        };
        return d.next();
      } };
      d[Symbol.iterator] = function() {
        return d;
      };
      return d;
    }
    ba("Array.prototype.entries", function(a) {
      return a ? a : function() {
        return ka(this, function(b, c) {
          return [b, c];
        });
      };
    });
    var la = exports || self;
    function g(a, b, c) {
      a = a.split(".");
      c = c || la;
      a[0] in c || "undefined" == typeof c.execScript || c.execScript("var " + a[0]);
      for (var d; a.length && (d = a.shift()); ) a.length || void 0 === b ? c[d] && c[d] !== Object.prototype[d] ? c = c[d] : c = c[d] = {} : c[d] = b;
    }
    function k(a) {
      var b = typeof a;
      if ("object" == b) if (a) {
        if (a instanceof Array) return "array";
        if (a instanceof Object) return b;
        var c = Object.prototype.toString.call(a);
        if ("[object Window]" == c) return "object";
        if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
        if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
      } else return "null";
      else if ("function" == b && "undefined" == typeof a.call) return "object";
      return b;
    }
    function ma(a) {
      var b = typeof a;
      return "object" == b && null != a || "function" == b;
    }
    function na(a, b, c) {
      g(a, b, c);
    }
    function oa(a, b) {
      function c() {
      }
      c.prototype = b.prototype;
      a.prototype = new c();
      a.prototype.constructor = a;
    }
    var pa = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    function qa(a, b) {
      for (var c, d, f = 1; f < arguments.length; f++) {
        d = arguments[f];
        for (c in d) a[c] = d[c];
        for (var h = 0; h < pa.length; h++) c = pa[h], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
      }
    }
    var ra = Array.prototype.forEach ? function(a, b) {
      Array.prototype.forEach.call(a, b, void 0);
    } : function(a, b) {
      for (var c = a.length, d = "string" === typeof a ? a.split("") : a, f = 0; f < c; f++) f in d && b.call(void 0, d[f], f, a);
    };
    var l = Array.prototype.map ? function(a, b) {
      return Array.prototype.map.call(a, b, void 0);
    } : function(a, b) {
      for (var c = a.length, d = Array(c), f = "string" === typeof a ? a.split("") : a, h = 0; h < c; h++) h in f && (d[h] = b.call(void 0, f[h], h, a));
      return d;
    };
    function sa(a, b, c) {
      return 2 >= arguments.length ? Array.prototype.slice.call(a, b) : Array.prototype.slice.call(a, b, c);
    }
    function ta(a, b, c, d) {
      var f = "Assertion failed";
      if (c) {
        f += ": " + c;
        var h = d;
      } else a && (f += ": " + a, h = b);
      throw Error(f, h || []);
    }
    function n(a, b, c) {
      for (var d = [], f = 2; f < arguments.length; ++f) d[f - 2] = arguments[f];
      a || ta("", null, b, d);
      return a;
    }
    function ua(a, b, c) {
      for (var d = [], f = 2; f < arguments.length; ++f) d[f - 2] = arguments[f];
      "string" !== typeof a && ta("Expected string but got %s: %s.", [k(a), a], b, d);
    }
    function va(a, b, c) {
      for (var d = [], f = 2; f < arguments.length; ++f) d[f - 2] = arguments[f];
      Array.isArray(a) || ta("Expected array but got %s: %s.", [k(a), a], b, d);
    }
    function p(a, b) {
      for (var c = [], d = 1; d < arguments.length; ++d) c[d - 1] = arguments[d];
      throw Error("Failure" + (a ? ": " + a : ""), c);
    }
    function q(a, b, c, d) {
      for (var f = [], h = 3; h < arguments.length; ++h) f[h - 3] = arguments[h];
      a instanceof b || ta("Expected instanceof %s but got %s.", [wa(b), wa(a)], c, f);
    }
    function wa(a) {
      return a instanceof Function ? a.displayName || a.name || "unknown type name" : a instanceof Object ? a.constructor.displayName || a.constructor.name || Object.prototype.toString.call(a) : null === a ? "null" : typeof a;
    }
    function r2(a, b) {
      this.f = a;
      this.b = b;
      this.a = {};
      this.arrClean = true;
      if (0 < this.f.length) {
        for (a = 0; a < this.f.length; a++) {
          b = this.f[a];
          var c = b[0];
          this.a[c.toString()] = new xa(c, b[1]);
        }
        this.arrClean = true;
      }
    }
    g("jspb.Map", r2, void 0);
    r2.prototype.g = function() {
      if (this.arrClean) {
        if (this.b) {
          var a = this.a, b;
          for (b in a) if (Object.prototype.hasOwnProperty.call(a, b)) {
            var c = a[b].a;
            c && c.g();
          }
        }
      } else {
        this.f.length = 0;
        a = u(this);
        a.sort();
        for (b = 0; b < a.length; b++) {
          var d = this.a[a[b]];
          (c = d.a) && c.g();
          this.f.push([d.key, d.value]);
        }
        this.arrClean = true;
      }
      return this.f;
    };
    r2.prototype.toArray = r2.prototype.g;
    r2.prototype.Lc = function(a, b) {
      for (var c = this.g(), d = [], f = 0; f < c.length; f++) {
        var h = this.a[c[f][0].toString()];
        v(this, h);
        var m = h.a;
        m ? (n(b), d.push([h.key, b(a, m)])) : d.push([h.key, h.value]);
      }
      return d;
    };
    r2.prototype.toObject = r2.prototype.Lc;
    r2.fromObject = function(a, b, c) {
      b = new r2([], b);
      for (var d = 0; d < a.length; d++) {
        var f = a[d][0], h = c(a[d][1]);
        b.set(f, h);
      }
      return b;
    };
    function x(a) {
      this.a = 0;
      this.b = a;
    }
    x.prototype.next = function() {
      return this.a < this.b.length ? { done: false, value: this.b[this.a++] } : { done: true, value: void 0 };
    };
    "undefined" != typeof Symbol && (x.prototype[Symbol.iterator] = function() {
      return this;
    });
    r2.prototype.Jb = function() {
      return u(this).length;
    };
    r2.prototype.getLength = r2.prototype.Jb;
    r2.prototype.clear = function() {
      this.a = {};
      this.arrClean = false;
    };
    r2.prototype.clear = r2.prototype.clear;
    r2.prototype.Cb = function(a) {
      a = a.toString();
      var b = this.a.hasOwnProperty(a);
      delete this.a[a];
      this.arrClean = false;
      return b;
    };
    r2.prototype.del = r2.prototype.Cb;
    r2.prototype.Eb = function() {
      var a = [], b = u(this);
      b.sort();
      for (var c = 0; c < b.length; c++) {
        var d = this.a[b[c]];
        a.push([d.key, d.value]);
      }
      return a;
    };
    r2.prototype.getEntryList = r2.prototype.Eb;
    r2.prototype.entries = function() {
      var a = [], b = u(this);
      b.sort();
      for (var c = 0; c < b.length; c++) {
        var d = this.a[b[c]];
        a.push([d.key, v(this, d)]);
      }
      return new x(a);
    };
    r2.prototype.entries = r2.prototype.entries;
    r2.prototype.keys = function() {
      var a = [], b = u(this);
      b.sort();
      for (var c = 0; c < b.length; c++) a.push(this.a[b[c]].key);
      return new x(a);
    };
    r2.prototype.keys = r2.prototype.keys;
    r2.prototype.values = function() {
      var a = [], b = u(this);
      b.sort();
      for (var c = 0; c < b.length; c++) a.push(v(this, this.a[b[c]]));
      return new x(a);
    };
    r2.prototype.values = r2.prototype.values;
    r2.prototype.forEach = function(a, b) {
      var c = u(this);
      c.sort();
      for (var d = 0; d < c.length; d++) {
        var f = this.a[c[d]];
        a.call(b, v(this, f), f.key, this);
      }
    };
    r2.prototype.forEach = r2.prototype.forEach;
    r2.prototype.set = function(a, b) {
      var c = new xa(a);
      this.b ? (c.a = b, c.value = b.g()) : c.value = b;
      this.a[a.toString()] = c;
      this.arrClean = false;
      return this;
    };
    r2.prototype.set = r2.prototype.set;
    function v(a, b) {
      return a.b ? (b.a || (b.a = new a.b(b.value)), b.a) : b.value;
    }
    r2.prototype.get = function(a) {
      if (a = this.a[a.toString()]) return v(this, a);
    };
    r2.prototype.get = r2.prototype.get;
    r2.prototype.has = function(a) {
      return a.toString() in this.a;
    };
    r2.prototype.has = r2.prototype.has;
    r2.prototype.Ic = function(a, b, c, d, f) {
      var h = u(this);
      h.sort();
      for (var m = 0; m < h.length; m++) {
        var t = this.a[h[m]];
        b.Va(a);
        c.call(b, 1, t.key);
        this.b ? d.call(b, 2, v(this, t), f) : d.call(b, 2, t.value);
        b.Ya();
      }
    };
    r2.prototype.serializeBinary = r2.prototype.Ic;
    r2.deserializeBinary = function(a, b, c, d, f, h, m) {
      for (; b.na() && !b.bb(); ) {
        var t = b.f;
        1 == t ? h = c.call(b) : 2 == t && (a.b ? (n(f), m || (m = new a.b()), d.call(b, m, f)) : m = d.call(b));
      }
      n(void 0 != h);
      n(void 0 != m);
      a.set(h, m);
    };
    function u(a) {
      a = a.a;
      var b = [], c;
      for (c in a) Object.prototype.hasOwnProperty.call(a, c) && b.push(c);
      return b;
    }
    function xa(a, b) {
      this.key = a;
      this.value = b;
      this.a = void 0;
    }
    function ya(a) {
      if (8192 >= a.length) return String.fromCharCode.apply(null, a);
      for (var b = "", c = 0; c < a.length; c += 8192) b += String.fromCharCode.apply(null, sa(a, c, c + 8192));
      return b;
    }
    var za = { "\0": "\\0", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\x0B", '"': '\\"', "\\": "\\\\", "<": "\\u003C" };
    var Aa = { "'": "\\'" };
    var Ba = {};
    var y = null;
    function Ca(a, b) {
      void 0 === b && (b = 0);
      Da();
      b = Ba[b];
      for (var c = [], d = 0; d < a.length; d += 3) {
        var f = a[d], h = d + 1 < a.length, m = h ? a[d + 1] : 0, t = d + 2 < a.length, w = t ? a[d + 2] : 0, D = f >> 2;
        f = (f & 3) << 4 | m >> 4;
        m = (m & 15) << 2 | w >> 6;
        w &= 63;
        t || (w = 64, h || (m = 64));
        c.push(b[D], b[f], b[m] || "", b[w] || "");
      }
      return c.join("");
    }
    function Ea(a) {
      var b = a.length, c = 3 * b / 4;
      c % 3 ? c = Math.floor(c) : -1 != "=.".indexOf(a[b - 1]) && (c = -1 != "=.".indexOf(a[b - 2]) ? c - 2 : c - 1);
      var d = new Uint8Array(c), f = 0;
      Fa(a, function(h) {
        d[f++] = h;
      });
      return d.subarray(0, f);
    }
    function Fa(a, b) {
      function c(w) {
        for (; d < a.length; ) {
          var D = a.charAt(d++), ja = y[D];
          if (null != ja) return ja;
          if (!/^[\s\xa0]*$/.test(D)) throw Error("Unknown base64 encoding at char: " + D);
        }
        return w;
      }
      Da();
      for (var d = 0; ; ) {
        var f = c(-1), h = c(0), m = c(64), t = c(64);
        if (64 === t && -1 === f) break;
        b(f << 2 | h >> 4);
        64 != m && (b(h << 4 & 240 | m >> 2), 64 != t && b(m << 6 & 192 | t));
      }
    }
    function Da() {
      if (!y) {
        y = {};
        for (var a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""), b = ["+/=", "+/", "-_=", "-_.", "-_"], c = 0; 5 > c; c++) {
          var d = a.concat(b[c].split(""));
          Ba[c] = d;
          for (var f = 0; f < d.length; f++) {
            var h = d[f];
            void 0 === y[h] && (y[h] = f);
          }
        }
      }
    }
    g("jspb.ConstBinaryMessage", function() {
    }, void 0);
    g("jspb.BinaryMessage", function() {
    }, void 0);
    g("jspb.BinaryConstants.FieldType", { yb: -1, de: 1, FLOAT: 2, je: 3, se: 4, ie: 5, xb: 6, wb: 7, BOOL: 8, qe: 9, he: 10, ke: 11, be: 12, re: 13, fe: 14, le: 15, me: 16, ne: 17, oe: 18, ge: 30, ue: 31 }, void 0);
    g("jspb.BinaryConstants.WireType", { yb: -1, te: 0, xb: 1, ce: 2, pe: 3, ee: 4, wb: 5 }, void 0);
    g("jspb.BinaryConstants.FieldTypeToWireType", function(a) {
      switch (a) {
        case 5:
        case 3:
        case 13:
        case 4:
        case 17:
        case 18:
        case 8:
        case 14:
        case 31:
          return 0;
        case 1:
        case 6:
        case 16:
        case 30:
          return 1;
        case 9:
        case 11:
        case 12:
          return 2;
        case 2:
        case 7:
        case 15:
          return 5;
        default:
          return -1;
      }
    }, void 0);
    g("jspb.BinaryConstants.INVALID_FIELD_NUMBER", -1, void 0);
    g("jspb.BinaryConstants.FLOAT32_EPS", 1401298464324817e-60, void 0);
    g("jspb.BinaryConstants.FLOAT32_MIN", 11754943508222875e-54, void 0);
    g("jspb.BinaryConstants.FLOAT32_MAX", 34028234663852886e22, void 0);
    g("jspb.BinaryConstants.FLOAT64_EPS", 5e-324, void 0);
    g("jspb.BinaryConstants.FLOAT64_MIN", 22250738585072014e-324, void 0);
    g("jspb.BinaryConstants.FLOAT64_MAX", 17976931348623157e292, void 0);
    g("jspb.BinaryConstants.TWO_TO_20", 1048576, void 0);
    g("jspb.BinaryConstants.TWO_TO_23", 8388608, void 0);
    g("jspb.BinaryConstants.TWO_TO_31", 2147483648, void 0);
    g("jspb.BinaryConstants.TWO_TO_32", 4294967296, void 0);
    g("jspb.BinaryConstants.TWO_TO_52", 4503599627370496, void 0);
    g("jspb.BinaryConstants.TWO_TO_63", 9223372036854776e3, void 0);
    g("jspb.BinaryConstants.TWO_TO_64", 18446744073709552e3, void 0);
    g("jspb.BinaryConstants.ZERO_HASH", "\0\0\0\0\0\0\0\0", void 0);
    function z(a, b) {
      if (a) throw Error("Invalid UTF8");
      b.push(65533);
    }
    function Ga(a, b) {
      b = String.fromCharCode.apply(null, b);
      return null == a ? b : a + b;
    }
    var Ha = void 0;
    var Ia;
    var Ja;
    var Ka = "undefined" !== typeof TextDecoder;
    var A = 0;
    var B = 0;
    g("jspb.utils.getSplit64Low", function() {
      return A;
    }, void 0);
    g("jspb.utils.getSplit64High", function() {
      return B;
    }, void 0);
    function La(a) {
      var b = a >>> 0;
      a = Math.floor((a - b) / 4294967296) >>> 0;
      A = b;
      B = a;
    }
    g("jspb.utils.splitUint64", La, void 0);
    function C(a) {
      var b = 0 > a;
      a = Math.abs(a);
      var c = a >>> 0;
      a = Math.floor((a - c) / 4294967296);
      a >>>= 0;
      b && (a = ~a >>> 0, c = (~c >>> 0) + 1, 4294967295 < c && (c = 0, a++, 4294967295 < a && (a = 0)));
      A = c;
      B = a;
    }
    g("jspb.utils.splitInt64", C, void 0);
    function Ma(a) {
      var b = 0 > a;
      a = 2 * Math.abs(a);
      La(a);
      a = A;
      var c = B;
      b && (0 == a ? 0 == c ? c = a = 4294967295 : (c--, a = 4294967295) : a--);
      A = a;
      B = c;
    }
    g("jspb.utils.splitZigzag64", Ma, void 0);
    function Na(a) {
      var b = 0 > a ? 1 : 0;
      a = b ? -a : a;
      if (0 === a) 0 < 1 / a ? A = B = 0 : (B = 0, A = 2147483648);
      else if (isNaN(a)) B = 0, A = 2147483647;
      else if (34028234663852886e22 < a) B = 0, A = (b << 31 | 2139095040) >>> 0;
      else if (11754943508222875e-54 > a) a = Math.round(a / Math.pow(2, -149)), B = 0, A = (b << 31 | a) >>> 0;
      else {
        var c = Math.floor(Math.log(a) / Math.LN2);
        a *= Math.pow(2, -c);
        a = Math.round(8388608 * a);
        16777216 <= a && ++c;
        B = 0;
        A = (b << 31 | c + 127 << 23 | a & 8388607) >>> 0;
      }
    }
    g("jspb.utils.splitFloat32", Na, void 0);
    function Oa(a) {
      var b = 0 > a ? 1 : 0;
      a = b ? -a : a;
      if (0 === a) B = 0 < 1 / a ? 0 : 2147483648, A = 0;
      else if (isNaN(a)) B = 2147483647, A = 4294967295;
      else if (17976931348623157e292 < a) B = (b << 31 | 2146435072) >>> 0, A = 0;
      else if (22250738585072014e-324 > a) a /= Math.pow(2, -1074), B = (b << 31 | a / 4294967296) >>> 0, A = a >>> 0;
      else {
        var c = a, d = 0;
        if (2 <= c) for (; 2 <= c && 1023 > d; ) d++, c /= 2;
        else for (; 1 > c && -1022 < d; ) c *= 2, d--;
        a *= Math.pow(2, -d);
        B = (b << 31 | d + 1023 << 20 | 1048576 * a & 1048575) >>> 0;
        A = 4503599627370496 * a >>> 0;
      }
    }
    g("jspb.utils.splitFloat64", Oa, void 0);
    function E(a) {
      var b = a.charCodeAt(4), c = a.charCodeAt(5), d = a.charCodeAt(6), f = a.charCodeAt(7);
      A = a.charCodeAt(0) + (a.charCodeAt(1) << 8) + (a.charCodeAt(2) << 16) + (a.charCodeAt(3) << 24) >>> 0;
      B = b + (c << 8) + (d << 16) + (f << 24) >>> 0;
    }
    g("jspb.utils.splitHash64", E, void 0);
    function F(a, b) {
      return 4294967296 * b + (a >>> 0);
    }
    g("jspb.utils.joinUint64", F, void 0);
    function G(a, b) {
      var c = b & 2147483648;
      c && (a = ~a + 1 >>> 0, b = ~b >>> 0, 0 == a && (b = b + 1 >>> 0));
      a = F(a, b);
      return c ? -a : a;
    }
    g("jspb.utils.joinInt64", G, void 0);
    function Pa(a, b, c) {
      var d = b >> 31;
      return c(a << 1 ^ d, (b << 1 | a >>> 31) ^ d);
    }
    g("jspb.utils.toZigzag64", Pa, void 0);
    function Qa(a, b) {
      return Ra(a, b, G);
    }
    g("jspb.utils.joinZigzag64", Qa, void 0);
    function Ra(a, b, c) {
      var d = -(a & 1);
      return c((a >>> 1 | b << 31) ^ d, b >>> 1 ^ d);
    }
    g("jspb.utils.fromZigzag64", Ra, void 0);
    function Sa(a) {
      var b = 2 * (a >> 31) + 1, c = a >>> 23 & 255;
      a &= 8388607;
      return 255 == c ? a ? NaN : Infinity * b : 0 == c ? b * Math.pow(2, -149) * a : b * Math.pow(2, c - 150) * (a + Math.pow(2, 23));
    }
    g("jspb.utils.joinFloat32", Sa, void 0);
    function Ta(a, b) {
      var c = 2 * (b >> 31) + 1, d = b >>> 20 & 2047;
      a = 4294967296 * (b & 1048575) + a;
      return 2047 == d ? a ? NaN : Infinity * c : 0 == d ? c * Math.pow(2, -1074) * a : c * Math.pow(2, d - 1075) * (a + 4503599627370496);
    }
    g("jspb.utils.joinFloat64", Ta, void 0);
    function Ua(a, b) {
      return String.fromCharCode(a >>> 0 & 255, a >>> 8 & 255, a >>> 16 & 255, a >>> 24 & 255, b >>> 0 & 255, b >>> 8 & 255, b >>> 16 & 255, b >>> 24 & 255);
    }
    g("jspb.utils.joinHash64", Ua, void 0);
    g("jspb.utils.DIGITS", "0123456789abcdef".split(""), void 0);
    function H(a, b) {
      function c(f, h) {
        f = f ? String(f) : "";
        return h ? "0000000".slice(f.length) + f : f;
      }
      if (2097151 >= b) return "" + F(a, b);
      var d = (a >>> 24 | b << 8) >>> 0 & 16777215;
      b = b >> 16 & 65535;
      a = (a & 16777215) + 6777216 * d + 6710656 * b;
      d += 8147497 * b;
      b *= 2;
      1e7 <= a && (d += Math.floor(a / 1e7), a %= 1e7);
      1e7 <= d && (b += Math.floor(d / 1e7), d %= 1e7);
      return c(b, 0) + c(d, b) + c(a, 1);
    }
    g("jspb.utils.joinUnsignedDecimalString", H, void 0);
    function Va(a, b) {
      var c = b & 2147483648;
      c && (a = ~a + 1 >>> 0, b = ~b + (0 == a ? 1 : 0) >>> 0);
      a = H(a, b);
      return c ? "-" + a : a;
    }
    g("jspb.utils.joinSignedDecimalString", Va, void 0);
    function Wa(a, b) {
      E(a);
      a = A;
      var c = B;
      return b ? Va(a, c) : H(a, c);
    }
    g("jspb.utils.hash64ToDecimalString", Wa, void 0);
    g("jspb.utils.hash64ArrayToDecimalStrings", function(a, b) {
      for (var c = Array(a.length), d = 0; d < a.length; d++) c[d] = Wa(a[d], b);
      return c;
    }, void 0);
    function Xa(a) {
      function b(m, t) {
        for (var w = 0; 8 > w && (1 !== m || 0 < t); w++) t = m * f[w] + t, f[w] = t & 255, t >>>= 8;
      }
      function c() {
        for (var m = 0; 8 > m; m++) f[m] = ~f[m] & 255;
      }
      n(0 < a.length);
      var d = false;
      "-" === a[0] && (d = true, a = a.slice(1));
      for (var f = [0, 0, 0, 0, 0, 0, 0, 0], h = 0; h < a.length; h++) b(10, a.charCodeAt(h) - 48);
      d && (c(), b(1, 1));
      return ya(f);
    }
    g("jspb.utils.decimalStringToHash64", Xa, void 0);
    g("jspb.utils.splitDecimalString", function(a) {
      E(Xa(a));
    }, void 0);
    function Ya(a) {
      return String.fromCharCode(10 > a ? 48 + a : 87 + a);
    }
    function Za(a) {
      return 97 <= a ? a - 97 + 10 : a - 48;
    }
    g("jspb.utils.hash64ToHexString", function(a) {
      var b = Array(18);
      b[0] = "0";
      b[1] = "x";
      for (var c = 0; 8 > c; c++) {
        var d = a.charCodeAt(7 - c);
        b[2 * c + 2] = Ya(d >> 4);
        b[2 * c + 3] = Ya(d & 15);
      }
      return b.join("");
    }, void 0);
    g("jspb.utils.hexStringToHash64", function(a) {
      a = a.toLowerCase();
      n(18 == a.length);
      n("0" == a[0]);
      n("x" == a[1]);
      for (var b = "", c = 0; 8 > c; c++) b = String.fromCharCode(16 * Za(a.charCodeAt(2 * c + 2)) + Za(a.charCodeAt(2 * c + 3))) + b;
      return b;
    }, void 0);
    g("jspb.utils.hash64ToNumber", function(a, b) {
      E(a);
      a = A;
      var c = B;
      return b ? G(a, c) : F(a, c);
    }, void 0);
    g("jspb.utils.numberToHash64", function(a) {
      C(a);
      return Ua(A, B);
    }, void 0);
    g("jspb.utils.countVarints", function(a, b, c) {
      for (var d = 0, f = b; f < c; f++) d += a[f] >> 7;
      return c - b - d;
    }, void 0);
    g("jspb.utils.countVarintFields", function(a, b, c, d) {
      var f = 0;
      d *= 8;
      if (128 > d) for (; b < c && a[b++] == d; ) for (f++; ; ) {
        var h = a[b++];
        if (0 == (h & 128)) break;
      }
      else for (; b < c; ) {
        for (h = d; 128 < h; ) {
          if (a[b] != (h & 127 | 128)) return f;
          b++;
          h >>= 7;
        }
        if (a[b++] != h) break;
        for (f++; h = a[b++], 0 != (h & 128); ) ;
      }
      return f;
    }, void 0);
    function $a(a, b, c, d, f) {
      var h = 0;
      if (128 > d) for (; b < c && a[b++] == d; ) h++, b += f;
      else for (; b < c; ) {
        for (var m = d; 128 < m; ) {
          if (a[b++] != (m & 127 | 128)) return h;
          m >>= 7;
        }
        if (a[b++] != m) break;
        h++;
        b += f;
      }
      return h;
    }
    g("jspb.utils.countFixed32Fields", function(a, b, c, d) {
      return $a(a, b, c, 8 * d + 5, 4);
    }, void 0);
    g("jspb.utils.countFixed64Fields", function(a, b, c, d) {
      return $a(a, b, c, 8 * d + 1, 8);
    }, void 0);
    g("jspb.utils.countDelimitedFields", function(a, b, c, d) {
      var f = 0;
      for (d = 8 * d + 2; b < c; ) {
        for (var h = d; 128 < h; ) {
          if (a[b++] != (h & 127 | 128)) return f;
          h >>= 7;
        }
        if (a[b++] != h) break;
        f++;
        for (var m = 0, t = 1; h = a[b++], m += (h & 127) * t, t *= 128, 0 != (h & 128); ) ;
        b += m;
      }
      return f;
    }, void 0);
    g("jspb.utils.debugBytesToTextFormat", function(a) {
      var b = '"';
      if (a) {
        a = ab(a);
        for (var c = 0; c < a.length; c++) b += "\\x", 16 > a[c] && (b += "0"), b += a[c].toString(16);
      }
      return b + '"';
    }, void 0);
    g("jspb.utils.debugScalarToTextFormat", function(a) {
      if ("string" === typeof a) {
        a = String(a);
        for (var b = ['"'], c = 0; c < a.length; c++) {
          var d = a.charAt(c), f = d.charCodeAt(0), h = c + 1, m;
          if (!(m = za[d])) {
            if (!(31 < f && 127 > f)) if (f = d, f in Aa) d = Aa[f];
            else if (f in za) d = Aa[f] = za[f];
            else {
              m = f.charCodeAt(0);
              if (31 < m && 127 > m) d = f;
              else {
                if (256 > m) {
                  if (d = "\\x", 16 > m || 256 < m) d += "0";
                } else d = "\\u", 4096 > m && (d += "0");
                d += m.toString(16).toUpperCase();
              }
              d = Aa[f] = d;
            }
            m = d;
          }
          b[h] = m;
        }
        b.push('"');
        a = b.join("");
      } else a = a.toString();
      return a;
    }, void 0);
    g("jspb.utils.stringToByteArray", function(a) {
      for (var b = new Uint8Array(a.length), c = 0; c < a.length; c++) {
        var d = a.charCodeAt(c);
        if (255 < d) throw Error("Conversion error: string contains codepoint outside of byte range");
        b[c] = d;
      }
      return b;
    }, void 0);
    function ab(a) {
      if (a.constructor === Uint8Array) return a;
      if (a.constructor === ArrayBuffer) return new Uint8Array(a);
      if (a.constructor === Array) return new Uint8Array(a);
      if (a.constructor === String) return Ea(a);
      if (a instanceof Uint8Array) return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
      p("Type not convertible to Uint8Array.");
      return new Uint8Array(0);
    }
    g("jspb.utils.byteSourceToUint8Array", ab, void 0);
    function I(a, b, c) {
      this.b = null;
      this.a = this.f = this.h = 0;
      this.v = false;
      a && this.H(a, b, c);
    }
    g("jspb.BinaryDecoder", I, void 0);
    var bb = [];
    I.getInstanceCacheLength = function() {
      return bb.length;
    };
    function cb(a, b, c) {
      if (bb.length) {
        var d = bb.pop();
        a && d.H(a, b, c);
        return d;
      }
      return new I(a, b, c);
    }
    I.alloc = cb;
    I.prototype.Ca = function() {
      this.clear();
      100 > bb.length && bb.push(this);
    };
    I.prototype.free = I.prototype.Ca;
    I.prototype.clone = function() {
      return cb(this.b, this.h, this.f - this.h);
    };
    I.prototype.clone = I.prototype.clone;
    I.prototype.clear = function() {
      this.b = null;
      this.a = this.f = this.h = 0;
      this.v = false;
    };
    I.prototype.clear = I.prototype.clear;
    I.prototype.Y = function() {
      return this.b;
    };
    I.prototype.getBuffer = I.prototype.Y;
    I.prototype.H = function(a, b, c) {
      this.b = ab(a);
      this.h = void 0 !== b ? b : 0;
      this.f = void 0 !== c ? this.h + c : this.b.length;
      this.a = this.h;
    };
    I.prototype.setBlock = I.prototype.H;
    I.prototype.Db = function() {
      return this.f;
    };
    I.prototype.getEnd = I.prototype.Db;
    I.prototype.setEnd = function(a) {
      this.f = a;
    };
    I.prototype.setEnd = I.prototype.setEnd;
    I.prototype.reset = function() {
      this.a = this.h;
    };
    I.prototype.reset = I.prototype.reset;
    I.prototype.B = function() {
      return this.a;
    };
    I.prototype.getCursor = I.prototype.B;
    I.prototype.Ma = function(a) {
      this.a = a;
    };
    I.prototype.setCursor = I.prototype.Ma;
    I.prototype.advance = function(a) {
      this.a += a;
      J(this);
    };
    I.prototype.advance = I.prototype.advance;
    I.prototype.ya = function() {
      return this.a == this.f;
    };
    I.prototype.atEnd = I.prototype.ya;
    I.prototype.Qb = function() {
      return this.a > this.f;
    };
    I.prototype.pastEnd = I.prototype.Qb;
    I.prototype.getError = function() {
      return this.v || 0 > this.a || this.a > this.f;
    };
    I.prototype.getError = I.prototype.getError;
    I.prototype.w = function(a) {
      for (var b = 128, c = 0, d = 0, f = 0; 4 > f && 128 <= b; f++) b = this.b[this.a++], c |= (b & 127) << 7 * f;
      128 <= b && (b = this.b[this.a++], c |= (b & 127) << 28, d |= (b & 127) >> 4);
      if (128 <= b) for (f = 0; 5 > f && 128 <= b; f++) b = this.b[this.a++], d |= (b & 127) << 7 * f + 3;
      if (128 > b) return a(c >>> 0, d >>> 0);
      p("Failed to read varint, encoding is invalid.");
      this.v = true;
    };
    I.prototype.readSplitVarint64 = I.prototype.w;
    I.prototype.ea = function(a) {
      return this.w(function(b, c) {
        return Ra(b, c, a);
      });
    };
    I.prototype.readSplitZigzagVarint64 = I.prototype.ea;
    I.prototype.sa = function(a) {
      var b = this.b, c = this.a;
      this.a += 8;
      for (var d = 0, f = 0, h = c + 7; h >= c; h--) d = d << 8 | b[h], f = f << 8 | b[h + 4];
      return a(d, f);
    };
    I.prototype.readSplitFixed64 = I.prototype.sa;
    function J(a) {
      a.a > a.f && p("Read past the end " + a.a + " > " + a.f);
    }
    I.prototype.kb = function() {
      for (; this.b[this.a] & 128; ) this.a++;
      this.a++;
    };
    I.prototype.skipVarint = I.prototype.kb;
    I.prototype.mb = function(a) {
      for (; 128 < a; ) this.a--, a >>>= 7;
      this.a--;
    };
    I.prototype.unskipVarint = I.prototype.mb;
    I.prototype.s = function() {
      var a = this.b;
      var b = a[this.a];
      var c = b & 127;
      if (128 > b) return this.a += 1, J(this), c;
      b = a[this.a + 1];
      c |= (b & 127) << 7;
      if (128 > b) return this.a += 2, J(this), c;
      b = a[this.a + 2];
      c |= (b & 127) << 14;
      if (128 > b) return this.a += 3, J(this), c;
      b = a[this.a + 3];
      c |= (b & 127) << 21;
      if (128 > b) return this.a += 4, J(this), c;
      b = a[this.a + 4];
      c |= (b & 15) << 28;
      if (128 > b) return this.a += 5, J(this), c >>> 0;
      this.a += 5;
      128 <= a[this.a++] && 128 <= a[this.a++] && 128 <= a[this.a++] && 128 <= a[this.a++] && 128 <= a[this.a++] && n(false);
      J(this);
      return c;
    };
    I.prototype.readUnsignedVarint32 = I.prototype.s;
    I.prototype.da = function() {
      return ~~this.s();
    };
    I.prototype.readSignedVarint32 = I.prototype.da;
    I.prototype.O = function() {
      return this.s().toString();
    };
    I.prototype.Ea = function() {
      return this.da().toString();
    };
    I.prototype.readSignedVarint32String = I.prototype.Ea;
    I.prototype.Ia = function() {
      var a = this.s();
      return a >>> 1 ^ -(a & 1);
    };
    I.prototype.readZigzagVarint32 = I.prototype.Ia;
    I.prototype.Ga = function() {
      return this.w(F);
    };
    I.prototype.readUnsignedVarint64 = I.prototype.Ga;
    I.prototype.Ha = function() {
      return this.w(H);
    };
    I.prototype.readUnsignedVarint64String = I.prototype.Ha;
    I.prototype.ra = function() {
      return this.w(G);
    };
    I.prototype.readSignedVarint64 = I.prototype.ra;
    I.prototype.Fa = function() {
      return this.w(Va);
    };
    I.prototype.readSignedVarint64String = I.prototype.Fa;
    I.prototype.Ja = function() {
      return this.w(Qa);
    };
    I.prototype.readZigzagVarint64 = I.prototype.Ja;
    I.prototype.fb = function() {
      return this.ea(Ua);
    };
    I.prototype.readZigzagVarintHash64 = I.prototype.fb;
    I.prototype.Ka = function() {
      return this.ea(Va);
    };
    I.prototype.readZigzagVarint64String = I.prototype.Ka;
    I.prototype.Fc = function() {
      var a = this.b[this.a];
      this.a += 1;
      J(this);
      return a;
    };
    I.prototype.readUint8 = I.prototype.Fc;
    I.prototype.Dc = function() {
      var a = this.b[this.a], b = this.b[this.a + 1];
      this.a += 2;
      J(this);
      return a << 0 | b << 8;
    };
    I.prototype.readUint16 = I.prototype.Dc;
    I.prototype.m = function() {
      var a = this.b[this.a], b = this.b[this.a + 1], c = this.b[this.a + 2], d = this.b[this.a + 3];
      this.a += 4;
      J(this);
      return (a << 0 | b << 8 | c << 16 | d << 24) >>> 0;
    };
    I.prototype.readUint32 = I.prototype.m;
    I.prototype.fa = function() {
      var a = this.m(), b = this.m();
      return F(a, b);
    };
    I.prototype.readUint64 = I.prototype.fa;
    I.prototype.ga = function() {
      var a = this.m(), b = this.m();
      return H(a, b);
    };
    I.prototype.readUint64String = I.prototype.ga;
    I.prototype.Xb = function() {
      var a = this.b[this.a];
      this.a += 1;
      J(this);
      return a << 24 >> 24;
    };
    I.prototype.readInt8 = I.prototype.Xb;
    I.prototype.Vb = function() {
      var a = this.b[this.a], b = this.b[this.a + 1];
      this.a += 2;
      J(this);
      return (a << 0 | b << 8) << 16 >> 16;
    };
    I.prototype.readInt16 = I.prototype.Vb;
    I.prototype.P = function() {
      var a = this.b[this.a], b = this.b[this.a + 1], c = this.b[this.a + 2], d = this.b[this.a + 3];
      this.a += 4;
      J(this);
      return a << 0 | b << 8 | c << 16 | d << 24;
    };
    I.prototype.readInt32 = I.prototype.P;
    I.prototype.ba = function() {
      var a = this.m(), b = this.m();
      return G(a, b);
    };
    I.prototype.readInt64 = I.prototype.ba;
    I.prototype.ca = function() {
      var a = this.m(), b = this.m();
      return Va(a, b);
    };
    I.prototype.readInt64String = I.prototype.ca;
    I.prototype.aa = function() {
      var a = this.m();
      return Sa(a, 0);
    };
    I.prototype.readFloat = I.prototype.aa;
    I.prototype.Z = function() {
      var a = this.m(), b = this.m();
      return Ta(a, b);
    };
    I.prototype.readDouble = I.prototype.Z;
    I.prototype.oa = function() {
      var a = !!this.b[this.a++];
      J(this);
      return a;
    };
    I.prototype.readBool = I.prototype.oa;
    I.prototype.qa = function() {
      return this.da();
    };
    I.prototype.readEnum = I.prototype.qa;
    I.prototype.ta = function(a, b) {
      var c = this.a;
      this.a += a;
      J(this);
      var d = n(this.b);
      if (Ka) {
        var f;
        b ? (f = Ia) || (f = Ia = new TextDecoder("utf-8", { fatal: true })) : (f = Ja) || (f = Ja = new TextDecoder("utf-8", { fatal: false }));
        var h = c + a;
        d = 0 === c && h === d.length ? d : d.subarray(c, h);
        try {
          var m = f.decode(d);
        } catch (ja) {
          if (b) {
            if (void 0 === Ha) {
              try {
                f.decode(new Uint8Array([128]));
              } catch (Db) {
              }
              try {
                f.decode(new Uint8Array([97])), Ha = true;
              } catch (Db) {
                Ha = false;
              }
            }
            b = !Ha;
          }
          b && (Ia = void 0);
          throw ja;
        }
      } else {
        a = c + a;
        m = [];
        for (var t = null, w, D; c < a; ) w = d[c++], 128 > w ? m.push(w) : 224 > w ? c >= a ? z(b, m) : (D = d[c++], 194 > w || 128 !== (D & 192) ? (c--, z(b, m)) : (w = (w & 31) << 6 | D & 63, n(128 <= w && 2047 >= w), m.push(w))) : 240 > w ? c >= a - 1 ? z(b, m) : (D = d[c++], 128 !== (D & 192) || 224 === w && 160 > D || 237 === w && 160 <= D || 128 !== ((f = d[c++]) & 192) ? (c--, z(b, m)) : (w = (w & 15) << 12 | (D & 63) << 6 | f & 63, n(2048 <= w && 65535 >= w), n(55296 > w || 57343 < w), m.push(w))) : 244 >= w ? c >= a - 2 ? z(b, m) : (D = d[c++], 128 !== (D & 192) || 0 !== (w << 28) + (D - 144) >> 30 || 128 !== ((f = d[c++]) & 192) || 128 !== ((h = d[c++]) & 192) ? (c--, z(b, m)) : (w = (w & 7) << 18 | (D & 63) << 12 | (f & 63) << 6 | h & 63, n(65536 <= w && 1114111 >= w), w -= 65536, m.push((w >> 10 & 1023) + 55296, (w & 1023) + 56320))) : z(b, m), 8192 <= m.length && (t = Ga(t, m), m.length = 0);
        n(c === a, "expected " + c + " === " + a);
        m = Ga(t, m);
      }
      return m;
    };
    I.prototype.readString = I.prototype.ta;
    I.prototype.pa = function(a) {
      if (0 > a || this.a + a > this.b.length) return this.v = true, p("Invalid byte length!"), new Uint8Array(0);
      var b = this.b.subarray(this.a, this.a + a);
      this.a += a;
      J(this);
      return b;
    };
    I.prototype.readBytes = I.prototype.pa;
    I.prototype.ha = function() {
      return this.w(Ua);
    };
    I.prototype.readVarintHash64 = I.prototype.ha;
    I.prototype.$ = function() {
      var a = this.b, b = this.a, c = a[b], d = a[b + 1], f = a[b + 2], h = a[b + 3], m = a[b + 4], t = a[b + 5], w = a[b + 6];
      a = a[b + 7];
      this.a += 8;
      return String.fromCharCode(c, d, f, h, m, t, w, a);
    };
    I.prototype.readFixedHash64 = I.prototype.$;
    n(true);
    function K(a, b, c) {
      this.a = cb(a, b, c);
      this.O = this.a.B();
      this.b = this.f = -1;
      this.h = false;
      this.v = null;
    }
    g("jspb.BinaryReader", K, void 0);
    var L = [];
    K.clearInstanceCache = function() {
      L = [];
    };
    K.getInstanceCacheLength = function() {
      return L.length;
    };
    function db(a, b, c) {
      if (L.length) {
        var d = L.pop();
        a && d.a.H(a, b, c);
        return d;
      }
      return new K(a, b, c);
    }
    K.alloc = db;
    K.prototype.zb = db;
    K.prototype.alloc = K.prototype.zb;
    K.prototype.Ca = function() {
      this.a.clear();
      this.b = this.f = -1;
      this.h = false;
      this.v = null;
      100 > L.length && L.push(this);
    };
    K.prototype.free = K.prototype.Ca;
    K.prototype.Fb = function() {
      return this.O;
    };
    K.prototype.getFieldCursor = K.prototype.Fb;
    K.prototype.B = function() {
      return this.a.B();
    };
    K.prototype.getCursor = K.prototype.B;
    K.prototype.Y = function() {
      return this.a.Y();
    };
    K.prototype.getBuffer = K.prototype.Y;
    K.prototype.Hb = function() {
      return this.f;
    };
    K.prototype.getFieldNumber = K.prototype.Hb;
    K.prototype.Lb = function() {
      return this.b;
    };
    K.prototype.getWireType = K.prototype.Lb;
    K.prototype.Mb = function() {
      return 2 == this.b;
    };
    K.prototype.isDelimited = K.prototype.Mb;
    K.prototype.bb = function() {
      return 4 == this.b;
    };
    K.prototype.isEndGroup = K.prototype.bb;
    K.prototype.getError = function() {
      return this.h || this.a.getError();
    };
    K.prototype.getError = K.prototype.getError;
    K.prototype.H = function(a, b, c) {
      this.a.H(a, b, c);
      this.b = this.f = -1;
    };
    K.prototype.setBlock = K.prototype.H;
    K.prototype.reset = function() {
      this.a.reset();
      this.b = this.f = -1;
    };
    K.prototype.reset = K.prototype.reset;
    K.prototype.advance = function(a) {
      this.a.advance(a);
    };
    K.prototype.advance = K.prototype.advance;
    K.prototype.na = function() {
      if (this.a.ya()) return false;
      if (this.getError()) return p("Decoder hit an error"), false;
      this.O = this.a.B();
      var a = this.a.s(), b = a >>> 3;
      a &= 7;
      if (0 != a && 5 != a && 1 != a && 2 != a && 3 != a && 4 != a) return p("Invalid wire type: %s (at position %s)", a, this.O), this.h = true, false;
      this.f = b;
      this.b = a;
      return true;
    };
    K.prototype.nextField = K.prototype.na;
    K.prototype.Oa = function() {
      this.a.mb(this.f << 3 | this.b);
    };
    K.prototype.unskipHeader = K.prototype.Oa;
    K.prototype.Kc = function() {
      var a = this.f;
      for (this.Oa(); this.na() && this.f == a; ) this.C();
      this.a.ya() || this.Oa();
    };
    K.prototype.skipMatchingFields = K.prototype.Kc;
    K.prototype.lb = function() {
      0 != this.b ? (p("Invalid wire type for skipVarintField"), this.C()) : this.a.kb();
    };
    K.prototype.skipVarintField = K.prototype.lb;
    K.prototype.gb = function() {
      if (2 != this.b) p("Invalid wire type for skipDelimitedField"), this.C();
      else {
        var a = this.a.s();
        this.a.advance(a);
      }
    };
    K.prototype.skipDelimitedField = K.prototype.gb;
    K.prototype.hb = function() {
      5 != this.b ? (p("Invalid wire type for skipFixed32Field"), this.C()) : this.a.advance(4);
    };
    K.prototype.skipFixed32Field = K.prototype.hb;
    K.prototype.ib = function() {
      1 != this.b ? (p("Invalid wire type for skipFixed64Field"), this.C()) : this.a.advance(8);
    };
    K.prototype.skipFixed64Field = K.prototype.ib;
    K.prototype.jb = function() {
      var a = this.f;
      do {
        if (!this.na()) {
          p("Unmatched start-group tag: stream EOF");
          this.h = true;
          break;
        }
        if (4 == this.b) {
          this.f != a && (p("Unmatched end-group tag"), this.h = true);
          break;
        }
        this.C();
      } while (1);
    };
    K.prototype.skipGroup = K.prototype.jb;
    K.prototype.C = function() {
      switch (this.b) {
        case 0:
          this.lb();
          break;
        case 1:
          this.ib();
          break;
        case 2:
          this.gb();
          break;
        case 5:
          this.hb();
          break;
        case 3:
          this.jb();
          break;
        default:
          p("Invalid wire encoding for field.");
      }
    };
    K.prototype.skipField = K.prototype.C;
    K.prototype.Gc = function(a, b) {
      null === this.v && (this.v = {});
      n(!this.v[a]);
      this.v[a] = b;
    };
    K.prototype.registerReadCallback = K.prototype.Gc;
    K.prototype.Hc = function(a) {
      n(null !== this.v);
      a = this.v[a];
      n(a);
      return a(this);
    };
    K.prototype.runReadCallback = K.prototype.Hc;
    K.prototype.Yb = function(a, b) {
      n(2 == this.b);
      var c = this.a.f, d = this.a.s();
      d = this.a.B() + d;
      this.a.setEnd(d);
      b(a, this);
      this.a.Ma(d);
      this.a.setEnd(c);
    };
    K.prototype.readMessage = K.prototype.Yb;
    K.prototype.Ub = function(a, b, c) {
      n(3 == this.b);
      n(this.f == a);
      c(b, this);
      this.h || 4 == this.b || (p("Group submessage did not end with an END_GROUP tag"), this.h = true);
    };
    K.prototype.readGroup = K.prototype.Ub;
    K.prototype.Gb = function() {
      n(2 == this.b);
      var a = this.a.s(), b = this.a.B(), c = b + a;
      a = cb(this.a.Y(), b, a);
      this.a.Ma(c);
      return a;
    };
    K.prototype.getFieldDecoder = K.prototype.Gb;
    K.prototype.P = function() {
      n(0 == this.b);
      return this.a.da();
    };
    K.prototype.readInt32 = K.prototype.P;
    K.prototype.Wb = function() {
      n(0 == this.b);
      return this.a.Ea();
    };
    K.prototype.readInt32String = K.prototype.Wb;
    K.prototype.ba = function() {
      n(0 == this.b);
      return this.a.ra();
    };
    K.prototype.readInt64 = K.prototype.ba;
    K.prototype.ca = function() {
      n(0 == this.b);
      return this.a.Fa();
    };
    K.prototype.readInt64String = K.prototype.ca;
    K.prototype.m = function() {
      n(0 == this.b);
      return this.a.s();
    };
    K.prototype.readUint32 = K.prototype.m;
    K.prototype.Ec = function() {
      n(0 == this.b);
      return this.a.O();
    };
    K.prototype.readUint32String = K.prototype.Ec;
    K.prototype.fa = function() {
      n(0 == this.b);
      return this.a.Ga();
    };
    K.prototype.readUint64 = K.prototype.fa;
    K.prototype.ga = function() {
      n(0 == this.b);
      return this.a.Ha();
    };
    K.prototype.readUint64String = K.prototype.ga;
    K.prototype.zc = function() {
      n(0 == this.b);
      return this.a.Ia();
    };
    K.prototype.readSint32 = K.prototype.zc;
    K.prototype.Ac = function() {
      n(0 == this.b);
      return this.a.Ja();
    };
    K.prototype.readSint64 = K.prototype.Ac;
    K.prototype.Bc = function() {
      n(0 == this.b);
      return this.a.Ka();
    };
    K.prototype.readSint64String = K.prototype.Bc;
    K.prototype.Rb = function() {
      n(5 == this.b);
      return this.a.m();
    };
    K.prototype.readFixed32 = K.prototype.Rb;
    K.prototype.Sb = function() {
      n(1 == this.b);
      return this.a.fa();
    };
    K.prototype.readFixed64 = K.prototype.Sb;
    K.prototype.Tb = function() {
      n(1 == this.b);
      return this.a.ga();
    };
    K.prototype.readFixed64String = K.prototype.Tb;
    K.prototype.vc = function() {
      n(5 == this.b);
      return this.a.P();
    };
    K.prototype.readSfixed32 = K.prototype.vc;
    K.prototype.wc = function() {
      n(5 == this.b);
      return this.a.P().toString();
    };
    K.prototype.readSfixed32String = K.prototype.wc;
    K.prototype.xc = function() {
      n(1 == this.b);
      return this.a.ba();
    };
    K.prototype.readSfixed64 = K.prototype.xc;
    K.prototype.yc = function() {
      n(1 == this.b);
      return this.a.ca();
    };
    K.prototype.readSfixed64String = K.prototype.yc;
    K.prototype.aa = function() {
      n(5 == this.b);
      return this.a.aa();
    };
    K.prototype.readFloat = K.prototype.aa;
    K.prototype.Z = function() {
      n(1 == this.b);
      return this.a.Z();
    };
    K.prototype.readDouble = K.prototype.Z;
    K.prototype.oa = function() {
      n(0 == this.b);
      return !!this.a.s();
    };
    K.prototype.readBool = K.prototype.oa;
    K.prototype.qa = function() {
      n(0 == this.b);
      return this.a.ra();
    };
    K.prototype.readEnum = K.prototype.qa;
    K.prototype.ta = function() {
      n(2 == this.b);
      var a = this.a.s();
      return this.a.ta(a, true);
    };
    K.prototype.readString = K.prototype.ta;
    K.prototype.pa = function() {
      n(2 == this.b);
      var a = this.a.s();
      return this.a.pa(a);
    };
    K.prototype.readBytes = K.prototype.pa;
    K.prototype.ha = function() {
      n(0 == this.b);
      return this.a.ha();
    };
    K.prototype.readVarintHash64 = K.prototype.ha;
    K.prototype.Cc = function() {
      n(0 == this.b);
      return this.a.fb();
    };
    K.prototype.readSintHash64 = K.prototype.Cc;
    K.prototype.w = function(a) {
      n(0 == this.b);
      return this.a.w(a);
    };
    K.prototype.readSplitVarint64 = K.prototype.w;
    K.prototype.ea = function(a) {
      n(0 == this.b);
      return this.a.w(function(b, c) {
        return Ra(b, c, a);
      });
    };
    K.prototype.readSplitZigzagVarint64 = K.prototype.ea;
    K.prototype.$ = function() {
      n(1 == this.b);
      return this.a.$();
    };
    K.prototype.readFixedHash64 = K.prototype.$;
    K.prototype.sa = function(a) {
      n(1 == this.b);
      return this.a.sa(a);
    };
    K.prototype.readSplitFixed64 = K.prototype.sa;
    function M(a, b) {
      n(2 == a.b);
      var c = a.a.s();
      c = a.a.B() + c;
      for (var d = []; a.a.B() < c; ) d.push(b.call(a.a));
      return d;
    }
    K.prototype.gc = function() {
      return M(this, this.a.da);
    };
    K.prototype.readPackedInt32 = K.prototype.gc;
    K.prototype.hc = function() {
      return M(this, this.a.Ea);
    };
    K.prototype.readPackedInt32String = K.prototype.hc;
    K.prototype.ic = function() {
      return M(this, this.a.ra);
    };
    K.prototype.readPackedInt64 = K.prototype.ic;
    K.prototype.jc = function() {
      return M(this, this.a.Fa);
    };
    K.prototype.readPackedInt64String = K.prototype.jc;
    K.prototype.qc = function() {
      return M(this, this.a.s);
    };
    K.prototype.readPackedUint32 = K.prototype.qc;
    K.prototype.rc = function() {
      return M(this, this.a.O);
    };
    K.prototype.readPackedUint32String = K.prototype.rc;
    K.prototype.sc = function() {
      return M(this, this.a.Ga);
    };
    K.prototype.readPackedUint64 = K.prototype.sc;
    K.prototype.tc = function() {
      return M(this, this.a.Ha);
    };
    K.prototype.readPackedUint64String = K.prototype.tc;
    K.prototype.nc = function() {
      return M(this, this.a.Ia);
    };
    K.prototype.readPackedSint32 = K.prototype.nc;
    K.prototype.oc = function() {
      return M(this, this.a.Ja);
    };
    K.prototype.readPackedSint64 = K.prototype.oc;
    K.prototype.pc = function() {
      return M(this, this.a.Ka);
    };
    K.prototype.readPackedSint64String = K.prototype.pc;
    K.prototype.bc = function() {
      return M(this, this.a.m);
    };
    K.prototype.readPackedFixed32 = K.prototype.bc;
    K.prototype.cc = function() {
      return M(this, this.a.fa);
    };
    K.prototype.readPackedFixed64 = K.prototype.cc;
    K.prototype.dc = function() {
      return M(this, this.a.ga);
    };
    K.prototype.readPackedFixed64String = K.prototype.dc;
    K.prototype.kc = function() {
      return M(this, this.a.P);
    };
    K.prototype.readPackedSfixed32 = K.prototype.kc;
    K.prototype.lc = function() {
      return M(this, this.a.ba);
    };
    K.prototype.readPackedSfixed64 = K.prototype.lc;
    K.prototype.mc = function() {
      return M(this, this.a.ca);
    };
    K.prototype.readPackedSfixed64String = K.prototype.mc;
    K.prototype.fc = function() {
      return M(this, this.a.aa);
    };
    K.prototype.readPackedFloat = K.prototype.fc;
    K.prototype.$b = function() {
      return M(this, this.a.Z);
    };
    K.prototype.readPackedDouble = K.prototype.$b;
    K.prototype.Zb = function() {
      return M(this, this.a.oa);
    };
    K.prototype.readPackedBool = K.prototype.Zb;
    K.prototype.ac = function() {
      return M(this, this.a.qa);
    };
    K.prototype.readPackedEnum = K.prototype.ac;
    K.prototype.uc = function() {
      return M(this, this.a.ha);
    };
    K.prototype.readPackedVarintHash64 = K.prototype.uc;
    K.prototype.ec = function() {
      return M(this, this.a.$);
    };
    K.prototype.readPackedFixedHash64 = K.prototype.ec;
    function eb(a, b, c, d, f) {
      this.la = a;
      this.Ba = b;
      this.ka = c;
      this.Na = d;
      this.ma = f;
    }
    g("jspb.ExtensionFieldInfo", eb, void 0);
    function fb(a, b, c, d, f, h) {
      this.Za = a;
      this.za = b;
      this.Aa = c;
      this.Wa = d;
      this.Ab = f;
      this.Nb = h;
    }
    g("jspb.ExtensionFieldBinaryInfo", fb, void 0);
    eb.prototype.F = function() {
      return !!this.ka;
    };
    eb.prototype.isMessageType = eb.prototype.F;
    function N() {
    }
    g("jspb.Message", N, void 0);
    N.GENERATE_TO_OBJECT = true;
    N.GENERATE_FROM_OBJECT = true;
    var gb = "function" == typeof Uint8Array;
    N.prototype.Ib = function() {
      return this.b;
    };
    N.prototype.getJsPbMessageId = N.prototype.Ib;
    N.initialize = function(a, b, c, d, f, h) {
      a.c = null;
      b || (b = c ? [c] : []);
      a.b = c ? String(c) : void 0;
      a.D = 0 === c ? -1 : 0;
      a.u = b;
      a: {
        c = a.u.length;
        b = -1;
        if (c && (b = c - 1, c = a.u[b], !(null === c || "object" != typeof c || Array.isArray(c) || gb && c instanceof Uint8Array))) {
          a.G = b - a.D;
          a.i = c;
          break a;
        }
        -1 < d ? (a.G = Math.max(d, b + 1 - a.D), a.i = null) : a.G = Number.MAX_VALUE;
      }
      a.a = {};
      if (f) for (d = 0; d < f.length; d++) b = f[d], b < a.G ? (b += a.D, a.u[b] = a.u[b] || hb) : (ib(a), a.i[b] = a.i[b] || hb);
      if (h && h.length) for (d = 0; d < h.length; d++) jb(a, h[d]);
    };
    var hb = Object.freeze ? Object.freeze([]) : [];
    function ib(a) {
      var b = a.G + a.D;
      a.u[b] || (a.i = a.u[b] = {});
    }
    function kb(a, b, c) {
      for (var d = [], f = 0; f < a.length; f++) d[f] = b.call(a[f], c, a[f]);
      return d;
    }
    N.toObjectList = kb;
    N.toObjectExtension = function(a, b, c, d, f) {
      for (var h in c) {
        var m = c[h], t = d.call(a, m);
        if (null != t) {
          for (var w in m.Ba) if (m.Ba.hasOwnProperty(w)) break;
          b[w] = m.Na ? m.ma ? kb(t, m.Na, f) : m.Na(f, t) : t;
        }
      }
    };
    N.serializeBinaryExtensions = function(a, b, c, d) {
      for (var f in c) {
        var h = c[f], m = h.Za;
        if (!h.Aa) throw Error("Message extension present that was generated without binary serialization support");
        var t = d.call(a, m);
        if (null != t) if (m.F()) if (h.Wa) h.Aa.call(b, m.la, t, h.Wa);
        else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");
        else h.Aa.call(b, m.la, t);
      }
    };
    N.readBinaryExtension = function(a, b, c, d, f) {
      var h = c[b.f];
      if (h) {
        c = h.Za;
        if (!h.za) throw Error("Deserializing extension whose generated code does not support binary format");
        if (c.F()) {
          var m = new c.ka();
          h.za.call(b, m, h.Ab);
        } else m = h.za.call(b);
        c.ma && !h.Nb ? (b = d.call(a, c)) ? b.push(m) : f.call(a, c, [m]) : f.call(a, c, m);
      } else b.C();
    };
    function O(a, b) {
      if (b < a.G) {
        b += a.D;
        var c = a.u[b];
        return c === hb ? a.u[b] = [] : c;
      }
      if (a.i) return c = a.i[b], c === hb ? a.i[b] = [] : c;
    }
    N.getField = O;
    N.getRepeatedField = function(a, b) {
      return O(a, b);
    };
    function lb(a, b) {
      a = O(a, b);
      return null == a ? a : +a;
    }
    N.getOptionalFloatingPointField = lb;
    function mb(a, b) {
      a = O(a, b);
      return null == a ? a : !!a;
    }
    N.getBooleanField = mb;
    N.getRepeatedFloatingPointField = function(a, b) {
      var c = O(a, b);
      a.a || (a.a = {});
      if (!a.a[b]) {
        for (var d = 0; d < c.length; d++) c[d] = +c[d];
        a.a[b] = true;
      }
      return c;
    };
    N.getRepeatedBooleanField = function(a, b) {
      var c = O(a, b);
      a.a || (a.a = {});
      if (!a.a[b]) {
        for (var d = 0; d < c.length; d++) c[d] = !!c[d];
        a.a[b] = true;
      }
      return c;
    };
    function nb(a) {
      if (null == a || "string" === typeof a) return a;
      if (gb && a instanceof Uint8Array) return Ca(a);
      p("Cannot coerce to b64 string: " + k(a));
      return null;
    }
    N.bytesAsB64 = nb;
    function ob(a) {
      if (null == a || a instanceof Uint8Array) return a;
      if ("string" === typeof a) return Ea(a);
      p("Cannot coerce to Uint8Array: " + k(a));
      return null;
    }
    N.bytesAsU8 = ob;
    N.bytesListAsB64 = function(a) {
      pb(a);
      return a.length && "string" !== typeof a[0] ? l(a, nb) : a;
    };
    N.bytesListAsU8 = function(a) {
      pb(a);
      return !a.length || a[0] instanceof Uint8Array ? a : l(a, ob);
    };
    function pb(a) {
      if (a && 1 < a.length) {
        var b = k(a[0]);
        ra(a, function(c) {
          k(c) != b && p("Inconsistent type in JSPB repeated field array. Got " + k(c) + " expected " + b);
        });
      }
    }
    function qb(a, b, c) {
      a = O(a, b);
      return null == a ? c : a;
    }
    N.getFieldWithDefault = qb;
    N.getBooleanFieldWithDefault = function(a, b, c) {
      a = mb(a, b);
      return null == a ? c : a;
    };
    N.getFloatingPointFieldWithDefault = function(a, b, c) {
      a = lb(a, b);
      return null == a ? c : a;
    };
    N.getFieldProto3 = qb;
    N.getMapField = function(a, b, c, d) {
      a.c || (a.c = {});
      if (b in a.c) return a.c[b];
      var f = O(a, b);
      if (!f) {
        if (c) return;
        f = [];
        P(a, b, f);
      }
      return a.c[b] = new r2(f, d);
    };
    function P(a, b, c) {
      q(a, N);
      b < a.G ? a.u[b + a.D] = c : (ib(a), a.i[b] = c);
      return a;
    }
    N.setField = P;
    N.setProto3IntField = function(a, b, c) {
      return Q(a, b, c, 0);
    };
    N.setProto3FloatField = function(a, b, c) {
      return Q(a, b, c, 0);
    };
    N.setProto3BooleanField = function(a, b, c) {
      return Q(a, b, c, false);
    };
    N.setProto3StringField = function(a, b, c) {
      return Q(a, b, c, "");
    };
    N.setProto3BytesField = function(a, b, c) {
      return Q(a, b, c, "");
    };
    N.setProto3EnumField = function(a, b, c) {
      return Q(a, b, c, 0);
    };
    N.setProto3StringIntField = function(a, b, c) {
      return Q(a, b, c, "0");
    };
    function Q(a, b, c, d) {
      q(a, N);
      c !== d ? P(a, b, c) : b < a.G ? a.u[b + a.D] = null : (ib(a), delete a.i[b]);
      return a;
    }
    N.addToRepeatedField = function(a, b, c, d) {
      q(a, N);
      b = O(a, b);
      void 0 != d ? b.splice(d, 0, c) : b.push(c);
      return a;
    };
    function rb(a, b, c, d) {
      q(a, N);
      (c = jb(a, c)) && c !== b && void 0 !== d && (a.c && c in a.c && (a.c[c] = void 0), P(a, c, void 0));
      return P(a, b, d);
    }
    N.setOneofField = rb;
    function jb(a, b) {
      for (var c, d, f = 0; f < b.length; f++) {
        var h = b[f], m = O(a, h);
        null != m && (c = h, d = m, P(a, h, void 0));
      }
      return c ? (P(a, c, d), c) : 0;
    }
    N.computeOneofCase = jb;
    N.getWrapperField = function(a, b, c, d) {
      a.c || (a.c = {});
      if (!a.c[c]) {
        var f = O(a, c);
        if (d || f) a.c[c] = new b(f);
      }
      return a.c[c];
    };
    N.getRepeatedWrapperField = function(a, b, c) {
      sb(a, b, c);
      b = a.c[c];
      b == hb && (b = a.c[c] = []);
      return b;
    };
    function sb(a, b, c) {
      a.c || (a.c = {});
      if (!a.c[c]) {
        for (var d = O(a, c), f = [], h = 0; h < d.length; h++) f[h] = new b(d[h]);
        a.c[c] = f;
      }
    }
    N.setWrapperField = function(a, b, c) {
      q(a, N);
      a.c || (a.c = {});
      var d = c ? c.g() : c;
      a.c[b] = c;
      return P(a, b, d);
    };
    N.setOneofWrapperField = function(a, b, c, d) {
      q(a, N);
      a.c || (a.c = {});
      var f = d ? d.g() : d;
      a.c[b] = d;
      return rb(a, b, c, f);
    };
    N.setRepeatedWrapperField = function(a, b, c) {
      q(a, N);
      a.c || (a.c = {});
      c = c || [];
      for (var d = [], f = 0; f < c.length; f++) d[f] = c[f].g();
      a.c[b] = c;
      return P(a, b, d);
    };
    N.addToRepeatedWrapperField = function(a, b, c, d, f) {
      sb(a, d, b);
      var h = a.c[b];
      h || (h = a.c[b] = []);
      c = c ? c : new d();
      a = O(a, b);
      void 0 != f ? (h.splice(f, 0, c), a.splice(f, 0, c.g())) : (h.push(c), a.push(c.g()));
      return c;
    };
    N.toMap = function(a, b, c, d) {
      for (var f = {}, h = 0; h < a.length; h++) f[b.call(a[h])] = c ? c.call(a[h], d, a[h]) : a[h];
      return f;
    };
    function tb(a) {
      if (a.c) for (var b in a.c) {
        var c = a.c[b];
        if (Array.isArray(c)) for (var d = 0; d < c.length; d++) c[d] && c[d].g();
        else c && c.g();
      }
    }
    N.prototype.g = function() {
      tb(this);
      return this.u;
    };
    N.prototype.toArray = N.prototype.g;
    N.prototype.toString = function() {
      tb(this);
      return this.u.toString();
    };
    N.prototype.getExtension = function(a) {
      if (this.i) {
        this.c || (this.c = {});
        var b = a.la;
        if (a.ma) {
          if (a.F()) return this.c[b] || (this.c[b] = l(this.i[b] || [], function(c) {
            return new a.ka(c);
          })), this.c[b];
        } else if (a.F()) return !this.c[b] && this.i[b] && (this.c[b] = new a.ka(this.i[b])), this.c[b];
        return this.i[b];
      }
    };
    N.prototype.getExtension = N.prototype.getExtension;
    N.prototype.Jc = function(a, b) {
      this.c || (this.c = {});
      ib(this);
      var c = a.la;
      a.ma ? (b = b || [], a.F() ? (this.c[c] = b, this.i[c] = l(b, function(d) {
        return d.g();
      })) : this.i[c] = b) : a.F() ? (this.c[c] = b, this.i[c] = b ? b.g() : b) : this.i[c] = b;
      return this;
    };
    N.prototype.setExtension = N.prototype.Jc;
    N.difference = function(a, b) {
      if (!(a instanceof b.constructor)) throw Error("Messages have different types.");
      var c = a.g();
      b = b.g();
      var d = [], f = 0, h = c.length > b.length ? c.length : b.length;
      a.b && (d[0] = a.b, f = 1);
      for (; f < h; f++) ub(c[f], b[f]) || (d[f] = b[f]);
      return new a.constructor(d);
    };
    N.equals = function(a, b) {
      return a == b || !(!a || !b) && a instanceof b.constructor && ub(a.g(), b.g());
    };
    function vb(a, b) {
      a = a || {};
      b = b || {};
      var c = {}, d;
      for (d in a) c[d] = 0;
      for (d in b) c[d] = 0;
      for (d in c) if (!ub(a[d], b[d])) return false;
      return true;
    }
    N.compareExtensions = vb;
    function ub(a, b) {
      if (a == b) return true;
      if (!ma(a) || !ma(b)) return "number" === typeof a && isNaN(a) || "number" === typeof b && isNaN(b) ? String(a) == String(b) : false;
      if (a.constructor != b.constructor) return false;
      if (gb && a.constructor === Uint8Array) {
        if (a.length != b.length) return false;
        for (var c = 0; c < a.length; c++) if (a[c] != b[c]) return false;
        return true;
      }
      if (a.constructor === Array) {
        var d = void 0, f = void 0, h = Math.max(a.length, b.length);
        for (c = 0; c < h; c++) {
          var m = a[c], t = b[c];
          m && m.constructor == Object && (n(void 0 === d), n(c === a.length - 1), d = m, m = void 0);
          t && t.constructor == Object && (n(void 0 === f), n(c === b.length - 1), f = t, t = void 0);
          if (!ub(m, t)) return false;
        }
        return d || f ? (d = d || {}, f = f || {}, vb(d, f)) : true;
      }
      if (a.constructor === Object) return vb(a, b);
      throw Error("Invalid type in JSPB array");
    }
    N.compareFields = ub;
    N.prototype.Bb = function() {
      return wb(this);
    };
    N.prototype.cloneMessage = N.prototype.Bb;
    N.prototype.clone = function() {
      return wb(this);
    };
    N.prototype.clone = N.prototype.clone;
    N.clone = function(a) {
      return wb(a);
    };
    function wb(a) {
      return new a.constructor(xb(a.g()));
    }
    N.copyInto = function(a, b) {
      q(a, N);
      q(b, N);
      n(a.constructor == b.constructor, "Copy source and target message should have the same type.");
      a = wb(a);
      for (var c = b.g(), d = a.g(), f = c.length = 0; f < d.length; f++) c[f] = d[f];
      b.c = a.c;
      b.i = a.i;
    };
    function xb(a) {
      if (Array.isArray(a)) {
        for (var b = Array(a.length), c = 0; c < a.length; c++) {
          var d = a[c];
          null != d && (b[c] = "object" == typeof d ? xb(n(d)) : d);
        }
        return b;
      }
      if (gb && a instanceof Uint8Array) return new Uint8Array(a);
      b = {};
      for (c in a) d = a[c], null != d && (b[c] = "object" == typeof d ? xb(n(d)) : d);
      return b;
    }
    N.registerMessageType = function(a, b) {
      b.ve = a;
    };
    var R = { dump: function(a) {
      q(a, N, "jspb.Message instance expected");
      n(a.getExtension, "Only unobfuscated and unoptimized compilation modes supported.");
      return R.X(a);
    } };
    g("jspb.debug.dump", R.dump, void 0);
    R.X = function(a) {
      var b = k(a);
      if ("number" == b || "string" == b || "boolean" == b || "null" == b || "undefined" == b || "undefined" !== typeof Uint8Array && a instanceof Uint8Array) return a;
      if ("array" == b) return va(a), l(a, R.X);
      if (a instanceof r2) {
        var c = {};
        a = a.entries();
        for (var d = a.next(); !d.done; d = a.next()) c[d.value[0]] = R.X(d.value[1]);
        return c;
      }
      q(a, N, "Only messages expected: " + a);
      b = a.constructor;
      var f = { $name: b.name || b.displayName };
      for (t in b.prototype) {
        var h = /^get([A-Z]\w*)/.exec(t);
        if (h && "getExtension" != t && "getJsPbMessageId" != t) {
          var m = "has" + h[1];
          if (!a[m] || a[m]()) m = a[t](), f[R.$a(h[1])] = R.X(m);
        }
      }
      if (a.extensionObject_) return f.$extensions = "Recursive dumping of extensions not supported in compiled code. Switch to uncompiled or dump extension object directly", f;
      for (d in b.extensions) if (/^\d+$/.test(d)) {
        m = b.extensions[d];
        var t = a.getExtension(m);
        h = void 0;
        m = m.Ba;
        var w = [], D = 0;
        for (h in m) w[D++] = h;
        h = w[0];
        null != t && (c || (c = f.$extensions = {}), c[R.$a(h)] = R.X(t));
      }
      return f;
    };
    R.$a = function(a) {
      return a.replace(/^[A-Z]/, function(b) {
        return b.toLowerCase();
      });
    };
    function S() {
      this.a = [];
    }
    g("jspb.BinaryEncoder", S, void 0);
    S.prototype.length = function() {
      return this.a.length;
    };
    S.prototype.length = S.prototype.length;
    S.prototype.end = function() {
      var a = this.a;
      this.a = [];
      return a;
    };
    S.prototype.end = S.prototype.end;
    S.prototype.l = function(a, b) {
      n(a == Math.floor(a));
      n(b == Math.floor(b));
      n(0 <= a && 4294967296 > a);
      for (n(0 <= b && 4294967296 > b); 0 < b || 127 < a; ) this.a.push(a & 127 | 128), a = (a >>> 7 | b << 25) >>> 0, b >>>= 7;
      this.a.push(a);
    };
    S.prototype.writeSplitVarint64 = S.prototype.l;
    S.prototype.A = function(a, b) {
      n(a == Math.floor(a));
      n(b == Math.floor(b));
      n(0 <= a && 4294967296 > a);
      n(0 <= b && 4294967296 > b);
      this.o(a);
      this.o(b);
    };
    S.prototype.writeSplitFixed64 = S.prototype.A;
    S.prototype.j = function(a) {
      n(a == Math.floor(a));
      for (n(0 <= a && 4294967296 > a); 127 < a; ) this.a.push(a & 127 | 128), a >>>= 7;
      this.a.push(a);
    };
    S.prototype.writeUnsignedVarint32 = S.prototype.j;
    S.prototype.M = function(a) {
      n(a == Math.floor(a));
      n(-2147483648 <= a && 2147483648 > a);
      if (0 <= a) this.j(a);
      else {
        for (var b = 0; 9 > b; b++) this.a.push(a & 127 | 128), a >>= 7;
        this.a.push(1);
      }
    };
    S.prototype.writeSignedVarint32 = S.prototype.M;
    S.prototype.va = function(a) {
      n(a == Math.floor(a));
      n(0 <= a && 18446744073709552e3 > a);
      C(a);
      this.l(A, B);
    };
    S.prototype.writeUnsignedVarint64 = S.prototype.va;
    S.prototype.ua = function(a) {
      n(a == Math.floor(a));
      n(-9223372036854776e3 <= a && 9223372036854776e3 > a);
      C(a);
      this.l(A, B);
    };
    S.prototype.writeSignedVarint64 = S.prototype.ua;
    S.prototype.wa = function(a) {
      n(a == Math.floor(a));
      n(-2147483648 <= a && 2147483648 > a);
      this.j((a << 1 ^ a >> 31) >>> 0);
    };
    S.prototype.writeZigzagVarint32 = S.prototype.wa;
    S.prototype.xa = function(a) {
      n(a == Math.floor(a));
      n(-9223372036854776e3 <= a && 9223372036854776e3 > a);
      Ma(a);
      this.l(A, B);
    };
    S.prototype.writeZigzagVarint64 = S.prototype.xa;
    S.prototype.Ta = function(a) {
      this.W(Xa(a));
    };
    S.prototype.writeZigzagVarint64String = S.prototype.Ta;
    S.prototype.W = function(a) {
      var b = this;
      E(a);
      Pa(A, B, function(c, d) {
        b.l(c >>> 0, d >>> 0);
      });
    };
    S.prototype.writeZigzagVarintHash64 = S.prototype.W;
    S.prototype.ae = function(a) {
      n(a == Math.floor(a));
      n(0 <= a && 256 > a);
      this.a.push(a >>> 0 & 255);
    };
    S.prototype.writeUint8 = S.prototype.ae;
    S.prototype.$d = function(a) {
      n(a == Math.floor(a));
      n(0 <= a && 65536 > a);
      this.a.push(a >>> 0 & 255);
      this.a.push(a >>> 8 & 255);
    };
    S.prototype.writeUint16 = S.prototype.$d;
    S.prototype.o = function(a) {
      n(a == Math.floor(a));
      n(0 <= a && 4294967296 > a);
      this.a.push(a >>> 0 & 255);
      this.a.push(a >>> 8 & 255);
      this.a.push(a >>> 16 & 255);
      this.a.push(a >>> 24 & 255);
    };
    S.prototype.writeUint32 = S.prototype.o;
    S.prototype.V = function(a) {
      n(a == Math.floor(a));
      n(0 <= a && 18446744073709552e3 > a);
      La(a);
      this.o(A);
      this.o(B);
    };
    S.prototype.writeUint64 = S.prototype.V;
    S.prototype.Pc = function(a) {
      n(a == Math.floor(a));
      n(-128 <= a && 128 > a);
      this.a.push(a >>> 0 & 255);
    };
    S.prototype.writeInt8 = S.prototype.Pc;
    S.prototype.Oc = function(a) {
      n(a == Math.floor(a));
      n(-32768 <= a && 32768 > a);
      this.a.push(a >>> 0 & 255);
      this.a.push(a >>> 8 & 255);
    };
    S.prototype.writeInt16 = S.prototype.Oc;
    S.prototype.S = function(a) {
      n(a == Math.floor(a));
      n(-2147483648 <= a && 2147483648 > a);
      this.a.push(a >>> 0 & 255);
      this.a.push(a >>> 8 & 255);
      this.a.push(a >>> 16 & 255);
      this.a.push(a >>> 24 & 255);
    };
    S.prototype.writeInt32 = S.prototype.S;
    S.prototype.T = function(a) {
      n(a == Math.floor(a));
      n(-9223372036854776e3 <= a && 9223372036854776e3 > a);
      C(a);
      this.A(A, B);
    };
    S.prototype.writeInt64 = S.prototype.T;
    S.prototype.ja = function(a) {
      n(a == Math.floor(a));
      n(-9223372036854776e3 <= +a && 9223372036854776e3 > +a);
      E(Xa(a));
      this.A(A, B);
    };
    S.prototype.writeInt64String = S.prototype.ja;
    S.prototype.L = function(a) {
      n(Infinity === a || -Infinity === a || isNaN(a) || -34028234663852886e22 <= a && 34028234663852886e22 >= a);
      Na(a);
      this.o(A);
    };
    S.prototype.writeFloat = S.prototype.L;
    S.prototype.J = function(a) {
      n(Infinity === a || -Infinity === a || isNaN(a) || -17976931348623157e292 <= a && 17976931348623157e292 >= a);
      Oa(a);
      this.o(A);
      this.o(B);
    };
    S.prototype.writeDouble = S.prototype.J;
    S.prototype.I = function(a) {
      n("boolean" === typeof a || "number" === typeof a);
      this.a.push(a ? 1 : 0);
    };
    S.prototype.writeBool = S.prototype.I;
    S.prototype.R = function(a) {
      n(a == Math.floor(a));
      n(-2147483648 <= a && 2147483648 > a);
      this.M(a);
    };
    S.prototype.writeEnum = S.prototype.R;
    S.prototype.ia = function(a) {
      this.a.push.apply(this.a, a);
    };
    S.prototype.writeBytes = S.prototype.ia;
    S.prototype.N = function(a) {
      E(a);
      this.l(A, B);
    };
    S.prototype.writeVarintHash64 = S.prototype.N;
    S.prototype.K = function(a) {
      E(a);
      this.o(A);
      this.o(B);
    };
    S.prototype.writeFixedHash64 = S.prototype.K;
    S.prototype.U = function(a) {
      var b = this.a.length;
      ua(a);
      for (var c = 0; c < a.length; c++) {
        var d = a.charCodeAt(c);
        if (128 > d) this.a.push(d);
        else if (2048 > d) this.a.push(d >> 6 | 192), this.a.push(d & 63 | 128);
        else if (65536 > d) if (55296 <= d && 56319 >= d && c + 1 < a.length) {
          var f = a.charCodeAt(c + 1);
          56320 <= f && 57343 >= f && (d = 1024 * (d - 55296) + f - 56320 + 65536, this.a.push(d >> 18 | 240), this.a.push(d >> 12 & 63 | 128), this.a.push(d >> 6 & 63 | 128), this.a.push(d & 63 | 128), c++);
        } else this.a.push(d >> 12 | 224), this.a.push(d >> 6 & 63 | 128), this.a.push(d & 63 | 128);
      }
      return this.a.length - b;
    };
    S.prototype.writeString = S.prototype.U;
    function T(a, b) {
      this.lo = a;
      this.hi = b;
    }
    g("jspb.arith.UInt64", T, void 0);
    T.prototype.cmp = function(a) {
      return this.hi < a.hi || this.hi == a.hi && this.lo < a.lo ? -1 : this.hi == a.hi && this.lo == a.lo ? 0 : 1;
    };
    T.prototype.cmp = T.prototype.cmp;
    T.prototype.La = function() {
      return new T((this.lo >>> 1 | (this.hi & 1) << 31) >>> 0, this.hi >>> 1 >>> 0);
    };
    T.prototype.rightShift = T.prototype.La;
    T.prototype.Da = function() {
      return new T(this.lo << 1 >>> 0, (this.hi << 1 | this.lo >>> 31) >>> 0);
    };
    T.prototype.leftShift = T.prototype.Da;
    T.prototype.cb = function() {
      return !!(this.hi & 2147483648);
    };
    T.prototype.msb = T.prototype.cb;
    T.prototype.Ob = function() {
      return !!(this.lo & 1);
    };
    T.prototype.lsb = T.prototype.Ob;
    T.prototype.Ua = function() {
      return 0 == this.lo && 0 == this.hi;
    };
    T.prototype.zero = T.prototype.Ua;
    T.prototype.add = function(a) {
      return new T((this.lo + a.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a.lo ? 1 : 0) >>> 0);
    };
    T.prototype.add = T.prototype.add;
    T.prototype.sub = function(a) {
      return new T((this.lo - a.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a.hi & 4294967295) >>> 0) - (0 > this.lo - a.lo ? 1 : 0) >>> 0);
    };
    T.prototype.sub = T.prototype.sub;
    function yb(a, b) {
      var c = a & 65535;
      a >>>= 16;
      var d = b & 65535, f = b >>> 16;
      b = c * d + 65536 * (c * f & 65535) + 65536 * (a * d & 65535);
      for (c = a * f + (c * f >>> 16) + (a * d >>> 16); 4294967296 <= b; ) b -= 4294967296, c += 1;
      return new T(b >>> 0, c >>> 0);
    }
    T.mul32x32 = yb;
    T.prototype.eb = function(a) {
      var b = yb(this.lo, a);
      a = yb(this.hi, a);
      a.hi = a.lo;
      a.lo = 0;
      return b.add(a);
    };
    T.prototype.mul = T.prototype.eb;
    T.prototype.Xa = function(a) {
      if (0 == a) return [];
      var b = new T(0, 0), c = new T(this.lo, this.hi);
      a = new T(a, 0);
      for (var d = new T(1, 0); !a.cb(); ) a = a.Da(), d = d.Da();
      for (; !d.Ua(); ) 0 >= a.cmp(c) && (b = b.add(d), c = c.sub(a)), a = a.La(), d = d.La();
      return [b, c];
    };
    T.prototype.div = T.prototype.Xa;
    T.prototype.toString = function() {
      for (var a = "", b = this; !b.Ua(); ) {
        b = b.Xa(10);
        var c = b[0];
        a = b[1].lo + a;
        b = c;
      }
      "" == a && (a = "0");
      return a;
    };
    T.prototype.toString = T.prototype.toString;
    function U(a) {
      for (var b = new T(0, 0), c = new T(0, 0), d = 0; d < a.length; d++) {
        if ("0" > a[d] || "9" < a[d]) return null;
        c.lo = parseInt(a[d], 10);
        b = b.eb(10).add(c);
      }
      return b;
    }
    T.fromString = U;
    T.prototype.clone = function() {
      return new T(this.lo, this.hi);
    };
    T.prototype.clone = T.prototype.clone;
    function V(a, b) {
      this.lo = a;
      this.hi = b;
    }
    g("jspb.arith.Int64", V, void 0);
    V.prototype.add = function(a) {
      return new V((this.lo + a.lo & 4294967295) >>> 0 >>> 0, ((this.hi + a.hi & 4294967295) >>> 0) + (4294967296 <= this.lo + a.lo ? 1 : 0) >>> 0);
    };
    V.prototype.add = V.prototype.add;
    V.prototype.sub = function(a) {
      return new V((this.lo - a.lo & 4294967295) >>> 0 >>> 0, ((this.hi - a.hi & 4294967295) >>> 0) - (0 > this.lo - a.lo ? 1 : 0) >>> 0);
    };
    V.prototype.sub = V.prototype.sub;
    V.prototype.clone = function() {
      return new V(this.lo, this.hi);
    };
    V.prototype.clone = V.prototype.clone;
    V.prototype.toString = function() {
      var a = 0 != (this.hi & 2147483648), b = new T(this.lo, this.hi);
      a && (b = new T(0, 0).sub(b));
      return (a ? "-" : "") + b.toString();
    };
    V.prototype.toString = V.prototype.toString;
    function zb(a) {
      var b = 0 < a.length && "-" == a[0];
      b && (a = a.substring(1));
      a = U(a);
      if (null === a) return null;
      b && (a = new T(0, 0).sub(a));
      return new V(a.lo, a.hi);
    }
    V.fromString = zb;
    function W() {
      this.f = [];
      this.b = 0;
      this.a = new S();
      this.h = [];
    }
    g("jspb.BinaryWriter", W, void 0);
    function Ab(a, b) {
      var c = a.a.end();
      a.f.push(c);
      a.f.push(b);
      a.b += c.length + b.length;
    }
    function X(a, b) {
      Y(a, b, 2);
      b = a.a.end();
      a.f.push(b);
      a.b += b.length;
      b.push(a.b);
      return b;
    }
    function Z(a, b) {
      var c = b.pop();
      c = a.b + a.a.length() - c;
      for (n(0 <= c); 127 < c; ) b.push(c & 127 | 128), c >>>= 7, a.b++;
      b.push(c);
      a.b++;
    }
    W.prototype.pb = function(a, b, c) {
      Ab(this, a.subarray(b, c));
    };
    W.prototype.writeSerializedMessage = W.prototype.pb;
    W.prototype.Pb = function(a, b, c) {
      null != a && null != b && null != c && this.pb(a, b, c);
    };
    W.prototype.maybeWriteSerializedMessage = W.prototype.Pb;
    W.prototype.reset = function() {
      this.f = [];
      this.a.end();
      this.b = 0;
      this.h = [];
    };
    W.prototype.reset = W.prototype.reset;
    W.prototype.ab = function() {
      n(0 == this.h.length);
      for (var a = new Uint8Array(this.b + this.a.length()), b = this.f, c = b.length, d = 0, f = 0; f < c; f++) {
        var h = b[f];
        a.set(h, d);
        d += h.length;
      }
      b = this.a.end();
      a.set(b, d);
      d += b.length;
      n(d == a.length);
      this.f = [a];
      return a;
    };
    W.prototype.getResultBuffer = W.prototype.ab;
    W.prototype.Kb = function(a) {
      return Ca(this.ab(), a);
    };
    W.prototype.getResultBase64String = W.prototype.Kb;
    W.prototype.Va = function(a) {
      this.h.push(X(this, a));
    };
    W.prototype.beginSubMessage = W.prototype.Va;
    W.prototype.Ya = function() {
      n(0 <= this.h.length);
      Z(this, this.h.pop());
    };
    W.prototype.endSubMessage = W.prototype.Ya;
    function Y(a, b, c) {
      n(1 <= b && b == Math.floor(b));
      a.a.j(8 * b + c);
    }
    W.prototype.Mc = function(a, b, c) {
      switch (a) {
        case 1:
          this.J(b, c);
          break;
        case 2:
          this.L(b, c);
          break;
        case 3:
          this.T(b, c);
          break;
        case 4:
          this.V(b, c);
          break;
        case 5:
          this.S(b, c);
          break;
        case 6:
          this.Qa(b, c);
          break;
        case 7:
          this.Pa(b, c);
          break;
        case 8:
          this.I(b, c);
          break;
        case 9:
          this.U(b, c);
          break;
        case 10:
          p("Group field type not supported in writeAny()");
          break;
        case 11:
          p("Message field type not supported in writeAny()");
          break;
        case 12:
          this.ia(b, c);
          break;
        case 13:
          this.o(b, c);
          break;
        case 14:
          this.R(b, c);
          break;
        case 15:
          this.Ra(b, c);
          break;
        case 16:
          this.Sa(b, c);
          break;
        case 17:
          this.rb(b, c);
          break;
        case 18:
          this.sb(b, c);
          break;
        case 30:
          this.K(b, c);
          break;
        case 31:
          this.N(b, c);
          break;
        default:
          p("Invalid field type in writeAny()");
      }
    };
    W.prototype.writeAny = W.prototype.Mc;
    function Bb(a, b, c) {
      null != c && (Y(a, b, 0), a.a.j(c));
    }
    function Cb(a, b, c) {
      null != c && (Y(a, b, 0), a.a.M(c));
    }
    W.prototype.S = function(a, b) {
      null != b && (n(-2147483648 <= b && 2147483648 > b), Cb(this, a, b));
    };
    W.prototype.writeInt32 = W.prototype.S;
    W.prototype.ob = function(a, b) {
      null != b && (b = parseInt(b, 10), n(-2147483648 <= b && 2147483648 > b), Cb(this, a, b));
    };
    W.prototype.writeInt32String = W.prototype.ob;
    W.prototype.T = function(a, b) {
      null != b && (n(-9223372036854776e3 <= b && 9223372036854776e3 > b), null != b && (Y(this, a, 0), this.a.ua(b)));
    };
    W.prototype.writeInt64 = W.prototype.T;
    W.prototype.ja = function(a, b) {
      null != b && (b = zb(b), Y(this, a, 0), this.a.l(b.lo, b.hi));
    };
    W.prototype.writeInt64String = W.prototype.ja;
    W.prototype.o = function(a, b) {
      null != b && (n(0 <= b && 4294967296 > b), Bb(this, a, b));
    };
    W.prototype.writeUint32 = W.prototype.o;
    W.prototype.ub = function(a, b) {
      null != b && (b = parseInt(b, 10), n(0 <= b && 4294967296 > b), Bb(this, a, b));
    };
    W.prototype.writeUint32String = W.prototype.ub;
    W.prototype.V = function(a, b) {
      null != b && (n(0 <= b && 18446744073709552e3 > b), null != b && (Y(this, a, 0), this.a.va(b)));
    };
    W.prototype.writeUint64 = W.prototype.V;
    W.prototype.vb = function(a, b) {
      null != b && (b = U(b), Y(this, a, 0), this.a.l(b.lo, b.hi));
    };
    W.prototype.writeUint64String = W.prototype.vb;
    W.prototype.rb = function(a, b) {
      null != b && (n(-2147483648 <= b && 2147483648 > b), null != b && (Y(this, a, 0), this.a.wa(b)));
    };
    W.prototype.writeSint32 = W.prototype.rb;
    W.prototype.sb = function(a, b) {
      null != b && (n(-9223372036854776e3 <= b && 9223372036854776e3 > b), null != b && (Y(this, a, 0), this.a.xa(b)));
    };
    W.prototype.writeSint64 = W.prototype.sb;
    W.prototype.Zd = function(a, b) {
      null != b && null != b && (Y(this, a, 0), this.a.W(b));
    };
    W.prototype.writeSintHash64 = W.prototype.Zd;
    W.prototype.Yd = function(a, b) {
      null != b && null != b && (Y(this, a, 0), this.a.Ta(b));
    };
    W.prototype.writeSint64String = W.prototype.Yd;
    W.prototype.Pa = function(a, b) {
      null != b && (n(0 <= b && 4294967296 > b), Y(this, a, 5), this.a.o(b));
    };
    W.prototype.writeFixed32 = W.prototype.Pa;
    W.prototype.Qa = function(a, b) {
      null != b && (n(0 <= b && 18446744073709552e3 > b), Y(this, a, 1), this.a.V(b));
    };
    W.prototype.writeFixed64 = W.prototype.Qa;
    W.prototype.nb = function(a, b) {
      null != b && (b = U(b), Y(this, a, 1), this.a.A(b.lo, b.hi));
    };
    W.prototype.writeFixed64String = W.prototype.nb;
    W.prototype.Ra = function(a, b) {
      null != b && (n(-2147483648 <= b && 2147483648 > b), Y(this, a, 5), this.a.S(b));
    };
    W.prototype.writeSfixed32 = W.prototype.Ra;
    W.prototype.Sa = function(a, b) {
      null != b && (n(-9223372036854776e3 <= b && 9223372036854776e3 > b), Y(this, a, 1), this.a.T(b));
    };
    W.prototype.writeSfixed64 = W.prototype.Sa;
    W.prototype.qb = function(a, b) {
      null != b && (b = zb(b), Y(this, a, 1), this.a.A(b.lo, b.hi));
    };
    W.prototype.writeSfixed64String = W.prototype.qb;
    W.prototype.L = function(a, b) {
      null != b && (Y(this, a, 5), this.a.L(b));
    };
    W.prototype.writeFloat = W.prototype.L;
    W.prototype.J = function(a, b) {
      null != b && (Y(this, a, 1), this.a.J(b));
    };
    W.prototype.writeDouble = W.prototype.J;
    W.prototype.I = function(a, b) {
      null != b && (n("boolean" === typeof b || "number" === typeof b), Y(this, a, 0), this.a.I(b));
    };
    W.prototype.writeBool = W.prototype.I;
    W.prototype.R = function(a, b) {
      null != b && (n(-2147483648 <= b && 2147483648 > b), Y(this, a, 0), this.a.M(b));
    };
    W.prototype.writeEnum = W.prototype.R;
    W.prototype.U = function(a, b) {
      null != b && (a = X(this, a), this.a.U(b), Z(this, a));
    };
    W.prototype.writeString = W.prototype.U;
    W.prototype.ia = function(a, b) {
      null != b && (b = ab(b), Y(this, a, 2), this.a.j(b.length), Ab(this, b));
    };
    W.prototype.writeBytes = W.prototype.ia;
    W.prototype.Qc = function(a, b, c) {
      null != b && (a = X(this, a), c(b, this), Z(this, a));
    };
    W.prototype.writeMessage = W.prototype.Qc;
    W.prototype.Rc = function(a, b, c) {
      null != b && (Y(this, 1, 3), Y(this, 2, 0), this.a.M(a), a = X(this, 3), c(b, this), Z(this, a), Y(this, 1, 4));
    };
    W.prototype.writeMessageSet = W.prototype.Rc;
    W.prototype.Nc = function(a, b, c) {
      null != b && (Y(this, a, 3), c(b, this), Y(this, a, 4));
    };
    W.prototype.writeGroup = W.prototype.Nc;
    W.prototype.K = function(a, b) {
      null != b && (n(8 == b.length), Y(this, a, 1), this.a.K(b));
    };
    W.prototype.writeFixedHash64 = W.prototype.K;
    W.prototype.N = function(a, b) {
      null != b && (n(8 == b.length), Y(this, a, 0), this.a.N(b));
    };
    W.prototype.writeVarintHash64 = W.prototype.N;
    W.prototype.A = function(a, b, c) {
      Y(this, a, 1);
      this.a.A(b, c);
    };
    W.prototype.writeSplitFixed64 = W.prototype.A;
    W.prototype.l = function(a, b, c) {
      Y(this, a, 0);
      this.a.l(b, c);
    };
    W.prototype.writeSplitVarint64 = W.prototype.l;
    W.prototype.tb = function(a, b, c) {
      Y(this, a, 0);
      var d = this.a;
      Pa(b, c, function(f, h) {
        d.l(f >>> 0, h >>> 0);
      });
    };
    W.prototype.writeSplitZigzagVarint64 = W.prototype.tb;
    W.prototype.Dd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) Cb(this, a, b[c]);
    };
    W.prototype.writeRepeatedInt32 = W.prototype.Dd;
    W.prototype.Ed = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.ob(a, b[c]);
    };
    W.prototype.writeRepeatedInt32String = W.prototype.Ed;
    W.prototype.Fd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) {
        var d = b[c];
        null != d && (Y(this, a, 0), this.a.ua(d));
      }
    };
    W.prototype.writeRepeatedInt64 = W.prototype.Fd;
    W.prototype.Pd = function(a, b, c, d) {
      if (null != b) for (var f = 0; f < b.length; f++) this.A(a, c(b[f]), d(b[f]));
    };
    W.prototype.writeRepeatedSplitFixed64 = W.prototype.Pd;
    W.prototype.Qd = function(a, b, c, d) {
      if (null != b) for (var f = 0; f < b.length; f++) this.l(a, c(b[f]), d(b[f]));
    };
    W.prototype.writeRepeatedSplitVarint64 = W.prototype.Qd;
    W.prototype.Rd = function(a, b, c, d) {
      if (null != b) for (var f = 0; f < b.length; f++) this.tb(a, c(b[f]), d(b[f]));
    };
    W.prototype.writeRepeatedSplitZigzagVarint64 = W.prototype.Rd;
    W.prototype.Gd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.ja(a, b[c]);
    };
    W.prototype.writeRepeatedInt64String = W.prototype.Gd;
    W.prototype.Td = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) Bb(this, a, b[c]);
    };
    W.prototype.writeRepeatedUint32 = W.prototype.Td;
    W.prototype.Ud = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.ub(a, b[c]);
    };
    W.prototype.writeRepeatedUint32String = W.prototype.Ud;
    W.prototype.Vd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) {
        var d = b[c];
        null != d && (Y(this, a, 0), this.a.va(d));
      }
    };
    W.prototype.writeRepeatedUint64 = W.prototype.Vd;
    W.prototype.Wd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.vb(a, b[c]);
    };
    W.prototype.writeRepeatedUint64String = W.prototype.Wd;
    W.prototype.Ld = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) {
        var d = b[c];
        null != d && (Y(this, a, 0), this.a.wa(d));
      }
    };
    W.prototype.writeRepeatedSint32 = W.prototype.Ld;
    W.prototype.Md = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) {
        var d = b[c];
        null != d && (Y(this, a, 0), this.a.xa(d));
      }
    };
    W.prototype.writeRepeatedSint64 = W.prototype.Md;
    W.prototype.Nd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) {
        var d = b[c];
        null != d && (Y(this, a, 0), this.a.Ta(d));
      }
    };
    W.prototype.writeRepeatedSint64String = W.prototype.Nd;
    W.prototype.Od = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) {
        var d = b[c];
        null != d && (Y(this, a, 0), this.a.W(d));
      }
    };
    W.prototype.writeRepeatedSintHash64 = W.prototype.Od;
    W.prototype.xd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.Pa(a, b[c]);
    };
    W.prototype.writeRepeatedFixed32 = W.prototype.xd;
    W.prototype.yd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.Qa(a, b[c]);
    };
    W.prototype.writeRepeatedFixed64 = W.prototype.yd;
    W.prototype.zd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.nb(a, b[c]);
    };
    W.prototype.writeRepeatedFixed64String = W.prototype.zd;
    W.prototype.Id = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.Ra(a, b[c]);
    };
    W.prototype.writeRepeatedSfixed32 = W.prototype.Id;
    W.prototype.Jd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.Sa(a, b[c]);
    };
    W.prototype.writeRepeatedSfixed64 = W.prototype.Jd;
    W.prototype.Kd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.qb(a, b[c]);
    };
    W.prototype.writeRepeatedSfixed64String = W.prototype.Kd;
    W.prototype.Bd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.L(a, b[c]);
    };
    W.prototype.writeRepeatedFloat = W.prototype.Bd;
    W.prototype.vd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.J(a, b[c]);
    };
    W.prototype.writeRepeatedDouble = W.prototype.vd;
    W.prototype.td = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.I(a, b[c]);
    };
    W.prototype.writeRepeatedBool = W.prototype.td;
    W.prototype.wd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.R(a, b[c]);
    };
    W.prototype.writeRepeatedEnum = W.prototype.wd;
    W.prototype.Sd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.U(a, b[c]);
    };
    W.prototype.writeRepeatedString = W.prototype.Sd;
    W.prototype.ud = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.ia(a, b[c]);
    };
    W.prototype.writeRepeatedBytes = W.prototype.ud;
    W.prototype.Hd = function(a, b, c) {
      if (null != b) for (var d = 0; d < b.length; d++) {
        var f = X(this, a);
        c(b[d], this);
        Z(this, f);
      }
    };
    W.prototype.writeRepeatedMessage = W.prototype.Hd;
    W.prototype.Cd = function(a, b, c) {
      if (null != b) for (var d = 0; d < b.length; d++) Y(this, a, 3), c(b[d], this), Y(this, a, 4);
    };
    W.prototype.writeRepeatedGroup = W.prototype.Cd;
    W.prototype.Ad = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.K(a, b[c]);
    };
    W.prototype.writeRepeatedFixedHash64 = W.prototype.Ad;
    W.prototype.Xd = function(a, b) {
      if (null != b) for (var c = 0; c < b.length; c++) this.N(a, b[c]);
    };
    W.prototype.writeRepeatedVarintHash64 = W.prototype.Xd;
    W.prototype.$c = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.M(b[c]);
        Z(this, a);
      }
    };
    W.prototype.writePackedInt32 = W.prototype.$c;
    W.prototype.ad = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.M(parseInt(b[c], 10));
        Z(this, a);
      }
    };
    W.prototype.writePackedInt32String = W.prototype.ad;
    W.prototype.bd = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.ua(b[c]);
        Z(this, a);
      }
    };
    W.prototype.writePackedInt64 = W.prototype.bd;
    W.prototype.ld = function(a, b, c, d) {
      if (null != b) {
        a = X(this, a);
        for (var f = 0; f < b.length; f++) this.a.A(c(b[f]), d(b[f]));
        Z(this, a);
      }
    };
    W.prototype.writePackedSplitFixed64 = W.prototype.ld;
    W.prototype.md = function(a, b, c, d) {
      if (null != b) {
        a = X(this, a);
        for (var f = 0; f < b.length; f++) this.a.l(c(b[f]), d(b[f]));
        Z(this, a);
      }
    };
    W.prototype.writePackedSplitVarint64 = W.prototype.md;
    W.prototype.nd = function(a, b, c, d) {
      if (null != b) {
        a = X(this, a);
        for (var f = this.a, h = 0; h < b.length; h++) Pa(c(b[h]), d(b[h]), function(m, t) {
          f.l(m >>> 0, t >>> 0);
        });
        Z(this, a);
      }
    };
    W.prototype.writePackedSplitZigzagVarint64 = W.prototype.nd;
    W.prototype.cd = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) {
          var d = zb(b[c]);
          this.a.l(d.lo, d.hi);
        }
        Z(this, a);
      }
    };
    W.prototype.writePackedInt64String = W.prototype.cd;
    W.prototype.od = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.j(b[c]);
        Z(this, a);
      }
    };
    W.prototype.writePackedUint32 = W.prototype.od;
    W.prototype.pd = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.j(parseInt(b[c], 10));
        Z(this, a);
      }
    };
    W.prototype.writePackedUint32String = W.prototype.pd;
    W.prototype.qd = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.va(b[c]);
        Z(this, a);
      }
    };
    W.prototype.writePackedUint64 = W.prototype.qd;
    W.prototype.rd = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) {
          var d = U(b[c]);
          this.a.l(d.lo, d.hi);
        }
        Z(this, a);
      }
    };
    W.prototype.writePackedUint64String = W.prototype.rd;
    W.prototype.gd = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.wa(b[c]);
        Z(this, a);
      }
    };
    W.prototype.writePackedSint32 = W.prototype.gd;
    W.prototype.hd = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.xa(b[c]);
        Z(this, a);
      }
    };
    W.prototype.writePackedSint64 = W.prototype.hd;
    W.prototype.jd = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.W(Xa(b[c]));
        Z(this, a);
      }
    };
    W.prototype.writePackedSint64String = W.prototype.jd;
    W.prototype.kd = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.W(b[c]);
        Z(this, a);
      }
    };
    W.prototype.writePackedSintHash64 = W.prototype.kd;
    W.prototype.Vc = function(a, b) {
      if (null != b && b.length) for (Y(this, a, 2), this.a.j(4 * b.length), a = 0; a < b.length; a++) this.a.o(b[a]);
    };
    W.prototype.writePackedFixed32 = W.prototype.Vc;
    W.prototype.Wc = function(a, b) {
      if (null != b && b.length) for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) this.a.V(b[a]);
    };
    W.prototype.writePackedFixed64 = W.prototype.Wc;
    W.prototype.Xc = function(a, b) {
      if (null != b && b.length) for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) {
        var c = U(b[a]);
        this.a.A(c.lo, c.hi);
      }
    };
    W.prototype.writePackedFixed64String = W.prototype.Xc;
    W.prototype.dd = function(a, b) {
      if (null != b && b.length) for (Y(this, a, 2), this.a.j(4 * b.length), a = 0; a < b.length; a++) this.a.S(b[a]);
    };
    W.prototype.writePackedSfixed32 = W.prototype.dd;
    W.prototype.ed = function(a, b) {
      if (null != b && b.length) for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) this.a.T(b[a]);
    };
    W.prototype.writePackedSfixed64 = W.prototype.ed;
    W.prototype.fd = function(a, b) {
      if (null != b && b.length) for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) this.a.ja(b[a]);
    };
    W.prototype.writePackedSfixed64String = W.prototype.fd;
    W.prototype.Zc = function(a, b) {
      if (null != b && b.length) for (Y(this, a, 2), this.a.j(4 * b.length), a = 0; a < b.length; a++) this.a.L(b[a]);
    };
    W.prototype.writePackedFloat = W.prototype.Zc;
    W.prototype.Tc = function(a, b) {
      if (null != b && b.length) for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) this.a.J(b[a]);
    };
    W.prototype.writePackedDouble = W.prototype.Tc;
    W.prototype.Sc = function(a, b) {
      if (null != b && b.length) for (Y(this, a, 2), this.a.j(b.length), a = 0; a < b.length; a++) this.a.I(b[a]);
    };
    W.prototype.writePackedBool = W.prototype.Sc;
    W.prototype.Uc = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.R(b[c]);
        Z(this, a);
      }
    };
    W.prototype.writePackedEnum = W.prototype.Uc;
    W.prototype.Yc = function(a, b) {
      if (null != b && b.length) for (Y(this, a, 2), this.a.j(8 * b.length), a = 0; a < b.length; a++) this.a.K(b[a]);
    };
    W.prototype.writePackedFixedHash64 = W.prototype.Yc;
    W.prototype.sd = function(a, b) {
      if (null != b && b.length) {
        a = X(this, a);
        for (var c = 0; c < b.length; c++) this.a.N(b[c]);
        Z(this, a);
      }
    };
    W.prototype.writePackedVarintHash64 = W.prototype.sd;
    "object" === typeof exports && (exports.debug = R, exports.Map = r2, exports.Message = N, exports.BinaryReader = K, exports.BinaryWriter = W, exports.ExtensionFieldInfo = eb, exports.ExtensionFieldBinaryInfo = fb, exports.exportSymbol = na, exports.inherits = oa, exports.object = { extend: qa }, exports.typeOf = k);
  }
});

// node_modules/@tronweb3/google-protobuf/google/protobuf/any_pb.js
var require_any_pb = __commonJS({
  "node_modules/@tronweb3/google-protobuf/google/protobuf/any_pb.js"(exports) {
    var jspb = require_google_protobuf();
    var goog = jspb;
    var global2 = typeof globalThis !== "undefined" && globalThis || typeof window !== "undefined" && window || typeof global2 !== "undefined" && global2 || typeof self !== "undefined" && self || (function() {
      return this;
    }).call(null) || Function("return this")();
    goog.exportSymbol("proto.google.protobuf.Any", null, global2);
    proto.google.protobuf.Any = function(opt_data) {
      jspb.Message.initialize(this, opt_data, 0, -1, null, null);
    };
    goog.inherits(proto.google.protobuf.Any, jspb.Message);
    if (goog.DEBUG && !COMPILED) {
      proto.google.protobuf.Any.displayName = "proto.google.protobuf.Any";
    }
    if (jspb.Message.GENERATE_TO_OBJECT) {
      proto.google.protobuf.Any.prototype.toObject = function(opt_includeInstance) {
        return proto.google.protobuf.Any.toObject(opt_includeInstance, this);
      };
      proto.google.protobuf.Any.toObject = function(includeInstance, msg) {
        var f, obj = {
          typeUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
          value: msg.getValue_asB64()
        };
        if (includeInstance) {
          obj.$jspbMessageInstance = msg;
        }
        return obj;
      };
    }
    proto.google.protobuf.Any.deserializeBinary = function(bytes) {
      var reader = new jspb.BinaryReader(bytes);
      var msg = new proto.google.protobuf.Any();
      return proto.google.protobuf.Any.deserializeBinaryFromReader(msg, reader);
    };
    proto.google.protobuf.Any.deserializeBinaryFromReader = function(msg, reader) {
      while (reader.nextField()) {
        if (reader.isEndGroup()) {
          break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
          case 1:
            var value = (
              /** @type {string} */
              reader.readString()
            );
            msg.setTypeUrl(value);
            break;
          case 2:
            var value = (
              /** @type {!Uint8Array} */
              reader.readBytes()
            );
            msg.setValue(value);
            break;
          default:
            reader.skipField();
            break;
        }
      }
      return msg;
    };
    proto.google.protobuf.Any.prototype.serializeBinary = function() {
      var writer = new jspb.BinaryWriter();
      proto.google.protobuf.Any.serializeBinaryToWriter(this, writer);
      return writer.getResultBuffer();
    };
    proto.google.protobuf.Any.serializeBinaryToWriter = function(message, writer) {
      var f = void 0;
      f = message.getTypeUrl();
      if (f.length > 0) {
        writer.writeString(
          1,
          f
        );
      }
      f = message.getValue_asU8();
      if (f.length > 0) {
        writer.writeBytes(
          2,
          f
        );
      }
    };
    proto.google.protobuf.Any.prototype.getTypeUrl = function() {
      return (
        /** @type {string} */
        jspb.Message.getFieldWithDefault(this, 1, "")
      );
    };
    proto.google.protobuf.Any.prototype.setTypeUrl = function(value) {
      return jspb.Message.setProto3StringField(this, 1, value);
    };
    proto.google.protobuf.Any.prototype.getValue = function() {
      return (
        /** @type {!(string|Uint8Array)} */
        jspb.Message.getFieldWithDefault(this, 2, "")
      );
    };
    proto.google.protobuf.Any.prototype.getValue_asB64 = function() {
      return (
        /** @type {string} */
        jspb.Message.bytesAsB64(
          this.getValue()
        )
      );
    };
    proto.google.protobuf.Any.prototype.getValue_asU8 = function() {
      return (
        /** @type {!Uint8Array} */
        jspb.Message.bytesAsU8(
          this.getValue()
        )
      );
    };
    proto.google.protobuf.Any.prototype.setValue = function(value) {
      return jspb.Message.setProto3BytesField(this, 2, value);
    };
    goog.object.extend(exports, proto.google.protobuf);
    proto.google.protobuf.Any.prototype.getTypeName = function() {
      return this.getTypeUrl().split("/").pop();
    };
    proto.google.protobuf.Any.prototype.pack = function(serialized, name, opt_typeUrlPrefix) {
      if (!opt_typeUrlPrefix) {
        opt_typeUrlPrefix = "type.googleapis.com/";
      }
      if (opt_typeUrlPrefix.substr(-1) != "/") {
        this.setTypeUrl(opt_typeUrlPrefix + "/" + name);
      } else {
        this.setTypeUrl(opt_typeUrlPrefix + name);
      }
      this.setValue(serialized);
    };
    proto.google.protobuf.Any.prototype.unpack = function(deserialize, name) {
      if (this.getTypeName() == name) {
        return deserialize(this.getValue_asU8());
      } else {
        return null;
      }
    };
  }
});

// node_modules/@babel/runtime/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({
  "node_modules/@babel/runtime/helpers/asyncToGenerator.js"(exports, module) {
    function asyncGeneratorStep(n, t, e, r2, o, a, c) {
      try {
        var i = n[a](c), u = i.value;
      } catch (n2) {
        return void e(n2);
      }
      i.done ? t(u) : Promise.resolve(u).then(r2, o);
    }
    function _asyncToGenerator(n) {
      return function() {
        var t = this, e = arguments;
        return new Promise(function(r2, o) {
          var a = n.apply(t, e);
          function _next(n2) {
            asyncGeneratorStep(a, r2, o, _next, _throw, "next", n2);
          }
          function _throw(n2) {
            asyncGeneratorStep(a, r2, o, _next, _throw, "throw", n2);
          }
          _next(void 0);
        });
      };
    }
    module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof(o) {
      "@babel/helpers - typeof";
      return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/classCallCheck.js
var require_classCallCheck = __commonJS({
  "node_modules/@babel/runtime/helpers/classCallCheck.js"(exports, module) {
    function _classCallCheck(a, n) {
      if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
    }
    module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPrimitive.js
var require_toPrimitive = __commonJS({
  "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    function toPrimitive(t, r2) {
      if ("object" != _typeof(t) || !t) return t;
      var e = t[Symbol.toPrimitive];
      if (void 0 !== e) {
        var i = e.call(t, r2 || "default");
        if ("object" != _typeof(i)) return i;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === r2 ? String : Number)(t);
    }
    module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPropertyKey.js
var require_toPropertyKey = __commonJS({
  "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    var toPrimitive = require_toPrimitive();
    function toPropertyKey(t) {
      var i = toPrimitive(t, "string");
      return "symbol" == _typeof(i) ? i : i + "";
    }
    module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/createClass.js
var require_createClass = __commonJS({
  "node_modules/@babel/runtime/helpers/createClass.js"(exports, module) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperties(e, r2) {
      for (var t = 0; t < r2.length; t++) {
        var o = r2[t];
        o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, toPropertyKey(o.key), o);
      }
    }
    function _createClass(e, r2, t) {
      return r2 && _defineProperties(e.prototype, r2), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
        writable: false
      }), e;
    }
    module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/assertThisInitialized.js
var require_assertThisInitialized = __commonJS({
  "node_modules/@babel/runtime/helpers/assertThisInitialized.js"(exports, module) {
    function _assertThisInitialized(e) {
      if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return e;
    }
    module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS({
  "node_modules/@babel/runtime/helpers/setPrototypeOf.js"(exports, module) {
    function _setPrototypeOf(t, e) {
      return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
        return t2.__proto__ = e2, t2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _setPrototypeOf(t, e);
    }
    module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/inherits.js
var require_inherits = __commonJS({
  "node_modules/@babel/runtime/helpers/inherits.js"(exports, module) {
    var setPrototypeOf = require_setPrototypeOf();
    function _inherits(t, e) {
      if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
      t.prototype = Object.create(e && e.prototype, {
        constructor: {
          value: t,
          writable: true,
          configurable: true
        }
      }), Object.defineProperty(t, "prototype", {
        writable: false
      }), e && setPrototypeOf(t, e);
    }
    module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var require_possibleConstructorReturn = __commonJS({
  "node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    var assertThisInitialized = require_assertThisInitialized();
    function _possibleConstructorReturn(t, e) {
      if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
      if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
      return assertThisInitialized(t);
    }
    module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/getPrototypeOf.js
var require_getPrototypeOf = __commonJS({
  "node_modules/@babel/runtime/helpers/getPrototypeOf.js"(exports, module) {
    function _getPrototypeOf(t) {
      return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
        return t2.__proto__ || Object.getPrototypeOf(t2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _getPrototypeOf(t);
    }
    module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperty(e, r2, t) {
      return (r2 = toPropertyKey(r2)) in e ? Object.defineProperty(e, r2, {
        value: t,
        enumerable: true,
        configurable: true,
        writable: true
      }) : e[r2] = t, e;
    }
    module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/OverloadYield.js
var require_OverloadYield = __commonJS({
  "node_modules/@babel/runtime/helpers/OverloadYield.js"(exports, module) {
    function _OverloadYield(e, d) {
      this.v = e, this.k = d;
    }
    module.exports = _OverloadYield, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorDefine.js
var require_regeneratorDefine = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorDefine.js"(exports, module) {
    function _regeneratorDefine(e, r2, n, t) {
      var i = Object.defineProperty;
      try {
        i({}, "", {});
      } catch (e2) {
        i = 0;
      }
      module.exports = _regeneratorDefine = function regeneratorDefine(e2, r3, n2, t2) {
        function o(r4, n3) {
          _regeneratorDefine(e2, r4, function(e3) {
            return this._invoke(r4, n3, e3);
          });
        }
        r3 ? i ? i(e2, r3, {
          value: n2,
          enumerable: !t2,
          configurable: !t2,
          writable: !t2
        }) : e2[r3] = n2 : (o("next", 0), o("throw", 1), o("return", 2));
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _regeneratorDefine(e, r2, n, t);
    }
    module.exports = _regeneratorDefine, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regenerator.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/helpers/regenerator.js"(exports, module) {
    var regeneratorDefine = require_regeneratorDefine();
    function _regenerator() {
      var e, t, r2 = "function" == typeof Symbol ? Symbol : {}, n = r2.iterator || "@@iterator", o = r2.toStringTag || "@@toStringTag";
      function i(r3, n2, o2, i2) {
        var c2 = n2 && n2.prototype instanceof Generator ? n2 : Generator, u2 = Object.create(c2.prototype);
        return regeneratorDefine(u2, "_invoke", function(r4, n3, o3) {
          var i3, c3, u3, f2 = 0, p = o3 || [], y = false, G = {
            p: 0,
            n: 0,
            v: e,
            a: d,
            f: d.bind(e, 4),
            d: function d2(t2, r5) {
              return i3 = t2, c3 = 0, u3 = e, G.n = r5, a;
            }
          };
          function d(r5, n4) {
            for (c3 = r5, u3 = n4, t = 0; !y && f2 && !o4 && t < p.length; t++) {
              var o4, i4 = p[t], d2 = G.p, l = i4[2];
              r5 > 3 ? (o4 = l === n4) && (u3 = i4[(c3 = i4[4]) ? 5 : (c3 = 3, 3)], i4[4] = i4[5] = e) : i4[0] <= d2 && ((o4 = r5 < 2 && d2 < i4[1]) ? (c3 = 0, G.v = n4, G.n = i4[1]) : d2 < l && (o4 = r5 < 3 || i4[0] > n4 || n4 > l) && (i4[4] = r5, i4[5] = n4, G.n = l, c3 = 0));
            }
            if (o4 || r5 > 1) return a;
            throw y = true, n4;
          }
          return function(o4, p2, l) {
            if (f2 > 1) throw TypeError("Generator is already running");
            for (y && 1 === p2 && d(p2, l), c3 = p2, u3 = l; (t = c3 < 2 ? e : u3) || !y; ) {
              i3 || (c3 ? c3 < 3 ? (c3 > 1 && (G.n = -1), d(c3, u3)) : G.n = u3 : G.v = u3);
              try {
                if (f2 = 2, i3) {
                  if (c3 || (o4 = "next"), t = i3[o4]) {
                    if (!(t = t.call(i3, u3))) throw TypeError("iterator result is not an object");
                    if (!t.done) return t;
                    u3 = t.value, c3 < 2 && (c3 = 0);
                  } else 1 === c3 && (t = i3["return"]) && t.call(i3), c3 < 2 && (u3 = TypeError("The iterator does not provide a '" + o4 + "' method"), c3 = 1);
                  i3 = e;
                } else if ((t = (y = G.n < 0) ? u3 : r4.call(n3, G)) !== a) break;
              } catch (t2) {
                i3 = e, c3 = 1, u3 = t2;
              } finally {
                f2 = 1;
              }
            }
            return {
              value: t,
              done: y
            };
          };
        }(r3, o2, i2), true), u2;
      }
      var a = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      t = Object.getPrototypeOf;
      var c = [][n] ? t(t([][n]())) : (regeneratorDefine(t = {}, n, function() {
        return this;
      }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c);
      function f(e2) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(e2, GeneratorFunctionPrototype) : (e2.__proto__ = GeneratorFunctionPrototype, regeneratorDefine(e2, o, "GeneratorFunction")), e2.prototype = Object.create(u), e2;
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, regeneratorDefine(u, "constructor", GeneratorFunctionPrototype), regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", regeneratorDefine(GeneratorFunctionPrototype, o, "GeneratorFunction"), regeneratorDefine(u), regeneratorDefine(u, o, "Generator"), regeneratorDefine(u, n, function() {
        return this;
      }), regeneratorDefine(u, "toString", function() {
        return "[object Generator]";
      }), (module.exports = _regenerator = function _regenerator2() {
        return {
          w: i,
          m: f
        };
      }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
    }
    module.exports = _regenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorAsyncIterator.js
var require_regeneratorAsyncIterator = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorAsyncIterator.js"(exports, module) {
    var OverloadYield = require_OverloadYield();
    var regeneratorDefine = require_regeneratorDefine();
    function AsyncIterator(t, e) {
      function n(r3, o, i, f) {
        try {
          var c = t[r3](o), u = c.value;
          return u instanceof OverloadYield ? e.resolve(u.v).then(function(t2) {
            n("next", t2, i, f);
          }, function(t2) {
            n("throw", t2, i, f);
          }) : e.resolve(u).then(function(t2) {
            c.value = t2, i(c);
          }, function(t2) {
            return n("throw", t2, i, f);
          });
        } catch (t2) {
          f(t2);
        }
      }
      var r2;
      this.next || (regeneratorDefine(AsyncIterator.prototype), regeneratorDefine(AsyncIterator.prototype, "function" == typeof Symbol && Symbol.asyncIterator || "@asyncIterator", function() {
        return this;
      })), regeneratorDefine(this, "_invoke", function(t2, o, i) {
        function f() {
          return new e(function(e2, r3) {
            n(t2, i, e2, r3);
          });
        }
        return r2 = r2 ? r2.then(f, f) : f();
      }, true);
    }
    module.exports = AsyncIterator, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorAsyncGen.js
var require_regeneratorAsyncGen = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorAsyncGen.js"(exports, module) {
    var regenerator = require_regenerator();
    var regeneratorAsyncIterator = require_regeneratorAsyncIterator();
    function _regeneratorAsyncGen(r2, e, t, o, n) {
      return new regeneratorAsyncIterator(regenerator().w(r2, e, t, o), n || Promise);
    }
    module.exports = _regeneratorAsyncGen, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorAsync.js
var require_regeneratorAsync = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorAsync.js"(exports, module) {
    var regeneratorAsyncGen = require_regeneratorAsyncGen();
    function _regeneratorAsync(n, e, r2, t, o) {
      var a = regeneratorAsyncGen(n, e, r2, t, o);
      return a.next().then(function(n2) {
        return n2.done ? n2.value : a.next();
      });
    }
    module.exports = _regeneratorAsync, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorKeys.js
var require_regeneratorKeys = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorKeys.js"(exports, module) {
    function _regeneratorKeys(e) {
      var n = Object(e), r2 = [];
      for (var t in n) r2.unshift(t);
      return function e2() {
        for (; r2.length; ) if ((t = r2.pop()) in n) return e2.value = t, e2.done = false, e2;
        return e2.done = true, e2;
      };
    }
    module.exports = _regeneratorKeys, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorValues.js
var require_regeneratorValues = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorValues.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    function _regeneratorValues(e) {
      if (null != e) {
        var t = e["function" == typeof Symbol && Symbol.iterator || "@@iterator"], r2 = 0;
        if (t) return t.call(e);
        if ("function" == typeof e.next) return e;
        if (!isNaN(e.length)) return {
          next: function next() {
            return e && r2 >= e.length && (e = void 0), {
              value: e && e[r2++],
              done: !e
            };
          }
        };
      }
      throw new TypeError(_typeof(e) + " is not iterable");
    }
    module.exports = _regeneratorValues, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
    var OverloadYield = require_OverloadYield();
    var regenerator = require_regenerator();
    var regeneratorAsync = require_regeneratorAsync();
    var regeneratorAsyncGen = require_regeneratorAsyncGen();
    var regeneratorAsyncIterator = require_regeneratorAsyncIterator();
    var regeneratorKeys = require_regeneratorKeys();
    var regeneratorValues = require_regeneratorValues();
    function _regeneratorRuntime() {
      "use strict";
      var r2 = regenerator(), e = r2.m(_regeneratorRuntime), t = (Object.getPrototypeOf ? Object.getPrototypeOf(e) : e.__proto__).constructor;
      function n(r3) {
        var e2 = "function" == typeof r3 && r3.constructor;
        return !!e2 && (e2 === t || "GeneratorFunction" === (e2.displayName || e2.name));
      }
      var o = {
        "throw": 1,
        "return": 2,
        "break": 3,
        "continue": 3
      };
      function a(r3) {
        var e2, t2;
        return function(n2) {
          e2 || (e2 = {
            stop: function stop() {
              return t2(n2.a, 2);
            },
            "catch": function _catch() {
              return n2.v;
            },
            abrupt: function abrupt(r4, e3) {
              return t2(n2.a, o[r4], e3);
            },
            delegateYield: function delegateYield(r4, o2, a2) {
              return e2.resultName = o2, t2(n2.d, regeneratorValues(r4), a2);
            },
            finish: function finish(r4) {
              return t2(n2.f, r4);
            }
          }, t2 = function t3(r4, _t, o2) {
            n2.p = e2.prev, n2.n = e2.next;
            try {
              return r4(_t, o2);
            } finally {
              e2.next = n2.n;
            }
          }), e2.resultName && (e2[e2.resultName] = n2.v, e2.resultName = void 0), e2.sent = n2.v, e2.next = n2.n;
          try {
            return r3.call(this, e2);
          } finally {
            n2.p = e2.prev, n2.n = e2.next;
          }
        };
      }
      return (module.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
        return {
          wrap: function wrap(e2, t2, n2, o2) {
            return r2.w(a(e2), t2, n2, o2 && o2.reverse());
          },
          isGeneratorFunction: n,
          mark: r2.m,
          awrap: function awrap(r3, e2) {
            return new OverloadYield(r3, e2);
          },
          AsyncIterator: regeneratorAsyncIterator,
          async: function async(r3, e2, t2, o2, u) {
            return (n(e2) ? regeneratorAsyncGen : regeneratorAsync)(a(r3), e2, t2, o2, u);
          },
          keys: regeneratorKeys,
          values: regeneratorValues
        };
      }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
    }
    module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator2 = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
    var runtime = require_regeneratorRuntime()();
    module.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "node_modules/axios/dist/browser/axios.cjs"(exports, module) {
    "use strict";
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString: toString2 } = Object.prototype;
    var { getPrototypeOf } = Object;
    var { iterator, toStringTag } = Symbol;
    var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString2.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    var typeOfTest = (type) => (thing) => typeof thing === type;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(toStringTag in val) && !(iterator in val);
    };
    var isEmptyObject = (val) => {
      if (!isObject(val) || isBuffer(val)) {
        return false;
      }
      try {
        return Object.keys(val).length === 0 && Object.getPrototypeOf(val) === Object.prototype;
      } catch (e) {
        return false;
      }
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        if (isBuffer(obj)) {
          return;
        }
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      if (isBuffer(obj)) {
        return null;
      }
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null) return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing) return null;
      if (isArray(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[iterator];
      const _iterator = generator.call(obj);
      let result;
      while ((result = _iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define2 = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (isBuffer(source)) {
            return source;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    var isIterable = (thing) => thing != null && isFunction(thing[iterator]);
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isEmptyObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap,
      isIterable
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path) return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null) return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (utils$1.isBoolean(value)) {
          return value.toString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value)) return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString3(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode3(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode3;
      if (utils$1.isFunction(options)) {
        options = {
          serialize: options
        };
      }
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id2) {
        if (this.handlers[id2]) {
          this.handlers[id2] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var _navigator = typeof navigator === "object" && navigator || void 0;
    var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin = hasBrowserEnv && window.location.href || "http://localhost";
    var utils = Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv,
      navigator: _navigator,
      origin
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), {
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        },
        ...options
      });
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        if (name === "__proto__") return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value)) return;
      if (utils$1.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isObject(header) && utils$1.isIterable(header)) {
          let obj = {}, dest, key;
          for (const entry of header) {
            if (!utils$1.isArray(entry)) {
              throw TypeError("Object iterator must return a key-value pair");
            }
            obj[key = entry[0]] = (dest = obj[key]) ? utils$1.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
          }
          setHeaders(obj, valueOrRewrite);
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      getSetCookie() {
        return this.get("set-cookie") || [];
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer;
      const invoke = (args, now = Date.now()) => {
        timestamp = now;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn(...args);
      };
      const throttled = (...args) => {
        const now = Date.now();
        const passed = now - timestamp;
        if (passed >= threshold) {
          invoke(args, now);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? /* @__PURE__ */ ((origin2, isMSIE) => (url) => {
      url = new URL(url, platform.origin);
      return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
    })(
      new URL(platform.origin),
      platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)
    ) : () => true;
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
      let isRelativeUrl = !isAbsoluteURL(requestedURL);
      if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, prop, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, prop, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a, b, prop, caseless);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a, prop, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
      };
      utils$1.forEach(Object.keys({ ...config1, ...config2 }), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    var composeSignals$1 = composeSignals;
    var streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    var readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    var trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator2 = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator2.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator2.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    var supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE = 64 * 1024;
    var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    var resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
          throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    var resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request, fetchOptions);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id2;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id2 = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id2}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id2 || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id2, state]) => `adapter ${id2} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var VERSION = "1.11.0";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version10, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version10 ? " in " + version10 : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version10 && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version10 + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    validators$1.spelling = function spelling(correctSpelling) {
      return (value, opt) => {
        console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
        return true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig || {};
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy = {};
            Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        if (config.allowAbsoluteUrls !== void 0) ;
        else if (this.defaults.allowAbsoluteUrls !== void 0) {
          config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
        } else {
          config.allowAbsoluteUrls = true;
        }
        validator.assertOptions(config, {
          baseUrl: validators.spelling("baseURL"),
          withXsrfToken: validators.spelling("withXSRFToken")
        }, true);
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift(...requestInterceptorChain);
          chain.push(...responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners) return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module.exports = axios;
  }
});

// node_modules/@babel/runtime/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayLikeToArray.js"(exports, module) {
    function _arrayLikeToArray(r2, a) {
      (null == a || a > r2.length) && (a = r2.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r2[e];
      return n;
    }
    module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/arrayWithoutHoles.js
var require_arrayWithoutHoles = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayWithoutHoles.js"(exports, module) {
    var arrayLikeToArray = require_arrayLikeToArray();
    function _arrayWithoutHoles(r2) {
      if (Array.isArray(r2)) return arrayLikeToArray(r2);
    }
    module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/iterableToArray.js
var require_iterableToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/iterableToArray.js"(exports, module) {
    function _iterableToArray(r2) {
      if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
    }
    module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"(exports, module) {
    var arrayLikeToArray = require_arrayLikeToArray();
    function _unsupportedIterableToArray(r2, a) {
      if (r2) {
        if ("string" == typeof r2) return arrayLikeToArray(r2, a);
        var t = {}.toString.call(r2).slice(8, -1);
        return "Object" === t && r2.constructor && (t = r2.constructor.name), "Map" === t || "Set" === t ? Array.from(r2) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r2, a) : void 0;
      }
    }
    module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/nonIterableSpread.js
var require_nonIterableSpread = __commonJS({
  "node_modules/@babel/runtime/helpers/nonIterableSpread.js"(exports, module) {
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/toConsumableArray.js
var require_toConsumableArray = __commonJS({
  "node_modules/@babel/runtime/helpers/toConsumableArray.js"(exports, module) {
    var arrayWithoutHoles = require_arrayWithoutHoles();
    var iterableToArray = require_iterableToArray();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableSpread = require_nonIterableSpread();
    function _toConsumableArray(r2) {
      return arrayWithoutHoles(r2) || iterableToArray(r2) || unsupportedIterableToArray(r2) || nonIterableSpread();
    }
    module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/classApplyDescriptorSet.js
var require_classApplyDescriptorSet = __commonJS({
  "node_modules/@babel/runtime/helpers/classApplyDescriptorSet.js"(exports, module) {
    function _classApplyDescriptorSet(e, t, l) {
      if (t.set) t.set.call(e, l);
      else {
        if (!t.writable) throw new TypeError("attempted to set read only private field");
        t.value = l;
      }
    }
    module.exports = _classApplyDescriptorSet, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/assertClassBrand.js
var require_assertClassBrand = __commonJS({
  "node_modules/@babel/runtime/helpers/assertClassBrand.js"(exports, module) {
    function _assertClassBrand(e, t, n) {
      if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;
      throw new TypeError("Private element is not present on this object");
    }
    module.exports = _assertClassBrand, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js
var require_classPrivateFieldGet2 = __commonJS({
  "node_modules/@babel/runtime/helpers/classPrivateFieldGet2.js"(exports, module) {
    var assertClassBrand = require_assertClassBrand();
    function _classPrivateFieldGet2(s, a) {
      return s.get(assertClassBrand(s, a));
    }
    module.exports = _classPrivateFieldGet2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/classPrivateFieldSet.js
var require_classPrivateFieldSet = __commonJS({
  "node_modules/@babel/runtime/helpers/classPrivateFieldSet.js"(exports, module) {
    var classApplyDescriptorSet = require_classApplyDescriptorSet();
    var classPrivateFieldGet2 = require_classPrivateFieldGet2();
    function _classPrivateFieldSet(e, t, r2) {
      var s = classPrivateFieldGet2(t, e);
      return classApplyDescriptorSet(e, s, r2), r2;
    }
    module.exports = _classPrivateFieldSet, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/classApplyDescriptorGet.js
var require_classApplyDescriptorGet = __commonJS({
  "node_modules/@babel/runtime/helpers/classApplyDescriptorGet.js"(exports, module) {
    function _classApplyDescriptorGet(e, t) {
      return t.get ? t.get.call(e) : t.value;
    }
    module.exports = _classApplyDescriptorGet, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/classPrivateFieldGet.js
var require_classPrivateFieldGet = __commonJS({
  "node_modules/@babel/runtime/helpers/classPrivateFieldGet.js"(exports, module) {
    var classApplyDescriptorGet = require_classApplyDescriptorGet();
    var classPrivateFieldGet2 = require_classPrivateFieldGet2();
    function _classPrivateFieldGet(e, t) {
      var r2 = classPrivateFieldGet2(t, e);
      return classApplyDescriptorGet(e, r2);
    }
    module.exports = _classPrivateFieldGet, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@noble/hashes/_assert.js
var require_assert = __commonJS({
  "node_modules/@noble/hashes/_assert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = exports.isBytes = void 0;
    function number(n) {
      if (!Number.isSafeInteger(n) || n < 0)
        throw new Error(`positive integer expected, not ${n}`);
    }
    exports.number = number;
    function bool(b) {
      if (typeof b !== "boolean")
        throw new Error(`boolean expected, not ${b}`);
    }
    exports.bool = bool;
    function isBytes2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    exports.isBytes = isBytes2;
    function bytes(b, ...lengths) {
      if (!isBytes2(b))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
    }
    exports.bytes = bytes;
    function hash(h) {
      if (typeof h !== "function" || typeof h.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number(h.outputLen);
      number(h.blockLen);
    }
    exports.hash = hash;
    function exists(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    exports.exists = exists;
    function output(out, instance) {
      bytes(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
    }
    exports.output = output;
    var assert = { number, bool, bytes, hash, exists, output };
    exports.default = assert;
  }
});

// node_modules/@noble/hashes/_u64.js
var require_u64 = __commonJS({
  "node_modules/@noble/hashes/_u64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
    var U32_MASK64 = BigInt(2 ** 32 - 1);
    var _32n = BigInt(32);
    function fromBig(n, le = false) {
      if (le)
        return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
      return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    exports.fromBig = fromBig;
    function split(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    exports.split = split;
    var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
    exports.toBig = toBig;
    var shrSH = (h, _l, s) => h >>> s;
    exports.shrSH = shrSH;
    var shrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports.shrSL = shrSL;
    var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
    exports.rotrSH = rotrSH;
    var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
    exports.rotrSL = rotrSL;
    var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports.rotrBH = rotrBH;
    var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports.rotrBL = rotrBL;
    var rotr32H = (_h, l) => l;
    exports.rotr32H = rotr32H;
    var rotr32L = (h, _l) => h;
    exports.rotr32L = rotr32L;
    var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
    exports.rotlSH = rotlSH;
    var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
    exports.rotlSL = rotlSL;
    var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports.rotlBH = rotlBH;
    var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports.rotlBL = rotlBL;
    function add(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    exports.add = add;
    var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports.add3L = add3L;
    var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports.add3H = add3H;
    var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports.add4L = add4L;
    var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports.add4H = add4H;
    var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports.add5L = add5L;
    var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports.add5H = add5H;
    var u64 = {
      fromBig,
      split,
      toBig,
      shrSH,
      shrSL,
      rotrSH,
      rotrSL,
      rotrBH,
      rotrBL,
      rotr32H,
      rotr32L,
      rotlSH,
      rotlSL,
      rotlBH,
      rotlBL,
      add,
      add3L,
      add3H,
      add4L,
      add4H,
      add5H,
      add5L
    };
    exports.default = u64;
  }
});

// node_modules/@noble/hashes/crypto.js
var require_crypto2 = __commonJS({
  "node_modules/@noble/hashes/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = void 0;
    exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});

// node_modules/@noble/hashes/utils.js
var require_utils = __commonJS({
  "node_modules/@noble/hashes/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.byteSwap32 = exports.byteSwapIfBE = exports.byteSwap = exports.isLE = exports.rotl = exports.rotr = exports.createView = exports.u32 = exports.u8 = exports.isBytes = void 0;
    var crypto_1 = require_crypto2();
    var _assert_js_1 = require_assert();
    function isBytes2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    exports.isBytes = isBytes2;
    var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.u8 = u8;
    var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports.u32 = u32;
    var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.createView = createView;
    var rotr = (word, shift) => word << 32 - shift | word >>> shift;
    exports.rotr = rotr;
    var rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
    exports.rotl = rotl;
    exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    exports.byteSwap = byteSwap;
    exports.byteSwapIfBE = exports.isLE ? (n) => n : (n) => (0, exports.byteSwap)(n);
    function byteSwap32(arr) {
      for (let i = 0; i < arr.length; i++) {
        arr[i] = (0, exports.byteSwap)(arr[i]);
      }
    }
    exports.byteSwap32 = byteSwap32;
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      (0, _assert_js_1.bytes)(bytes);
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    exports.bytesToHex = bytesToHex;
    var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase16(char) {
      if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
      if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
      if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
      return;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi] + hex[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
      }
      return array;
    }
    exports.hexToBytes = hexToBytes;
    var nextTick = async () => {
    };
    exports.nextTick = nextTick;
    async function asyncLoop(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff;
      }
    }
    exports.asyncLoop = asyncLoop;
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports.utf8ToBytes = utf8ToBytes;
    function toBytes(data) {
      if (typeof data === "string")
        data = utf8ToBytes(data);
      (0, _assert_js_1.bytes)(data);
      return data;
    }
    exports.toBytes = toBytes;
    function concatBytes(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        (0, _assert_js_1.bytes)(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    exports.concatBytes = concatBytes;
    var Hash = class {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    };
    exports.Hash = Hash;
    var toStr = {}.toString;
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    exports.checkOpts = checkOpts;
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports.wrapConstructor = wrapConstructor;
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
    function wrapXOFConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
    function randomBytes(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports.randomBytes = randomBytes;
  }
});

// node_modules/@noble/hashes/sha3.js
var require_sha3 = __commonJS({
  "node_modules/@noble/hashes/sha3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
    var _assert_js_1 = require_assert();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils();
    var SHA3_PI = [];
    var SHA3_ROTL = [];
    var _SHA3_IOTA = [];
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _7n = BigInt(7);
    var _256n = BigInt(256);
    var _0x71n = BigInt(113);
    for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x));
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n)
          t ^= _1n << (_1n << BigInt(j)) - _1n;
      }
      _SHA3_IOTA.push(t);
    }
    var [SHA3_IOTA_H, SHA3_IOTA_L] = (0, _u64_js_1.split)(_SHA3_IOTA, true);
    var rotlH = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
    var rotlL = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
    function keccakP(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x = 0; x < 10; x++)
          B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
          const idx1 = (x + 8) % 10;
          const idx0 = (x + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x + y] ^= Th;
            s[x + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL[t];
          const Th = rotlH(curH, curL, shift);
          const Tl = rotlL(curH, curL, shift);
          const PI = SHA3_PI[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x = 0; x < 10; x++)
            B[x] = s[y + x];
          for (let x = 0; x < 10; x++)
            s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
      }
      B.fill(0);
    }
    exports.keccakP = keccakP;
    var Keccak = class _Keccak extends utils_js_1.Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.number)(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
      }
      keccak() {
        if (!utils_js_1.isLE)
          (0, utils_js_1.byteSwap32)(this.state32);
        keccakP(this.state32, this.rounds);
        if (!utils_js_1.isLE)
          (0, utils_js_1.byteSwap32)(this.state32);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes) {
        (0, _assert_js_1.number)(bytes);
        return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    exports.Keccak = Keccak;
    var gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
    exports.sha3_224 = gen(6, 144, 224 / 8);
    exports.sha3_256 = gen(6, 136, 256 / 8);
    exports.sha3_384 = gen(6, 104, 384 / 8);
    exports.sha3_512 = gen(6, 72, 512 / 8);
    exports.keccak_224 = gen(1, 144, 224 / 8);
    exports.keccak_256 = gen(1, 136, 256 / 8);
    exports.keccak_384 = gen(1, 104, 384 / 8);
    exports.keccak_512 = gen(1, 72, 512 / 8);
    var genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    exports.shake128 = genShake(31, 168, 128 / 8);
    exports.shake256 = genShake(31, 136, 256 / 8);
  }
});

// node_modules/@noble/hashes/_md.js
var require_md = __commonJS({
  "node_modules/@noble/hashes/_md.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HashMD = exports.Maj = exports.Chi = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils();
    function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE ? 4 : 0;
      const l = isLE ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE);
      view.setUint32(byteOffset + l, wl, isLE);
    }
    var Chi = (a, b, c) => a & b ^ ~a & c;
    exports.Chi = Chi;
    var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
    exports.Maj = Maj;
    var HashMD = class extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = (0, utils_js_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE);
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer);
        return to;
      }
    };
    exports.HashMD = HashMD;
  }
});

// node_modules/@noble/hashes/sha256.js
var require_sha256 = __commonJS({
  "node_modules/@noble/hashes/sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha224 = exports.sha256 = void 0;
    var _md_js_1 = require_md();
    var utils_js_1 = require_utils();
    var SHA256_K = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var SHA256_IV = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SHA256_W = new Uint32Array(64);
    var SHA256 = class extends _md_js_1.HashMD {
      constructor() {
        super(64, 32, 8, false);
        this.A = SHA256_IV[0] | 0;
        this.B = SHA256_IV[1] | 0;
        this.C = SHA256_IV[2] | 0;
        this.D = SHA256_IV[3] | 0;
        this.E = SHA256_IV[4] | 0;
        this.F = SHA256_IV[5] | 0;
        this.G = SHA256_IV[6] | 0;
        this.H = SHA256_IV[7] | 0;
      }
      get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
          const T1 = H + sigma1 + (0, _md_js_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
          const T2 = sigma0 + (0, _md_js_1.Maj)(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
        SHA256_W.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    };
    var SHA224 = class extends SHA256 {
      constructor() {
        super();
        this.A = 3238371032 | 0;
        this.B = 914150663 | 0;
        this.C = 812702999 | 0;
        this.D = 4144912697 | 0;
        this.E = 4290775857 | 0;
        this.F = 1750603025 | 0;
        this.G = 1694076839 | 0;
        this.H = 3204075428 | 0;
        this.outputLen = 28;
      }
    };
    exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
    exports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
  }
});

// node_modules/@noble/hashes/hmac.js
var require_hmac = __commonJS({
  "node_modules/@noble/hashes/hmac.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac = exports.HMAC = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils();
    var HMAC = class extends utils_js_1.Hash {
      constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    exports.HMAC = HMAC;
    var hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
    exports.hmac = hmac;
    exports.hmac.create = (hash, key) => new HMAC(hash, key);
  }
});

// node_modules/@noble/curves/abstract/utils.js
var require_utils2 = __commonJS({
  "node_modules/@noble/curves/abstract/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bitMask = void 0;
    exports.isBytes = isBytes2;
    exports.abytes = abytes;
    exports.bytesToHex = bytesToHex;
    exports.numberToHexUnpadded = numberToHexUnpadded;
    exports.hexToNumber = hexToNumber;
    exports.hexToBytes = hexToBytes;
    exports.bytesToNumberBE = bytesToNumberBE;
    exports.bytesToNumberLE = bytesToNumberLE;
    exports.numberToBytesBE = numberToBytesBE;
    exports.numberToBytesLE = numberToBytesLE;
    exports.numberToVarBytesBE = numberToVarBytesBE;
    exports.ensureBytes = ensureBytes;
    exports.concatBytes = concatBytes;
    exports.equalBytes = equalBytes;
    exports.utf8ToBytes = utf8ToBytes;
    exports.bitLen = bitLen;
    exports.bitGet = bitGet;
    exports.bitSet = bitSet;
    exports.createHmacDrbg = createHmacDrbg;
    exports.validateObject = validateObject;
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    function isBytes2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    function abytes(item) {
      if (!isBytes2(item))
        throw new Error("Uint8Array expected");
    }
    var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(bytes) {
      abytes(bytes);
      let hex = "";
      for (let i = 0; i < bytes.length; i++) {
        hex += hexes[bytes[i]];
      }
      return hex;
    }
    function numberToHexUnpadded(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    }
    function hexToNumber(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return BigInt(hex === "" ? "0" : `0x${hex}`);
    }
    var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase16(char) {
      if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
      if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
      if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
      return;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi] + hex[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
      }
      return array;
    }
    function bytesToNumberBE(bytes) {
      return hexToNumber(bytesToHex(bytes));
    }
    function bytesToNumberLE(bytes) {
      abytes(bytes);
      return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
    }
    function numberToBytesBE(n, len) {
      return hexToBytes(n.toString(16).padStart(len * 2, "0"));
    }
    function numberToBytesLE(n, len) {
      return numberToBytesBE(n, len).reverse();
    }
    function numberToVarBytesBE(n) {
      return hexToBytes(numberToHexUnpadded(n));
    }
    function ensureBytes(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes(hex);
        } catch (e) {
          throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
      } else if (isBytes2(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
    }
    function concatBytes(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    function equalBytes(a, b) {
      if (a.length !== b.length)
        return false;
      let diff = 0;
      for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
      return diff === 0;
    }
    function utf8ToBytes(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    function bitLen(n) {
      let len;
      for (len = 0; n > _0n; n >>= _1n, len += 1)
        ;
      return len;
    }
    function bitGet(n, pos) {
      return n >> BigInt(pos) & _1n;
    }
    function bitSet(n, pos, value) {
      return n | (value ? _1n : _0n) << BigInt(pos);
    }
    var bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;
    exports.bitMask = bitMask;
    var u8n = (data) => new Uint8Array(data);
    var u8fr = (arr) => Uint8Array.from(arr);
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v = u8n(hashLen);
      let k = u8n(hashLen);
      let i = 0;
      const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
      };
      const h = (...b) => hmacFn(k, v, ...b);
      const reseed = (seed = u8n()) => {
        k = h(u8fr([0]), seed);
        v = h();
        if (seed.length === 0)
          return;
        k = h(u8fr([1]), seed);
        v = h();
      };
      const gen = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v = h();
          const sl = v.slice();
          out.push(sl);
          len += v.length;
        }
        return concatBytes(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    var validatorFns = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || isBytes2(val),
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject(object, validators, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== "function")
          throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
      };
      for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object;
    }
  }
});

// node_modules/@noble/curves/abstract/modular.js
var require_modular = __commonJS({
  "node_modules/@noble/curves/abstract/modular.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNegativeLE = void 0;
    exports.mod = mod;
    exports.pow = pow;
    exports.pow2 = pow2;
    exports.invert = invert;
    exports.tonelliShanks = tonelliShanks;
    exports.FpSqrt = FpSqrt;
    exports.validateField = validateField;
    exports.FpPow = FpPow;
    exports.FpInvertBatch = FpInvertBatch;
    exports.FpDiv = FpDiv;
    exports.FpIsSquare = FpIsSquare;
    exports.nLength = nLength;
    exports.Field = Field;
    exports.FpSqrtOdd = FpSqrtOdd;
    exports.FpSqrtEven = FpSqrtEven;
    exports.hashToPrivateScalar = hashToPrivateScalar;
    exports.getFieldBytesLength = getFieldBytesLength;
    exports.getMinHashLength = getMinHashLength;
    exports.mapHashToField = mapHashToField;
    var utils_js_1 = require_utils2();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    var _5n = BigInt(5);
    var _8n = BigInt(8);
    var _9n = BigInt(9);
    var _16n = BigInt(16);
    function mod(a, b) {
      const result = a % b;
      return result >= _0n ? result : b + result;
    }
    function pow(num, power, modulo) {
      if (modulo <= _0n || power < _0n)
        throw new Error("Expected power/modulo > 0");
      if (modulo === _1n)
        return _0n;
      let res = _1n;
      while (power > _0n) {
        if (power & _1n)
          res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n;
      }
      return res;
    }
    function pow2(x, power, modulo) {
      let res = x;
      while (power-- > _0n) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    function invert(number, modulo) {
      if (number === _0n || modulo <= _0n) {
        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
      }
      let a = mod(number, modulo);
      let b = modulo;
      let x = _0n, y = _1n, u = _1n, v = _0n;
      while (a !== _0n) {
        const q = b / a;
        const r2 = b % a;
        const m = x - u * q;
        const n = y - v * q;
        b = a, a = r2, x = u, y = v, u = m, v = n;
      }
      const gcd = b;
      if (gcd !== _1n)
        throw new Error("invert: does not exist");
      return mod(x, modulo);
    }
    function tonelliShanks(P) {
      const legendreC = (P - _1n) / _2n;
      let Q, S, Z;
      for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)
        ;
      for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)
        ;
      if (S === 1) {
        const p1div4 = (P + _1n) / _4n;
        return function tonelliFast(Fp, n) {
          const root = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      const Q1div2 = (Q + _1n) / _2n;
      return function tonelliSlow(Fp, n) {
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
          throw new Error("Cannot find square root");
        let r2 = S;
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q);
        let x = Fp.pow(n, Q1div2);
        let b = Fp.pow(n, Q);
        while (!Fp.eql(b, Fp.ONE)) {
          if (Fp.eql(b, Fp.ZERO))
            return Fp.ZERO;
          let m = 1;
          for (let t2 = Fp.sqr(b); m < r2; m++) {
            if (Fp.eql(t2, Fp.ONE))
              break;
            t2 = Fp.sqr(t2);
          }
          const ge = Fp.pow(g, _1n << BigInt(r2 - m - 1));
          g = Fp.sqr(ge);
          x = Fp.mul(x, ge);
          b = Fp.mul(b, g);
          r2 = m;
        }
        return x;
      };
    }
    function FpSqrt(P) {
      if (P % _4n === _3n) {
        const p1div4 = (P + _1n) / _4n;
        return function sqrt3mod4(Fp, n) {
          const root = Fp.pow(n, p1div4);
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _8n === _5n) {
        const c1 = (P - _5n) / _8n;
        return function sqrt5mod8(Fp, n) {
          const n2 = Fp.mul(n, _2n);
          const v = Fp.pow(n2, c1);
          const nv = Fp.mul(n, v);
          const i = Fp.mul(Fp.mul(nv, _2n), v);
          const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
          if (!Fp.eql(Fp.sqr(root), n))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _16n === _9n) {
      }
      return tonelliShanks(P);
    }
    var isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;
    exports.isNegativeLE = isNegativeLE;
    var FIELD_FIELDS = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return (0, utils_js_1.validateObject)(field, opts);
    }
    function FpPow(f, num, power) {
      if (power < _0n)
        throw new Error("Expected power > 0");
      if (power === _0n)
        return f.ONE;
      if (power === _1n)
        return num;
      let p = f.ONE;
      let d = num;
      while (power > _0n) {
        if (power & _1n)
          p = f.mul(p, d);
        d = f.sqr(d);
        power >>= _1n;
      }
      return p;
    }
    function FpInvertBatch(f, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
      }, f.ONE);
      const inverted = f.inv(lastMultiplied);
      nums.reduceRight((acc, num, i) => {
        if (f.is0(num))
          return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
      }, inverted);
      return tmp;
    }
    function FpDiv(f, lhs, rhs) {
      return f.mul(lhs, typeof rhs === "bigint" ? invert(rhs, f.ORDER) : f.inv(rhs));
    }
    function FpIsSquare(f) {
      const legendreConst = (f.ORDER - _1n) / _2n;
      return (x) => {
        const p = f.pow(x, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
      };
    }
    function nLength(n, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    function Field(ORDER, bitLen, isLE = false, redef = {}) {
      if (ORDER <= _0n)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
      if (BYTES > 2048)
        throw new Error("Field lengths over 2048 bytes are not supported");
      const sqrtP = FpSqrt(ORDER);
      const f = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n,
        ONE: _1n,
        create: (num) => mod(num, ORDER),
        isValid: (num) => {
          if (typeof num !== "bigint")
            throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
          return _0n <= num && num < ORDER;
        },
        is0: (num) => num === _0n,
        isOdd: (num) => (num & _1n) === _1n,
        neg: (num) => mod(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod(num * num, ORDER),
        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f, num, power),
        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
        invertBatch: (lst) => FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c) => c ? b : a,
        toBytes: (num) => isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes) => {
          if (bytes.length !== BYTES)
            throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
          return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);
        }
      });
      return Object.freeze(f);
    }
    function FpSqrtOdd(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp.sqrt(elm);
      return Fp.isOdd(root) ? root : Fp.neg(root);
    }
    function FpSqrtEven(Fp, elm) {
      if (!Fp.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp.sqrt(elm);
      return Fp.isOdd(root) ? Fp.neg(root) : root;
    }
    function hashToPrivateScalar(hash, groupOrder, isLE = false) {
      hash = (0, utils_js_1.ensureBytes)("privateHash", hash);
      const hashLen = hash.length;
      const minLen = nLength(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
      const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);
      return mod(num, groupOrder - _1n) + _1n;
    }
    function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    function mapHashToField(key, fieldOrder, isLE = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
      const reduced = mod(num, fieldOrder - _1n) + _1n;
      return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
    }
  }
});

// node_modules/@noble/curves/abstract/curve.js
var require_curve = __commonJS({
  "node_modules/@noble/curves/abstract/curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wNAF = wNAF;
    exports.validateBasic = validateBasic;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils2();
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    function wNAF(c, bits) {
      const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
      };
      const opts = (W) => {
        const windows = Math.ceil(bits / W) + 1;
        const windowSize = 2 ** (W - 1);
        return { windows, windowSize };
      };
      return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n) {
          let p = c.ZERO;
          let d = elm;
          while (n > _0n) {
            if (n & _1n)
              p = p.add(d);
            d = d.double();
            n >>= _1n;
          }
          return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
          const { windows, windowSize } = opts(W);
          const points = [];
          let p = elm;
          let base = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base = p;
            points.push(base);
            for (let i = 1; i < windowSize; i++) {
              base = base.add(p);
              points.push(base);
            }
            p = base.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n) {
          const { windows, windowSize } = opts(W);
          let p = c.ZERO;
          let f = c.BASE;
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n += _1n;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f = f.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p, f };
        },
        wNAFCached(P, precomputesMap, n, transform) {
          const W = P._WINDOW_SIZE || 1;
          let comp = precomputesMap.get(P);
          if (!comp) {
            comp = this.precomputeWindow(P, W);
            if (W !== 1) {
              precomputesMap.set(P, transform(comp));
            }
          }
          return this.wNAF(W, comp, n);
        }
      };
    }
    function validateBasic(curve) {
      (0, modular_js_1.validateField)(curve.Fp);
      (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
  }
});

// node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass = __commonJS({
  "node_modules/@noble/curves/abstract/weierstrass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DER = void 0;
    exports.weierstrassPoints = weierstrassPoints;
    exports.weierstrass = weierstrass;
    exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
    exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
    var curve_js_1 = require_curve();
    var mod = require_modular();
    var ut = require_utils2();
    var utils_js_1 = require_utils2();
    function validatePointOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp, a } = opts;
      if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    var { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    exports.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data) {
        const { Err: E } = exports.DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len)
          throw new E("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E("Invalid signature integer: unnecessary leading zero");
        return { d: b2n(res), l: data.subarray(len + 2) };
      },
      toSig(hex) {
        const { Err: E } = exports.DER;
        const data = typeof hex === "string" ? h2b(hex) : hex;
        ut.abytes(data);
        let l = data.length;
        if (l < 2 || data[0] != 48)
          throw new E("Invalid signature tag");
        if (data[1] !== l - 2)
          throw new E("Invalid signature: incorrect length");
        const { d: r2, l: sBytes } = exports.DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E("Invalid signature: left bytes after parsing");
        return { r: r2, s };
      },
      hexFromSig(sig) {
        const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
        const h = (num) => {
          const hex = num.toString(16);
          return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r2 = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r2.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r2}02${sl}${s}`;
      }
    };
    var _0n = BigInt(0);
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var _3n = BigInt(3);
    var _4n = BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp } = CURVE;
      const toBytes = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp.toBytes(a.x), Fp.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes) => {
        const tail = bytes.subarray(1);
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b } = CURVE;
        const x2 = Fp.sqr(x);
        const x3 = Fp.mul(x2, x);
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b);
      }
      if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n < num && num < CURVE.n;
      }
      function assertGE(num) {
        if (!isWithinCurveOrder(num))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (ut.isBytes(key))
            key = ut.bytesToHex(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("Invalid key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key === "bigint" ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
          num = mod.mod(num, n);
        assertGE(num);
        return num;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point))
          throw new Error("ProjectivePoint expected");
      }
      class Point {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp.eql(i, Fp.ZERO);
          if (is0(x) && is0(y))
            return Point.ZERO;
          return new Point(x, y, Fp.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x, y } = this.toAffine();
          if (!Fp.isValid(x) || !Fp.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp.sqr(y);
          const right = weierstrassEquation(x);
          if (!Fp.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp.isOdd)
            return !Fp.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
          const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp.mul(b, _3n);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          let t0 = Fp.mul(X1, X1);
          let t1 = Fp.mul(Y1, Y1);
          let t2 = Fp.mul(Z1, Z1);
          let t3 = Fp.mul(X1, Y1);
          t3 = Fp.add(t3, t3);
          Z3 = Fp.mul(X1, Z1);
          Z3 = Fp.add(Z3, Z3);
          X3 = Fp.mul(a, Z3);
          Y3 = Fp.mul(b3, t2);
          Y3 = Fp.add(X3, Y3);
          X3 = Fp.sub(t1, Y3);
          Y3 = Fp.add(t1, Y3);
          Y3 = Fp.mul(X3, Y3);
          X3 = Fp.mul(t3, X3);
          Z3 = Fp.mul(b3, Z3);
          t2 = Fp.mul(a, t2);
          t3 = Fp.sub(t0, t2);
          t3 = Fp.mul(a, t3);
          t3 = Fp.add(t3, Z3);
          Z3 = Fp.add(t0, t0);
          t0 = Fp.add(Z3, t0);
          t0 = Fp.add(t0, t2);
          t0 = Fp.mul(t0, t3);
          Y3 = Fp.add(Y3, t0);
          t2 = Fp.mul(Y1, Z1);
          t2 = Fp.add(t2, t2);
          t0 = Fp.mul(t2, t3);
          X3 = Fp.sub(X3, t0);
          Z3 = Fp.mul(t2, t1);
          Z3 = Fp.add(Z3, Z3);
          Z3 = Fp.add(Z3, Z3);
          return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO;
          const a = CURVE.a;
          const b3 = Fp.mul(CURVE.b, _3n);
          let t0 = Fp.mul(X1, X2);
          let t1 = Fp.mul(Y1, Y2);
          let t2 = Fp.mul(Z1, Z2);
          let t3 = Fp.add(X1, Y1);
          let t4 = Fp.add(X2, Y2);
          t3 = Fp.mul(t3, t4);
          t4 = Fp.add(t0, t1);
          t3 = Fp.sub(t3, t4);
          t4 = Fp.add(X1, Z1);
          let t5 = Fp.add(X2, Z2);
          t4 = Fp.mul(t4, t5);
          t5 = Fp.add(t0, t2);
          t4 = Fp.sub(t4, t5);
          t5 = Fp.add(Y1, Z1);
          X3 = Fp.add(Y2, Z2);
          t5 = Fp.mul(t5, X3);
          X3 = Fp.add(t1, t2);
          t5 = Fp.sub(t5, X3);
          Z3 = Fp.mul(a, t4);
          X3 = Fp.mul(b3, t2);
          Z3 = Fp.add(X3, Z3);
          X3 = Fp.sub(t1, Z3);
          Z3 = Fp.add(t1, Z3);
          Y3 = Fp.mul(X3, Z3);
          t1 = Fp.add(t0, t0);
          t1 = Fp.add(t1, t0);
          t2 = Fp.mul(a, t2);
          t4 = Fp.mul(b3, t4);
          t1 = Fp.add(t1, t2);
          t2 = Fp.sub(t0, t2);
          t2 = Fp.mul(a, t2);
          t4 = Fp.add(t4, t2);
          t0 = Fp.mul(t1, t4);
          Y3 = Fp.add(Y3, t0);
          t0 = Fp.mul(t5, t4);
          X3 = Fp.mul(t3, X3);
          X3 = Fp.sub(X3, t0);
          t0 = Fp.mul(t3, t1);
          Z3 = Fp.mul(t5, Z3);
          Z3 = Fp.add(Z3, t0);
          return new Point(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point.ZERO);
        }
        wNAF(n) {
          return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
            const toInv = Fp.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n) {
          const I = Point.ZERO;
          if (n === _0n)
            return I;
          assertGE(n);
          if (n === _1n)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n || k2 > _0n) {
            if (k1 & _1n)
              k1p = k1p.add(d);
            if (k2 & _1n)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n;
            k2 >>= _1n;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f } = this.wNAF(n);
            point = p;
            fake = f;
          }
          return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b) {
          const G = Point.BASE;
          const mul = (P, a2) => a2 === _0n || a2 === _1n || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x, py: y, pz: z } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp.ONE : Fp.inv(z);
          const ax = Fp.mul(x, iz);
          const ay = Fp.mul(y, iz);
          const zz = Fp.mul(z, iz);
          if (is0)
            return { x: Fp.ZERO, y: Fp.ZERO };
          if (!Fp.eql(zz, Fp.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n)
            return this;
          if (clearCofactor)
            return clearCofactor(Point, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
      Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    function validateOpts(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp.BYTES + 1;
      const uncompressedLen = 2 * Fp.BYTES + 1;
      function isValidFieldElement(num) {
        return _0n < num && num < Fp.ORDER;
      }
      function modN(a) {
        return mod.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp.toBytes(a.x);
          const cat = ut.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp.toBytes(a.y));
          }
        },
        fromBytes(bytes) {
          const len = bytes.length;
          const head = bytes[0];
          const tail = bytes.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!isValidFieldElement(x))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y;
            try {
              y = Fp.sqrt(y2);
            } catch (sqrtError) {
              const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
              throw new Error("Point is not on curve" + suffix);
            }
            const isYOdd = (y & _1n) === _1n;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> _1n;
        return number > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
      }
      const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));
      class Signature {
        constructor(r2, s, recovery) {
          this.r = r2;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r: r2, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
          return new Signature(r2, s);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r: r2, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r2 + CURVE.n : r2;
          if (radj >= Fp.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R = Point.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN(-h * ir);
          const u2 = modN(s * ir);
          const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod.getMinHashLength(CURVE.n);
          return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = ut.isBytes(item);
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes) {
        const num = ut.bytesToNumberBE(bytes);
        const delta = bytes.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
        return modN(bits2int(bytes));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        if (typeof num !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n <= num && num < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash, randomBytes } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null && ent !== false) {
          const e = ent === true ? randomBytes(Fp.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point.BASE.multiply(k).toAffine();
          const r2 = modN(q.x);
          if (r2 === _0n)
            return;
          const s = modN(ik * modN(m + r2 * d));
          if (s === _0n)
            return;
          let recovery = (q.x === r2 ? 0 : 2) | Number(q.y & _1n);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r2, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point.BASE._setWindowSize(8);
      function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        var _a;
        const sg = signature;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_1.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P;
        try {
          if (typeof sg === "string" || ut.isBytes(sg)) {
            try {
              _sig = Signature.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports.DER.Err))
                throw derError;
              _sig = Signature.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r3, s: s2 } = sg;
            _sig = new Signature(r3, s2);
          } else {
            throw new Error("PARSE");
          }
          P = Point.fromHex(publicKey);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r: r2, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN(h * is);
        const u2 = modN(r2 * is);
        const R = (_a = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a.toAffine();
        if (!R)
          return false;
        const v = modN(R.x);
        return v === r2;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point,
        Signature,
        utils
      };
    }
    function SWUFpSqrtRatio(Fp, Z) {
      const q = Fp.ORDER;
      let l = _0n;
      for (let o = q - _1n; o % _2n === _0n; o /= _2n)
        l += _1n;
      const c1 = l;
      const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
      const c2 = (q - _1n) / _2n_pow_c1;
      const c3 = (c2 - _1n) / _2n;
      const c4 = _2n_pow_c1 - _1n;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp.pow(Z, c2);
      const c7 = Fp.pow(Z, (c2 + _1n) / _2n);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp.pow(v, c4);
        let tv3 = Fp.sqr(tv2);
        tv3 = Fp.mul(tv3, v);
        let tv5 = Fp.mul(u, tv3);
        tv5 = Fp.pow(tv5, c3);
        tv5 = Fp.mul(tv5, tv2);
        tv2 = Fp.mul(tv5, v);
        tv3 = Fp.mul(tv5, u);
        let tv4 = Fp.mul(tv3, tv2);
        tv5 = Fp.pow(tv4, c5);
        let isQR = Fp.eql(tv5, Fp.ONE);
        tv2 = Fp.mul(tv3, c7);
        tv5 = Fp.mul(tv4, tv1);
        tv3 = Fp.cmov(tv2, tv3, isQR);
        tv4 = Fp.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n; i--) {
          let tv52 = i - _2n;
          tv52 = _2n << tv52 - _1n;
          let tvv5 = Fp.pow(tv4, tv52);
          const e1 = Fp.eql(tvv5, Fp.ONE);
          tv2 = Fp.mul(tv3, tv1);
          tv1 = Fp.mul(tv1, tv1);
          tvv5 = Fp.mul(tv4, tv1);
          tv3 = Fp.cmov(tv2, tv3, e1);
          tv4 = Fp.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp.ORDER % _4n === _3n) {
        const c12 = (Fp.ORDER - _3n) / _4n;
        const c22 = Fp.sqrt(Fp.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp.sqr(v);
          const tv2 = Fp.mul(u, v);
          tv1 = Fp.mul(tv1, tv2);
          let y1 = Fp.pow(tv1, c12);
          y1 = Fp.mul(y1, tv2);
          const y2 = Fp.mul(y1, c22);
          const tv3 = Fp.mul(Fp.sqr(y1), v);
          const isQR = Fp.eql(tv3, u);
          let y = Fp.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    function mapToCurveSimpleSWU(Fp, opts) {
      mod.validateField(Fp);
      if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
      if (!Fp.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u);
        tv1 = Fp.mul(tv1, opts.Z);
        tv2 = Fp.sqr(tv1);
        tv2 = Fp.add(tv2, tv1);
        tv3 = Fp.add(tv2, Fp.ONE);
        tv3 = Fp.mul(tv3, opts.B);
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO));
        tv4 = Fp.mul(tv4, opts.A);
        tv2 = Fp.sqr(tv3);
        tv6 = Fp.sqr(tv4);
        tv5 = Fp.mul(tv6, opts.A);
        tv2 = Fp.add(tv2, tv5);
        tv2 = Fp.mul(tv2, tv3);
        tv6 = Fp.mul(tv6, tv4);
        tv5 = Fp.mul(tv6, opts.B);
        tv2 = Fp.add(tv2, tv5);
        x = Fp.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp.mul(tv1, u);
        y = Fp.mul(y, value);
        x = Fp.cmov(x, tv3, isValid);
        y = Fp.cmov(y, value, isValid);
        const e1 = Fp.isOdd(u) === Fp.isOdd(y);
        y = Fp.cmov(Fp.neg(y), y, e1);
        x = Fp.div(x, tv4);
        return { x, y };
      };
    }
  }
});

// node_modules/@noble/curves/_shortw_utils.js
var require_shortw_utils = __commonJS({
  "node_modules/@noble/curves/_shortw_utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHash = getHash;
    exports.createCurve = createCurve;
    var hmac_1 = require_hmac();
    var utils_1 = require_utils();
    var weierstrass_js_1 = require_weierstrass();
    function getHash(hash) {
      return {
        hash,
        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes
      };
    }
    function createCurve(curveDef, defHash) {
      const create = (hash) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash) });
      return Object.freeze({ ...create(defHash), create });
    }
  }
});

// node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve = __commonJS({
  "node_modules/@noble/curves/abstract/hash-to-curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expand_message_xmd = expand_message_xmd;
    exports.expand_message_xof = expand_message_xof;
    exports.hash_to_field = hash_to_field;
    exports.isogenyMap = isogenyMap;
    exports.createHasher = createHasher;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils2();
    var os2ip = utils_js_1.bytesToNumberBE;
    function i2osp(value, length) {
      if (value < 0 || value >= 1 << 8 * length) {
        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
      }
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor(a, b) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b[i];
      }
      return arr;
    }
    function anum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd(msg, DST, lenInBytes, H) {
      (0, utils_js_1.abytes)(msg);
      (0, utils_js_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255)
        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (ell > 255)
        throw new Error("Invalid xmd length");
      const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
      const Z_pad = i2osp(0, r_in_bytes);
      const l_i_b_str = i2osp(lenInBytes, 2);
      const b = new Array(ell);
      const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
      b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];
        b[i] = H((0, utils_js_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    function expand_message_xof(msg, DST, lenInBytes, k, H) {
      (0, utils_js_1.abytes)(msg);
      (0, utils_js_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
    }
    function hash_to_field(msg, count, options) {
      (0, utils_js_1.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k, m, hash, expand, DST: _DST } = options;
      (0, utils_js_1.abytes)(msg);
      anum(count);
      const DST = typeof _DST === "string" ? (0, utils_js_1.utf8ToBytes)(_DST) : _DST;
      const log2p = p.toString(2).length;
      const L = Math.ceil((log2p + k) / 8);
      const len_in_bytes = count * m * L;
      let prb;
      if (expand === "xmd") {
        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);
      } else if (expand === "xof") {
        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);
      } else if (expand === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count);
      for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
          const elm_offset = L * (j + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L);
          e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    function isogenyMap(field, map) {
      const COEFF = map.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen);
        y = field.mul(y, field.div(yNum, yDen));
        return { x, y };
      };
    }
    function createHasher(Point, mapToCurve, def) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
          const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
          const u0 = Point.fromAffine(mapToCurve(u[0]));
          const u1 = Point.fromAffine(mapToCurve(u[1]));
          const P = u0.add(u1).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
          const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
          const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Same as encodeToCurve, but without hash
        mapToCurve(scalars) {
          if (!Array.isArray(scalars))
            throw new Error("mapToCurve: expected array of bigints");
          for (const i of scalars)
            if (typeof i !== "bigint")
              throw new Error(`mapToCurve: expected array of bigints, got ${i} in array`);
          const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();
          P.assertValidity();
          return P;
        }
      };
    }
  }
});

// node_modules/@noble/curves/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/@noble/curves/secp256k1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
    var sha256_1 = require_sha256();
    var utils_1 = require_utils();
    var _shortw_utils_js_1 = require_shortw_utils();
    var hash_to_curve_js_1 = require_hash_to_curve();
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils2();
    var weierstrass_js_1 = require_weierstrass();
    var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var _1n = BigInt(1);
    var _2n = BigInt(2);
    var divNearest = (a, b) => (a + b / _2n) / b;
    function sqrtMod(y) {
      const P = secp256k1P;
      const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P;
      const b3 = b2 * b2 * y % P;
      const b6 = (0, modular_js_1.pow2)(b3, _3n, P) * b3 % P;
      const b9 = (0, modular_js_1.pow2)(b6, _3n, P) * b3 % P;
      const b11 = (0, modular_js_1.pow2)(b9, _2n, P) * b2 % P;
      const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;
      const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;
      const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;
      const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;
      const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;
      const b223 = (0, modular_js_1.pow2)(b220, _3n, P) * b3 % P;
      const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;
      const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;
      const root = (0, modular_js_1.pow2)(t2, _2n, P);
      if (!Fp.eql(Fp.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    var Fp = (0, modular_js_1.Field)(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      // equation params: a, b
      b: BigInt(7),
      // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
      Fp,
      // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
      n: secp256k1N,
      // Curve order, total count of valid points in the field
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      // Cofactor
      lowS: true,
      // Allow only low-S signatures by default in sign() and verify()
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k, n);
          const c2 = divNearest(-b1 * k, n);
          let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);
          let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n - k1;
          if (k2neg)
            k2 = n - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    var _0n = BigInt(0);
    var fe = (x) => typeof x === "bigint" && _0n < x && x < secp256k1P;
    var ge = (x) => typeof x === "bigint" && _0n < x && x < secp256k1N;
    var TAGGED_HASH_PREFIXES = {};
    function taggedHash(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
    }
    var pointToBytes = (point) => point.toRawBytes(true).slice(1);
    var numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);
    var modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);
    var modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);
    var Point = exports.secp256k1.ProjectivePoint;
    var GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);
    function schnorrGetExtPubKey(priv) {
      let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN(-d_);
      return { scalar, bytes: pointToBytes(p) };
    }
    function lift_x(x) {
      if (!fe(x))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP(x * x);
      const c = modP(xx * x + BigInt(7));
      let y = sqrtMod(c);
      if (y % _2n !== _0n)
        y = modP(-y);
      const p = new Point(x, y, _1n);
      p.assertValidity();
      return p;
    }
    function challenge(...args) {
      return modN((0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey(privateKey) {
      return schnorrGetExtPubKey(privateKey).bytes;
    }
    function schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
      const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash("BIP0340/aux", a)));
      const rand = taggedHash("BIP0340/nonce", t, px, m);
      const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand));
      if (k_ === _0n)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
      const e = challenge(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b(modN(k + e * d)), 32);
      if (!schnorrVerify(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify(signature, message, publicKey) {
      const sig = (0, utils_js_1.ensureBytes)("signature", signature, 64);
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey, 32);
      try {
        const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub));
        const r2 = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32));
        if (!fe(r2))
          return false;
        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64));
        if (!ge(s))
          return false;
        const e = challenge(numTo32b(r2), pointToBytes(P), m);
        const R = GmulAdd(P, s, modN(-e));
        if (!R || !R.hasEvenY() || R.toAffine().x !== r2)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    exports.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey,
      sign: schnorrSign,
      verify: schnorrVerify,
      utils: {
        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
        lift_x,
        pointToBytes,
        numberToBytesBE: utils_js_1.numberToBytesBE,
        bytesToNumberBE: utils_js_1.bytesToNumberBE,
        taggedHash,
        mod: modular_js_1.mod
      }
    }))();
    var isoMap = (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j) => BigInt(j)))))();
    var mapSWU = (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp.create(BigInt("-11"))
    }))();
    var htf = (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU(Fp.create(scalars[0]));
      return isoMap(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports.hashToCurve = (() => htf.hashToCurve)();
    exports.encodeToCurve = (() => htf.encodeToCurve)();
  }
});

// node_modules/@babel/runtime/helpers/isNativeFunction.js
var require_isNativeFunction = __commonJS({
  "node_modules/@babel/runtime/helpers/isNativeFunction.js"(exports, module) {
    function _isNativeFunction(t) {
      try {
        return -1 !== Function.toString.call(t).indexOf("[native code]");
      } catch (n) {
        return "function" == typeof t;
      }
    }
    module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js
var require_isNativeReflectConstruct = __commonJS({
  "node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js"(exports, module) {
    function _isNativeReflectConstruct() {
      try {
        var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
      } catch (t2) {
      }
      return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct2() {
        return !!t;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
    }
    module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/construct.js
var require_construct = __commonJS({
  "node_modules/@babel/runtime/helpers/construct.js"(exports, module) {
    var isNativeReflectConstruct = require_isNativeReflectConstruct();
    var setPrototypeOf = require_setPrototypeOf();
    function _construct(t, e, r2) {
      if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
      var o = [null];
      o.push.apply(o, e);
      var p = new (t.bind.apply(t, o))();
      return r2 && setPrototypeOf(p, r2.prototype), p;
    }
    module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/wrapNativeSuper.js
var require_wrapNativeSuper = __commonJS({
  "node_modules/@babel/runtime/helpers/wrapNativeSuper.js"(exports, module) {
    var getPrototypeOf = require_getPrototypeOf();
    var setPrototypeOf = require_setPrototypeOf();
    var isNativeFunction = require_isNativeFunction();
    var construct = require_construct();
    function _wrapNativeSuper(t) {
      var r2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
      return module.exports = _wrapNativeSuper = function _wrapNativeSuper2(t2) {
        if (null === t2 || !isNativeFunction(t2)) return t2;
        if ("function" != typeof t2) throw new TypeError("Super expression must either be null or a function");
        if (void 0 !== r2) {
          if (r2.has(t2)) return r2.get(t2);
          r2.set(t2, Wrapper);
        }
        function Wrapper() {
          return construct(t2, arguments, getPrototypeOf(this).constructor);
        }
        return Wrapper.prototype = Object.create(t2.prototype, {
          constructor: {
            value: Wrapper,
            enumerable: false,
            writable: true,
            configurable: true
          }
        }), setPrototypeOf(Wrapper, t2);
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _wrapNativeSuper(t);
    }
    module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/superPropBase.js
var require_superPropBase = __commonJS({
  "node_modules/@babel/runtime/helpers/superPropBase.js"(exports, module) {
    var getPrototypeOf = require_getPrototypeOf();
    function _superPropBase(t, o) {
      for (; !{}.hasOwnProperty.call(t, o) && null !== (t = getPrototypeOf(t)); ) ;
      return t;
    }
    module.exports = _superPropBase, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/get.js
var require_get = __commonJS({
  "node_modules/@babel/runtime/helpers/get.js"(exports, module) {
    var superPropBase = require_superPropBase();
    function _get() {
      return module.exports = _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e, t, r2) {
        var p = superPropBase(e, t);
        if (p) {
          var n = Object.getOwnPropertyDescriptor(p, t);
          return n.get ? n.get.call(arguments.length < 3 ? e : r2) : n.value;
        }
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _get.apply(null, arguments);
    }
    module.exports = _get, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/arrayWithHoles.js
var require_arrayWithHoles = __commonJS({
  "node_modules/@babel/runtime/helpers/arrayWithHoles.js"(exports, module) {
    function _arrayWithHoles(r2) {
      if (Array.isArray(r2)) return r2;
    }
    module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/iterableToArrayLimit.js
var require_iterableToArrayLimit = __commonJS({
  "node_modules/@babel/runtime/helpers/iterableToArrayLimit.js"(exports, module) {
    function _iterableToArrayLimit(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
          if (i = (t = t.call(r2)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = false;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
        } catch (r3) {
          o = true, n = r3;
        } finally {
          try {
            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/nonIterableRest.js
var require_nonIterableRest = __commonJS({
  "node_modules/@babel/runtime/helpers/nonIterableRest.js"(exports, module) {
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/slicedToArray.js
var require_slicedToArray = __commonJS({
  "node_modules/@babel/runtime/helpers/slicedToArray.js"(exports, module) {
    var arrayWithHoles = require_arrayWithHoles();
    var iterableToArrayLimit = require_iterableToArrayLimit();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableRest = require_nonIterableRest();
    function _slicedToArray(r2, e) {
      return arrayWithHoles(r2) || iterableToArrayLimit(r2, e) || unsupportedIterableToArray(r2, e) || nonIterableRest();
    }
    module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@noble/hashes/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/@noble/hashes/ripemd160.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ripemd160 = exports.RIPEMD160 = void 0;
    var _md_js_1 = require_md();
    var utils_js_1 = require_utils();
    var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
    var Id = new Uint8Array(new Array(16).fill(0).map((_, i) => i));
    var Pi = Id.map((i) => (9 * i + 5) % 16);
    var idxL = [Id];
    var idxR = [Pi];
    for (let i = 0; i < 4; i++)
      for (let j of [idxL, idxR])
        j.push(j[i].map((k) => Rho[k]));
    var shifts = [
      [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
      [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
      [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
      [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
      [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
    ].map((i) => new Uint8Array(i));
    var shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
    var shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
    var Kl = new Uint32Array([
      0,
      1518500249,
      1859775393,
      2400959708,
      2840853838
    ]);
    var Kr = new Uint32Array([
      1352829926,
      1548603684,
      1836072691,
      2053994217,
      0
    ]);
    function f(group, x, y, z) {
      if (group === 0)
        return x ^ y ^ z;
      else if (group === 1)
        return x & y | ~x & z;
      else if (group === 2)
        return (x | ~y) ^ z;
      else if (group === 3)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    var R_BUF = new Uint32Array(16);
    var RIPEMD160 = class extends _md_js_1.HashMD {
      constructor() {
        super(64, 20, 8, true);
        this.h0 = 1732584193 | 0;
        this.h1 = 4023233417 | 0;
        this.h2 = 2562383102 | 0;
        this.h3 = 271733878 | 0;
        this.h4 = 3285377520 | 0;
      }
      get() {
        const { h0, h1, h2, h3, h4 } = this;
        return [h0, h1, h2, h3, h4];
      }
      set(h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          R_BUF[i] = view.getUint32(offset, true);
        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
        for (let group = 0; group < 5; group++) {
          const rGroup = 4 - group;
          const hbl = Kl[group], hbr = Kr[group];
          const rl = idxL[group], rr = idxR[group];
          const sl = shiftsL[group], sr = shiftsR[group];
          for (let i = 0; i < 16; i++) {
            const tl = (0, utils_js_1.rotl)(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el | 0;
            al = el, el = dl, dl = (0, utils_js_1.rotl)(cl, 10) | 0, cl = bl, bl = tl;
          }
          for (let i = 0; i < 16; i++) {
            const tr = (0, utils_js_1.rotl)(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er | 0;
            ar = er, er = dr, dr = (0, utils_js_1.rotl)(cr, 10) | 0, cr = br, br = tr;
          }
        }
        this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
      }
      roundClean() {
        R_BUF.fill(0);
      }
      destroy() {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
      }
    };
    exports.RIPEMD160 = RIPEMD160;
    exports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
  }
});

// node_modules/aes-js/lib.commonjs/aes.js
var require_aes = __commonJS({
  "node_modules/aes-js/lib.commonjs/aes.js"(exports) {
    "use strict";
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _AES_key;
    var _AES_Kd;
    var _AES_Ke;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AES = void 0;
    var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
    var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
    var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
    var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
    var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
    var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
    var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
    var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
    var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
    var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
    var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
    var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
    var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
    var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
    var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
    var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
    function convertToInt32(bytes) {
      const result = [];
      for (let i = 0; i < bytes.length; i += 4) {
        result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);
      }
      return result;
    }
    var AES = class _AES {
      get key() {
        return __classPrivateFieldGet(this, _AES_key, "f").slice();
      }
      constructor(key) {
        _AES_key.set(this, void 0);
        _AES_Kd.set(this, void 0);
        _AES_Ke.set(this, void 0);
        if (!(this instanceof _AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), "f");
        const rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
        }
        __classPrivateFieldSet(this, _AES_Ke, [], "f");
        __classPrivateFieldSet(this, _AES_Kd, [], "f");
        for (let i = 0; i <= rounds; i++) {
          __classPrivateFieldGet(this, _AES_Ke, "f").push([0, 0, 0, 0]);
          __classPrivateFieldGet(this, _AES_Kd, "f").push([0, 0, 0, 0]);
        }
        const roundKeyCount = (rounds + 1) * 4;
        const KC = this.key.length / 4;
        const tk = convertToInt32(this.key);
        let index;
        for (let i = 0; i < KC; i++) {
          index = i >> 2;
          __classPrivateFieldGet(this, _AES_Ke, "f")[index][i % 4] = tk[i];
          __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
        }
        let rconpointer = 0;
        let t = KC, tt;
        while (t < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (let i2 = 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          } else {
            for (let i2 = 1; i2 < KC / 2; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
            for (let i2 = KC / 2 + 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          }
          let i = 0, r2, c;
          while (i < KC && t < roundKeyCount) {
            r2 = t >> 2;
            c = t % 4;
            __classPrivateFieldGet(this, _AES_Ke, "f")[r2][c] = tk[i];
            __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - r2][c] = tk[i++];
            t++;
          }
        }
        for (let r2 = 1; r2 < rounds; r2++) {
          for (let c = 0; c < 4; c++) {
            tt = __classPrivateFieldGet(this, _AES_Kd, "f")[r2][c];
            __classPrivateFieldGet(this, _AES_Kd, "f")[r2][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      }
      encrypt(plaintext) {
        if (plaintext.length != 16) {
          throw new TypeError("invalid plaintext size (must be 16 bytes)");
        }
        const rounds = __classPrivateFieldGet(this, _AES_Ke, "f").length - 1;
        const a = [0, 0, 0, 0];
        let t = convertToInt32(plaintext);
        for (let i = 0; i < 4; i++) {
          t[i] ^= __classPrivateFieldGet(this, _AES_Ke, "f")[0][i];
        }
        for (let r2 = 1; r2 < rounds; r2++) {
          for (let i = 0; i < 4; i++) {
            a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ __classPrivateFieldGet(this, _AES_Ke, "f")[r2][i];
          }
          t = a.slice();
        }
        const result = new Uint8Array(16);
        let tt = 0;
        for (let i = 0; i < 4; i++) {
          tt = __classPrivateFieldGet(this, _AES_Ke, "f")[rounds][i];
          result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      }
      decrypt(ciphertext) {
        if (ciphertext.length != 16) {
          throw new TypeError("invalid ciphertext size (must be 16 bytes)");
        }
        const rounds = __classPrivateFieldGet(this, _AES_Kd, "f").length - 1;
        const a = [0, 0, 0, 0];
        let t = convertToInt32(ciphertext);
        for (let i = 0; i < 4; i++) {
          t[i] ^= __classPrivateFieldGet(this, _AES_Kd, "f")[0][i];
        }
        for (let r2 = 1; r2 < rounds; r2++) {
          for (let i = 0; i < 4; i++) {
            a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ __classPrivateFieldGet(this, _AES_Kd, "f")[r2][i];
          }
          t = a.slice();
        }
        const result = new Uint8Array(16);
        let tt = 0;
        for (let i = 0; i < 4; i++) {
          tt = __classPrivateFieldGet(this, _AES_Kd, "f")[rounds][i];
          result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      }
    };
    exports.AES = AES;
    _AES_key = /* @__PURE__ */ new WeakMap(), _AES_Kd = /* @__PURE__ */ new WeakMap(), _AES_Ke = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode.js
var require_mode = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModeOfOperation = void 0;
    var aes_js_1 = require_aes();
    var ModeOfOperation = class {
      constructor(name, key, cls) {
        if (cls && !(this instanceof cls)) {
          throw new Error(`${name} must be instantiated with "new"`);
        }
        Object.defineProperties(this, {
          aes: { enumerable: true, value: new aes_js_1.AES(key) },
          name: { enumerable: true, value: name }
        });
      }
    };
    exports.ModeOfOperation = ModeOfOperation;
  }
});

// node_modules/aes-js/lib.commonjs/mode-cbc.js
var require_mode_cbc = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-cbc.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CBC_iv;
    var _CBC_lastBlock;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CBC = void 0;
    var mode_js_1 = require_mode();
    var CBC = class _CBC extends mode_js_1.ModeOfOperation {
      constructor(key, iv) {
        super("ECC", key, _CBC);
        _CBC_iv.set(this, void 0);
        _CBC_lastBlock.set(this, void 0);
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, "f"));
      }
      encrypt(plaintext) {
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = new Uint8Array(plaintext.length);
        for (let i = 0; i < plaintext.length; i += 16) {
          for (let j = 0; j < 16; j++) {
            __classPrivateFieldGet(this, _CBC_lastBlock, "f")[j] ^= plaintext[i + j];
          }
          __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, "f")), "f");
          ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, "f"), i);
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = new Uint8Array(ciphertext.length);
        for (let i = 0; i < ciphertext.length; i += 16) {
          const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
          for (let j = 0; j < 16; j++) {
            plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, "f")[j];
            __classPrivateFieldGet(this, _CBC_lastBlock, "f")[j] = ciphertext[i + j];
          }
        }
        return plaintext;
      }
    };
    exports.CBC = CBC;
    _CBC_iv = /* @__PURE__ */ new WeakMap(), _CBC_lastBlock = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-cfb.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CFB_instances;
    var _CFB_iv;
    var _CFB_shiftRegister;
    var _CFB_shift;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CFB = void 0;
    var mode_js_1 = require_mode();
    var CFB = class _CFB extends mode_js_1.ModeOfOperation {
      constructor(key, iv, segmentSize = 8) {
        super("CFB", key, _CFB);
        _CFB_instances.add(this);
        _CFB_iv.set(this, void 0);
        _CFB_shiftRegister.set(this, void 0);
        if (!Number.isInteger(segmentSize) || segmentSize % 8) {
          throw new TypeError("invalid segmentSize");
        }
        Object.defineProperties(this, {
          segmentSize: { enumerable: true, value: segmentSize }
        });
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet(this, _CFB_shiftRegister, this.iv, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet(this, _CFB_iv, "f"));
      }
      encrypt(plaintext) {
        if (8 * plaintext.length % this.segmentSize) {
          throw new TypeError("invalid plaintext size (must be multiple of segmentSize bytes)");
        }
        const segmentSize = this.segmentSize / 8;
        const ciphertext = new Uint8Array(plaintext);
        for (let i = 0; i < ciphertext.length; i += segmentSize) {
          const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, "f"));
          for (let j = 0; j < segmentSize; j++) {
            ciphertext[i + j] ^= xorSegment[j];
          }
          __classPrivateFieldGet(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (8 * ciphertext.length % this.segmentSize) {
          throw new TypeError("invalid ciphertext size (must be multiple of segmentSize bytes)");
        }
        const segmentSize = this.segmentSize / 8;
        const plaintext = new Uint8Array(ciphertext);
        for (let i = 0; i < plaintext.length; i += segmentSize) {
          const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, "f"));
          for (let j = 0; j < segmentSize; j++) {
            plaintext[i + j] ^= xorSegment[j];
          }
          __classPrivateFieldGet(this, _CFB_instances, "m", _CFB_shift).call(this, ciphertext.subarray(i));
        }
        return plaintext;
      }
    };
    exports.CFB = CFB;
    _CFB_iv = /* @__PURE__ */ new WeakMap(), _CFB_shiftRegister = /* @__PURE__ */ new WeakMap(), _CFB_instances = /* @__PURE__ */ new WeakSet(), _CFB_shift = function _CFB_shift2(data) {
      const segmentSize = this.segmentSize / 8;
      __classPrivateFieldGet(this, _CFB_shiftRegister, "f").set(__classPrivateFieldGet(this, _CFB_shiftRegister, "f").subarray(segmentSize));
      __classPrivateFieldGet(this, _CFB_shiftRegister, "f").set(data.subarray(0, segmentSize), 16 - segmentSize);
    };
  }
});

// node_modules/aes-js/lib.commonjs/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ctr.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _CTR_remaining;
    var _CTR_remainingIndex;
    var _CTR_counter;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CTR = void 0;
    var mode_js_1 = require_mode();
    var CTR = class _CTR extends mode_js_1.ModeOfOperation {
      constructor(key, initialValue) {
        super("CTR", key, _CTR);
        _CTR_remaining.set(this, void 0);
        _CTR_remainingIndex.set(this, void 0);
        _CTR_counter.set(this, void 0);
        __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), "f");
        __classPrivateFieldGet(this, _CTR_counter, "f").fill(0);
        __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, "f"), "f");
        __classPrivateFieldSet(this, _CTR_remainingIndex, 16, "f");
        if (initialValue == null) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this.setCounterValue(initialValue);
        } else {
          this.setCounterBytes(initialValue);
        }
      }
      get counter() {
        return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, "f"));
      }
      setCounterValue(value) {
        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
          throw new TypeError("invalid counter initial integer value");
        }
        for (let index = 15; index >= 0; --index) {
          __classPrivateFieldGet(this, _CTR_counter, "f")[index] = value % 256;
          value = Math.floor(value / 256);
        }
      }
      setCounterBytes(value) {
        if (value.length !== 16) {
          throw new TypeError("invalid counter initial Uint8Array value length");
        }
        __classPrivateFieldGet(this, _CTR_counter, "f").set(value);
      }
      increment() {
        for (let i = 15; i >= 0; i--) {
          if (__classPrivateFieldGet(this, _CTR_counter, "f")[i] === 255) {
            __classPrivateFieldGet(this, _CTR_counter, "f")[i] = 0;
          } else {
            __classPrivateFieldGet(this, _CTR_counter, "f")[i]++;
            break;
          }
        }
      }
      encrypt(plaintext) {
        var _a, _b;
        const crypttext = new Uint8Array(plaintext);
        for (let i = 0; i < crypttext.length; i++) {
          if (__classPrivateFieldGet(this, _CTR_remainingIndex, "f") === 16) {
            __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, "f")), "f");
            __classPrivateFieldSet(this, _CTR_remainingIndex, 0, "f");
            this.increment();
          }
          crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, "f")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, "f"), _a = _b++, _b), "f"), _a];
        }
        return crypttext;
      }
      decrypt(ciphertext) {
        return this.encrypt(ciphertext);
      }
    };
    exports.CTR = CTR;
    _CTR_remaining = /* @__PURE__ */ new WeakMap(), _CTR_remainingIndex = /* @__PURE__ */ new WeakMap(), _CTR_counter = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ecb.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ECB = void 0;
    var mode_js_1 = require_mode();
    var ECB = class _ECB extends mode_js_1.ModeOfOperation {
      constructor(key) {
        super("ECB", key, _ECB);
      }
      encrypt(plaintext) {
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const crypttext = new Uint8Array(plaintext.length);
        for (let i = 0; i < plaintext.length; i += 16) {
          crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);
        }
        return crypttext;
      }
      decrypt(crypttext) {
        if (crypttext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = new Uint8Array(crypttext.length);
        for (let i = 0; i < crypttext.length; i += 16) {
          plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);
        }
        return plaintext;
      }
    };
    exports.ECB = ECB;
  }
});

// node_modules/aes-js/lib.commonjs/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/aes-js/lib.commonjs/mode-ofb.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _OFB_iv;
    var _OFB_lastPrecipher;
    var _OFB_lastPrecipherIndex;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OFB = void 0;
    var mode_js_1 = require_mode();
    var OFB = class _OFB extends mode_js_1.ModeOfOperation {
      constructor(key, iv) {
        super("OFB", key, _OFB);
        _OFB_iv.set(this, void 0);
        _OFB_lastPrecipher.set(this, void 0);
        _OFB_lastPrecipherIndex.set(this, void 0);
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet(this, _OFB_iv, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet(this, _OFB_lastPrecipher, this.iv, "f");
        __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 16, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet(this, _OFB_iv, "f"));
      }
      encrypt(plaintext) {
        var _a, _b;
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = new Uint8Array(plaintext);
        for (let i = 0; i < ciphertext.length; i++) {
          if (__classPrivateFieldGet(this, _OFB_lastPrecipherIndex, "f") === 16) {
            __classPrivateFieldSet(this, _OFB_lastPrecipher, this.aes.encrypt(__classPrivateFieldGet(this, _OFB_lastPrecipher, "f")), "f");
            __classPrivateFieldSet(this, _OFB_lastPrecipherIndex, 0, "f");
          }
          ciphertext[i] ^= __classPrivateFieldGet(this, _OFB_lastPrecipher, "f")[__classPrivateFieldSet(this, _OFB_lastPrecipherIndex, (_b = __classPrivateFieldGet(this, _OFB_lastPrecipherIndex, "f"), _a = _b++, _b), "f"), _a];
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        return this.encrypt(ciphertext);
      }
    };
    exports.OFB = OFB;
    _OFB_iv = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipher = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipherIndex = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/aes-js/lib.commonjs/padding.js
var require_padding = __commonJS({
  "node_modules/aes-js/lib.commonjs/padding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pkcs7Strip = exports.pkcs7Pad = void 0;
    function pkcs7Pad(data) {
      const padder = 16 - data.length % 16;
      const result = new Uint8Array(data.length + padder);
      result.set(data);
      for (let i = data.length; i < result.length; i++) {
        result[i] = padder;
      }
      return result;
    }
    exports.pkcs7Pad = pkcs7Pad;
    function pkcs7Strip(data) {
      if (data.length < 16) {
        throw new TypeError("PKCS#7 invalid length");
      }
      const padder = data[data.length - 1];
      if (padder > 16) {
        throw new TypeError("PKCS#7 padding byte out of range");
      }
      const length = data.length - padder;
      for (let i = 0; i < padder; i++) {
        if (data[length + i] !== padder) {
          throw new TypeError("PKCS#7 invalid padding byte");
        }
      }
      return new Uint8Array(data.subarray(0, length));
    }
    exports.pkcs7Strip = pkcs7Strip;
  }
});

// node_modules/aes-js/lib.commonjs/index.js
var require_lib = __commonJS({
  "node_modules/aes-js/lib.commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pkcs7Strip = exports.pkcs7Pad = exports.OFB = exports.ECB = exports.CTR = exports.CFB = exports.CBC = exports.ModeOfOperation = exports.AES = void 0;
    var aes_js_1 = require_aes();
    Object.defineProperty(exports, "AES", { enumerable: true, get: function() {
      return aes_js_1.AES;
    } });
    var mode_js_1 = require_mode();
    Object.defineProperty(exports, "ModeOfOperation", { enumerable: true, get: function() {
      return mode_js_1.ModeOfOperation;
    } });
    var mode_cbc_js_1 = require_mode_cbc();
    Object.defineProperty(exports, "CBC", { enumerable: true, get: function() {
      return mode_cbc_js_1.CBC;
    } });
    var mode_cfb_js_1 = require_mode_cfb();
    Object.defineProperty(exports, "CFB", { enumerable: true, get: function() {
      return mode_cfb_js_1.CFB;
    } });
    var mode_ctr_js_1 = require_mode_ctr();
    Object.defineProperty(exports, "CTR", { enumerable: true, get: function() {
      return mode_ctr_js_1.CTR;
    } });
    var mode_ecb_js_1 = require_mode_ecb();
    Object.defineProperty(exports, "ECB", { enumerable: true, get: function() {
      return mode_ecb_js_1.ECB;
    } });
    var mode_ofb_js_1 = require_mode_ofb();
    Object.defineProperty(exports, "OFB", { enumerable: true, get: function() {
      return mode_ofb_js_1.OFB;
    } });
    var padding_js_1 = require_padding();
    Object.defineProperty(exports, "pkcs7Pad", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Pad;
    } });
    Object.defineProperty(exports, "pkcs7Strip", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Strip;
    } });
  }
});

// node_modules/@noble/hashes/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/@noble/hashes/pbkdf2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pbkdf2Async = exports.pbkdf2 = void 0;
    var _assert_js_1 = require_assert();
    var hmac_js_1 = require_hmac();
    var utils_js_1 = require_utils();
    function pbkdf2Init(hash, _password, _salt, _opts) {
      (0, _assert_js_1.hash)(hash);
      const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
      const { c, dkLen, asyncTick } = opts;
      (0, _assert_js_1.number)(c);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      if (c < 1)
        throw new Error("PBKDF2: iterations (c) should be >= 1");
      const password = (0, utils_js_1.toBytes)(_password);
      const salt = (0, utils_js_1.toBytes)(_salt);
      const DK = new Uint8Array(dkLen);
      const PRF = hmac_js_1.hmac.create(hash, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
    }
    function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW)
        prfW.destroy();
      u.fill(0);
      return DK;
    }
    function pbkdf2(hash, password, salt, opts) {
      const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        }
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }
    exports.pbkdf2 = pbkdf2;
    async function pbkdf2Async(hash, password, salt, opts) {
      const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        });
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
    }
    exports.pbkdf2Async = pbkdf2Async;
  }
});

// node_modules/@noble/hashes/scrypt.js
var require_scrypt = __commonJS({
  "node_modules/@noble/hashes/scrypt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scryptAsync = exports.scrypt = void 0;
    var _assert_js_1 = require_assert();
    var sha256_js_1 = require_sha256();
    var pbkdf2_js_1 = require_pbkdf2();
    var utils_js_1 = require_utils();
    function XorAndSalsa(prev, pi, input, ii, out, oi) {
      let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
      let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
      let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
      let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
      let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
      let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
      let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
      let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
      let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
      for (let i = 0; i < 8; i += 2) {
        x04 ^= (0, utils_js_1.rotl)(x00 + x12 | 0, 7);
        x08 ^= (0, utils_js_1.rotl)(x04 + x00 | 0, 9);
        x12 ^= (0, utils_js_1.rotl)(x08 + x04 | 0, 13);
        x00 ^= (0, utils_js_1.rotl)(x12 + x08 | 0, 18);
        x09 ^= (0, utils_js_1.rotl)(x05 + x01 | 0, 7);
        x13 ^= (0, utils_js_1.rotl)(x09 + x05 | 0, 9);
        x01 ^= (0, utils_js_1.rotl)(x13 + x09 | 0, 13);
        x05 ^= (0, utils_js_1.rotl)(x01 + x13 | 0, 18);
        x14 ^= (0, utils_js_1.rotl)(x10 + x06 | 0, 7);
        x02 ^= (0, utils_js_1.rotl)(x14 + x10 | 0, 9);
        x06 ^= (0, utils_js_1.rotl)(x02 + x14 | 0, 13);
        x10 ^= (0, utils_js_1.rotl)(x06 + x02 | 0, 18);
        x03 ^= (0, utils_js_1.rotl)(x15 + x11 | 0, 7);
        x07 ^= (0, utils_js_1.rotl)(x03 + x15 | 0, 9);
        x11 ^= (0, utils_js_1.rotl)(x07 + x03 | 0, 13);
        x15 ^= (0, utils_js_1.rotl)(x11 + x07 | 0, 18);
        x01 ^= (0, utils_js_1.rotl)(x00 + x03 | 0, 7);
        x02 ^= (0, utils_js_1.rotl)(x01 + x00 | 0, 9);
        x03 ^= (0, utils_js_1.rotl)(x02 + x01 | 0, 13);
        x00 ^= (0, utils_js_1.rotl)(x03 + x02 | 0, 18);
        x06 ^= (0, utils_js_1.rotl)(x05 + x04 | 0, 7);
        x07 ^= (0, utils_js_1.rotl)(x06 + x05 | 0, 9);
        x04 ^= (0, utils_js_1.rotl)(x07 + x06 | 0, 13);
        x05 ^= (0, utils_js_1.rotl)(x04 + x07 | 0, 18);
        x11 ^= (0, utils_js_1.rotl)(x10 + x09 | 0, 7);
        x08 ^= (0, utils_js_1.rotl)(x11 + x10 | 0, 9);
        x09 ^= (0, utils_js_1.rotl)(x08 + x11 | 0, 13);
        x10 ^= (0, utils_js_1.rotl)(x09 + x08 | 0, 18);
        x12 ^= (0, utils_js_1.rotl)(x15 + x14 | 0, 7);
        x13 ^= (0, utils_js_1.rotl)(x12 + x15 | 0, 9);
        x14 ^= (0, utils_js_1.rotl)(x13 + x12 | 0, 13);
        x15 ^= (0, utils_js_1.rotl)(x14 + x13 | 0, 18);
      }
      out[oi++] = y00 + x00 | 0;
      out[oi++] = y01 + x01 | 0;
      out[oi++] = y02 + x02 | 0;
      out[oi++] = y03 + x03 | 0;
      out[oi++] = y04 + x04 | 0;
      out[oi++] = y05 + x05 | 0;
      out[oi++] = y06 + x06 | 0;
      out[oi++] = y07 + x07 | 0;
      out[oi++] = y08 + x08 | 0;
      out[oi++] = y09 + x09 | 0;
      out[oi++] = y10 + x10 | 0;
      out[oi++] = y11 + x11 | 0;
      out[oi++] = y12 + x12 | 0;
      out[oi++] = y13 + x13 | 0;
      out[oi++] = y14 + x14 | 0;
      out[oi++] = y15 + x15 | 0;
    }
    function BlockMix(input, ii, out, oi, r2) {
      let head = oi + 0;
      let tail = oi + 16 * r2;
      for (let i = 0; i < 16; i++)
        out[tail + i] = input[ii + (2 * r2 - 1) * 16 + i];
      for (let i = 0; i < r2; i++, head += 16, ii += 16) {
        XorAndSalsa(out, tail, input, ii, out, head);
        if (i > 0)
          tail += 16;
        XorAndSalsa(out, head, input, ii += 16, out, tail);
      }
    }
    function scryptInit(password, salt, _opts) {
      const opts = (0, utils_js_1.checkOpts)({
        dkLen: 32,
        asyncTick: 10,
        maxmem: 1024 ** 3 + 1024
      }, _opts);
      const { N, r: r2, p, dkLen, asyncTick, maxmem, onProgress } = opts;
      (0, _assert_js_1.number)(N);
      (0, _assert_js_1.number)(r2);
      (0, _assert_js_1.number)(p);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      (0, _assert_js_1.number)(maxmem);
      if (onProgress !== void 0 && typeof onProgress !== "function")
        throw new Error("progressCb should be function");
      const blockSize = 128 * r2;
      const blockSize32 = blockSize / 4;
      if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
        throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
      }
      if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
        throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
      }
      if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
        throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
      }
      const memUsed = blockSize * (N + p);
      if (memUsed > maxmem) {
        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
      }
      const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });
      const B32 = (0, utils_js_1.u32)(B);
      const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));
      const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));
      let blockMixCb = () => {
      };
      if (onProgress) {
        const totalBlockMix = 2 * N * p;
        const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
        let blockMixCnt = 0;
        blockMixCb = () => {
          blockMixCnt++;
          if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
            onProgress(blockMixCnt / totalBlockMix);
        };
      }
      return { N, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
    }
    function scryptOutput(password, dkLen, B, V, tmp) {
      const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });
      B.fill(0);
      V.fill(0);
      tmp.fill(0);
      return res;
    }
    function scrypt(password, salt, opts) {
      const { N, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
      if (!utils_js_1.isLE)
        (0, utils_js_1.byteSwap32)(B32);
      for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
          V[i] = B32[Pi + i];
        for (let i = 0, pos = 0; i < N - 1; i++) {
          BlockMix(V, pos, V, pos += blockSize32, r2);
          blockMixCb();
        }
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r2);
        blockMixCb();
        for (let i = 0; i < N; i++) {
          const j = B32[Pi + blockSize32 - 16] % N;
          for (let k = 0; k < blockSize32; k++)
            tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
          BlockMix(tmp, 0, B32, Pi, r2);
          blockMixCb();
        }
      }
      if (!utils_js_1.isLE)
        (0, utils_js_1.byteSwap32)(B32);
      return scryptOutput(password, dkLen, B, V, tmp);
    }
    exports.scrypt = scrypt;
    async function scryptAsync(password, salt, opts) {
      const { N, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
      if (!utils_js_1.isLE)
        (0, utils_js_1.byteSwap32)(B32);
      for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
          V[i] = B32[Pi + i];
        let pos = 0;
        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, () => {
          BlockMix(V, pos, V, pos += blockSize32, r2);
          blockMixCb();
        });
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r2);
        blockMixCb();
        await (0, utils_js_1.asyncLoop)(N, asyncTick, () => {
          const j = B32[Pi + blockSize32 - 16] % N;
          for (let k = 0; k < blockSize32; k++)
            tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k];
          BlockMix(tmp, 0, B32, Pi, r2);
          blockMixCb();
        });
      }
      if (!utils_js_1.isLE)
        (0, utils_js_1.byteSwap32)(B32);
      return scryptOutput(password, dkLen, B, V, tmp);
    }
    exports.scryptAsync = scryptAsync;
  }
});

// node_modules/ethereum-cryptography/secp256k1.js
var require_secp256k12 = __commonJS({
  "node_modules/ethereum-cryptography/secp256k1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.secp256k1 = void 0;
    var secp256k1_1 = require_secp256k1();
    Object.defineProperty(exports, "secp256k1", { enumerable: true, get: function() {
      return secp256k1_1.secp256k1;
    } });
  }
});

// browser-external:buffer
var require_buffer = __commonJS({
  "browser-external:buffer"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number, base, endian) {
        if (BN2.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports2.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN2.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN2.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN2.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN2.prototype._parseHex = function _parseHex(number, start, endian) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, "Invalid character");
          r2 += b;
        }
        return r2;
      }
      BN2.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN2.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN2.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN2.prototype.clone = function clone() {
        var r2 = new BN2(null);
        this.copy(r2);
        return r2;
      };
      BN2.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN2.prototype.inspect = inspect;
        }
      } else {
        BN2.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString2(base, padding2) {
        base = base || 10;
        padding2 = padding2 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding2 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN2.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN2.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN2.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN2.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r2 = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN2.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN2.prototype.mul = function mul(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        this.length = num === 0 ? 1 : this.length;
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN2(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN2(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN2.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN2.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN2(1).iushln(m - i - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@ethersproject/logger/lib.esm/_version.js
var version;
var init_version = __esm({
  "node_modules/@ethersproject/logger/lib.esm/_version.js"() {
    version = "logger/5.8.0";
  }
});

// node_modules/@ethersproject/logger/lib.esm/index.js
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _permanentCensorErrors, _censorErrors, LogLevels, _logLevel, _globalLogger, _normalizeError, LogLevel, ErrorCode, HEX, Logger;
var init_lib = __esm({
  "node_modules/@ethersproject/logger/lib.esm/index.js"() {
    "use strict";
    init_version();
    _permanentCensorErrors = false;
    _censorErrors = false;
    LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    _logLevel = LogLevels["default"];
    _globalLogger = null;
    _normalizeError = _checkNormalize();
    (function(LogLevel2) {
      LogLevel2["DEBUG"] = "DEBUG";
      LogLevel2["INFO"] = "INFO";
      LogLevel2["WARNING"] = "WARNING";
      LogLevel2["ERROR"] = "ERROR";
      LogLevel2["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    (function(ErrorCode2) {
      ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
      ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
      ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
      ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
      ErrorCode2["TIMEOUT"] = "TIMEOUT";
      ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
      ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
      ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
      ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
      ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
      ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
      ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
      ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
      ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
      ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
      ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
      ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
    })(ErrorCode || (ErrorCode = {}));
    HEX = "0123456789abcdef";
    Logger = class _Logger {
      constructor(version10) {
        Object.defineProperty(this, "version", {
          enumerable: true,
          value: version10,
          writable: false
        });
      }
      _log(logLevel, args) {
        const level = logLevel.toLowerCase();
        if (LogLevels[level] == null) {
          this.throwArgumentError("invalid log level name", "logLevel", logLevel);
        }
        if (_logLevel > LogLevels[level]) {
          return;
        }
        console.log.apply(console, args);
      }
      debug(...args) {
        this._log(_Logger.levels.DEBUG, args);
      }
      info(...args) {
        this._log(_Logger.levels.INFO, args);
      }
      warn(...args) {
        this._log(_Logger.levels.WARNING, args);
      }
      makeError(message, code, params) {
        if (_censorErrors) {
          return this.makeError("censored error", code, {});
        }
        if (!code) {
          code = _Logger.errors.UNKNOWN_ERROR;
        }
        if (!params) {
          params = {};
        }
        const messageDetails = [];
        Object.keys(params).forEach((key) => {
          const value = params[key];
          try {
            if (value instanceof Uint8Array) {
              let hex = "";
              for (let i = 0; i < value.length; i++) {
                hex += HEX[value[i] >> 4];
                hex += HEX[value[i] & 15];
              }
              messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
            } else {
              messageDetails.push(key + "=" + JSON.stringify(value));
            }
          } catch (error2) {
            messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
          }
        });
        messageDetails.push(`code=${code}`);
        messageDetails.push(`version=${this.version}`);
        const reason = message;
        let url = "";
        switch (code) {
          case ErrorCode.NUMERIC_FAULT: {
            url = "NUMERIC_FAULT";
            const fault = message;
            switch (fault) {
              case "overflow":
              case "underflow":
              case "division-by-zero":
                url += "-" + fault;
                break;
              case "negative-power":
              case "negative-width":
                url += "-unsupported";
                break;
              case "unbound-bitwise-result":
                url += "-unbound-result";
                break;
            }
            break;
          }
          case ErrorCode.CALL_EXCEPTION:
          case ErrorCode.INSUFFICIENT_FUNDS:
          case ErrorCode.MISSING_NEW:
          case ErrorCode.NONCE_EXPIRED:
          case ErrorCode.REPLACEMENT_UNDERPRICED:
          case ErrorCode.TRANSACTION_REPLACED:
          case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
            url = code;
            break;
        }
        if (url) {
          message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
        }
        if (messageDetails.length) {
          message += " (" + messageDetails.join(", ") + ")";
        }
        const error = new Error(message);
        error.reason = reason;
        error.code = code;
        Object.keys(params).forEach(function(key) {
          error[key] = params[key];
        });
        return error;
      }
      throwError(message, code, params) {
        throw this.makeError(message, code, params);
      }
      throwArgumentError(message, name, value) {
        return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {
          argument: name,
          value
        });
      }
      assert(condition, message, code, params) {
        if (!!condition) {
          return;
        }
        this.throwError(message, code, params);
      }
      assertArgument(condition, message, name, value) {
        if (!!condition) {
          return;
        }
        this.throwArgumentError(message, name, value);
      }
      checkNormalize(message) {
        if (message == null) {
          message = "platform missing String.prototype.normalize";
        }
        if (_normalizeError) {
          this.throwError("platform missing String.prototype.normalize", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "String.prototype.normalize",
            form: _normalizeError
          });
        }
      }
      checkSafeUint53(value, message) {
        if (typeof value !== "number") {
          return;
        }
        if (message == null) {
          message = "value not safe";
        }
        if (value < 0 || value >= 9007199254740991) {
          this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "out-of-safe-range",
            value
          });
        }
        if (value % 1) {
          this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "non-integer",
            value
          });
        }
      }
      checkArgumentCount(count, expectedCount, message) {
        if (message) {
          message = ": " + message;
        } else {
          message = "";
        }
        if (count < expectedCount) {
          this.throwError("missing argument" + message, _Logger.errors.MISSING_ARGUMENT, {
            count,
            expectedCount
          });
        }
        if (count > expectedCount) {
          this.throwError("too many arguments" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {
            count,
            expectedCount
          });
        }
      }
      checkNew(target, kind) {
        if (target === Object || target == null) {
          this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      checkAbstract(target, kind) {
        if (target === kind) {
          this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
        } else if (target === Object || target == null) {
          this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      static globalLogger() {
        if (!_globalLogger) {
          _globalLogger = new _Logger(version);
        }
        return _globalLogger;
      }
      static setCensorship(censorship, permanent) {
        if (!censorship && permanent) {
          this.globalLogger().throwError("cannot permanently disable censorship", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        if (_permanentCensorErrors) {
          if (!censorship) {
            return;
          }
          this.globalLogger().throwError("error censorship permanent", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
      }
      static setLogLevel(logLevel) {
        const level = LogLevels[logLevel.toLowerCase()];
        if (level == null) {
          _Logger.globalLogger().warn("invalid log level - " + logLevel);
          return;
        }
        _logLevel = level;
      }
      static from(version10) {
        return new _Logger(version10);
      }
    };
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;
  }
});

// node_modules/@ethersproject/bytes/lib.esm/_version.js
var version2;
var init_version2 = __esm({
  "node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
    version2 = "bytes/5.8.0";
  }
});

// node_modules/@ethersproject/bytes/lib.esm/index.js
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i = 0; i < value.length; i++) {
    const v = value[i];
    if (!isInteger(v) || v < 0 || v >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
      result.push(parseInt(hex.substring(i, i + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
function hexlify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes(value)) {
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      let v = value[i];
      result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexConcat(items) {
  let result = "0x";
  items.forEach((item) => {
    result += hexlify(item).substring(2);
  });
  return result;
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
var logger, HexCharacters;
var init_lib2 = __esm({
  "node_modules/@ethersproject/bytes/lib.esm/index.js"() {
    "use strict";
    init_lib();
    init_version2();
    logger = new Logger(version2);
    HexCharacters = "0123456789abcdef";
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version3;
var init_version3 = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/_version.js"() {
    version3 = "bignumber/5.8.0";
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === "bigint" || isBytes(value));
}
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }
  return new BN(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN(value, 36).toString(16);
}
var import_bn, BN, logger2, _constructorGuard, MAX_SAFE, _warnedToStringRadix, BigNumber;
var init_bignumber = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"() {
    "use strict";
    import_bn = __toESM(require_bn());
    init_lib2();
    init_lib();
    init_version3();
    BN = import_bn.default.BN;
    logger2 = new Logger(version3);
    _constructorGuard = {};
    MAX_SAFE = 9007199254740991;
    _warnedToStringRadix = false;
    BigNumber = class _BigNumber {
      constructor(constructorGuard, hex) {
        if (constructorGuard !== _constructorGuard) {
          logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new (BigNumber)"
          });
        }
        this._hex = hex;
        this._isBigNumber = true;
        Object.freeze(this);
      }
      fromTwos(value) {
        return toBigNumber(toBN(this).fromTwos(value));
      }
      toTwos(value) {
        return toBigNumber(toBN(this).toTwos(value));
      }
      abs() {
        if (this._hex[0] === "-") {
          return _BigNumber.from(this._hex.substring(1));
        }
        return this;
      }
      add(other) {
        return toBigNumber(toBN(this).add(toBN(other)));
      }
      sub(other) {
        return toBigNumber(toBN(this).sub(toBN(other)));
      }
      div(other) {
        const o = _BigNumber.from(other);
        if (o.isZero()) {
          throwFault("division-by-zero", "div");
        }
        return toBigNumber(toBN(this).div(toBN(other)));
      }
      mul(other) {
        return toBigNumber(toBN(this).mul(toBN(other)));
      }
      mod(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("division-by-zero", "mod");
        }
        return toBigNumber(toBN(this).umod(value));
      }
      pow(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("negative-power", "pow");
        }
        return toBigNumber(toBN(this).pow(value));
      }
      and(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "and");
        }
        return toBigNumber(toBN(this).and(value));
      }
      or(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "or");
        }
        return toBigNumber(toBN(this).or(value));
      }
      xor(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "xor");
        }
        return toBigNumber(toBN(this).xor(value));
      }
      mask(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "mask");
        }
        return toBigNumber(toBN(this).maskn(value));
      }
      shl(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shl");
        }
        return toBigNumber(toBN(this).shln(value));
      }
      shr(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shr");
        }
        return toBigNumber(toBN(this).shrn(value));
      }
      eq(other) {
        return toBN(this).eq(toBN(other));
      }
      lt(other) {
        return toBN(this).lt(toBN(other));
      }
      lte(other) {
        return toBN(this).lte(toBN(other));
      }
      gt(other) {
        return toBN(this).gt(toBN(other));
      }
      gte(other) {
        return toBN(this).gte(toBN(other));
      }
      isNegative() {
        return this._hex[0] === "-";
      }
      isZero() {
        return toBN(this).isZero();
      }
      toNumber() {
        try {
          return toBN(this).toNumber();
        } catch (error) {
          throwFault("overflow", "toNumber", this.toString());
        }
        return null;
      }
      toBigInt() {
        try {
          return BigInt(this.toString());
        } catch (e) {
        }
        return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
          value: this.toString()
        });
      }
      toString() {
        if (arguments.length > 0) {
          if (arguments[0] === 10) {
            if (!_warnedToStringRadix) {
              _warnedToStringRadix = true;
              logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
            }
          } else if (arguments[0] === 16) {
            logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
          } else {
            logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
          }
        }
        return toBN(this).toString(10);
      }
      toHexString() {
        return this._hex;
      }
      toJSON(key) {
        return { type: "BigNumber", hex: this.toHexString() };
      }
      static from(value) {
        if (value instanceof _BigNumber) {
          return value;
        }
        if (typeof value === "string") {
          if (value.match(/^-?0x[0-9a-f]+$/i)) {
            return new _BigNumber(_constructorGuard, toHex(value));
          }
          if (value.match(/^-?[0-9]+$/)) {
            return new _BigNumber(_constructorGuard, toHex(new BN(value)));
          }
          return logger2.throwArgumentError("invalid BigNumber string", "value", value);
        }
        if (typeof value === "number") {
          if (value % 1) {
            throwFault("underflow", "BigNumber.from", value);
          }
          if (value >= MAX_SAFE || value <= -MAX_SAFE) {
            throwFault("overflow", "BigNumber.from", value);
          }
          return _BigNumber.from(String(value));
        }
        const anyValue = value;
        if (typeof anyValue === "bigint") {
          return _BigNumber.from(anyValue.toString());
        }
        if (isBytes(anyValue)) {
          return _BigNumber.from(hexlify(anyValue));
        }
        if (anyValue) {
          if (anyValue.toHexString) {
            const hex = anyValue.toHexString();
            if (typeof hex === "string") {
              return _BigNumber.from(hex);
            }
          } else {
            let hex = anyValue._hex;
            if (hex == null && anyValue.type === "BigNumber") {
              hex = anyValue.hex;
            }
            if (typeof hex === "string") {
              if (isHexString(hex) || hex[0] === "-" && isHexString(hex.substring(1))) {
                return _BigNumber.from(hex);
              }
            }
          }
        }
        return logger2.throwArgumentError("invalid BigNumber value", "value", value);
      }
      static isBigNumber(value) {
        return !!(value && value._isBigNumber);
      }
    };
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber.from(whole);
  const fractionValue = BigNumber.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var logger3, _constructorGuard2, Zero, NegativeOne, zeros, FixedFormat, FixedNumber, ONE, BUMP;
var init_fixednumber = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version3();
    init_bignumber();
    logger3 = new Logger(version3);
    _constructorGuard2 = {};
    Zero = BigNumber.from(0);
    NegativeOne = BigNumber.from(-1);
    zeros = "0";
    while (zeros.length < 256) {
      zeros += zeros;
    }
    FixedFormat = class _FixedFormat {
      constructor(constructorGuard, signed2, width, decimals) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.signed = signed2;
        this.width = width;
        this.decimals = decimals;
        this.name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
        this._multiplier = getMultiplier(decimals);
        Object.freeze(this);
      }
      static from(value) {
        if (value instanceof _FixedFormat) {
          return value;
        }
        if (typeof value === "number") {
          value = `fixed128x${value}`;
        }
        let signed2 = true;
        let width = 128;
        let decimals = 18;
        if (typeof value === "string") {
          if (value === "fixed") {
          } else if (value === "ufixed") {
            signed2 = false;
          } else {
            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
            if (!match) {
              logger3.throwArgumentError("invalid fixed format", "format", value);
            }
            signed2 = match[1] !== "u";
            width = parseInt(match[2]);
            decimals = parseInt(match[3]);
          }
        } else if (value) {
          const check = (key, type, defaultValue) => {
            if (value[key] == null) {
              return defaultValue;
            }
            if (typeof value[key] !== type) {
              logger3.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
            }
            return value[key];
          };
          signed2 = check("signed", "boolean", signed2);
          width = check("width", "number", width);
          decimals = check("decimals", "number", decimals);
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
        }
        if (decimals > 80) {
          logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
        }
        return new _FixedFormat(_constructorGuard2, signed2, width, decimals);
      }
    };
    FixedNumber = class _FixedNumber {
      constructor(constructorGuard, hex, value, format) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.format = format;
        this._hex = hex;
        this._value = value;
        this._isFixedNumber = true;
        Object.freeze(this);
      }
      _checkFormat(other) {
        if (this.format.name !== other.format.name) {
          logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
        }
      }
      addUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
      }
      subUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
      }
      mulUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
      }
      divUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
      }
      floor() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = _FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (this.isNegative() && hasFraction) {
          result = result.subUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      ceiling() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = _FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (!this.isNegative() && hasFraction) {
          result = result.addUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      // @TODO: Support other rounding algorithms
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        if (decimals < 0 || decimals > 80 || decimals % 1) {
          logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
        }
        if (comps[1].length <= decimals) {
          return this;
        }
        const factor = _FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
        const bump = BUMP.toFormat(this.format);
        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
      }
      isZero() {
        return this._value === "0.0" || this._value === "0";
      }
      isNegative() {
        return this._value[0] === "-";
      }
      toString() {
        return this._value;
      }
      toHexString(width) {
        if (width == null) {
          return this._hex;
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid byte width", "width", width);
        }
        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
        return hexZeroPad(hex, width / 8);
      }
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      toFormat(format) {
        return _FixedNumber.fromString(this._value, format);
      }
      static fromValue(value, decimals, format) {
        if (format == null && decimals != null && !isBigNumberish(decimals)) {
          format = decimals;
          decimals = null;
        }
        if (decimals == null) {
          decimals = 0;
        }
        if (format == null) {
          format = "fixed";
        }
        return _FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
      }
      static fromString(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        const numeric = parseFixed(value, fixedFormat.decimals);
        if (!fixedFormat.signed && numeric.lt(Zero)) {
          throwFault2("unsigned value cannot be negative", "overflow", "value", value);
        }
        let hex = null;
        if (fixedFormat.signed) {
          hex = numeric.toTwos(fixedFormat.width).toHexString();
        } else {
          hex = numeric.toHexString();
          hex = hexZeroPad(hex, fixedFormat.width / 8);
        }
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static fromBytes(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        if (arrayify(value).length > fixedFormat.width / 8) {
          throw new Error("overflow");
        }
        let numeric = BigNumber.from(value);
        if (fixedFormat.signed) {
          numeric = numeric.fromTwos(fixedFormat.width);
        }
        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static from(value, format) {
        if (typeof value === "string") {
          return _FixedNumber.fromString(value, format);
        }
        if (isBytes(value)) {
          return _FixedNumber.fromBytes(value, format);
        }
        try {
          return _FixedNumber.fromValue(value, 0, format);
        } catch (error) {
          if (error.code !== Logger.errors.INVALID_ARGUMENT) {
            throw error;
          }
        }
        return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
      }
      static isFixedNumber(value) {
        return !!(value && value._isFixedNumber);
      }
    };
    ONE = FixedNumber.from(1);
    BUMP = FixedNumber.from("0.5");
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/index.js
var init_lib3 = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/index.js"() {
    init_bignumber();
    init_fixednumber();
    init_bignumber();
  }
});

// node_modules/@ethersproject/properties/lib.esm/_version.js
var version4;
var init_version4 = __esm({
  "node_modules/@ethersproject/properties/lib.esm/_version.js"() {
    version4 = "properties/5.8.0";
  }
});

// node_modules/@ethersproject/properties/lib.esm/index.js
function defineReadOnly(object, name, value) {
  Object.defineProperty(object, name, {
    enumerable: true,
    value,
    writable: false
  });
}
function getStatic(ctor, key) {
  for (let i = 0; i < 32; i++) {
    if (ctor[key]) {
      return ctor[key];
    }
    if (!ctor.prototype || typeof ctor.prototype !== "object") {
      break;
    }
    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
  }
  return null;
}
function _isFrozen(object) {
  if (object === void 0 || object === null || opaque[typeof object]) {
    return true;
  }
  if (Array.isArray(object) || typeof object === "object") {
    if (!Object.isFrozen(object)) {
      return false;
    }
    const keys = Object.keys(object);
    for (let i = 0; i < keys.length; i++) {
      let value = null;
      try {
        value = object[keys[i]];
      } catch (error) {
        continue;
      }
      if (!_isFrozen(value)) {
        return false;
      }
    }
    return true;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function _deepCopy(object) {
  if (_isFrozen(object)) {
    return object;
  }
  if (Array.isArray(object)) {
    return Object.freeze(object.map((item) => deepCopy(item)));
  }
  if (typeof object === "object") {
    const result = {};
    for (const key in object) {
      const value = object[key];
      if (value === void 0) {
        continue;
      }
      defineReadOnly(result, key, deepCopy(value));
    }
    return result;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}
function deepCopy(object) {
  return _deepCopy(object);
}
var logger4, opaque, Description;
var init_lib4 = __esm({
  "node_modules/@ethersproject/properties/lib.esm/index.js"() {
    "use strict";
    init_lib();
    init_version4();
    logger4 = new Logger(version4);
    opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    Description = class {
      constructor(info) {
        for (const key in info) {
          this[key] = deepCopy(info[key]);
        }
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/_version.js
var version5;
var init_version5 = __esm({
  "node_modules/@ethersproject/abi/lib.esm/_version.js"() {
    version5 = "abi/5.8.0";
  }
});

// node_modules/@ethersproject/abi/lib.esm/fragments.js
function checkModifier(type, name) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name]) {
      return true;
    }
  } else if (type === "address") {
    if (name === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name]) {
      return true;
    }
  }
  if (ModifiersBytes[name] || name === "payable") {
    logger5.throwArgumentError("invalid modifier", "name", name);
  }
  return false;
}
function parseParamType(param, allowIndexed) {
  let originalParam = param;
  function throwError(i) {
    logger5.throwArgumentError(`unexpected character at position ${i}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node2.indexed = false;
    }
    return node2;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node = parent;
  for (let i = 0; i < param.length; i++) {
    let c = param[i];
    switch (c) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i);
        }
        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let child = node;
        node = node.parent;
        if (!node) {
          throwError(i);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let sibling = newNode(node.parent);
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      case " ":
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i);
              }
              if (node.indexed) {
                throwError(i);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError(i);
        }
        node.type += c;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError(i);
        }
        node.type += c;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c;
        } else {
          throwError(i);
        }
    }
  }
  if (node.parent) {
    logger5.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object, params) {
  for (let key in params) {
    defineReadOnly(object, key, params[key]);
  }
}
function parseParams(value, allowIndex) {
  return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
}
function parseGas(value, params) {
  params.gas = null;
  let comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger5.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger5.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger5.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger5.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger5.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger5.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger5.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
function checkForbidden(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger5.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
function verifyType(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger5.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }
  return value;
}
function splitNesting(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value.length; offset++) {
    let c = value[offset];
    if (c === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c;
      if (c === "(") {
        depth++;
      } else if (c === ")") {
        depth--;
        if (depth === -1) {
          logger5.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}
var logger5, _constructorGuard3, ModifiersBytes, ModifiersNest, FormatTypes, paramTypeArray, ParamType, Fragment, EventFragment, ConstructorFragment, FunctionFragment, ErrorFragment, regexIdentifier, regexParen;
var init_fragments = __esm({
  "node_modules/@ethersproject/abi/lib.esm/fragments.js"() {
    "use strict";
    init_lib3();
    init_lib4();
    init_lib();
    init_version5();
    logger5 = new Logger(version5);
    _constructorGuard3 = {};
    ModifiersBytes = { calldata: true, memory: true, storage: true };
    ModifiersNest = { calldata: true, memory: true };
    FormatTypes = Object.freeze({
      // Bare formatting, as is needed for computing a sighash of an event or function
      sighash: "sighash",
      // Human-Readable with Minimal spacing and without names (compact human-readable)
      minimal: "minimal",
      // Human-Readable with nice spacing, including all names
      full: "full",
      // JSON-format a la Solidity
      json: "json"
    });
    paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    ParamType = class _ParamType {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger5.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new ParamType()"
          });
        }
        populate(this, params);
        let match = this.type.match(paramTypeArray);
        if (match) {
          populate(this, {
            arrayLength: parseInt(match[2] || "-1"),
            arrayChildren: _ParamType.fromObject({
              type: match[1],
              components: this.components
            }),
            baseType: "array"
          });
        } else {
          populate(this, {
            arrayLength: null,
            arrayChildren: null,
            baseType: this.components != null ? "tuple" : this.type
          });
        }
        this._isParamType = true;
        Object.freeze(this);
      }
      // Format the parameter fragment
      //   - sighash: "(uint256,address)"
      //   - minimal: "tuple(uint256,address) indexed"
      //   - full:    "tuple(uint256 foo, address bar) indexed baz"
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          let result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name: this.name || void 0
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.components) {
            result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.baseType === "array") {
          result += this.arrayChildren.format(format);
          result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
        } else {
          if (this.baseType === "tuple") {
            if (format !== FormatTypes.sighash) {
              result += this.type;
            }
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== FormatTypes.sighash) {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === FormatTypes.full && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      static from(value, allowIndexed) {
        if (typeof value === "string") {
          return _ParamType.fromString(value, allowIndexed);
        }
        return _ParamType.fromObject(value);
      }
      static fromObject(value) {
        if (_ParamType.isParamType(value)) {
          return value;
        }
        return new _ParamType(_constructorGuard3, {
          name: value.name || null,
          type: verifyType(value.type),
          indexed: value.indexed == null ? null : !!value.indexed,
          components: value.components ? value.components.map(_ParamType.fromObject) : null
        });
      }
      static fromString(value, allowIndexed) {
        function ParamTypify(node) {
          return _ParamType.fromObject({
            name: node.name,
            type: node.type,
            indexed: node.indexed,
            components: node.components
          });
        }
        return ParamTypify(parseParamType(value, !!allowIndexed));
      }
      static isParamType(value) {
        return !!(value != null && value._isParamType);
      }
    };
    Fragment = class _Fragment {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger5.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new Fragment()"
          });
        }
        populate(this, params);
        this._isFragment = true;
        Object.freeze(this);
      }
      static from(value) {
        if (_Fragment.isFragment(value)) {
          return value;
        }
        if (typeof value === "string") {
          return _Fragment.fromString(value);
        }
        return _Fragment.fromObject(value);
      }
      static fromObject(value) {
        if (_Fragment.isFragment(value)) {
          return value;
        }
        switch (value.type) {
          case "function":
            return FunctionFragment.fromObject(value);
          case "event":
            return EventFragment.fromObject(value);
          case "constructor":
            return ConstructorFragment.fromObject(value);
          case "error":
            return ErrorFragment.fromObject(value);
          case "fallback":
          case "receive":
            return null;
        }
        return logger5.throwArgumentError("invalid fragment object", "value", value);
      }
      static fromString(value) {
        value = value.replace(/\s/g, " ");
        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
        value = value.trim();
        if (value.split(" ")[0] === "event") {
          return EventFragment.fromString(value.substring(5).trim());
        } else if (value.split(" ")[0] === "function") {
          return FunctionFragment.fromString(value.substring(8).trim());
        } else if (value.split("(")[0].trim() === "constructor") {
          return ConstructorFragment.fromString(value.trim());
        } else if (value.split(" ")[0] === "error") {
          return ErrorFragment.fromString(value.substring(5).trim());
        }
        return logger5.throwArgumentError("unsupported fragment", "value", value);
      }
      static isFragment(value) {
        return !!(value && value._isFragment);
      }
    };
    EventFragment = class _EventFragment extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "event ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.anonymous) {
            result += "anonymous ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _EventFragment.fromString(value);
        }
        return _EventFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_EventFragment.isEventFragment(value)) {
          return value;
        }
        if (value.type !== "event") {
          logger5.throwArgumentError("invalid event object", "value", value);
        }
        const params = {
          name: verifyIdentifier(value.name),
          anonymous: value.anonymous,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          type: "event"
        };
        return new _EventFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let match = value.match(regexParen);
        if (!match) {
          logger5.throwArgumentError("invalid event string", "value", value);
        }
        let anonymous = false;
        match[3].split(" ").forEach((modifier) => {
          switch (modifier.trim()) {
            case "anonymous":
              anonymous = true;
              break;
            case "":
              break;
            default:
              logger5.warn("unknown modifier: " + modifier);
          }
        });
        return _EventFragment.fromObject({
          name: match[1].trim(),
          anonymous,
          inputs: parseParams(match[2], true),
          type: "event"
        });
      }
      static isEventFragment(value) {
        return value && value._isFragment && value.type === "event";
      }
    };
    ConstructorFragment = class _ConstructorFragment extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        if (format === FormatTypes.sighash) {
          logger5.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "format(sighash)"
          });
        }
        let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (this.stateMutability && this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _ConstructorFragment.fromString(value);
        }
        return _ConstructorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_ConstructorFragment.isConstructorFragment(value)) {
          return value;
        }
        if (value.type !== "constructor") {
          logger5.throwArgumentError("invalid constructor object", "value", value);
        }
        let state = verifyState(value);
        if (state.constant) {
          logger5.throwArgumentError("constructor cannot be constant", "value", value);
        }
        const params = {
          name: null,
          type: value.type,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new _ConstructorFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let params = { type: "constructor" };
        value = parseGas(value, params);
        let parens = value.match(regexParen);
        if (!parens || parens[1].trim() !== "constructor") {
          logger5.throwArgumentError("invalid constructor string", "value", value);
        }
        params.inputs = parseParams(parens[2].trim(), false);
        parseModifiers(parens[3].trim(), params);
        return _ConstructorFragment.fromObject(params);
      }
      static isConstructorFragment(value) {
        return value && value._isFragment && value.type === "constructor";
      }
    };
    FunctionFragment = class _FunctionFragment extends ConstructorFragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            outputs: this.outputs.map((output) => JSON.parse(output.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "function ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.stateMutability) {
            if (this.stateMutability !== "nonpayable") {
              result += this.stateMutability + " ";
            }
          } else if (this.constant) {
            result += "view ";
          }
          if (this.outputs && this.outputs.length) {
            result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
          }
          if (this.gas != null) {
            result += "@" + this.gas.toString() + " ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _FunctionFragment.fromString(value);
        }
        return _FunctionFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_FunctionFragment.isFunctionFragment(value)) {
          return value;
        }
        if (value.type !== "function") {
          logger5.throwArgumentError("invalid function object", "value", value);
        }
        let state = verifyState(value);
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          constant: state.constant,
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new _FunctionFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let params = { type: "function" };
        value = parseGas(value, params);
        let comps = value.split(" returns ");
        if (comps.length > 2) {
          logger5.throwArgumentError("invalid function string", "value", value);
        }
        let parens = comps[0].match(regexParen);
        if (!parens) {
          logger5.throwArgumentError("invalid function signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        parseModifiers(parens[3].trim(), params);
        if (comps.length > 1) {
          let returns = comps[1].match(regexParen);
          if (returns[1].trim() != "" || returns[3].trim() != "") {
            logger5.throwArgumentError("unexpected tokens", "value", value);
          }
          params.outputs = parseParams(returns[2], false);
        } else {
          params.outputs = [];
        }
        return _FunctionFragment.fromObject(params);
      }
      static isFunctionFragment(value) {
        return value && value._isFragment && value.type === "function";
      }
    };
    ErrorFragment = class _ErrorFragment extends Fragment {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "error ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _ErrorFragment.fromString(value);
        }
        return _ErrorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_ErrorFragment.isErrorFragment(value)) {
          return value;
        }
        if (value.type !== "error") {
          logger5.throwArgumentError("invalid error object", "value", value);
        }
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
        };
        return checkForbidden(new _ErrorFragment(_constructorGuard3, params));
      }
      static fromString(value) {
        let params = { type: "error" };
        let parens = value.match(regexParen);
        if (!parens) {
          logger5.throwArgumentError("invalid error signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        return checkForbidden(_ErrorFragment.fromObject(params));
      }
      static isErrorFragment(value) {
        return value && value._isFragment && value.type === "error";
      }
    };
    regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
function checkResultErrors(result) {
  const errors = [];
  const checkErrors = function(path, object) {
    if (!Array.isArray(object)) {
      return;
    }
    for (let key in object) {
      const childPath = path.slice();
      childPath.push(key);
      try {
        checkErrors(childPath, object[key]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
var logger6, Coder, Writer, Reader;
var init_abstract_coder = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"() {
    "use strict";
    init_lib2();
    init_lib3();
    init_lib4();
    init_lib();
    init_version5();
    logger6 = new Logger(version5);
    Coder = class {
      constructor(name, type, localName, dynamic) {
        this.name = name;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
      }
      _throwError(message, value) {
        logger6.throwArgumentError(message, this.localName, value);
      }
    };
    Writer = class {
      constructor(wordSize) {
        defineReadOnly(this, "wordSize", wordSize || 32);
        this._data = [];
        this._dataLength = 0;
        this._padding = new Uint8Array(wordSize);
      }
      get data() {
        return hexConcat(this._data);
      }
      get length() {
        return this._dataLength;
      }
      _writeData(data) {
        this._data.push(data);
        this._dataLength += data.length;
        return data.length;
      }
      appendWriter(writer) {
        return this._writeData(concat(writer._data));
      }
      // Arrayish items; padded on the right to wordSize
      writeBytes(value) {
        let bytes = arrayify(value);
        const paddingOffset = bytes.length % this.wordSize;
        if (paddingOffset) {
          bytes = concat([bytes, this._padding.slice(paddingOffset)]);
        }
        return this._writeData(bytes);
      }
      _getValue(value) {
        let bytes = arrayify(BigNumber.from(value));
        if (bytes.length > this.wordSize) {
          logger6.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
            length: this.wordSize,
            offset: bytes.length
          });
        }
        if (bytes.length % this.wordSize) {
          bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
        }
        return bytes;
      }
      // BigNumberish items; padded on the left to wordSize
      writeValue(value) {
        return this._writeData(this._getValue(value));
      }
      writeUpdatableValue() {
        const offset = this._data.length;
        this._data.push(this._padding);
        this._dataLength += this.wordSize;
        return (value) => {
          this._data[offset] = this._getValue(value);
        };
      }
    };
    Reader = class _Reader {
      constructor(data, wordSize, coerceFunc, allowLoose) {
        defineReadOnly(this, "_data", arrayify(data));
        defineReadOnly(this, "wordSize", wordSize || 32);
        defineReadOnly(this, "_coerceFunc", coerceFunc);
        defineReadOnly(this, "allowLoose", allowLoose);
        this._offset = 0;
      }
      get data() {
        return hexlify(this._data);
      }
      get consumed() {
        return this._offset;
      }
      // The default Coerce function
      static coerce(name, value) {
        let match = name.match("^u?int([0-9]+)$");
        if (match && parseInt(match[1]) <= 48) {
          value = value.toNumber();
        }
        return value;
      }
      coerce(name, value) {
        if (this._coerceFunc) {
          return this._coerceFunc(name, value);
        }
        return _Reader.coerce(name, value);
      }
      _peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
        if (this._offset + alignedLength > this._data.length) {
          if (this.allowLoose && loose && this._offset + length <= this._data.length) {
            alignedLength = length;
          } else {
            logger6.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
              length: this._data.length,
              offset: this._offset + alignedLength
            });
          }
        }
        return this._data.slice(this._offset, this._offset + alignedLength);
      }
      subReader(offset) {
        return new _Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
      }
      readBytes(length, loose) {
        let bytes = this._peekBytes(0, length, !!loose);
        this._offset += bytes.length;
        return bytes.slice(0, length);
      }
      readValue() {
        return BigNumber.from(this.readBytes(this.wordSize));
      }
    };
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha32 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding2, outputType) {
        return function(message) {
          return new Keccak(bits2, padding2, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits) {
          return new Keccak(bits2, padding2, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding2, outputType) {
        return function(message, outputBits, n, s) {
          return methods["cshake" + bits2].update(message, outputBits, n, s)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding2, outputType) {
        return function(key, message, outputBits, s) {
          return methods["kmac" + bits2].update(key, message, outputBits, s)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding2) {
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createMethod2(bits2, padding2, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding2) {
        var method = createOutputMethod(bits2, padding2, "hex");
        method.create = function() {
          return new Keccak(bits2, padding2, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding2);
      };
      var createShakeMethod = function(bits2, padding2) {
        var method = createShakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits) {
          return new Keccak(bits2, padding2, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding2);
      };
      var createCshakeMethod = function(bits2, padding2) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding2, "hex");
        method.create = function(outputBits, n, s) {
          if (!n && !s) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak(bits2, padding2, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function(message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding2);
      };
      var createKmacMethod = function(bits2, padding2) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding2, "hex");
        method.create = function(key, outputBits, s) {
          return new Kmac(bits2, padding2, outputBits).bytepad(["KMAC", s], w).bytepad([key], w);
        };
        method.update = function(key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding2);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak(bits2, padding2, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding2;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s[i2] ^= blocks[i2];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak.prototype.encode = function(x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };
      Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i2 = 0; i2 < str.length; ++i2) {
            var code = str.charCodeAt(i2);
            if (code < 128) {
              bytes += 1;
            } else if (code < 2048) {
              bytes += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };
      Keccak.prototype.bytepad = function(strs, w) {
        var bytes = this.encode(w);
        for (var i2 = 0; i2 < strs.length; ++i2) {
          bytes += this.encodeString(strs[i2]);
        }
        var paddingBytes = w - bytes % w;
        var zeros2 = [];
        zeros2.length = paddingBytes;
        this.update(zeros2);
        return this;
      };
      Keccak.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks[i2] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s[i2] ^= blocks[i2];
        }
        f(s);
      };
      Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var hex = "", block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            block = s[i2];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f(s);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s[i2];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            array[j2] = s[i2];
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i2] = s[i2];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };
      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
      Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var array = [], offset, block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            offset = j2 << 2;
            block = s[i2];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s[i2];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding2, outputBits) {
        Keccak.call(this, bits2, padding2, outputBits);
      }
      Kmac.prototype = new Keccak();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };
      var f = function(s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;
          b0 = s[0];
          b1 = s[1];
          b32 = s[11] << 4 | s[10] >>> 28;
          b33 = s[10] << 4 | s[11] >>> 28;
          b14 = s[20] << 3 | s[21] >>> 29;
          b15 = s[21] << 3 | s[20] >>> 29;
          b46 = s[31] << 9 | s[30] >>> 23;
          b47 = s[30] << 9 | s[31] >>> 23;
          b28 = s[40] << 18 | s[41] >>> 14;
          b29 = s[41] << 18 | s[40] >>> 14;
          b20 = s[2] << 1 | s[3] >>> 31;
          b21 = s[3] << 1 | s[2] >>> 31;
          b2 = s[13] << 12 | s[12] >>> 20;
          b3 = s[12] << 12 | s[13] >>> 20;
          b34 = s[22] << 10 | s[23] >>> 22;
          b35 = s[23] << 10 | s[22] >>> 22;
          b16 = s[33] << 13 | s[32] >>> 19;
          b17 = s[32] << 13 | s[33] >>> 19;
          b48 = s[42] << 2 | s[43] >>> 30;
          b49 = s[43] << 2 | s[42] >>> 30;
          b40 = s[5] << 30 | s[4] >>> 2;
          b41 = s[4] << 30 | s[5] >>> 2;
          b22 = s[14] << 6 | s[15] >>> 26;
          b23 = s[15] << 6 | s[14] >>> 26;
          b4 = s[25] << 11 | s[24] >>> 21;
          b5 = s[24] << 11 | s[25] >>> 21;
          b36 = s[34] << 15 | s[35] >>> 17;
          b37 = s[35] << 15 | s[34] >>> 17;
          b18 = s[45] << 29 | s[44] >>> 3;
          b19 = s[44] << 29 | s[45] >>> 3;
          b10 = s[6] << 28 | s[7] >>> 4;
          b11 = s[7] << 28 | s[6] >>> 4;
          b42 = s[17] << 23 | s[16] >>> 9;
          b43 = s[16] << 23 | s[17] >>> 9;
          b24 = s[26] << 25 | s[27] >>> 7;
          b25 = s[27] << 25 | s[26] >>> 7;
          b6 = s[36] << 21 | s[37] >>> 11;
          b7 = s[37] << 21 | s[36] >>> 11;
          b38 = s[47] << 24 | s[46] >>> 8;
          b39 = s[46] << 24 | s[47] >>> 8;
          b30 = s[8] << 27 | s[9] >>> 5;
          b31 = s[9] << 27 | s[8] >>> 5;
          b12 = s[18] << 20 | s[19] >>> 12;
          b13 = s[19] << 20 | s[18] >>> 12;
          b44 = s[29] << 7 | s[28] >>> 25;
          b45 = s[28] << 7 | s[29] >>> 25;
          b26 = s[38] << 8 | s[39] >>> 24;
          b27 = s[39] << 8 | s[38] >>> 24;
          b8 = s[48] << 14 | s[49] >>> 18;
          b9 = s[49] << 14 | s[48] >>> 18;
          s[0] = b0 ^ ~b2 & b4;
          s[1] = b1 ^ ~b3 & b5;
          s[10] = b10 ^ ~b12 & b14;
          s[11] = b11 ^ ~b13 & b15;
          s[20] = b20 ^ ~b22 & b24;
          s[21] = b21 ^ ~b23 & b25;
          s[30] = b30 ^ ~b32 & b34;
          s[31] = b31 ^ ~b33 & b35;
          s[40] = b40 ^ ~b42 & b44;
          s[41] = b41 ^ ~b43 & b45;
          s[2] = b2 ^ ~b4 & b6;
          s[3] = b3 ^ ~b5 & b7;
          s[12] = b12 ^ ~b14 & b16;
          s[13] = b13 ^ ~b15 & b17;
          s[22] = b22 ^ ~b24 & b26;
          s[23] = b23 ^ ~b25 & b27;
          s[32] = b32 ^ ~b34 & b36;
          s[33] = b33 ^ ~b35 & b37;
          s[42] = b42 ^ ~b44 & b46;
          s[43] = b43 ^ ~b45 & b47;
          s[4] = b4 ^ ~b6 & b8;
          s[5] = b5 ^ ~b7 & b9;
          s[14] = b14 ^ ~b16 & b18;
          s[15] = b15 ^ ~b17 & b19;
          s[24] = b24 ^ ~b26 & b28;
          s[25] = b25 ^ ~b27 & b29;
          s[34] = b34 ^ ~b36 & b38;
          s[35] = b35 ^ ~b37 & b39;
          s[44] = b44 ^ ~b46 & b48;
          s[45] = b45 ^ ~b47 & b49;
          s[6] = b6 ^ ~b8 & b0;
          s[7] = b7 ^ ~b9 & b1;
          s[16] = b16 ^ ~b18 & b10;
          s[17] = b17 ^ ~b19 & b11;
          s[26] = b26 ^ ~b28 & b20;
          s[27] = b27 ^ ~b29 & b21;
          s[36] = b36 ^ ~b38 & b30;
          s[37] = b37 ^ ~b39 & b31;
          s[46] = b46 ^ ~b48 & b40;
          s[47] = b47 ^ ~b49 & b41;
          s[8] = b8 ^ ~b0 & b2;
          s[9] = b9 ^ ~b1 & b3;
          s[18] = b18 ^ ~b10 & b12;
          s[19] = b19 ^ ~b11 & b13;
          s[28] = b28 ^ ~b20 & b22;
          s[29] = b29 ^ ~b21 & b23;
          s[38] = b38 ^ ~b30 & b32;
          s[39] = b39 ^ ~b31 & b33;
          s[48] = b48 ^ ~b40 & b42;
          s[49] = b49 ^ ~b41 & b43;
          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/@ethersproject/keccak256/lib.esm/index.js
function keccak256(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}
var import_js_sha3;
var init_lib5 = __esm({
  "node_modules/@ethersproject/keccak256/lib.esm/index.js"() {
    "use strict";
    import_js_sha3 = __toESM(require_sha32());
    init_lib2();
  }
});

// node_modules/@ethersproject/rlp/lib.esm/_version.js
var version6;
var init_version6 = __esm({
  "node_modules/@ethersproject/rlp/lib.esm/_version.js"() {
    version6 = "rlp/5.8.0";
  }
});

// node_modules/@ethersproject/rlp/lib.esm/index.js
var logger7;
var init_lib6 = __esm({
  "node_modules/@ethersproject/rlp/lib.esm/index.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version6();
    logger7 = new Logger(version6);
  }
});

// node_modules/@ethersproject/address/lib.esm/_version.js
var version7;
var init_version7 = __esm({
  "node_modules/@ethersproject/address/lib.esm/_version.js"() {
    version7 = "address/5.8.0";
  }
});

// node_modules/@ethersproject/address/lib.esm/index.js
function getChecksumAddress(address) {
  if (!isHexString(address, 20)) {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = arrayify(keccak256(expanded));
  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
function log10(x) {
  if (Math.log10) {
    return Math.log10(x);
  }
  return Math.log(x) / Math.LN10;
}
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum = String(98 - parseInt(expanded, 10) % 97);
  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }
  return checksum;
}
function getAddress(address) {
  let result = null;
  if (typeof address !== "string") {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger8.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger8.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress("0x" + result);
  } else {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
var logger8, MAX_SAFE_INTEGER, ibanLookup, safeDigits;
var init_lib7 = __esm({
  "node_modules/@ethersproject/address/lib.esm/index.js"() {
    "use strict";
    init_lib2();
    init_lib3();
    init_lib5();
    init_lib6();
    init_lib();
    init_version7();
    logger8 = new Logger(version7);
    MAX_SAFE_INTEGER = 9007199254740991;
    ibanLookup = {};
    for (let i = 0; i < 10; i++) {
      ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/address.js
var AddressCoder;
var init_address = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/address.js"() {
    "use strict";
    init_lib7();
    init_lib2();
    init_abstract_coder();
    AddressCoder = class extends Coder {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, value) {
        try {
          value = getAddress(value);
        } catch (error) {
          this._throwError(error.message, value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
var AnonymousCoder;
var init_anonymous = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js"() {
    "use strict";
    init_abstract_coder();
    AnonymousCoder = class extends Coder {
      constructor(coder) {
        super(coder.name, coder.type, void 0, coder.dynamic);
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value) {
        return this.coder.encode(writer, value);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name = coder.localName;
      if (!name) {
        logger9.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name]) {
        logger9.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name] = true;
      return values[name];
    });
  } else {
    logger9.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger9.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer(writer.wordSize);
  let dynamicWriter = new Writer(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != void 0) {
      values.push(value);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name = coder.localName;
    if (name) {
      if (!accum[name]) {
        accum[name] = 0;
      }
      accum[name]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name = coder.localName;
    if (!name || uniqueNames[name] !== 1) {
      return;
    }
    if (name === "length") {
      name = "_length";
    }
    if (values[name] != null) {
      return;
    }
    const value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name] = value;
    }
  });
  for (let i = 0; i < values.length; i++) {
    const value = values[i];
    if (value instanceof Error) {
      Object.defineProperty(values, i, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }
  return Object.freeze(values);
}
var logger9, ArrayCoder;
var init_array = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/array.js"() {
    "use strict";
    init_lib();
    init_version5();
    init_abstract_coder();
    init_anonymous();
    logger9 = new Logger(version5);
    ArrayCoder = class extends Coder {
      constructor(coder, length, localName) {
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        this.coder = coder;
        this.length = length;
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i = 0; i < this.length; i++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, value) {
        if (!Array.isArray(value)) {
          this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
          count = value.length;
          writer.writeValue(value.length);
        }
        logger9.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i = 0; i < value.length; i++) {
          coders.push(this.coder);
        }
        return pack(writer, coders, value);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readValue().toNumber();
          if (count * 32 > reader._data.length) {
            logger9.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
              length: reader._data.length,
              count
            });
          }
        }
        let coders = [];
        for (let i = 0; i < count; i++) {
          coders.push(new AnonymousCoder(this.coder));
        }
        return reader.coerce(this.name, unpack(reader, coders));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
var BooleanCoder;
var init_boolean = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/boolean.js"() {
    "use strict";
    init_abstract_coder();
    BooleanCoder = class extends Coder {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, value) {
        return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
        return reader.coerce(this.type, !reader.readValue().isZero());
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
var DynamicBytesCoder, BytesCoder;
var init_bytes = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/bytes.js"() {
    "use strict";
    init_lib2();
    init_abstract_coder();
    DynamicBytesCoder = class extends Coder {
      constructor(type, localName) {
        super(type, type, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value) {
        value = arrayify(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
      }
      decode(reader) {
        return reader.readBytes(reader.readValue().toNumber(), true);
      }
    };
    BytesCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(super.decode(reader)));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
var FixedBytesCoder;
var init_fixed_bytes = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js"() {
    "use strict";
    init_lib2();
    init_abstract_coder();
    FixedBytesCoder = class extends Coder {
      constructor(size, localName) {
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        this.size = size;
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, value) {
        let data = arrayify(value);
        if (data.length !== this.size) {
          this._throwError("incorrect data length", value);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/null.js
var NullCoder;
var init_null = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/null.js"() {
    "use strict";
    init_abstract_coder();
    NullCoder = class extends Coder {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value) {
        if (value != null) {
          this._throwError("not null", value);
        }
        return writer.writeBytes([]);
      }
      decode(reader) {
        reader.readBytes(0);
        return reader.coerce(this.name, null);
      }
    };
  }
});

// node_modules/@ethersproject/constants/lib.esm/addresses.js
var init_addresses = __esm({
  "node_modules/@ethersproject/constants/lib.esm/addresses.js"() {
  }
});

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2, Zero2, One, Two, WeiPerEther, MaxUint256, MinInt256, MaxInt256;
var init_bignumbers = __esm({
  "node_modules/@ethersproject/constants/lib.esm/bignumbers.js"() {
    init_lib3();
    NegativeOne2 = BigNumber.from(-1);
    Zero2 = BigNumber.from(0);
    One = BigNumber.from(1);
    Two = BigNumber.from(2);
    WeiPerEther = BigNumber.from("1000000000000000000");
    MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    MinInt256 = BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
    MaxInt256 = BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/@ethersproject/constants/lib.esm/hashes.js
var init_hashes = __esm({
  "node_modules/@ethersproject/constants/lib.esm/hashes.js"() {
  }
});

// node_modules/@ethersproject/constants/lib.esm/strings.js
var init_strings = __esm({
  "node_modules/@ethersproject/constants/lib.esm/strings.js"() {
  }
});

// node_modules/@ethersproject/constants/lib.esm/index.js
var init_lib8 = __esm({
  "node_modules/@ethersproject/constants/lib.esm/index.js"() {
    "use strict";
    init_addresses();
    init_bignumbers();
    init_hashes();
    init_strings();
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/number.js
var NumberCoder;
var init_number = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/number.js"() {
    "use strict";
    init_lib3();
    init_lib8();
    init_abstract_coder();
    NumberCoder = class extends Coder {
      constructor(size, signed2, localName) {
        const name = (signed2 ? "int" : "uint") + size * 8;
        super(name, name, localName, false);
        this.size = size;
        this.signed = signed2;
      }
      defaultValue() {
        return 0;
      }
      encode(writer, value) {
        let v = BigNumber.from(value);
        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);
        if (this.signed) {
          let bounds = maxUintValue.mask(this.size * 8 - 1);
          if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne2))) {
            this._throwError("value out-of-bounds", value);
          }
        } else if (v.lt(Zero2) || v.gt(maxUintValue.mask(this.size * 8))) {
          this._throwError("value out-of-bounds", value);
        }
        v = v.toTwos(this.size * 8).mask(this.size * 8);
        if (this.signed) {
          v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
        }
        return writer.writeValue(v);
      }
      decode(reader) {
        let value = reader.readValue().mask(this.size * 8);
        if (this.signed) {
          value = value.fromTwos(this.size * 8);
        }
        return reader.coerce(this.name, value);
      }
    };
  }
});

// node_modules/@ethersproject/strings/lib.esm/_version.js
var version8;
var init_version8 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/_version.js"() {
    version8 = "strings/5.8.0";
  }
});

// node_modules/@ethersproject/strings/lib.esm/utf8.js
function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger10.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i = 0;
    for (let o = offset + 1; o < bytes.length; o++) {
      if (bytes[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  }
  output.push(65533);
  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
function getUtf8CodePoints(bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  bytes = arrayify(bytes);
  const result = [];
  let i = 0;
  while (i < bytes.length) {
    const c = bytes[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
      } else {
        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes.length) {
      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes[i];
      if ((nextChar & 192) != 128) {
        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger10.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      if (i >= str.length || (c2 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return arrayify(result);
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}
var logger10, UnicodeNormalizationForm, Utf8ErrorReason, Utf8ErrorFuncs;
var init_utf8 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/utf8.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version8();
    logger10 = new Logger(version8);
    (function(UnicodeNormalizationForm2) {
      UnicodeNormalizationForm2["current"] = "";
      UnicodeNormalizationForm2["NFC"] = "NFC";
      UnicodeNormalizationForm2["NFD"] = "NFD";
      UnicodeNormalizationForm2["NFKC"] = "NFKC";
      UnicodeNormalizationForm2["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    (function(Utf8ErrorReason2) {
      Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
      Utf8ErrorReason2["OVERRUN"] = "string overrun";
      Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
      Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
      Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
      Utf8ErrorReason2["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    Utf8ErrorFuncs = Object.freeze({
      error: errorFunc,
      ignore: ignoreFunc,
      replace: replaceFunc
    });
  }
});

// node_modules/@ethersproject/strings/lib.esm/bytes32.js
var init_bytes32 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/bytes32.js"() {
    "use strict";
    init_lib8();
    init_lib2();
    init_utf8();
  }
});

// node_modules/@ethersproject/strings/lib.esm/idna.js
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i = 0; i < data.length; i += 4) {
    result.push(parseInt(data.substring(i, i + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map((v) => {
    let comps = v.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return { l: lo, h: hi };
  });
}
var Table_A_1_ranges, Table_B_1_flags, Table_B_2_lut_abs, Table_B_2_lut_rel, Table_B_2_complex, Table_C_ranges;
var init_idna = __esm({
  "node_modules/@ethersproject/strings/lib.esm/idna.js"() {
    "use strict";
    init_utf8();
    Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
    Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
  }
});

// node_modules/@ethersproject/strings/lib.esm/index.js
var init_lib9 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/index.js"() {
    "use strict";
    init_bytes32();
    init_idna();
    init_utf8();
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/string.js
var StringCoder;
var init_string = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/string.js"() {
    "use strict";
    init_lib9();
    init_bytes();
    StringCoder = class extends DynamicBytesCoder {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, value) {
        return super.encode(writer, toUtf8Bytes(value));
      }
      decode(reader) {
        return toUtf8String(super.decode(reader));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
var TupleCoder;
var init_tuple = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/tuple.js"() {
    "use strict";
    init_abstract_coder();
    init_array();
    TupleCoder = class extends Coder {
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        this.coders = coders;
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name = coder.localName;
          if (name) {
            if (!accum[name]) {
              accum[name] = 0;
            }
            accum[name]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name = coder.localName;
          if (!name || uniqueNames[name] !== 1) {
            return;
          }
          if (name === "length") {
            name = "_length";
          }
          if (values[name] != null) {
            return;
          }
          values[name] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, value) {
        return pack(writer, this.coders, value);
      }
      decode(reader) {
        return reader.coerce(this.name, unpack(reader, this.coders));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/abi-coder.js
var logger11, paramTypeBytes, paramTypeNumber, AbiCoder, defaultAbiCoder;
var init_abi_coder = __esm({
  "node_modules/@ethersproject/abi/lib.esm/abi-coder.js"() {
    "use strict";
    init_lib2();
    init_lib4();
    init_lib();
    init_version5();
    init_abstract_coder();
    init_address();
    init_array();
    init_boolean();
    init_bytes();
    init_fixed_bytes();
    init_null();
    init_number();
    init_string();
    init_tuple();
    init_fragments();
    logger11 = new Logger(version5);
    paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    AbiCoder = class {
      constructor(coerceFunc) {
        defineReadOnly(this, "coerceFunc", coerceFunc || null);
      }
      _getCoder(param) {
        switch (param.baseType) {
          case "address":
            return new AddressCoder(param.name);
          case "bool":
            return new BooleanCoder(param.name);
          case "string":
            return new StringCoder(param.name);
          case "bytes":
            return new BytesCoder(param.name);
          case "array":
            return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
          case "tuple":
            return new TupleCoder((param.components || []).map((component) => {
              return this._getCoder(component);
            }), param.name);
          case "":
            return new NullCoder(param.name);
        }
        let match = param.type.match(paramTypeNumber);
        if (match) {
          let size = parseInt(match[2] || "256");
          if (size === 0 || size > 256 || size % 8 !== 0) {
            logger11.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
          }
          return new NumberCoder(size / 8, match[1] === "int", param.name);
        }
        match = param.type.match(paramTypeBytes);
        if (match) {
          let size = parseInt(match[1]);
          if (size === 0 || size > 32) {
            logger11.throwArgumentError("invalid bytes length", "param", param);
          }
          return new FixedBytesCoder(size, param.name);
        }
        return logger11.throwArgumentError("invalid type", "type", param.type);
      }
      _getWordSize() {
        return 32;
      }
      _getReader(data, allowLoose) {
        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
      }
      _getWriter() {
        return new Writer(this._getWordSize());
      }
      getDefaultValue(types) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.defaultValue();
      }
      encode(types, values) {
        if (types.length !== values.length) {
          logger11.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
            count: { types: types.length, values: values.length },
            value: { types, values }
          });
        }
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        const writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
      }
      decode(types, data, loose) {
        const coders = types.map((type) => this._getCoder(ParamType.from(type)));
        const coder = new TupleCoder(coders, "_");
        return coder.decode(this._getReader(arrayify(data), loose));
      }
    };
    defaultAbiCoder = new AbiCoder();
  }
});

// node_modules/@ethersproject/hash/lib.esm/id.js
function id(text) {
  return keccak256(toUtf8Bytes(text));
}
var init_id = __esm({
  "node_modules/@ethersproject/hash/lib.esm/id.js"() {
    init_lib5();
    init_lib9();
  }
});

// node_modules/@ethersproject/hash/lib.esm/_version.js
var version9;
var init_version9 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/_version.js"() {
    version9 = "hash/5.8.0";
  }
});

// node_modules/@ethersproject/base64/lib.esm/base64.js
function decode(textData) {
  textData = atob(textData);
  const data = [];
  for (let i = 0; i < textData.length; i++) {
    data.push(textData.charCodeAt(i));
  }
  return arrayify(data);
}
var init_base64 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/base64.js"() {
    "use strict";
    init_lib2();
  }
});

// node_modules/@ethersproject/base64/lib.esm/index.js
var init_lib10 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/index.js"() {
    "use strict";
    init_base64();
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js
function flat(array, depth) {
  if (depth == null) {
    depth = 1;
  }
  const result = [];
  const forEach = result.forEach;
  const flatDeep = function(arr, depth2) {
    forEach.call(arr, function(val) {
      if (depth2 > 0 && Array.isArray(val)) {
        flatDeep(val, depth2 - 1);
      } else {
        result.push(val);
      }
    });
  };
  flatDeep(array, depth);
  return result;
}
function fromEntries(array) {
  const result = {};
  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    result[value[0]] = value[1];
  }
  return result;
}
function decode_arithmetic(bytes) {
  let pos = 0;
  function u16() {
    return bytes[pos++] << 8 | bytes[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i = 1; i < symbol_count; i++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N = 31;
  const FULL = Math.pow(2, N);
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i = 0; i < N; i++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a = low + Math.floor(range * acc[start] / total);
    let b = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a ^ b) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a = a << 1 & MASK;
      b = b << 1 & MASK | 1;
    }
    while (a & ~b & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a = a << 1 ^ HALF;
      b = (b ^ HALF) << 1 | HALF | 1;
    }
    low = a;
    range = 1 + b - a;
  }
  let offset = symbol_count - 4;
  return symbols.map((x) => {
    switch (x - offset) {
      case 3:
        return offset + 65792 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 2:
        return offset + 256 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);
      case 1:
        return offset + bytes[pos_payload++];
      default:
        return x - 1;
    }
  });
}
function read_payload(v) {
  let pos = 0;
  return () => v[pos++];
}
function read_compressed_payload(bytes) {
  return read_payload(decode_arithmetic(bytes));
}
function signed(i) {
  return i & 1 ? ~i >> 1 : i >> 1;
}
function read_counts(n, next) {
  let v = Array(n);
  for (let i = 0; i < n; i++)
    v[i] = 1 + next();
  return v;
}
function read_ascending(n, next) {
  let v = Array(n);
  for (let i = 0, x = -1; i < n; i++)
    v[i] = x += 1 + next();
  return v;
}
function read_deltas(n, next) {
  let v = Array(n);
  for (let i = 0, x = 0; i < n; i++)
    v[i] = x += signed(next());
  return v;
}
function read_member_array(next, lookup) {
  let v = read_ascending(next(), next);
  let n = next();
  let vX = read_ascending(n, next);
  let vN = read_counts(n, next);
  for (let i = 0; i < n; i++) {
    for (let j = 0; j < vN[i]; j++) {
      v.push(vX[i] + j);
    }
  }
  return lookup ? v.map((x) => lookup[x]) : v;
}
function read_mapped_map(next) {
  let ret = [];
  while (true) {
    let w = next();
    if (w == 0)
      break;
    ret.push(read_linear_table(w, next));
  }
  while (true) {
    let w = next() - 1;
    if (w < 0)
      break;
    ret.push(read_replacement_table(w, next));
  }
  return fromEntries(flat(ret));
}
function read_zero_terminated_array(next) {
  let v = [];
  while (true) {
    let i = next();
    if (i == 0)
      break;
    v.push(i);
  }
  return v;
}
function read_transposed(n, w, next) {
  let m = Array(n).fill(void 0).map(() => []);
  for (let i = 0; i < w; i++) {
    read_deltas(n, next).forEach((x, j) => m[j].push(x));
  }
  return m;
}
function read_linear_table(w, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_zero_terminated_array(next);
  let m = read_transposed(vN.length, 1 + w, next);
  return flat(m.map((v, i) => {
    const x = v[0], ys = v.slice(1);
    return Array(vN[i]).fill(void 0).map((_, j) => {
      let j_dy = j * dy;
      return [x + j * dx, ys.map((y) => y + j_dy)];
    });
  }));
}
function read_replacement_table(w, next) {
  let n = 1 + next();
  let m = read_transposed(n, 1 + w, next);
  return m.map((v) => [v[0], v.slice(1)]);
}
function read_emoji_trie(next) {
  let sorted = read_member_array(next).sort((a, b) => a - b);
  return read();
  function read() {
    let branches = [];
    while (true) {
      let keys = read_member_array(next, sorted);
      if (keys.length == 0)
        break;
      branches.push({ set: new Set(keys), node: read() });
    }
    branches.sort((a, b) => b.set.size - a.set.size);
    let temp = next();
    let valid = temp % 3;
    temp = temp / 3 | 0;
    let fe0f = !!(temp & 1);
    temp >>= 1;
    let save = temp == 1;
    let check = temp == 2;
    return { branches, valid, fe0f, save, check };
  }
}
var init_decoder = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js"() {
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js
function getData() {
  return read_compressed_payload(decode(""));
}
var init_include = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js"() {
    init_lib10();
    init_decoder();
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js
var r, VALID, IGNORED, MAPPED, EMOJI_ROOT;
var init_lib11 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js"() {
    init_lib9();
    init_include();
    init_decoder();
    r = getData();
    VALID = new Set(read_member_array(r));
    IGNORED = new Set(read_member_array(r));
    MAPPED = read_mapped_map(r);
    EMOJI_ROOT = read_emoji_trie(r);
  }
});

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var logger12, Zeros;
var init_namehash = __esm({
  "node_modules/@ethersproject/hash/lib.esm/namehash.js"() {
    init_lib2();
    init_lib9();
    init_lib5();
    init_lib();
    init_version9();
    init_lib11();
    logger12 = new Logger(version9);
    Zeros = new Uint8Array(32);
    Zeros.fill(0);
  }
});

// node_modules/@ethersproject/hash/lib.esm/message.js
var init_message = __esm({
  "node_modules/@ethersproject/hash/lib.esm/message.js"() {
    init_lib2();
    init_lib5();
    init_lib9();
  }
});

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
function checkString(key) {
  return function(value) {
    if (typeof value !== "string") {
      logger13.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
    }
    return value;
  };
}
var logger13, padding, NegativeOne3, Zero3, One2, MaxUint2562, hexTrue, hexFalse, domainChecks;
var init_typed_data = __esm({
  "node_modules/@ethersproject/hash/lib.esm/typed-data.js"() {
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib5();
    init_lib4();
    init_lib();
    init_version9();
    init_id();
    logger13 = new Logger(version9);
    padding = new Uint8Array(32);
    padding.fill(0);
    NegativeOne3 = BigNumber.from(-1);
    Zero3 = BigNumber.from(0);
    One2 = BigNumber.from(1);
    MaxUint2562 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    hexTrue = hexZeroPad(One2.toHexString(), 32);
    hexFalse = hexZeroPad(Zero3.toHexString(), 32);
    domainChecks = {
      name: checkString("name"),
      version: checkString("version"),
      chainId: function(value) {
        try {
          return BigNumber.from(value).toString();
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
      },
      verifyingContract: function(value) {
        try {
          return getAddress(value).toLowerCase();
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
        try {
          const bytes = arrayify(value);
          if (bytes.length !== 32) {
            throw new Error("bad length");
          }
          return hexlify(bytes);
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
      }
    };
  }
});

// node_modules/@ethersproject/hash/lib.esm/index.js
var init_lib12 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/index.js"() {
    "use strict";
    init_id();
    init_namehash();
    init_message();
    init_namehash();
    init_typed_data();
  }
});

// node_modules/@ethersproject/abi/lib.esm/interface.js
function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var logger14, LogDescription, TransactionDescription, ErrorDescription, Indexed, BuiltinErrors, Interface;
var init_interface = __esm({
  "node_modules/@ethersproject/abi/lib.esm/interface.js"() {
    "use strict";
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib12();
    init_lib5();
    init_lib4();
    init_abi_coder();
    init_abstract_coder();
    init_fragments();
    init_lib();
    init_version5();
    logger14 = new Logger(version5);
    LogDescription = class extends Description {
    };
    TransactionDescription = class extends Description {
    };
    ErrorDescription = class extends Description {
    };
    Indexed = class extends Description {
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
    };
    BuiltinErrors = {
      "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
      "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    Interface = class {
      constructor(fragments) {
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        defineReadOnly(this, "fragments", abi.map((fragment) => {
          return Fragment.from(fragment);
        }).filter((fragment) => fragment != null));
        defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "errors", {});
        defineReadOnly(this, "events", {});
        defineReadOnly(this, "structs", {});
        this.fragments.forEach((fragment) => {
          let bucket = null;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                logger14.warn("duplicate definition - constructor");
                return;
              }
              defineReadOnly(this, "deploy", fragment);
              return;
            case "function":
              bucket = this.functions;
              break;
            case "event":
              bucket = this.events;
              break;
            case "error":
              bucket = this.errors;
              break;
            default:
              return;
          }
          let signature = fragment.format();
          if (bucket[signature]) {
            logger14.warn("duplicate definition - " + signature);
            return;
          }
          bucket[signature] = fragment;
        });
        if (!this.deploy) {
          defineReadOnly(this, "deploy", ConstructorFragment.from({
            payable: false,
            type: "constructor"
          }));
        }
        defineReadOnly(this, "_isInterface", true);
      }
      format(format) {
        if (!format) {
          format = FormatTypes.full;
        }
        if (format === FormatTypes.sighash) {
          logger14.throwArgumentError("interface does not support formatting sighash", "format", format);
        }
        const abi = this.fragments.map((fragment) => fragment.format(format));
        if (format === FormatTypes.json) {
          return JSON.stringify(abi.map((j) => JSON.parse(j)));
        }
        return abi;
      }
      // Sub-classes can override these to handle other blockchains
      static getAbiCoder() {
        return defaultAbiCoder;
      }
      static getAddress(address) {
        return getAddress(address);
      }
      static getSighash(fragment) {
        return hexDataSlice(id(fragment.format()), 0, 4);
      }
      static getEventTopic(eventFragment) {
        return id(eventFragment.format());
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      getFunction(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          for (const name in this.functions) {
            if (nameOrSignatureOrSighash === this.getSighash(name)) {
              return this.functions[name];
            }
          }
          logger14.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.functions).filter((f) => f.split(
            "("
            /* fix:) */
          )[0] === name);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching function", "name", name);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching functions", "name", name);
          }
          return this.functions[matching[0]];
        }
        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger14.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      // Find an event definition by any means necessary (unless it is ambiguous)
      getEvent(nameOrSignatureOrTopic) {
        if (isHexString(nameOrSignatureOrTopic)) {
          const topichash = nameOrSignatureOrTopic.toLowerCase();
          for (const name in this.events) {
            if (topichash === this.getEventTopic(name)) {
              return this.events[name];
            }
          }
          logger14.throwArgumentError("no matching event", "topichash", topichash);
        }
        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
          const name = nameOrSignatureOrTopic.trim();
          const matching = Object.keys(this.events).filter((f) => f.split(
            "("
            /* fix:) */
          )[0] === name);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching event", "name", name);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching events", "name", name);
          }
          return this.events[matching[0]];
        }
        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
        if (!result) {
          logger14.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
        }
        return result;
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      getError(nameOrSignatureOrSighash) {
        if (isHexString(nameOrSignatureOrSighash)) {
          const getSighash = getStatic(this.constructor, "getSighash");
          for (const name in this.errors) {
            const error = this.errors[name];
            if (nameOrSignatureOrSighash === getSighash(error)) {
              return this.errors[name];
            }
          }
          logger14.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.errors).filter((f) => f.split(
            "("
            /* fix:) */
          )[0] === name);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching error", "name", name);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching errors", "name", name);
          }
          return this.errors[matching[0]];
        }
        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger14.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      // Get the sighash (the bytes4 selector) used by Solidity to identify a function
      getSighash(fragment) {
        if (typeof fragment === "string") {
          try {
            fragment = this.getFunction(fragment);
          } catch (error) {
            try {
              fragment = this.getError(fragment);
            } catch (_) {
              throw error;
            }
          }
        }
        return getStatic(this.constructor, "getSighash")(fragment);
      }
      // Get the topic (the bytes32 hash) used by Solidity to identify an event
      getEventTopic(eventFragment) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        return getStatic(this.constructor, "getEventTopic")(eventFragment);
      }
      _decodeParams(params, data) {
        return this._abiCoder.decode(params, data);
      }
      _encodeParams(params, values) {
        return this._abiCoder.encode(params, values);
      }
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
          logger14.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(fragment.inputs, bytes.slice(4));
      }
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        return hexlify(concat([
          this.getSighash(fragment),
          this._encodeParams(fragment.inputs, values || [])
        ]));
      }
      // Decode the data for a function call (e.g. tx.data)
      decodeFunctionData(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        const bytes = arrayify(data);
        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
          logger14.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
        }
        return this._decodeParams(functionFragment.inputs, bytes.slice(4));
      }
      // Encode the data for a function call (e.g. tx.data)
      encodeFunctionData(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(concat([
          this.getSighash(functionFragment),
          this._encodeParams(functionFragment.inputs, values || [])
        ]));
      }
      // Decode the result from a function call (e.g. from eth_call)
      decodeFunctionResult(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        let bytes = arrayify(data);
        let reason = null;
        let message = "";
        let errorArgs = null;
        let errorName = null;
        let errorSignature = null;
        switch (bytes.length % this._abiCoder._getWordSize()) {
          case 0:
            try {
              return this._abiCoder.decode(functionFragment.outputs, bytes);
            } catch (error) {
            }
            break;
          case 4: {
            const selector = hexlify(bytes.slice(0, 4));
            const builtin = BuiltinErrors[selector];
            if (builtin) {
              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
              errorName = builtin.name;
              errorSignature = builtin.signature;
              if (builtin.reason) {
                reason = errorArgs[0];
              }
              if (errorName === "Error") {
                message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
              } else if (errorName === "Panic") {
                message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
              }
            } else {
              try {
                const error = this.getError(selector);
                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                errorName = error.name;
                errorSignature = error.format();
              } catch (error) {
              }
            }
            break;
          }
        }
        return logger14.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
          method: functionFragment.format(),
          data: hexlify(data),
          errorArgs,
          errorName,
          errorSignature,
          reason
        });
      }
      // Encode the result for a function call (e.g. for eth_call)
      encodeFunctionResult(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
      }
      // Create the filter for the event with search criteria (e.g. for eth_filterLog)
      encodeFilterTopics(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (values.length > eventFragment.inputs.length) {
          logger14.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
            argument: "values",
            value: values
          });
        }
        let topics = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return id(value);
          } else if (param.type === "bytes") {
            return keccak256(hexlify(value));
          }
          if (param.type === "bool" && typeof value === "boolean") {
            value = value ? "0x01" : "0x00";
          }
          if (param.type.match(/^u?int/)) {
            value = BigNumber.from(value).toHexString();
          }
          if (param.type === "address") {
            this._abiCoder.encode(["address"], [value]);
          }
          return hexZeroPad(hexlify(value), 32);
        };
        values.forEach((value, index) => {
          let param = eventFragment.inputs[index];
          if (!param.indexed) {
            if (value != null) {
              logger14.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            }
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            logger14.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        if (values.length !== eventFragment.inputs.length) {
          logger14.throwArgumentError("event arguments/values mismatch", "values", values);
        }
        eventFragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push(id(value));
            } else if (param.type === "bytes") {
              topics.push(keccak256(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(this._abiCoder.encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: this._abiCoder.encode(dataTypes, dataValues),
          topics
        };
      }
      // Decode a filter for the event and the search criteria
      decodeEventLog(eventFragment, data, topics) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (topics != null && !eventFragment.anonymous) {
          let topicHash = this.getEventTopic(eventFragment);
          if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
            logger14.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
          }
          topics = topics.slice(1);
        }
        let indexed = [];
        let nonIndexed = [];
        let dynamic = [];
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;
        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
        let result = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (resultIndexed == null) {
              result[index] = new Indexed({ _isIndexed: true, hash: null });
            } else if (dynamic[index]) {
              result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
            } else {
              try {
                result[index] = resultIndexed[indexedIndex++];
              } catch (error) {
                result[index] = error;
              }
            }
          } else {
            try {
              result[index] = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              result[index] = error;
            }
          }
          if (param.name && result[param.name] == null) {
            const value = result[index];
            if (value instanceof Error) {
              Object.defineProperty(result, param.name, {
                enumerable: true,
                get: () => {
                  throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
                }
              });
            } else {
              result[param.name] = value;
            }
          }
        });
        for (let i = 0; i < result.length; i++) {
          const value = result[i];
          if (value instanceof Error) {
            Object.defineProperty(result, i, {
              enumerable: true,
              get: () => {
                throw wrapAccessError(`index ${i}`, value);
              }
            });
          }
        }
        return Object.freeze(result);
      }
      // Given a transaction, find the matching function fragment (if any) and
      // determine all its properties and call parameters
      parseTransaction(tx) {
        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new TransactionDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
          functionFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment),
          value: BigNumber.from(tx.value || "0")
        });
      }
      // @TODO
      //parseCallResult(data: BytesLike): ??
      // Given an event log, find the matching event fragment (if any) and
      // determine all its properties and values
      parseLog(log) {
        let fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription({
          eventFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          topic: this.getEventTopic(fragment),
          args: this.decodeEventLog(fragment, log.data, log.topics)
        });
      }
      parseError(data) {
        const hexData = hexlify(data);
        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new ErrorDescription({
          args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
          errorFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment)
        });
      }
      /*
      static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
          if (Interface.isInterface(value)) {
              return value;
          }
          if (typeof(value) === "string") {
              return new Interface(JSON.parse(value));
          }
          return new Interface(value);
      }
      */
      static isInterface(value) {
        return !!(value && value._isInterface);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/index.js
var lib_exports = {};
__export(lib_exports, {
  AbiCoder: () => AbiCoder,
  ConstructorFragment: () => ConstructorFragment,
  ErrorFragment: () => ErrorFragment,
  EventFragment: () => EventFragment,
  FormatTypes: () => FormatTypes,
  Fragment: () => Fragment,
  FunctionFragment: () => FunctionFragment,
  Indexed: () => Indexed,
  Interface: () => Interface,
  LogDescription: () => LogDescription,
  ParamType: () => ParamType,
  TransactionDescription: () => TransactionDescription,
  checkResultErrors: () => checkResultErrors,
  defaultAbiCoder: () => defaultAbiCoder
});
var init_lib13 = __esm({
  "node_modules/@ethersproject/abi/lib.esm/index.js"() {
    "use strict";
    init_fragments();
    init_abi_coder();
    init_interface();
  }
});

// node_modules/validator/lib/util/assertString.js
var require_assertString = __commonJS({
  "node_modules/validator/lib/util/assertString.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = assertString;
    function assertString(input) {
      if (input === void 0 || input === null) throw new TypeError("Expected a string but received a ".concat(input));
      if (input.constructor.name !== "String") throw new TypeError("Expected a string but received a ".concat(input.constructor.name));
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/toDate.js
var require_toDate = __commonJS({
  "node_modules/validator/lib/toDate.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toDate;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function toDate(date) {
      (0, _assertString.default)(date);
      date = Date.parse(date);
      return !isNaN(date) ? new Date(date) : null;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/nullUndefinedCheck.js
var require_nullUndefinedCheck = __commonJS({
  "node_modules/validator/lib/util/nullUndefinedCheck.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isNullOrUndefined;
    function isNullOrUndefined(value) {
      return value === null || value === void 0;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/alpha.js
var require_alpha = __commonJS({
  "node_modules/validator/lib/alpha.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.farsiLocales = exports.englishLocales = exports.dotDecimal = exports.decimal = exports.commaDecimal = exports.bengaliLocales = exports.arabicLocales = exports.alphanumeric = exports.alpha = void 0;
    var alpha = exports.alpha = {
      "en-US": /^[A-Z]+$/i,
      "az-AZ": /^[A-VXYZÇƏĞİıÖŞÜ]+$/i,
      "bg-BG": /^[А-Я]+$/i,
      "cs-CZ": /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
      "da-DK": /^[A-ZÆØÅ]+$/i,
      "de-DE": /^[A-ZÄÖÜß]+$/i,
      "el-GR": /^[Α-ώ]+$/i,
      "es-ES": /^[A-ZÁÉÍÑÓÚÜ]+$/i,
      "fa-IR": /^[ابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$/i,
      "fi-FI": /^[A-ZÅÄÖ]+$/i,
      "fr-FR": /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
      "it-IT": /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,
      "ja-JP": /^[ぁ-んァ-ヶｦ-ﾟ一-龠ー・。、]+$/i,
      "nb-NO": /^[A-ZÆØÅ]+$/i,
      "nl-NL": /^[A-ZÁÉËÏÓÖÜÚ]+$/i,
      "nn-NO": /^[A-ZÆØÅ]+$/i,
      "hu-HU": /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
      "pl-PL": /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
      "pt-PT": /^[A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,
      "ru-RU": /^[А-ЯЁ]+$/i,
      "kk-KZ": /^[А-ЯЁ\u04D8\u04B0\u0406\u04A2\u0492\u04AE\u049A\u04E8\u04BA]+$/i,
      "sl-SI": /^[A-ZČĆĐŠŽ]+$/i,
      "sk-SK": /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
      "sr-RS@latin": /^[A-ZČĆŽŠĐ]+$/i,
      "sr-RS": /^[А-ЯЂЈЉЊЋЏ]+$/i,
      "sv-SE": /^[A-ZÅÄÖ]+$/i,
      "th-TH": /^[ก-๐\s]+$/i,
      "tr-TR": /^[A-ZÇĞİıÖŞÜ]+$/i,
      "uk-UA": /^[А-ЩЬЮЯЄIЇҐі]+$/i,
      "vi-VN": /^[A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,
      "ko-KR": /^[ㄱ-ㅎㅏ-ㅣ가-힣]*$/,
      "ku-IQ": /^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
      ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,
      he: /^[א-ת]+$/,
      fa: /^['آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی']+$/i,
      bn: /^['ঀঁংঃঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহ়ঽািীুূৃৄেৈোৌ্ৎৗড়ঢ়য়ৠৡৢৣৰৱ৲৳৴৵৶৷৸৹৺৻']+$/,
      eo: /^[ABCĈD-GĜHĤIJĴK-PRSŜTUŬVZ]+$/i,
      "hi-IN": /^[\u0900-\u0961]+[\u0972-\u097F]*$/i,
      "si-LK": /^[\u0D80-\u0DFF]+$/
    };
    var alphanumeric = exports.alphanumeric = {
      "en-US": /^[0-9A-Z]+$/i,
      "az-AZ": /^[0-9A-VXYZÇƏĞİıÖŞÜ]+$/i,
      "bg-BG": /^[0-9А-Я]+$/i,
      "cs-CZ": /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,
      "da-DK": /^[0-9A-ZÆØÅ]+$/i,
      "de-DE": /^[0-9A-ZÄÖÜß]+$/i,
      "el-GR": /^[0-9Α-ω]+$/i,
      "es-ES": /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,
      "fi-FI": /^[0-9A-ZÅÄÖ]+$/i,
      "fr-FR": /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,
      "it-IT": /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,
      "ja-JP": /^[0-9０-９ぁ-んァ-ヶｦ-ﾟ一-龠ー・。、]+$/i,
      "hu-HU": /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,
      "nb-NO": /^[0-9A-ZÆØÅ]+$/i,
      "nl-NL": /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,
      "nn-NO": /^[0-9A-ZÆØÅ]+$/i,
      "pl-PL": /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,
      "pt-PT": /^[0-9A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,
      "ru-RU": /^[0-9А-ЯЁ]+$/i,
      "kk-KZ": /^[0-9А-ЯЁ\u04D8\u04B0\u0406\u04A2\u0492\u04AE\u049A\u04E8\u04BA]+$/i,
      "sl-SI": /^[0-9A-ZČĆĐŠŽ]+$/i,
      "sk-SK": /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,
      "sr-RS@latin": /^[0-9A-ZČĆŽŠĐ]+$/i,
      "sr-RS": /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,
      "sv-SE": /^[0-9A-ZÅÄÖ]+$/i,
      "th-TH": /^[ก-๙\s]+$/i,
      "tr-TR": /^[0-9A-ZÇĞİıÖŞÜ]+$/i,
      "uk-UA": /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,
      "ko-KR": /^[0-9ㄱ-ㅎㅏ-ㅣ가-힣]*$/,
      "ku-IQ": /^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,
      "vi-VN": /^[0-9A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,
      ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,
      he: /^[0-9א-ת]+$/,
      fa: /^['0-9آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی۱۲۳۴۵۶۷۸۹۰']+$/i,
      bn: /^['ঀঁংঃঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহ়ঽািীুূৃৄেৈোৌ্ৎৗড়ঢ়য়ৠৡৢৣ০১২৩৪৫৬৭৮৯ৰৱ৲৳৴৵৶৷৸৹৺৻']+$/,
      eo: /^[0-9ABCĈD-GĜHĤIJĴK-PRSŜTUŬVZ]+$/i,
      "hi-IN": /^[\u0900-\u0963]+[\u0966-\u097F]*$/i,
      "si-LK": /^[0-9\u0D80-\u0DFF]+$/
    };
    var decimal = exports.decimal = {
      "en-US": ".",
      ar: "٫"
    };
    var englishLocales = exports.englishLocales = ["AU", "GB", "HK", "IN", "NZ", "ZA", "ZM"];
    for (i = 0; i < englishLocales.length; i++) {
      locale = "en-".concat(englishLocales[i]);
      alpha[locale] = alpha["en-US"];
      alphanumeric[locale] = alphanumeric["en-US"];
      decimal[locale] = decimal["en-US"];
    }
    var locale;
    var i;
    var arabicLocales = exports.arabicLocales = ["AE", "BH", "DZ", "EG", "IQ", "JO", "KW", "LB", "LY", "MA", "QM", "QA", "SA", "SD", "SY", "TN", "YE"];
    for (_i = 0; _i < arabicLocales.length; _i++) {
      _locale = "ar-".concat(arabicLocales[_i]);
      alpha[_locale] = alpha.ar;
      alphanumeric[_locale] = alphanumeric.ar;
      decimal[_locale] = decimal.ar;
    }
    var _locale;
    var _i;
    var farsiLocales = exports.farsiLocales = ["IR", "AF"];
    for (_i2 = 0; _i2 < farsiLocales.length; _i2++) {
      _locale2 = "fa-".concat(farsiLocales[_i2]);
      alphanumeric[_locale2] = alphanumeric.fa;
      decimal[_locale2] = decimal.ar;
    }
    var _locale2;
    var _i2;
    var bengaliLocales = exports.bengaliLocales = ["BD", "IN"];
    for (_i3 = 0; _i3 < bengaliLocales.length; _i3++) {
      _locale3 = "bn-".concat(bengaliLocales[_i3]);
      alpha[_locale3] = alpha.bn;
      alphanumeric[_locale3] = alphanumeric.bn;
      decimal[_locale3] = decimal["en-US"];
    }
    var _locale3;
    var _i3;
    var dotDecimal = exports.dotDecimal = ["ar-EG", "ar-LB", "ar-LY"];
    var commaDecimal = exports.commaDecimal = ["bg-BG", "cs-CZ", "da-DK", "de-DE", "el-GR", "en-ZM", "eo", "es-ES", "fr-CA", "fr-FR", "id-ID", "it-IT", "ku-IQ", "hi-IN", "hu-HU", "nb-NO", "nn-NO", "nl-NL", "pl-PL", "pt-PT", "ru-RU", "kk-KZ", "si-LK", "sl-SI", "sr-RS@latin", "sr-RS", "sv-SE", "tr-TR", "uk-UA", "vi-VN"];
    for (_i4 = 0; _i4 < dotDecimal.length; _i4++) {
      decimal[dotDecimal[_i4]] = decimal["en-US"];
    }
    var _i4;
    for (_i5 = 0; _i5 < commaDecimal.length; _i5++) {
      decimal[commaDecimal[_i5]] = ",";
    }
    var _i5;
    alpha["fr-CA"] = alpha["fr-FR"];
    alphanumeric["fr-CA"] = alphanumeric["fr-FR"];
    alpha["pt-BR"] = alpha["pt-PT"];
    alphanumeric["pt-BR"] = alphanumeric["pt-PT"];
    decimal["pt-BR"] = decimal["pt-PT"];
    alpha["pl-Pl"] = alpha["pl-PL"];
    alphanumeric["pl-Pl"] = alphanumeric["pl-PL"];
    decimal["pl-Pl"] = decimal["pl-PL"];
    alpha["fa-AF"] = alpha.fa;
  }
});

// node_modules/validator/lib/isFloat.js
var require_isFloat = __commonJS({
  "node_modules/validator/lib/isFloat.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isFloat;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var _nullUndefinedCheck = _interopRequireDefault(require_nullUndefinedCheck());
    var _alpha = require_alpha();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isFloat(str, options) {
      (0, _assertString.default)(str);
      options = options || {};
      var float = new RegExp("^(?:[-+])?(?:[0-9]+)?(?:\\".concat(options.locale ? _alpha.decimal[options.locale] : ".", "[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$"));
      if (str === "" || str === "." || str === "," || str === "-" || str === "+") {
        return false;
      }
      var value = parseFloat(str.replace(",", "."));
      return float.test(str) && (!options.hasOwnProperty("min") || (0, _nullUndefinedCheck.default)(options.min) || value >= options.min) && (!options.hasOwnProperty("max") || (0, _nullUndefinedCheck.default)(options.max) || value <= options.max) && (!options.hasOwnProperty("lt") || (0, _nullUndefinedCheck.default)(options.lt) || value < options.lt) && (!options.hasOwnProperty("gt") || (0, _nullUndefinedCheck.default)(options.gt) || value > options.gt);
    }
    var locales = exports.locales = Object.keys(_alpha.decimal);
  }
});

// node_modules/validator/lib/toFloat.js
var require_toFloat = __commonJS({
  "node_modules/validator/lib/toFloat.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toFloat;
    var _isFloat = _interopRequireDefault(require_isFloat());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function toFloat(str) {
      if (!(0, _isFloat.default)(str)) return NaN;
      return parseFloat(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/toInt.js
var require_toInt = __commonJS({
  "node_modules/validator/lib/toInt.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toInt;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function toInt(str, radix) {
      (0, _assertString.default)(str);
      return parseInt(str, radix || 10);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/toBoolean.js
var require_toBoolean = __commonJS({
  "node_modules/validator/lib/toBoolean.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toBoolean;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function toBoolean(str, strict) {
      (0, _assertString.default)(str);
      if (strict) {
        return str === "1" || /^true$/i.test(str);
      }
      return str !== "0" && !/^false$/i.test(str) && str !== "";
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/equals.js
var require_equals = __commonJS({
  "node_modules/validator/lib/equals.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = equals;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function equals(str, comparison) {
      (0, _assertString.default)(str);
      return str === comparison;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/toString.js
var require_toString = __commonJS({
  "node_modules/validator/lib/util/toString.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = toString2;
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function toString2(input) {
      if (_typeof(input) === "object" && input !== null) {
        if (typeof input.toString === "function") {
          input = input.toString();
        } else {
          input = "[object Object]";
        }
      } else if (input === null || typeof input === "undefined" || isNaN(input) && !input.length) {
        input = "";
      }
      return String(input);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/merge.js
var require_merge = __commonJS({
  "node_modules/validator/lib/util/merge.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = merge;
    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : void 0;
      for (var key in defaults) {
        if (typeof obj[key] === "undefined") {
          obj[key] = defaults[key];
        }
      }
      return obj;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/contains.js
var require_contains = __commonJS({
  "node_modules/validator/lib/contains.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = contains;
    var _assertString = _interopRequireDefault(require_assertString());
    var _toString = _interopRequireDefault(require_toString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var defaultContainsOptions = {
      ignoreCase: false,
      minOccurrences: 1
    };
    function contains(str, elem, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, defaultContainsOptions);
      if (options.ignoreCase) {
        return str.toLowerCase().split((0, _toString.default)(elem).toLowerCase()).length > options.minOccurrences;
      }
      return str.split((0, _toString.default)(elem)).length > options.minOccurrences;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/matches.js
var require_matches = __commonJS({
  "node_modules/validator/lib/matches.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = matches;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function matches(str, pattern, modifiers) {
      (0, _assertString.default)(str);
      if (Object.prototype.toString.call(pattern) !== "[object RegExp]") {
        pattern = new RegExp(pattern, modifiers);
      }
      return !!str.match(pattern);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/checkHost.js
var require_checkHost = __commonJS({
  "node_modules/validator/lib/util/checkHost.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = checkHost;
    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    }
    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];
        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isByteLength.js
var require_isByteLength = __commonJS({
  "node_modules/validator/lib/isByteLength.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isByteLength;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function isByteLength(str, options) {
      (0, _assertString.default)(str);
      var min;
      var max;
      if (_typeof(options) === "object") {
        min = options.min || 0;
        max = options.max;
      } else {
        min = arguments[1];
        max = arguments[2];
      }
      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === "undefined" || len <= max);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isFQDN.js
var require_isFQDN = __commonJS({
  "node_modules/validator/lib/isFQDN.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isFQDN;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false,
      ignore_max_length: false
    };
    function isFQDN(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_fqdn_options);
      if (options.allow_trailing_dot && str[str.length - 1] === ".") {
        str = str.substring(0, str.length - 1);
      }
      if (options.allow_wildcard === true && str.indexOf("*.") === 0) {
        str = str.substring(2);
      }
      var parts = str.split(".");
      var tld = parts[parts.length - 1];
      if (options.require_tld) {
        if (parts.length < 2) {
          return false;
        }
        if (!options.allow_numeric_tld && !/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        }
        if (/\s/.test(tld)) {
          return false;
        }
      }
      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }
      return parts.every(function(part) {
        if (part.length > 63 && !options.ignore_max_length) {
          return false;
        }
        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        }
        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        }
        if (/^-|-$/.test(part)) {
          return false;
        }
        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }
        return true;
      });
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIP.js
var require_isIP = __commonJS({
  "node_modules/validator/lib/isIP.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIP;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var IPv4SegmentFormat = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = "(?:[0-9a-fA-F]{1,4})";
    var IPv6AddressRegExp = new RegExp("^(" + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ")(%[0-9a-zA-Z.]{1,})?$");
    function isIP(ipAddress) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      (0, _assertString.default)(ipAddress);
      var version10 = (_typeof(options) === "object" ? options.version : arguments[1]) || "";
      if (!version10) {
        return isIP(ipAddress, {
          version: 4
        }) || isIP(ipAddress, {
          version: 6
        });
      }
      if (version10.toString() === "4") {
        return IPv4AddressRegExp.test(ipAddress);
      }
      if (version10.toString() === "6") {
        return IPv6AddressRegExp.test(ipAddress);
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isEmail.js
var require_isEmail = __commonJS({
  "node_modules/validator/lib/isEmail.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEmail;
    var _assertString = _interopRequireDefault(require_assertString());
    var _checkHost = _interopRequireDefault(require_checkHost());
    var _isByteLength = _interopRequireDefault(require_isByteLength());
    var _isFQDN = _interopRequireDefault(require_isFQDN());
    var _isIP = _interopRequireDefault(require_isIP());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var default_email_options = {
      allow_display_name: false,
      allow_underscores: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: "",
      ignore_max_length: false,
      host_blacklist: [],
      host_whitelist: []
    };
    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A1-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, "$1");
      if (!display_name_without_quotes.trim()) {
        return false;
      }
      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);
      if (contains_illegal) {
        if (display_name_without_quotes === display_name) {
          return false;
        }
        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;
        if (!all_start_with_back_slash) {
          return false;
        }
      }
      return true;
    }
    function isEmail(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_email_options);
      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);
        if (display_email) {
          var display_name = display_email[1];
          str = str.replace(display_name, "").replace(/(^<|>$)/g, "");
          if (display_name.endsWith(" ")) {
            display_name = display_name.slice(0, -1);
          }
          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }
      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }
      var parts = str.split("@");
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();
      if (options.host_blacklist.length > 0 && (0, _checkHost.default)(lower_domain, options.host_blacklist)) {
        return false;
      }
      if (options.host_whitelist.length > 0 && !(0, _checkHost.default)(lower_domain, options.host_whitelist)) {
        return false;
      }
      var user = parts.join("@");
      if (options.domain_specific_validation && (lower_domain === "gmail.com" || lower_domain === "googlemail.com")) {
        user = user.toLowerCase();
        var username = user.split("+")[0];
        if (!(0, _isByteLength.default)(username.replace(/\./g, ""), {
          min: 6,
          max: 30
        })) {
          return false;
        }
        var _user_parts = username.split(".");
        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }
      if (options.ignore_max_length === false && (!(0, _isByteLength.default)(user, {
        max: 64
      }) || !(0, _isByteLength.default)(domain, {
        max: 254
      }))) {
        return false;
      }
      if (!(0, _isFQDN.default)(domain, {
        require_tld: options.require_tld,
        ignore_max_length: options.ignore_max_length,
        allow_underscores: options.allow_underscores
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }
        if (!(0, _isIP.default)(domain)) {
          if (!domain.startsWith("[") || !domain.endsWith("]")) {
            return false;
          }
          var noBracketdomain = domain.slice(1, -1);
          if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {
            return false;
          }
        }
      }
      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), "g")) !== -1) return false;
      }
      if (user[0] === '"' && user[user.length - 1] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }
      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split(".");
      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }
      return true;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/includesString.js
var require_includesString = __commonJS({
  "node_modules/validator/lib/util/includesString.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var includes = function includes2(str, val) {
      return str.indexOf(val) !== -1;
    };
    var _default = exports.default = includes;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isURL.js
var require_isURL = __commonJS({
  "node_modules/validator/lib/isURL.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isURL;
    var _assertString = _interopRequireDefault(require_assertString());
    var _checkHost = _interopRequireDefault(require_checkHost());
    var _includesString = _interopRequireDefault(require_includesString());
    var _isFQDN = _interopRequireDefault(require_isFQDN());
    var _isIP = _interopRequireDefault(require_isIP());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _slicedToArray(r2, e) {
      return _arrayWithHoles(r2) || _iterableToArrayLimit(r2, e) || _unsupportedIterableToArray(r2, e) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(r2, a) {
      if (r2) {
        if ("string" == typeof r2) return _arrayLikeToArray(r2, a);
        var t = {}.toString.call(r2).slice(8, -1);
        return "Object" === t && r2.constructor && (t = r2.constructor.name), "Map" === t || "Set" === t ? Array.from(r2) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r2, a) : void 0;
      }
    }
    function _arrayLikeToArray(r2, a) {
      (null == a || a > r2.length) && (a = r2.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r2[e];
      return n;
    }
    function _iterableToArrayLimit(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
          if (i = (t = t.call(r2)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = false;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
        } catch (r3) {
          o = true, n = r3;
        } finally {
          try {
            if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(r2) {
      if (Array.isArray(r2)) return r2;
    }
    var default_url_options = {
      protocols: ["http", "https", "ftp"],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true,
      max_allowed_length: 2084
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
    function isURL(url, options) {
      (0, _assertString.default)(url);
      if (!url || /[\s<>]/.test(url)) {
        return false;
      }
      if (url.indexOf("mailto:") === 0) {
        return false;
      }
      options = (0, _merge.default)(options, default_url_options);
      if (options.validate_length && url.length > options.max_allowed_length) {
        return false;
      }
      if (!options.allow_fragments && (0, _includesString.default)(url, "#")) {
        return false;
      }
      if (!options.allow_query_components && ((0, _includesString.default)(url, "?") || (0, _includesString.default)(url, "&"))) {
        return false;
      }
      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split("#");
      url = split.shift();
      split = url.split("?");
      url = split.shift();
      split = url.split("://");
      if (split.length > 1) {
        protocol = split.shift().toLowerCase();
        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.slice(0, 2) === "//") {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }
        split[0] = url.slice(2);
      }
      url = split.join("://");
      if (url === "") {
        return false;
      }
      split = url.split("/");
      url = split.shift();
      if (url === "" && !options.require_host) {
        return true;
      }
      split = url.split("@");
      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }
        if (split[0] === "") {
          return false;
        }
        auth = split.shift();
        if (auth.indexOf(":") >= 0 && auth.split(":").length > 2) {
          return false;
        }
        var _auth$split = auth.split(":"), _auth$split2 = _slicedToArray(_auth$split, 2), user = _auth$split2[0], password = _auth$split2[1];
        if (user === "" && password === "") {
          return false;
        }
      }
      hostname = split.join("@");
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);
      if (ipv6_match) {
        host = "";
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(":");
        host = split.shift();
        if (split.length) {
          port_str = split.join(":");
        }
      }
      if (port_str !== null && port_str.length > 0) {
        port = parseInt(port_str, 10);
        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }
      if (options.host_whitelist) {
        return (0, _checkHost.default)(host, options.host_whitelist);
      }
      if (host === "" && !options.require_host) {
        return true;
      }
      if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
        return false;
      }
      host = host || ipv6;
      if (options.host_blacklist && (0, _checkHost.default)(host, options.host_blacklist)) {
        return false;
      }
      return true;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMACAddress.js
var require_isMACAddress = __commonJS({
  "node_modules/validator/lib/isMACAddress.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMACAddress;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var macAddress48 = /^(?:[0-9a-fA-F]{2}([-:\s]))([0-9a-fA-F]{2}\1){4}([0-9a-fA-F]{2})$/;
    var macAddress48NoSeparators = /^([0-9a-fA-F]){12}$/;
    var macAddress48WithDots = /^([0-9a-fA-F]{4}\.){2}([0-9a-fA-F]{4})$/;
    var macAddress64 = /^(?:[0-9a-fA-F]{2}([-:\s]))([0-9a-fA-F]{2}\1){6}([0-9a-fA-F]{2})$/;
    var macAddress64NoSeparators = /^([0-9a-fA-F]){16}$/;
    var macAddress64WithDots = /^([0-9a-fA-F]{4}\.){3}([0-9a-fA-F]{4})$/;
    function isMACAddress(str, options) {
      (0, _assertString.default)(str);
      if (options !== null && options !== void 0 && options.eui) {
        options.eui = String(options.eui);
      }
      if (options !== null && options !== void 0 && options.no_colons || options !== null && options !== void 0 && options.no_separators) {
        if (options.eui === "48") {
          return macAddress48NoSeparators.test(str);
        }
        if (options.eui === "64") {
          return macAddress64NoSeparators.test(str);
        }
        return macAddress48NoSeparators.test(str) || macAddress64NoSeparators.test(str);
      }
      if ((options === null || options === void 0 ? void 0 : options.eui) === "48") {
        return macAddress48.test(str) || macAddress48WithDots.test(str);
      }
      if ((options === null || options === void 0 ? void 0 : options.eui) === "64") {
        return macAddress64.test(str) || macAddress64WithDots.test(str);
      }
      return isMACAddress(str, {
        eui: "48"
      }) || isMACAddress(str, {
        eui: "64"
      });
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIPRange.js
var require_isIPRange = __commonJS({
  "node_modules/validator/lib/isIPRange.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIPRange;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isIP = _interopRequireDefault(require_isIP());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var subnetMaybe = /^\d{1,3}$/;
    var v4Subnet = 32;
    var v6Subnet = 128;
    function isIPRange(str) {
      var version10 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      (0, _assertString.default)(str);
      var parts = str.split("/");
      if (parts.length !== 2) {
        return false;
      }
      if (!subnetMaybe.test(parts[1])) {
        return false;
      }
      if (parts[1].length > 1 && parts[1].startsWith("0")) {
        return false;
      }
      var isValidIP = (0, _isIP.default)(parts[0], version10);
      if (!isValidIP) {
        return false;
      }
      var expectedSubnet = null;
      switch (String(version10)) {
        case "4":
          expectedSubnet = v4Subnet;
          break;
        case "6":
          expectedSubnet = v6Subnet;
          break;
        default:
          expectedSubnet = (0, _isIP.default)(parts[0], "6") ? v6Subnet : v4Subnet;
      }
      return parts[1] <= expectedSubnet && parts[1] >= 0;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isDate.js
var require_isDate = __commonJS({
  "node_modules/validator/lib/isDate.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDate;
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _slicedToArray(r2, e) {
      return _arrayWithHoles(r2) || _iterableToArrayLimit(r2, e) || _unsupportedIterableToArray(r2, e) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
          if (i = (t = t.call(r2)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = false;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
        } catch (r3) {
          o = true, n = r3;
        } finally {
          try {
            if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(r2) {
      if (Array.isArray(r2)) return r2;
    }
    function _createForOfIteratorHelper(r2, e) {
      var t = "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (!t) {
        if (Array.isArray(r2) || (t = _unsupportedIterableToArray(r2)) || e && r2 && "number" == typeof r2.length) {
          t && (r2 = t);
          var _n = 0, F = function F2() {
          };
          return { s: F, n: function n() {
            return _n >= r2.length ? { done: true } : { done: false, value: r2[_n++] };
          }, e: function e2(r3) {
            throw r3;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var o, a = true, u = false;
      return { s: function s() {
        t = t.call(r2);
      }, n: function n() {
        var r3 = t.next();
        return a = r3.done, r3;
      }, e: function e2(r3) {
        u = true, o = r3;
      }, f: function f() {
        try {
          a || null == t.return || t.return();
        } finally {
          if (u) throw o;
        }
      } };
    }
    function _unsupportedIterableToArray(r2, a) {
      if (r2) {
        if ("string" == typeof r2) return _arrayLikeToArray(r2, a);
        var t = {}.toString.call(r2).slice(8, -1);
        return "Object" === t && r2.constructor && (t = r2.constructor.name), "Map" === t || "Set" === t ? Array.from(r2) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r2, a) : void 0;
      }
    }
    function _arrayLikeToArray(r2, a) {
      (null == a || a > r2.length) && (a = r2.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r2[e];
      return n;
    }
    var default_date_options = {
      format: "YYYY/MM/DD",
      delimiters: ["/", "-"],
      strictMode: false
    };
    function isValidFormat(format) {
      return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
    }
    function zip(date, format) {
      var zippedArr = [], len = Math.max(date.length, format.length);
      for (var i = 0; i < len; i++) {
        zippedArr.push([date[i], format[i]]);
      }
      return zippedArr;
    }
    function isDate(input, options) {
      if (typeof options === "string") {
        options = (0, _merge.default)({
          format: options
        }, default_date_options);
      } else {
        options = (0, _merge.default)(options, default_date_options);
      }
      if (typeof input === "string" && isValidFormat(options.format)) {
        if (options.strictMode && input.length !== options.format.length) return false;
        var formatDelimiter = options.delimiters.find(function(delimiter) {
          return options.format.indexOf(delimiter) !== -1;
        });
        var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function(delimiter) {
          return input.indexOf(delimiter) !== -1;
        });
        var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
        var dateObj = {};
        var _iterator = _createForOfIteratorHelper(dateAndFormat), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var _step$value = _slicedToArray(_step.value, 2), dateWord = _step$value[0], formatWord = _step$value[1];
            if (!dateWord || !formatWord || dateWord.length !== formatWord.length) {
              return false;
            }
            dateObj[formatWord.charAt(0)] = dateWord;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var fullYear = dateObj.y;
        if (fullYear.startsWith("-")) {
          return false;
        }
        if (dateObj.y.length === 2) {
          var parsedYear = parseInt(dateObj.y, 10);
          if (isNaN(parsedYear)) {
            return false;
          }
          var currentYearLastTwoDigits = (/* @__PURE__ */ new Date()).getFullYear() % 100;
          if (parsedYear < currentYearLastTwoDigits) {
            fullYear = "20".concat(dateObj.y);
          } else {
            fullYear = "19".concat(dateObj.y);
          }
        }
        var month = dateObj.m;
        if (dateObj.m.length === 1) {
          month = "0".concat(dateObj.m);
        }
        var day = dateObj.d;
        if (dateObj.d.length === 1) {
          day = "0".concat(dateObj.d);
        }
        return new Date("".concat(fullYear, "-").concat(month, "-").concat(day, "T00:00:00.000Z")).getUTCDate() === +dateObj.d;
      }
      if (!options.strictMode) {
        return Object.prototype.toString.call(input) === "[object Date]" && isFinite(input);
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isTime.js
var require_isTime = __commonJS({
  "node_modules/validator/lib/isTime.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isTime;
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var default_time_options = {
      hourFormat: "hour24",
      mode: "default"
    };
    var formats = {
      hour24: {
        default: /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/,
        withSeconds: /^([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/,
        withOptionalSeconds: /^([01]?[0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?$/
      },
      hour12: {
        default: /^(0?[1-9]|1[0-2]):([0-5][0-9]) (A|P)M$/,
        withSeconds: /^(0?[1-9]|1[0-2]):([0-5][0-9]):([0-5][0-9]) (A|P)M$/,
        withOptionalSeconds: /^(0?[1-9]|1[0-2]):([0-5][0-9])(?::([0-5][0-9]))? (A|P)M$/
      }
    };
    function isTime(input, options) {
      options = (0, _merge.default)(options, default_time_options);
      if (typeof input !== "string") return false;
      return formats[options.hourFormat][options.mode].test(input);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/includesArray.js
var require_includesArray = __commonJS({
  "node_modules/validator/lib/util/includesArray.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var includes = function includes2(arr, val) {
      return arr.some(function(arrVal) {
        return val === arrVal;
      });
    };
    var _default = exports.default = includes;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isBoolean.js
var require_isBoolean = __commonJS({
  "node_modules/validator/lib/isBoolean.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBoolean;
    var _assertString = _interopRequireDefault(require_assertString());
    var _includesArray = _interopRequireDefault(require_includesArray());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var defaultOptions = {
      loose: false
    };
    var strictBooleans = ["true", "false", "1", "0"];
    var looseBooleans = [].concat(strictBooleans, ["yes", "no"]);
    function isBoolean(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultOptions;
      (0, _assertString.default)(str);
      if (options.loose) {
        return (0, _includesArray.default)(looseBooleans, str.toLowerCase());
      }
      return (0, _includesArray.default)(strictBooleans, str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLocale.js
var require_isLocale = __commonJS({
  "node_modules/validator/lib/isLocale.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLocale;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var extlang = "([A-Za-z]{3}(-[A-Za-z]{3}){0,2})";
    var language = "(([a-zA-Z]{2,3}(-".concat(extlang, ")?)|([a-zA-Z]{5,8}))");
    var script = "([A-Za-z]{4})";
    var region = "([A-Za-z]{2}|\\d{3})";
    var variant = "([A-Za-z0-9]{5,8}|(\\d[A-Z-a-z0-9]{3}))";
    var singleton = "(\\d|[A-W]|[Y-Z]|[a-w]|[y-z])";
    var extension = "(".concat(singleton, "(-[A-Za-z0-9]{2,8})+)");
    var privateuse = "(x(-[A-Za-z0-9]{1,8})+)";
    var irregular = "((en-GB-oed)|(i-ami)|(i-bnn)|(i-default)|(i-enochian)|(i-hak)|(i-klingon)|(i-lux)|(i-mingo)|(i-navajo)|(i-pwn)|(i-tao)|(i-tay)|(i-tsu)|(sgn-BE-FR)|(sgn-BE-NL)|(sgn-CH-DE))";
    var regular = "((art-lojban)|(cel-gaulish)|(no-bok)|(no-nyn)|(zh-guoyu)|(zh-hakka)|(zh-min)|(zh-min-nan)|(zh-xiang))";
    var grandfathered = "(".concat(irregular, "|").concat(regular, ")");
    var delimiter = "(-|_)";
    var langtag = "".concat(language, "(").concat(delimiter).concat(script, ")?(").concat(delimiter).concat(region, ")?(").concat(delimiter).concat(variant, ")*(").concat(delimiter).concat(extension, ")*(").concat(delimiter).concat(privateuse, ")?");
    var languageTagRegex = new RegExp("(^".concat(privateuse, "$)|(^").concat(grandfathered, "$)|(^").concat(langtag, "$)"));
    function isLocale(str) {
      (0, _assertString.default)(str);
      return languageTagRegex.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isAbaRouting.js
var require_isAbaRouting = __commonJS({
  "node_modules/validator/lib/isAbaRouting.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAbaRouting;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var isRoutingReg = /^(?!(1[3-9])|(20)|(3[3-9])|(4[0-9])|(5[0-9])|(60)|(7[3-9])|(8[1-9])|(9[0-2])|(9[3-9]))[0-9]{9}$/;
    function isAbaRouting(str) {
      (0, _assertString.default)(str);
      if (!isRoutingReg.test(str)) return false;
      var checkSumVal = 0;
      for (var i = 0; i < str.length; i++) {
        if (i % 3 === 0) checkSumVal += str[i] * 3;
        else if (i % 3 === 1) checkSumVal += str[i] * 7;
        else checkSumVal += str[i] * 1;
      }
      return checkSumVal % 10 === 0;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isAlpha.js
var require_isAlpha = __commonJS({
  "node_modules/validator/lib/isAlpha.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAlpha;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isAlpha(_str) {
      var locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "en-US";
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      (0, _assertString.default)(_str);
      var str = _str;
      var ignore = options.ignore;
      if (ignore) {
        if (ignore instanceof RegExp) {
          str = str.replace(ignore, "");
        } else if (typeof ignore === "string") {
          str = str.replace(new RegExp("[".concat(ignore.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, "\\$&"), "]"), "g"), "");
        } else {
          throw new Error("ignore should be instance of a String or RegExp");
        }
      }
      if (locale in _alpha.alpha) {
        return _alpha.alpha[locale].test(str);
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    var locales = exports.locales = Object.keys(_alpha.alpha);
  }
});

// node_modules/validator/lib/isAlphanumeric.js
var require_isAlphanumeric = __commonJS({
  "node_modules/validator/lib/isAlphanumeric.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAlphanumeric;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isAlphanumeric(_str) {
      var locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "en-US";
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      (0, _assertString.default)(_str);
      var str = _str;
      var ignore = options.ignore;
      if (ignore) {
        if (ignore instanceof RegExp) {
          str = str.replace(ignore, "");
        } else if (typeof ignore === "string") {
          str = str.replace(new RegExp("[".concat(ignore.replace(/[-[\]{}()*+?.,\\^$|#\\s]/g, "\\$&"), "]"), "g"), "");
        } else {
          throw new Error("ignore should be instance of a String or RegExp");
        }
      }
      if (locale in _alpha.alphanumeric) {
        return _alpha.alphanumeric[locale].test(str);
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    var locales = exports.locales = Object.keys(_alpha.alphanumeric);
  }
});

// node_modules/validator/lib/isNumeric.js
var require_isNumeric = __commonJS({
  "node_modules/validator/lib/isNumeric.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isNumeric;
    var _assertString = _interopRequireDefault(require_assertString());
    var _alpha = require_alpha();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var numericNoSymbols = /^[0-9]+$/;
    function isNumeric(str, options) {
      (0, _assertString.default)(str);
      if (options && options.no_symbols) {
        return numericNoSymbols.test(str);
      }
      return new RegExp("^[+-]?([0-9]*[".concat((options || {}).locale ? _alpha.decimal[options.locale] : ".", "])?[0-9]+$")).test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isPassportNumber.js
var require_isPassportNumber = __commonJS({
  "node_modules/validator/lib/isPassportNumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPassportNumber;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var passportRegexByCountryCode = {
      AM: /^[A-Z]{2}\d{7}$/,
      // ARMENIA
      AR: /^[A-Z]{3}\d{6}$/,
      // ARGENTINA
      AT: /^[A-Z]\d{7}$/,
      // AUSTRIA
      AU: /^[A-Z]\d{7}$/,
      // AUSTRALIA
      AZ: /^[A-Z]{1}\d{8}$/,
      // AZERBAIJAN
      BE: /^[A-Z]{2}\d{6}$/,
      // BELGIUM
      BG: /^\d{9}$/,
      // BULGARIA
      BR: /^[A-Z]{2}\d{6}$/,
      // BRAZIL
      BY: /^[A-Z]{2}\d{7}$/,
      // BELARUS
      CA: /^[A-Z]{2}\d{6}$|^[A-Z]\d{6}[A-Z]{2}$/,
      // CANADA
      CH: /^[A-Z]\d{7}$/,
      // SWITZERLAND
      CN: /^G\d{8}$|^E(?![IO])[A-Z0-9]\d{7}$/,
      // CHINA [G=Ordinary, E=Electronic] followed by 8-digits, or E followed by any UPPERCASE letter (except I and O) followed by 7 digits
      CY: /^[A-Z](\d{6}|\d{8})$/,
      // CYPRUS
      CZ: /^\d{8}$/,
      // CZECH REPUBLIC
      DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,
      // GERMANY
      DK: /^\d{9}$/,
      // DENMARK
      DZ: /^\d{9}$/,
      // ALGERIA
      EE: /^([A-Z]\d{7}|[A-Z]{2}\d{7})$/,
      // ESTONIA (K followed by 7-digits), e-passports have 2 UPPERCASE followed by 7 digits
      ES: /^[A-Z0-9]{2}([A-Z0-9]?)\d{6}$/,
      // SPAIN
      FI: /^[A-Z]{2}\d{7}$/,
      // FINLAND
      FR: /^\d{2}[A-Z]{2}\d{5}$/,
      // FRANCE
      GB: /^\d{9}$/,
      // UNITED KINGDOM
      GR: /^[A-Z]{2}\d{7}$/,
      // GREECE
      HR: /^\d{9}$/,
      // CROATIA
      HU: /^[A-Z]{2}(\d{6}|\d{7})$/,
      // HUNGARY
      IE: /^[A-Z0-9]{2}\d{7}$/,
      // IRELAND
      IN: /^[A-Z]{1}-?\d{7}$/,
      // INDIA
      ID: /^[A-C]\d{7}$/,
      // INDONESIA
      IR: /^[A-Z]\d{8}$/,
      // IRAN
      IS: /^(A)\d{7}$/,
      // ICELAND
      IT: /^[A-Z0-9]{2}\d{7}$/,
      // ITALY
      JM: /^[Aa]\d{7}$/,
      // JAMAICA
      JP: /^[A-Z]{2}\d{7}$/,
      // JAPAN
      KR: /^[MS]\d{8}$/,
      // SOUTH KOREA, REPUBLIC OF KOREA, [S=PS Passports, M=PM Passports]
      KZ: /^[a-zA-Z]\d{7}$/,
      // KAZAKHSTAN
      LI: /^[a-zA-Z]\d{5}$/,
      // LIECHTENSTEIN
      LT: /^[A-Z0-9]{8}$/,
      // LITHUANIA
      LU: /^[A-Z0-9]{8}$/,
      // LUXEMBURG
      LV: /^[A-Z0-9]{2}\d{7}$/,
      // LATVIA
      LY: /^[A-Z0-9]{8}$/,
      // LIBYA
      MT: /^\d{7}$/,
      // MALTA
      MZ: /^([A-Z]{2}\d{7})|(\d{2}[A-Z]{2}\d{5})$/,
      // MOZAMBIQUE
      MY: /^[AHK]\d{8}$/,
      // MALAYSIA
      MX: /^\d{10,11}$/,
      // MEXICO
      NL: /^[A-Z]{2}[A-Z0-9]{6}\d$/,
      // NETHERLANDS
      NZ: /^([Ll]([Aa]|[Dd]|[Ff]|[Hh])|[Ee]([Aa]|[Pp])|[Nn])\d{6}$/,
      // NEW ZEALAND
      PH: /^([A-Z](\d{6}|\d{7}[A-Z]))|([A-Z]{2}(\d{6}|\d{7}))$/,
      // PHILIPPINES
      PK: /^[A-Z]{2}\d{7}$/,
      // PAKISTAN
      PL: /^[A-Z]{2}\d{7}$/,
      // POLAND
      PT: /^[A-Z]\d{6}$/,
      // PORTUGAL
      RO: /^\d{8,9}$/,
      // ROMANIA
      RU: /^\d{9}$/,
      // RUSSIAN FEDERATION
      SE: /^\d{8}$/,
      // SWEDEN
      SL: /^(P)[A-Z]\d{7}$/,
      // SLOVENIA
      SK: /^[0-9A-Z]\d{7}$/,
      // SLOVAKIA
      TH: /^[A-Z]{1,2}\d{6,7}$/,
      // THAILAND
      TR: /^[A-Z]\d{8}$/,
      // TURKEY
      UA: /^[A-Z]{2}\d{6}$/,
      // UKRAINE
      US: /^\d{9}$|^[A-Z]\d{8}$/,
      // UNITED STATES
      ZA: /^[TAMD]\d{8}$/
      // SOUTH AFRICA
    };
    var locales = exports.locales = Object.keys(passportRegexByCountryCode);
    function isPassportNumber(str, countryCode) {
      (0, _assertString.default)(str);
      var normalizedStr = str.replace(/\s/g, "").toUpperCase();
      return countryCode.toUpperCase() in passportRegexByCountryCode && passportRegexByCountryCode[countryCode].test(normalizedStr);
    }
  }
});

// node_modules/validator/lib/isInt.js
var require_isInt = __commonJS({
  "node_modules/validator/lib/isInt.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isInt;
    var _assertString = _interopRequireDefault(require_assertString());
    var _nullUndefinedCheck = _interopRequireDefault(require_nullUndefinedCheck());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;
    var intLeadingZeroes = /^[-+]?[0-9]+$/;
    function isInt(str, options) {
      (0, _assertString.default)(str);
      options = options || {};
      var regex = options.allow_leading_zeroes === false ? int : intLeadingZeroes;
      var minCheckPassed = !options.hasOwnProperty("min") || (0, _nullUndefinedCheck.default)(options.min) || str >= options.min;
      var maxCheckPassed = !options.hasOwnProperty("max") || (0, _nullUndefinedCheck.default)(options.max) || str <= options.max;
      var ltCheckPassed = !options.hasOwnProperty("lt") || (0, _nullUndefinedCheck.default)(options.lt) || str < options.lt;
      var gtCheckPassed = !options.hasOwnProperty("gt") || (0, _nullUndefinedCheck.default)(options.gt) || str > options.gt;
      return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isPort.js
var require_isPort = __commonJS({
  "node_modules/validator/lib/isPort.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPort;
    var _isInt = _interopRequireDefault(require_isInt());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isPort(str) {
      return (0, _isInt.default)(str, {
        allow_leading_zeroes: false,
        min: 0,
        max: 65535
      });
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLowercase.js
var require_isLowercase = __commonJS({
  "node_modules/validator/lib/isLowercase.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLowercase;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isLowercase(str) {
      (0, _assertString.default)(str);
      return str === str.toLowerCase();
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isUppercase.js
var require_isUppercase = __commonJS({
  "node_modules/validator/lib/isUppercase.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isUppercase;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isUppercase(str) {
      (0, _assertString.default)(str);
      return str === str.toUpperCase();
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIMEI.js
var require_isIMEI = __commonJS({
  "node_modules/validator/lib/isIMEI.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIMEI;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var imeiRegexWithoutHyphens = /^[0-9]{15}$/;
    var imeiRegexWithHyphens = /^\d{2}-\d{6}-\d{6}-\d{1}$/;
    function isIMEI(str, options) {
      (0, _assertString.default)(str);
      options = options || {};
      var imeiRegex = imeiRegexWithoutHyphens;
      if (options.allow_hyphens) {
        imeiRegex = imeiRegexWithHyphens;
      }
      if (!imeiRegex.test(str)) {
        return false;
      }
      str = str.replace(/-/g, "");
      var sum = 0, mul = 2, l = 14;
      for (var i = 0; i < l; i++) {
        var digit = str.substring(l - i - 1, l - i);
        var tp = parseInt(digit, 10) * mul;
        if (tp >= 10) {
          sum += tp % 10 + 1;
        } else {
          sum += tp;
        }
        if (mul === 1) {
          mul += 1;
        } else {
          mul -= 1;
        }
      }
      var chk = (10 - sum % 10) % 10;
      if (chk !== parseInt(str.substring(14, 15), 10)) {
        return false;
      }
      return true;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isAscii.js
var require_isAscii = __commonJS({
  "node_modules/validator/lib/isAscii.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAscii;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var ascii = /^[\x00-\x7F]+$/;
    function isAscii(str) {
      (0, _assertString.default)(str);
      return ascii.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isFullWidth.js
var require_isFullWidth = __commonJS({
  "node_modules/validator/lib/isFullWidth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isFullWidth;
    exports.fullWidth = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var fullWidth = exports.fullWidth = /[^\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
    function isFullWidth(str) {
      (0, _assertString.default)(str);
      return fullWidth.test(str);
    }
  }
});

// node_modules/validator/lib/isHalfWidth.js
var require_isHalfWidth = __commonJS({
  "node_modules/validator/lib/isHalfWidth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHalfWidth;
    exports.halfWidth = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var halfWidth = exports.halfWidth = /[\u0020-\u007E\uFF61-\uFF9F\uFFA0-\uFFDC\uFFE8-\uFFEE0-9a-zA-Z]/;
    function isHalfWidth(str) {
      (0, _assertString.default)(str);
      return halfWidth.test(str);
    }
  }
});

// node_modules/validator/lib/isVariableWidth.js
var require_isVariableWidth = __commonJS({
  "node_modules/validator/lib/isVariableWidth.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isVariableWidth;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isFullWidth = require_isFullWidth();
    var _isHalfWidth = require_isHalfWidth();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isVariableWidth(str) {
      (0, _assertString.default)(str);
      return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMultibyte.js
var require_isMultibyte = __commonJS({
  "node_modules/validator/lib/isMultibyte.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMultibyte;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var multibyte = /[^\x00-\x7F]/;
    function isMultibyte(str) {
      (0, _assertString.default)(str);
      return multibyte.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/multilineRegex.js
var require_multilineRegex = __commonJS({
  "node_modules/validator/lib/util/multilineRegex.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = multilineRegexp;
    function multilineRegexp(parts, flags) {
      var regexpAsStringLiteral = parts.join("");
      return new RegExp(regexpAsStringLiteral, flags);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isSemVer.js
var require_isSemVer = __commonJS({
  "node_modules/validator/lib/isSemVer.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isSemVer;
    var _assertString = _interopRequireDefault(require_assertString());
    var _multilineRegex = _interopRequireDefault(require_multilineRegex());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var semanticVersioningRegex = (0, _multilineRegex.default)(["^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)", "(?:-((?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-z-][0-9a-z-]*))*))", "?(?:\\+([0-9a-z-]+(?:\\.[0-9a-z-]+)*))?$"], "i");
    function isSemVer(str) {
      (0, _assertString.default)(str);
      return semanticVersioningRegex.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isSurrogatePair.js
var require_isSurrogatePair = __commonJS({
  "node_modules/validator/lib/isSurrogatePair.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isSurrogatePair;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var surrogatePair = /[\uD800-\uDBFF][\uDC00-\uDFFF]/;
    function isSurrogatePair(str) {
      (0, _assertString.default)(str);
      return surrogatePair.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isDecimal.js
var require_isDecimal = __commonJS({
  "node_modules/validator/lib/isDecimal.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDecimal;
    var _merge = _interopRequireDefault(require_merge());
    var _assertString = _interopRequireDefault(require_assertString());
    var _includesArray = _interopRequireDefault(require_includesArray());
    var _alpha = require_alpha();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function decimalRegExp(options) {
      var regExp = new RegExp("^[-+]?([0-9]+)?(\\".concat(_alpha.decimal[options.locale], "[0-9]{").concat(options.decimal_digits, "})").concat(options.force_decimal ? "" : "?", "$"));
      return regExp;
    }
    var default_decimal_options = {
      force_decimal: false,
      decimal_digits: "1,",
      locale: "en-US"
    };
    var blacklist = ["", "-", "+"];
    function isDecimal(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_decimal_options);
      if (options.locale in _alpha.decimal) {
        return !(0, _includesArray.default)(blacklist, str.replace(/ /g, "")) && decimalRegExp(options).test(str);
      }
      throw new Error("Invalid locale '".concat(options.locale, "'"));
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isHexadecimal.js
var require_isHexadecimal = __commonJS({
  "node_modules/validator/lib/isHexadecimal.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHexadecimal;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var hexadecimal = /^(0x|0h)?[0-9A-F]+$/i;
    function isHexadecimal(str) {
      (0, _assertString.default)(str);
      return hexadecimal.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isOctal.js
var require_isOctal = __commonJS({
  "node_modules/validator/lib/isOctal.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isOctal;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var octal = /^(0o)?[0-7]+$/i;
    function isOctal(str) {
      (0, _assertString.default)(str);
      return octal.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isDivisibleBy.js
var require_isDivisibleBy = __commonJS({
  "node_modules/validator/lib/isDivisibleBy.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDivisibleBy;
    var _assertString = _interopRequireDefault(require_assertString());
    var _toFloat = _interopRequireDefault(require_toFloat());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isDivisibleBy(str, num) {
      (0, _assertString.default)(str);
      return (0, _toFloat.default)(str) % parseInt(num, 10) === 0;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isHexColor.js
var require_isHexColor = __commonJS({
  "node_modules/validator/lib/isHexColor.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHexColor;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i;
    function isHexColor(str) {
      (0, _assertString.default)(str);
      return hexcolor.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isRgbColor.js
var require_isRgbColor = __commonJS({
  "node_modules/validator/lib/isRgbColor.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isRgbColor;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var rgbColor = /^rgb\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\)$/;
    var rgbaColor = /^rgba\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){3}(0?\.\d\d?|1(\.0)?|0(\.0)?)\)$/;
    var rgbColorPercent = /^rgb\((([0-9]%|[1-9][0-9]%|100%),){2}([0-9]%|[1-9][0-9]%|100%)\)$/;
    var rgbaColorPercent = /^rgba\((([0-9]%|[1-9][0-9]%|100%),){3}(0?\.\d\d?|1(\.0)?|0(\.0)?)\)$/;
    var startsWithRgb = /^rgba?/;
    function isRgbColor(str, options) {
      (0, _assertString.default)(str);
      var allowSpaces = false;
      var includePercentValues = true;
      if (_typeof(options) !== "object") {
        if (arguments.length >= 2) {
          includePercentValues = arguments[1];
        }
      } else {
        allowSpaces = options.allowSpaces !== void 0 ? options.allowSpaces : allowSpaces;
        includePercentValues = options.includePercentValues !== void 0 ? options.includePercentValues : includePercentValues;
      }
      if (allowSpaces) {
        if (!startsWithRgb.test(str)) {
          return false;
        }
        str = str.replace(/\s/g, "");
      }
      if (!includePercentValues) {
        return rgbColor.test(str) || rgbaColor.test(str);
      }
      return rgbColor.test(str) || rgbaColor.test(str) || rgbColorPercent.test(str) || rgbaColorPercent.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isHSL.js
var require_isHSL = __commonJS({
  "node_modules/validator/lib/isHSL.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHSL;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var hslComma = /^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(,(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}(,((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?))?\)$/i;
    var hslSpace = /^hsla?\(((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?))(deg|grad|rad|turn)?(\s(\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%){2}\s?(\/\s((\+|\-)?([0-9]+(\.[0-9]+)?(e(\+|\-)?[0-9]+)?|\.[0-9]+(e(\+|\-)?[0-9]+)?)%?)\s?)?\)$/i;
    function isHSL(str) {
      (0, _assertString.default)(str);
      var strippedStr = str.replace(/\s+/g, " ").replace(/\s?(hsla?\(|\)|,)\s?/ig, "$1");
      if (strippedStr.indexOf(",") !== -1) {
        return hslComma.test(strippedStr);
      }
      return hslSpace.test(strippedStr);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISRC.js
var require_isISRC = __commonJS({
  "node_modules/validator/lib/isISRC.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISRC;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var isrc = /^[A-Z]{2}[0-9A-Z]{3}\d{2}\d{5}$/;
    function isISRC(str) {
      (0, _assertString.default)(str);
      return isrc.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIBAN.js
var require_isIBAN = __commonJS({
  "node_modules/validator/lib/isIBAN.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIBAN;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var _includesArray = _interopRequireDefault(require_includesArray());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var ibanRegexThroughCountryCode = {
      AD: /^(AD[0-9]{2})\d{8}[A-Z0-9]{12}$/,
      AE: /^(AE[0-9]{2})\d{3}\d{16}$/,
      AL: /^(AL[0-9]{2})\d{8}[A-Z0-9]{16}$/,
      AT: /^(AT[0-9]{2})\d{16}$/,
      AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\d{20}$/,
      BA: /^(BA[0-9]{2})\d{16}$/,
      BE: /^(BE[0-9]{2})\d{12}$/,
      BG: /^(BG[0-9]{2})[A-Z]{4}\d{6}[A-Z0-9]{8}$/,
      BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,
      BR: /^(BR[0-9]{2})\d{23}[A-Z]{1}[A-Z0-9]{1}$/,
      BY: /^(BY[0-9]{2})[A-Z0-9]{4}\d{20}$/,
      CH: /^(CH[0-9]{2})\d{5}[A-Z0-9]{12}$/,
      CR: /^(CR[0-9]{2})\d{18}$/,
      CY: /^(CY[0-9]{2})\d{8}[A-Z0-9]{16}$/,
      CZ: /^(CZ[0-9]{2})\d{20}$/,
      DE: /^(DE[0-9]{2})\d{18}$/,
      DK: /^(DK[0-9]{2})\d{14}$/,
      DO: /^(DO[0-9]{2})[A-Z]{4}\d{20}$/,
      DZ: /^(DZ\d{24})$/,
      EE: /^(EE[0-9]{2})\d{16}$/,
      EG: /^(EG[0-9]{2})\d{25}$/,
      ES: /^(ES[0-9]{2})\d{20}$/,
      FI: /^(FI[0-9]{2})\d{14}$/,
      FO: /^(FO[0-9]{2})\d{14}$/,
      FR: /^(FR[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,
      GB: /^(GB[0-9]{2})[A-Z]{4}\d{14}$/,
      GE: /^(GE[0-9]{2})[A-Z0-9]{2}\d{16}$/,
      GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,
      GL: /^(GL[0-9]{2})\d{14}$/,
      GR: /^(GR[0-9]{2})\d{7}[A-Z0-9]{16}$/,
      GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,
      HR: /^(HR[0-9]{2})\d{17}$/,
      HU: /^(HU[0-9]{2})\d{24}$/,
      IE: /^(IE[0-9]{2})[A-Z]{4}\d{14}$/,
      IL: /^(IL[0-9]{2})\d{19}$/,
      IQ: /^(IQ[0-9]{2})[A-Z]{4}\d{15}$/,
      IR: /^(IR[0-9]{2})0\d{2}0\d{18}$/,
      IS: /^(IS[0-9]{2})\d{22}$/,
      IT: /^(IT[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,
      JO: /^(JO[0-9]{2})[A-Z]{4}\d{22}$/,
      KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,
      KZ: /^(KZ[0-9]{2})\d{3}[A-Z0-9]{13}$/,
      LB: /^(LB[0-9]{2})\d{4}[A-Z0-9]{20}$/,
      LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,
      LI: /^(LI[0-9]{2})\d{5}[A-Z0-9]{12}$/,
      LT: /^(LT[0-9]{2})\d{16}$/,
      LU: /^(LU[0-9]{2})\d{3}[A-Z0-9]{13}$/,
      LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,
      MA: /^(MA[0-9]{26})$/,
      MC: /^(MC[0-9]{2})\d{10}[A-Z0-9]{11}\d{2}$/,
      MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,
      ME: /^(ME[0-9]{2})\d{18}$/,
      MK: /^(MK[0-9]{2})\d{3}[A-Z0-9]{10}\d{2}$/,
      MR: /^(MR[0-9]{2})\d{23}$/,
      MT: /^(MT[0-9]{2})[A-Z]{4}\d{5}[A-Z0-9]{18}$/,
      MU: /^(MU[0-9]{2})[A-Z]{4}\d{19}[A-Z]{3}$/,
      MZ: /^(MZ[0-9]{2})\d{21}$/,
      NL: /^(NL[0-9]{2})[A-Z]{4}\d{10}$/,
      NO: /^(NO[0-9]{2})\d{11}$/,
      PK: /^(PK[0-9]{2})[A-Z0-9]{4}\d{16}$/,
      PL: /^(PL[0-9]{2})\d{24}$/,
      PS: /^(PS[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,
      PT: /^(PT[0-9]{2})\d{21}$/,
      QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,
      RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,
      RS: /^(RS[0-9]{2})\d{18}$/,
      SA: /^(SA[0-9]{2})\d{2}[A-Z0-9]{18}$/,
      SC: /^(SC[0-9]{2})[A-Z]{4}\d{20}[A-Z]{3}$/,
      SE: /^(SE[0-9]{2})\d{20}$/,
      SI: /^(SI[0-9]{2})\d{15}$/,
      SK: /^(SK[0-9]{2})\d{20}$/,
      SM: /^(SM[0-9]{2})[A-Z]{1}\d{10}[A-Z0-9]{12}$/,
      SV: /^(SV[0-9]{2})[A-Z0-9]{4}\d{20}$/,
      TL: /^(TL[0-9]{2})\d{19}$/,
      TN: /^(TN[0-9]{2})\d{20}$/,
      TR: /^(TR[0-9]{2})\d{5}[A-Z0-9]{17}$/,
      UA: /^(UA[0-9]{2})\d{6}[A-Z0-9]{19}$/,
      VA: /^(VA[0-9]{2})\d{18}$/,
      VG: /^(VG[0-9]{2})[A-Z]{4}\d{16}$/,
      XK: /^(XK[0-9]{2})\d{16}$/
    };
    function hasOnlyValidCountryCodes(countryCodeArray) {
      var countryCodeArrayFilteredWithObjectIbanCode = countryCodeArray.filter(function(countryCode) {
        return !(countryCode in ibanRegexThroughCountryCode);
      });
      if (countryCodeArrayFilteredWithObjectIbanCode.length > 0) {
        return false;
      }
      return true;
    }
    function hasValidIbanFormat(str, options) {
      var strippedStr = str.replace(/[\s\-]+/gi, "").toUpperCase();
      var isoCountryCode = strippedStr.slice(0, 2).toUpperCase();
      var isoCountryCodeInIbanRegexCodeObject = isoCountryCode in ibanRegexThroughCountryCode;
      if (options.whitelist) {
        if (!hasOnlyValidCountryCodes(options.whitelist)) {
          return false;
        }
        var isoCountryCodeInWhiteList = (0, _includesArray.default)(options.whitelist, isoCountryCode);
        if (!isoCountryCodeInWhiteList) {
          return false;
        }
      }
      if (options.blacklist) {
        var isoCountryCodeInBlackList = (0, _includesArray.default)(options.blacklist, isoCountryCode);
        if (isoCountryCodeInBlackList) {
          return false;
        }
      }
      return isoCountryCodeInIbanRegexCodeObject && ibanRegexThroughCountryCode[isoCountryCode].test(strippedStr);
    }
    function hasValidIbanChecksum(str) {
      var strippedStr = str.replace(/[^A-Z0-9]+/gi, "").toUpperCase();
      var rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);
      var alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, function(char) {
        return char.charCodeAt(0) - 55;
      });
      var remainder = alphaCapsReplacedWithDigits.match(/\d{1,7}/g).reduce(function(acc, value) {
        return Number(acc + value) % 97;
      }, "");
      return remainder === 1;
    }
    function isIBAN(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      (0, _assertString.default)(str);
      return hasValidIbanFormat(str, options) && hasValidIbanChecksum(str);
    }
    var locales = exports.locales = Object.keys(ibanRegexThroughCountryCode);
  }
});

// node_modules/validator/lib/isISO31661Alpha2.js
var require_isISO31661Alpha2 = __commonJS({
  "node_modules/validator/lib/isISO31661Alpha2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CountryCodes = void 0;
    exports.default = isISO31661Alpha2;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var validISO31661Alpha2CountriesCodes = /* @__PURE__ */ new Set(["AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW"]);
    function isISO31661Alpha2(str) {
      (0, _assertString.default)(str);
      return validISO31661Alpha2CountriesCodes.has(str.toUpperCase());
    }
    var CountryCodes = exports.CountryCodes = validISO31661Alpha2CountriesCodes;
  }
});

// node_modules/validator/lib/isBIC.js
var require_isBIC = __commonJS({
  "node_modules/validator/lib/isBIC.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBIC;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isISO31661Alpha = require_isISO31661Alpha2();
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var isBICReg = /^[A-Za-z]{6}[A-Za-z0-9]{2}([A-Za-z0-9]{3})?$/;
    function isBIC(str) {
      (0, _assertString.default)(str);
      var countryCode = str.slice(4, 6).toUpperCase();
      if (!_isISO31661Alpha.CountryCodes.has(countryCode) && countryCode !== "XK") {
        return false;
      }
      return isBICReg.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMD5.js
var require_isMD5 = __commonJS({
  "node_modules/validator/lib/isMD5.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMD5;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var md5 = /^[a-f0-9]{32}$/;
    function isMD5(str) {
      (0, _assertString.default)(str);
      return md5.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isHash.js
var require_isHash = __commonJS({
  "node_modules/validator/lib/isHash.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isHash;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var lengths = {
      md5: 32,
      md4: 32,
      sha1: 40,
      sha256: 64,
      sha384: 96,
      sha512: 128,
      ripemd128: 32,
      ripemd160: 40,
      tiger128: 32,
      tiger160: 40,
      tiger192: 48,
      crc32: 8,
      crc32b: 8
    };
    function isHash(str, algorithm) {
      (0, _assertString.default)(str);
      var hash = new RegExp("^[a-fA-F0-9]{".concat(lengths[algorithm], "}$"));
      return hash.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isBase64.js
var require_isBase64 = __commonJS({
  "node_modules/validator/lib/isBase64.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBase64;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var base64WithPadding = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/;
    var base64WithoutPadding = /^[A-Za-z0-9+/]+$/;
    var base64UrlWithPadding = /^(?:[A-Za-z0-9_-]{4})*(?:[A-Za-z0-9_-]{2}==|[A-Za-z0-9_-]{3}=|[A-Za-z0-9_-]{4})$/;
    var base64UrlWithoutPadding = /^[A-Za-z0-9_-]+$/;
    function isBase64(str, options) {
      var _options;
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, {
        urlSafe: false,
        padding: !((_options = options) !== null && _options !== void 0 && _options.urlSafe)
      });
      if (str === "") return true;
      var regex;
      if (options.urlSafe) {
        regex = options.padding ? base64UrlWithPadding : base64UrlWithoutPadding;
      } else {
        regex = options.padding ? base64WithPadding : base64WithoutPadding;
      }
      return (!options.padding || str.length % 4 === 0) && regex.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isJWT.js
var require_isJWT = __commonJS({
  "node_modules/validator/lib/isJWT.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isJWT;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isBase = _interopRequireDefault(require_isBase64());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isJWT(str) {
      (0, _assertString.default)(str);
      var dotSplit = str.split(".");
      var len = dotSplit.length;
      if (len !== 3) {
        return false;
      }
      return dotSplit.reduce(function(acc, currElem) {
        return acc && (0, _isBase.default)(currElem, {
          urlSafe: true
        });
      }, true);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isJSON.js
var require_isJSON = __commonJS({
  "node_modules/validator/lib/isJSON.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isJSON;
    var _assertString = _interopRequireDefault(require_assertString());
    var _includesArray = _interopRequireDefault(require_includesArray());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var default_json_options = {
      allow_primitives: false
    };
    function isJSON(str, options) {
      (0, _assertString.default)(str);
      try {
        options = (0, _merge.default)(options, default_json_options);
        var primitives = [];
        if (options.allow_primitives) {
          primitives = [null, false, true];
        }
        var obj = JSON.parse(str);
        return (0, _includesArray.default)(primitives, obj) || !!obj && _typeof(obj) === "object";
      } catch (e) {
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isEmpty.js
var require_isEmpty = __commonJS({
  "node_modules/validator/lib/isEmpty.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEmpty;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var default_is_empty_options = {
      ignore_whitespace: false
    };
    function isEmpty(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_is_empty_options);
      return (options.ignore_whitespace ? str.trim().length : str.length) === 0;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLength.js
var require_isLength = __commonJS({
  "node_modules/validator/lib/isLength.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLength;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function isLength(str, options) {
      (0, _assertString.default)(str);
      var min;
      var max;
      if (_typeof(options) === "object") {
        min = options.min || 0;
        max = options.max;
      } else {
        min = arguments[1] || 0;
        max = arguments[2];
      }
      var presentationSequences = str.match(/(\uFE0F|\uFE0E)/g) || [];
      var surrogatePairs = str.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
      var len = str.length - presentationSequences.length - surrogatePairs.length;
      var isInsideRange = len >= min && (typeof max === "undefined" || len <= max);
      if (isInsideRange && Array.isArray(options === null || options === void 0 ? void 0 : options.discreteLengths)) {
        return options.discreteLengths.some(function(discreteLen) {
          return discreteLen === len;
        });
      }
      return isInsideRange;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isULID.js
var require_isULID = __commonJS({
  "node_modules/validator/lib/isULID.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isULID;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isULID(str) {
      (0, _assertString.default)(str);
      return /^[0-7][0-9A-HJKMNP-TV-Z]{25}$/i.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isUUID.js
var require_isUUID = __commonJS({
  "node_modules/validator/lib/isUUID.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isUUID;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var uuid = {
      1: /^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      2: /^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      6: /^[0-9A-F]{8}-[0-9A-F]{4}-6[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      7: /^[0-9A-F]{8}-[0-9A-F]{4}-7[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      8: /^[0-9A-F]{8}-[0-9A-F]{4}-8[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,
      nil: /^00000000-0000-0000-0000-000000000000$/i,
      max: /^ffffffff-ffff-ffff-ffff-ffffffffffff$/i,
      loose: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,
      // From https://github.com/uuidjs/uuid/blob/main/src/regex.js
      all: /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i
    };
    function isUUID(str, version10) {
      (0, _assertString.default)(str);
      if (version10 === void 0 || version10 === null) {
        version10 = "all";
      }
      return version10 in uuid ? uuid[version10].test(str) : false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMongoId.js
var require_isMongoId = __commonJS({
  "node_modules/validator/lib/isMongoId.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMongoId;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isHexadecimal = _interopRequireDefault(require_isHexadecimal());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isMongoId(str) {
      (0, _assertString.default)(str);
      return (0, _isHexadecimal.default)(str) && str.length === 24;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isAfter.js
var require_isAfter = __commonJS({
  "node_modules/validator/lib/isAfter.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isAfter;
    var _toDate = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function isAfter(date, options) {
      var comparisonDate = (_typeof(options) === "object" ? options.comparisonDate : options) || Date().toString();
      var comparison = (0, _toDate.default)(comparisonDate);
      var original = (0, _toDate.default)(date);
      return !!(original && comparison && original > comparison);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isBefore.js
var require_isBefore = __commonJS({
  "node_modules/validator/lib/isBefore.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBefore;
    var _toDate = _interopRequireDefault(require_toDate());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function isBefore(date, options) {
      var comparisonDate = (_typeof(options) === "object" ? options.comparisonDate : options) || Date().toString();
      var comparison = (0, _toDate.default)(comparisonDate);
      var original = (0, _toDate.default)(date);
      return !!(original && comparison && original < comparison);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIn.js
var require_isIn = __commonJS({
  "node_modules/validator/lib/isIn.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIn;
    var _assertString = _interopRequireDefault(require_assertString());
    var _toString = _interopRequireDefault(require_toString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function isIn(str, options) {
      (0, _assertString.default)(str);
      var i;
      if (Object.prototype.toString.call(options) === "[object Array]") {
        var array = [];
        for (i in options) {
          if ({}.hasOwnProperty.call(options, i)) {
            array[i] = (0, _toString.default)(options[i]);
          }
        }
        return array.indexOf(str) >= 0;
      } else if (_typeof(options) === "object") {
        return options.hasOwnProperty(str);
      } else if (options && typeof options.indexOf === "function") {
        return options.indexOf(str) >= 0;
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLuhnNumber.js
var require_isLuhnNumber = __commonJS({
  "node_modules/validator/lib/isLuhnNumber.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLuhnNumber;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isLuhnNumber(str) {
      (0, _assertString.default)(str);
      var sanitized = str.replace(/[- ]+/g, "");
      var sum = 0;
      var digit;
      var tmpNum;
      var shouldDouble;
      for (var i = sanitized.length - 1; i >= 0; i--) {
        digit = sanitized.substring(i, i + 1);
        tmpNum = parseInt(digit, 10);
        if (shouldDouble) {
          tmpNum *= 2;
          if (tmpNum >= 10) {
            sum += tmpNum % 10 + 1;
          } else {
            sum += tmpNum;
          }
        } else {
          sum += tmpNum;
        }
        shouldDouble = !shouldDouble;
      }
      return !!(sum % 10 === 0 ? sanitized : false);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isCreditCard.js
var require_isCreditCard = __commonJS({
  "node_modules/validator/lib/isCreditCard.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isCreditCard;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isLuhnNumber = _interopRequireDefault(require_isLuhnNumber());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var cards = {
      amex: /^3[47][0-9]{13}$/,
      dinersclub: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,
      discover: /^6(?:011|5[0-9][0-9])[0-9]{12,15}$/,
      jcb: /^(?:2131|1800|35\d{3})\d{11}$/,
      mastercard: /^5[1-5][0-9]{2}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$/,
      // /^[25][1-7][0-9]{14}$/;
      unionpay: /^(6[27][0-9]{14}|^(81[0-9]{14,17}))$/,
      visa: /^(?:4[0-9]{12})(?:[0-9]{3,6})?$/
    };
    var allCards = function() {
      var tmpCardsArray = [];
      for (var cardProvider in cards) {
        if (cards.hasOwnProperty(cardProvider)) {
          tmpCardsArray.push(cards[cardProvider]);
        }
      }
      return tmpCardsArray;
    }();
    function isCreditCard(card) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      (0, _assertString.default)(card);
      var provider = options.provider;
      var sanitized = card.replace(/[- ]+/g, "");
      if (provider && provider.toLowerCase() in cards) {
        if (!cards[provider.toLowerCase()].test(sanitized)) {
          return false;
        }
      } else if (provider && !(provider.toLowerCase() in cards)) {
        throw new Error("".concat(provider, " is not a valid credit card provider."));
      } else if (!allCards.some(function(cardProvider) {
        return cardProvider.test(sanitized);
      })) {
        return false;
      }
      return (0, _isLuhnNumber.default)(card);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIdentityCard.js
var require_isIdentityCard = __commonJS({
  "node_modules/validator/lib/isIdentityCard.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIdentityCard;
    var _assertString = _interopRequireDefault(require_assertString());
    var _includesArray = _interopRequireDefault(require_includesArray());
    var _isInt = _interopRequireDefault(require_isInt());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var validators = {
      PL: function PL(str) {
        (0, _assertString.default)(str);
        var weightOfDigits = {
          1: 1,
          2: 3,
          3: 7,
          4: 9,
          5: 1,
          6: 3,
          7: 7,
          8: 9,
          9: 1,
          10: 3,
          11: 0
        };
        if (str != null && str.length === 11 && (0, _isInt.default)(str, {
          allow_leading_zeroes: true
        })) {
          var digits = str.split("").slice(0, -1);
          var sum = digits.reduce(function(acc, digit, index) {
            return acc + Number(digit) * weightOfDigits[index + 1];
          }, 0);
          var modulo = sum % 10;
          var lastDigit = Number(str.charAt(str.length - 1));
          if (modulo === 0 && lastDigit === 0 || lastDigit === 10 - modulo) {
            return true;
          }
        }
        return false;
      },
      ES: function ES(str) {
        (0, _assertString.default)(str);
        var DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
        var charsValue = {
          X: 0,
          Y: 1,
          Z: 2
        };
        var controlDigits = ["T", "R", "W", "A", "G", "M", "Y", "F", "P", "D", "X", "B", "N", "J", "Z", "S", "Q", "V", "H", "L", "C", "K", "E"];
        var sanitized = str.trim().toUpperCase();
        if (!DNI.test(sanitized)) {
          return false;
        }
        var number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, function(char) {
          return charsValue[char];
        });
        return sanitized.endsWith(controlDigits[number % 23]);
      },
      FI: function FI(str) {
        (0, _assertString.default)(str);
        if (str.length !== 11) {
          return false;
        }
        if (!str.match(/^\d{6}[\-A\+]\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)) {
          return false;
        }
        var checkDigits = "0123456789ABCDEFHJKLMNPRSTUVWXY";
        var idAsNumber = parseInt(str.slice(0, 6), 10) * 1e3 + parseInt(str.slice(7, 10), 10);
        var remainder = idAsNumber % 31;
        var checkDigit = checkDigits[remainder];
        return checkDigit === str.slice(10, 11);
      },
      IN: function IN(str) {
        var DNI = /^[1-9]\d{3}\s?\d{4}\s?\d{4}$/;
        var d = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];
        var p = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]];
        var sanitized = str.trim();
        if (!DNI.test(sanitized)) {
          return false;
        }
        var c = 0;
        var invertedArray = sanitized.replace(/\s/g, "").split("").map(Number).reverse();
        invertedArray.forEach(function(val, i) {
          c = d[c][p[i % 8][val]];
        });
        return c === 0;
      },
      IR: function IR(str) {
        if (!str.match(/^\d{10}$/)) return false;
        str = "0000".concat(str).slice(str.length - 6);
        if (parseInt(str.slice(3, 9), 10) === 0) return false;
        var lastNumber = parseInt(str.slice(9, 10), 10);
        var sum = 0;
        for (var i = 0; i < 9; i++) {
          sum += parseInt(str.slice(i, i + 1), 10) * (10 - i);
        }
        sum %= 11;
        return sum < 2 && lastNumber === sum || sum >= 2 && lastNumber === 11 - sum;
      },
      IT: function IT(str) {
        if (str.length !== 9) return false;
        if (str === "CA00000AA") return false;
        return str.search(/C[A-Z]\d{5}[A-Z]{2}/i) > -1;
      },
      NO: function NO(str) {
        var sanitized = str.trim();
        if (isNaN(Number(sanitized))) return false;
        if (sanitized.length !== 11) return false;
        if (sanitized === "00000000000") return false;
        var f = sanitized.split("").map(Number);
        var k1 = (11 - (3 * f[0] + 7 * f[1] + 6 * f[2] + 1 * f[3] + 8 * f[4] + 9 * f[5] + 4 * f[6] + 5 * f[7] + 2 * f[8]) % 11) % 11;
        var k2 = (11 - (5 * f[0] + 4 * f[1] + 3 * f[2] + 2 * f[3] + 7 * f[4] + 6 * f[5] + 5 * f[6] + 4 * f[7] + 3 * f[8] + 2 * k1) % 11) % 11;
        if (k1 !== f[9] || k2 !== f[10]) return false;
        return true;
      },
      TH: function TH(str) {
        if (!str.match(/^[1-8]\d{12}$/)) return false;
        var sum = 0;
        for (var i = 0; i < 12; i++) {
          sum += parseInt(str[i], 10) * (13 - i);
        }
        return str[12] === ((11 - sum % 11) % 10).toString();
      },
      LK: function LK(str) {
        var old_nic = /^[1-9]\d{8}[vx]$/i;
        var new_nic = /^[1-9]\d{11}$/i;
        if (str.length === 10 && old_nic.test(str)) return true;
        else if (str.length === 12 && new_nic.test(str)) return true;
        return false;
      },
      "he-IL": function heIL(str) {
        var DNI = /^\d{9}$/;
        var sanitized = str.trim();
        if (!DNI.test(sanitized)) {
          return false;
        }
        var id2 = sanitized;
        var sum = 0, incNum;
        for (var i = 0; i < id2.length; i++) {
          incNum = Number(id2[i]) * (i % 2 + 1);
          sum += incNum > 9 ? incNum - 9 : incNum;
        }
        return sum % 10 === 0;
      },
      "ar-LY": function arLY(str) {
        var NIN = /^(1|2)\d{11}$/;
        var sanitized = str.trim();
        if (!NIN.test(sanitized)) {
          return false;
        }
        return true;
      },
      "ar-TN": function arTN(str) {
        var DNI = /^\d{8}$/;
        var sanitized = str.trim();
        if (!DNI.test(sanitized)) {
          return false;
        }
        return true;
      },
      "zh-CN": function zhCN(str) {
        var provincesAndCities = [
          "11",
          // 北京
          "12",
          // 天津
          "13",
          // 河北
          "14",
          // 山西
          "15",
          // 内蒙古
          "21",
          // 辽宁
          "22",
          // 吉林
          "23",
          // 黑龙江
          "31",
          // 上海
          "32",
          // 江苏
          "33",
          // 浙江
          "34",
          // 安徽
          "35",
          // 福建
          "36",
          // 江西
          "37",
          // 山东
          "41",
          // 河南
          "42",
          // 湖北
          "43",
          // 湖南
          "44",
          // 广东
          "45",
          // 广西
          "46",
          // 海南
          "50",
          // 重庆
          "51",
          // 四川
          "52",
          // 贵州
          "53",
          // 云南
          "54",
          // 西藏
          "61",
          // 陕西
          "62",
          // 甘肃
          "63",
          // 青海
          "64",
          // 宁夏
          "65",
          // 新疆
          "71",
          // 台湾
          "81",
          // 香港
          "82",
          // 澳门
          "91"
          // 国外
        ];
        var powers = ["7", "9", "10", "5", "8", "4", "2", "1", "6", "3", "7", "9", "10", "5", "8", "4", "2"];
        var parityBit = ["1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2"];
        var checkAddressCode = function checkAddressCode2(addressCode) {
          return (0, _includesArray.default)(provincesAndCities, addressCode);
        };
        var checkBirthDayCode = function checkBirthDayCode2(birDayCode) {
          var yyyy = parseInt(birDayCode.substring(0, 4), 10);
          var mm = parseInt(birDayCode.substring(4, 6), 10);
          var dd = parseInt(birDayCode.substring(6), 10);
          var xdata = new Date(yyyy, mm - 1, dd);
          if (xdata > /* @__PURE__ */ new Date()) {
            return false;
          } else if (xdata.getFullYear() === yyyy && xdata.getMonth() === mm - 1 && xdata.getDate() === dd) {
            return true;
          }
          return false;
        };
        var getParityBit = function getParityBit2(idCardNo) {
          var id17 = idCardNo.substring(0, 17);
          var power = 0;
          for (var i = 0; i < 17; i++) {
            power += parseInt(id17.charAt(i), 10) * parseInt(powers[i], 10);
          }
          var mod = power % 11;
          return parityBit[mod];
        };
        var checkParityBit = function checkParityBit2(idCardNo) {
          return getParityBit(idCardNo) === idCardNo.charAt(17).toUpperCase();
        };
        var check15IdCardNo = function check15IdCardNo2(idCardNo) {
          var check = /^[1-9]\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}$/.test(idCardNo);
          if (!check) return false;
          var addressCode = idCardNo.substring(0, 2);
          check = checkAddressCode(addressCode);
          if (!check) return false;
          var birDayCode = "19".concat(idCardNo.substring(6, 12));
          check = checkBirthDayCode(birDayCode);
          if (!check) return false;
          return true;
        };
        var check18IdCardNo = function check18IdCardNo2(idCardNo) {
          var check = /^[1-9]\d{5}[1-9]\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\d{3}(\d|x|X)$/.test(idCardNo);
          if (!check) return false;
          var addressCode = idCardNo.substring(0, 2);
          check = checkAddressCode(addressCode);
          if (!check) return false;
          var birDayCode = idCardNo.substring(6, 14);
          check = checkBirthDayCode(birDayCode);
          if (!check) return false;
          return checkParityBit(idCardNo);
        };
        var checkIdCardNo = function checkIdCardNo2(idCardNo) {
          var check = /^\d{15}|(\d{17}(\d|x|X))$/.test(idCardNo);
          if (!check) return false;
          if (idCardNo.length === 15) {
            return check15IdCardNo(idCardNo);
          }
          return check18IdCardNo(idCardNo);
        };
        return checkIdCardNo(str);
      },
      "zh-HK": function zhHK(str) {
        str = str.trim();
        var regexHKID = /^[A-Z]{1,2}[0-9]{6}((\([0-9A]\))|(\[[0-9A]\])|([0-9A]))$/;
        var regexIsDigit = /^[0-9]$/;
        str = str.toUpperCase();
        if (!regexHKID.test(str)) return false;
        str = str.replace(/\[|\]|\(|\)/g, "");
        if (str.length === 8) str = "3".concat(str);
        var checkSumVal = 0;
        for (var i = 0; i <= 7; i++) {
          var convertedChar = void 0;
          if (!regexIsDigit.test(str[i])) convertedChar = (str[i].charCodeAt(0) - 55) % 11;
          else convertedChar = str[i];
          checkSumVal += convertedChar * (9 - i);
        }
        checkSumVal %= 11;
        var checkSumConverted;
        if (checkSumVal === 0) checkSumConverted = "0";
        else if (checkSumVal === 1) checkSumConverted = "A";
        else checkSumConverted = String(11 - checkSumVal);
        if (checkSumConverted === str[str.length - 1]) return true;
        return false;
      },
      "zh-TW": function zhTW(str) {
        var ALPHABET_CODES = {
          A: 10,
          B: 11,
          C: 12,
          D: 13,
          E: 14,
          F: 15,
          G: 16,
          H: 17,
          I: 34,
          J: 18,
          K: 19,
          L: 20,
          M: 21,
          N: 22,
          O: 35,
          P: 23,
          Q: 24,
          R: 25,
          S: 26,
          T: 27,
          U: 28,
          V: 29,
          W: 32,
          X: 30,
          Y: 31,
          Z: 33
        };
        var sanitized = str.trim().toUpperCase();
        if (!/^[A-Z][0-9]{9}$/.test(sanitized)) return false;
        return Array.from(sanitized).reduce(function(sum, number, index) {
          if (index === 0) {
            var code = ALPHABET_CODES[number];
            return code % 10 * 9 + Math.floor(code / 10);
          }
          if (index === 9) {
            return (10 - sum % 10 - Number(number)) % 10 === 0;
          }
          return sum + Number(number) * (9 - index);
        }, 0);
      },
      PK: function PK(str) {
        var CNIC = /^[1-7][0-9]{4}-[0-9]{7}-[1-9]$/;
        var sanitized = str.trim();
        return CNIC.test(sanitized);
      }
    };
    function isIdentityCard(str, locale) {
      (0, _assertString.default)(str);
      if (locale in validators) {
        return validators[locale](str);
      } else if (locale === "any") {
        for (var key in validators) {
          if (validators.hasOwnProperty(key)) {
            var validator = validators[key];
            if (validator(str)) {
              return true;
            }
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isEAN.js
var require_isEAN = __commonJS({
  "node_modules/validator/lib/isEAN.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEAN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var LENGTH_EAN_8 = 8;
    var LENGTH_EAN_14 = 14;
    var validEanRegex = /^(\d{8}|\d{13}|\d{14})$/;
    function getPositionWeightThroughLengthAndIndex(length, index) {
      if (length === LENGTH_EAN_8 || length === LENGTH_EAN_14) {
        return index % 2 === 0 ? 3 : 1;
      }
      return index % 2 === 0 ? 1 : 3;
    }
    function calculateCheckDigit(ean) {
      var checksum = ean.slice(0, -1).split("").map(function(char, index) {
        return Number(char) * getPositionWeightThroughLengthAndIndex(ean.length, index);
      }).reduce(function(acc, partialSum) {
        return acc + partialSum;
      }, 0);
      var remainder = 10 - checksum % 10;
      return remainder < 10 ? remainder : 0;
    }
    function isEAN(str) {
      (0, _assertString.default)(str);
      var actualCheckDigit = Number(str.slice(-1));
      return validEanRegex.test(str) && actualCheckDigit === calculateCheckDigit(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISIN.js
var require_isISIN = __commonJS({
  "node_modules/validator/lib/isISIN.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISIN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;
    function isISIN(str) {
      (0, _assertString.default)(str);
      if (!isin.test(str)) {
        return false;
      }
      var double = true;
      var sum = 0;
      for (var i = str.length - 2; i >= 0; i--) {
        if (str[i] >= "A" && str[i] <= "Z") {
          var value = str[i].charCodeAt(0) - 55;
          var lo = value % 10;
          var hi = Math.trunc(value / 10);
          for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {
            var digit = _arr[_i];
            if (double) {
              if (digit >= 5) {
                sum += 1 + (digit - 5) * 2;
              } else {
                sum += digit * 2;
              }
            } else {
              sum += digit;
            }
            double = !double;
          }
        } else {
          var _digit = str[i].charCodeAt(0) - "0".charCodeAt(0);
          if (double) {
            if (_digit >= 5) {
              sum += 1 + (_digit - 5) * 2;
            } else {
              sum += _digit * 2;
            }
          } else {
            sum += _digit;
          }
          double = !double;
        }
      }
      var check = Math.trunc((sum + 9) / 10) * 10 - sum;
      return +str[str.length - 1] === check;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISBN.js
var require_isISBN = __commonJS({
  "node_modules/validator/lib/isISBN.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISBN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var possibleIsbn10 = /^(?:[0-9]{9}X|[0-9]{10})$/;
    var possibleIsbn13 = /^(?:[0-9]{13})$/;
    var factor = [1, 3];
    function isISBN(isbn, options) {
      (0, _assertString.default)(isbn);
      var version10 = String((options === null || options === void 0 ? void 0 : options.version) || options);
      if (!(options !== null && options !== void 0 && options.version || options)) {
        return isISBN(isbn, {
          version: 10
        }) || isISBN(isbn, {
          version: 13
        });
      }
      var sanitizedIsbn = isbn.replace(/[\s-]+/g, "");
      var checksum = 0;
      if (version10 === "10") {
        if (!possibleIsbn10.test(sanitizedIsbn)) {
          return false;
        }
        for (var i = 0; i < version10 - 1; i++) {
          checksum += (i + 1) * sanitizedIsbn.charAt(i);
        }
        if (sanitizedIsbn.charAt(9) === "X") {
          checksum += 10 * 10;
        } else {
          checksum += 10 * sanitizedIsbn.charAt(9);
        }
        if (checksum % 11 === 0) {
          return true;
        }
      } else if (version10 === "13") {
        if (!possibleIsbn13.test(sanitizedIsbn)) {
          return false;
        }
        for (var _i = 0; _i < 12; _i++) {
          checksum += factor[_i % 2] * sanitizedIsbn.charAt(_i);
        }
        if (sanitizedIsbn.charAt(12) - (10 - checksum % 10) % 10 === 0) {
          return true;
        }
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISSN.js
var require_isISSN = __commonJS({
  "node_modules/validator/lib/isISSN.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISSN;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var issn = "^\\d{4}-?\\d{3}[\\dX]$";
    function isISSN(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      (0, _assertString.default)(str);
      var testIssn = issn;
      testIssn = options.require_hyphen ? testIssn.replace("?", "") : testIssn;
      testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, "i");
      if (!testIssn.test(str)) {
        return false;
      }
      var digits = str.replace("-", "").toUpperCase();
      var checksum = 0;
      for (var i = 0; i < digits.length; i++) {
        var digit = digits[i];
        checksum += (digit === "X" ? 10 : +digit) * (8 - i);
      }
      return checksum % 11 === 0;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/algorithms.js
var require_algorithms = __commonJS({
  "node_modules/validator/lib/util/algorithms.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.iso7064Check = iso7064Check;
    exports.luhnCheck = luhnCheck;
    exports.reverseMultiplyAndSum = reverseMultiplyAndSum;
    exports.verhoeffCheck = verhoeffCheck;
    function iso7064Check(str) {
      var checkvalue = 10;
      for (var i = 0; i < str.length - 1; i++) {
        checkvalue = (parseInt(str[i], 10) + checkvalue) % 10 === 0 ? 10 * 2 % 11 : (parseInt(str[i], 10) + checkvalue) % 10 * 2 % 11;
      }
      checkvalue = checkvalue === 1 ? 0 : 11 - checkvalue;
      return checkvalue === parseInt(str[10], 10);
    }
    function luhnCheck(str) {
      var checksum = 0;
      var second = false;
      for (var i = str.length - 1; i >= 0; i--) {
        if (second) {
          var product = parseInt(str[i], 10) * 2;
          if (product > 9) {
            checksum += product.toString().split("").map(function(a) {
              return parseInt(a, 10);
            }).reduce(function(a, b) {
              return a + b;
            }, 0);
          } else {
            checksum += product;
          }
        } else {
          checksum += parseInt(str[i], 10);
        }
        second = !second;
      }
      return checksum % 10 === 0;
    }
    function reverseMultiplyAndSum(digits, base) {
      var total = 0;
      for (var i = 0; i < digits.length; i++) {
        total += digits[i] * (base - i);
      }
      return total;
    }
    function verhoeffCheck(str) {
      var d_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];
      var p_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]];
      var str_copy = str.split("").reverse().join("");
      var checksum = 0;
      for (var i = 0; i < str_copy.length; i++) {
        checksum = d_table[checksum][p_table[i % 8][parseInt(str_copy[i], 10)]];
      }
      return checksum === 0;
    }
  }
});

// node_modules/validator/lib/isTaxID.js
var require_isTaxID = __commonJS({
  "node_modules/validator/lib/isTaxID.js"(exports, module) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isTaxID;
    var _assertString = _interopRequireDefault(require_assertString());
    var algorithms = _interopRequireWildcard(require_algorithms());
    var _isDate = _interopRequireDefault(require_isDate());
    function _interopRequireWildcard(e, t) {
      if ("function" == typeof WeakMap) var r2 = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function _interopRequireWildcard2(e2, t2) {
        if (!t2 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != _typeof(e2) && "function" != typeof e2) return f;
        if (o = t2 ? n : r2) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (var _t in e2) "default" !== _t && {}.hasOwnProperty.call(e2, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e2[_t]);
        return f;
      })(e, t);
    }
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _toConsumableArray(r2) {
      return _arrayWithoutHoles(r2) || _iterableToArray(r2) || _unsupportedIterableToArray(r2) || _nonIterableSpread();
    }
    function _nonIterableSpread() {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(r2, a) {
      if (r2) {
        if ("string" == typeof r2) return _arrayLikeToArray(r2, a);
        var t = {}.toString.call(r2).slice(8, -1);
        return "Object" === t && r2.constructor && (t = r2.constructor.name), "Map" === t || "Set" === t ? Array.from(r2) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r2, a) : void 0;
      }
    }
    function _iterableToArray(r2) {
      if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
    }
    function _arrayWithoutHoles(r2) {
      if (Array.isArray(r2)) return _arrayLikeToArray(r2);
    }
    function _arrayLikeToArray(r2, a) {
      (null == a || a > r2.length) && (a = r2.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r2[e];
      return n;
    }
    function bgBgCheck(tin) {
      var century_year = tin.slice(0, 2);
      var month = parseInt(tin.slice(2, 4), 10);
      if (month > 40) {
        month -= 40;
        century_year = "20".concat(century_year);
      } else if (month > 20) {
        month -= 20;
        century_year = "18".concat(century_year);
      } else {
        century_year = "19".concat(century_year);
      }
      if (month < 10) {
        month = "0".concat(month);
      }
      var date = "".concat(century_year, "/").concat(month, "/").concat(tin.slice(4, 6));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];
      var checksum = 0;
      for (var i = 0; i < multip_lookup.length; i++) {
        checksum += digits[i] * multip_lookup[i];
      }
      checksum = checksum % 11 === 10 ? 0 : checksum % 11;
      return checksum === digits[9];
    }
    function isCanadianSIN(input) {
      var digitsArray = input.split("");
      var even = digitsArray.filter(function(_, idx) {
        return idx % 2;
      }).map(function(i) {
        return Number(i) * 2;
      }).join("").split("");
      var total = digitsArray.filter(function(_, idx) {
        return !(idx % 2);
      }).concat(even).map(function(i) {
        return Number(i);
      }).reduce(function(acc, cur) {
        return acc + cur;
      });
      return total % 10 === 0;
    }
    function csCzCheck(tin) {
      tin = tin.replace(/\W/, "");
      var full_year = parseInt(tin.slice(0, 2), 10);
      if (tin.length === 10) {
        if (full_year < 54) {
          full_year = "20".concat(full_year);
        } else {
          full_year = "19".concat(full_year);
        }
      } else {
        if (tin.slice(6) === "000") {
          return false;
        }
        if (full_year < 54) {
          full_year = "19".concat(full_year);
        } else {
          return false;
        }
      }
      if (full_year.length === 3) {
        full_year = [full_year.slice(0, 2), "0", full_year.slice(2)].join("");
      }
      var month = parseInt(tin.slice(2, 4), 10);
      if (month > 50) {
        month -= 50;
      }
      if (month > 20) {
        if (parseInt(full_year, 10) < 2004) {
          return false;
        }
        month -= 20;
      }
      if (month < 10) {
        month = "0".concat(month);
      }
      var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      if (tin.length === 10) {
        if (parseInt(tin, 10) % 11 !== 0) {
          var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;
          if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {
            if (parseInt(tin.slice(9), 10) !== 0) {
              return false;
            }
          } else {
            return false;
          }
        }
      }
      return true;
    }
    function deAtCheck(tin) {
      return algorithms.luhnCheck(tin);
    }
    function deDeCheck(tin) {
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var occurrences = [];
      for (var i = 0; i < digits.length - 1; i++) {
        occurrences.push("");
        for (var j = 0; j < digits.length - 1; j++) {
          if (digits[i] === digits[j]) {
            occurrences[i] += j;
          }
        }
      }
      occurrences = occurrences.filter(function(a) {
        return a.length > 1;
      });
      if (occurrences.length !== 2 && occurrences.length !== 3) {
        return false;
      }
      if (occurrences[0].length === 3) {
        var trip_locations = occurrences[0].split("").map(function(a) {
          return parseInt(a, 10);
        });
        var recurrent = 0;
        for (var _i = 0; _i < trip_locations.length - 1; _i++) {
          if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {
            recurrent += 1;
          }
        }
        if (recurrent === 2) {
          return false;
        }
      }
      return algorithms.iso7064Check(tin);
    }
    function dkDkCheck(tin) {
      tin = tin.replace(/\W/, "");
      var year = parseInt(tin.slice(4, 6), 10);
      var century_digit = tin.slice(6, 7);
      switch (century_digit) {
        case "0":
        case "1":
        case "2":
        case "3":
          year = "19".concat(year);
          break;
        case "4":
        case "9":
          if (year < 37) {
            year = "20".concat(year);
          } else {
            year = "19".concat(year);
          }
          break;
        default:
          if (year < 37) {
            year = "20".concat(year);
          } else if (year > 58) {
            year = "18".concat(year);
          } else {
            return false;
          }
          break;
      }
      if (year.length === 3) {
        year = [year.slice(0, 2), "0", year.slice(2)].join("");
      }
      var date = "".concat(year, "/").concat(tin.slice(2, 4), "/").concat(tin.slice(0, 2));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var checksum = 0;
      var weight = 4;
      for (var i = 0; i < 9; i++) {
        checksum += digits[i] * weight;
        weight -= 1;
        if (weight === 1) {
          weight = 7;
        }
      }
      checksum %= 11;
      if (checksum === 1) {
        return false;
      }
      return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;
    }
    function elCyCheck(tin) {
      var digits = tin.slice(0, 8).split("").map(function(a) {
        return parseInt(a, 10);
      });
      var checksum = 0;
      for (var i = 1; i < digits.length; i += 2) {
        checksum += digits[i];
      }
      for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {
        if (digits[_i2] < 2) {
          checksum += 1 - digits[_i2];
        } else {
          checksum += 2 * (digits[_i2] - 2) + 5;
          if (digits[_i2] > 4) {
            checksum += 2;
          }
        }
      }
      return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);
    }
    function elGrCheck(tin) {
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var checksum = 0;
      for (var i = 0; i < 8; i++) {
        checksum += digits[i] * Math.pow(2, 8 - i);
      }
      return checksum % 11 % 10 === digits[8];
    }
    function enIeCheck(tin) {
      var checksum = algorithms.reverseMultiplyAndSum(tin.split("").slice(0, 7).map(function(a) {
        return parseInt(a, 10);
      }), 8);
      if (tin.length === 9 && tin[8] !== "W") {
        checksum += (tin[8].charCodeAt(0) - 64) * 9;
      }
      checksum %= 23;
      if (checksum === 0) {
        return tin[7].toUpperCase() === "W";
      }
      return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);
    }
    var enUsCampusPrefix = {
      andover: ["10", "12"],
      atlanta: ["60", "67"],
      austin: ["50", "53"],
      brookhaven: ["01", "02", "03", "04", "05", "06", "11", "13", "14", "16", "21", "22", "23", "25", "34", "51", "52", "54", "55", "56", "57", "58", "59", "65"],
      cincinnati: ["30", "32", "35", "36", "37", "38", "61"],
      fresno: ["15", "24"],
      internet: ["20", "26", "27", "45", "46", "47"],
      kansas: ["40", "44"],
      memphis: ["94", "95"],
      ogden: ["80", "90"],
      philadelphia: ["33", "39", "41", "42", "43", "46", "48", "62", "63", "64", "66", "68", "71", "72", "73", "74", "75", "76", "77", "81", "82", "83", "84", "85", "86", "87", "88", "91", "92", "93", "98", "99"],
      sba: ["31"]
    };
    function enUsGetPrefixes() {
      var prefixes = [];
      for (var location in enUsCampusPrefix) {
        if (enUsCampusPrefix.hasOwnProperty(location)) {
          prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));
        }
      }
      return prefixes;
    }
    function enUsCheck(tin) {
      return enUsGetPrefixes().indexOf(tin.slice(0, 2)) !== -1;
    }
    function esArCheck(tin) {
      var accum = 0;
      var digits = tin.split("");
      var digit = parseInt(digits.pop(), 10);
      for (var i = 0; i < digits.length; i++) {
        accum += digits[9 - i] * (2 + i % 6);
      }
      var verif = 11 - accum % 11;
      if (verif === 11) {
        verif = 0;
      } else if (verif === 10) {
        verif = 9;
      }
      return digit === verif;
    }
    function esEsCheck(tin) {
      var chars = tin.toUpperCase().split("");
      if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {
        var lead_replace = 0;
        switch (chars[0]) {
          case "Y":
            lead_replace = 1;
            break;
          case "Z":
            lead_replace = 2;
            break;
          default:
        }
        chars.splice(0, 1, lead_replace);
      } else {
        while (chars.length < 9) {
          chars.unshift(0);
        }
      }
      var lookup = ["T", "R", "W", "A", "G", "M", "Y", "F", "P", "D", "X", "B", "N", "J", "Z", "S", "Q", "V", "H", "L", "C", "K", "E"];
      chars = chars.join("");
      var checksum = parseInt(chars.slice(0, 8), 10) % 23;
      return chars[8] === lookup[checksum];
    }
    function etEeCheck(tin) {
      var full_year = tin.slice(1, 3);
      var century_digit = tin.slice(0, 1);
      switch (century_digit) {
        case "1":
        case "2":
          full_year = "18".concat(full_year);
          break;
        case "3":
        case "4":
          full_year = "19".concat(full_year);
          break;
        default:
          full_year = "20".concat(full_year);
          break;
      }
      var date = "".concat(full_year, "/").concat(tin.slice(3, 5), "/").concat(tin.slice(5, 7));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var checksum = 0;
      var weight = 1;
      for (var i = 0; i < 10; i++) {
        checksum += digits[i] * weight;
        weight += 1;
        if (weight === 10) {
          weight = 1;
        }
      }
      if (checksum % 11 === 10) {
        checksum = 0;
        weight = 3;
        for (var _i3 = 0; _i3 < 10; _i3++) {
          checksum += digits[_i3] * weight;
          weight += 1;
          if (weight === 10) {
            weight = 1;
          }
        }
        if (checksum % 11 === 10) {
          return digits[10] === 0;
        }
      }
      return checksum % 11 === digits[10];
    }
    function fiFiCheck(tin) {
      var full_year = tin.slice(4, 6);
      var century_symbol = tin.slice(6, 7);
      switch (century_symbol) {
        case "+":
          full_year = "18".concat(full_year);
          break;
        case "-":
          full_year = "19".concat(full_year);
          break;
        default:
          full_year = "20".concat(full_year);
          break;
      }
      var date = "".concat(full_year, "/").concat(tin.slice(2, 4), "/").concat(tin.slice(0, 2));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;
      if (checksum < 10) {
        return checksum === parseInt(tin.slice(10), 10);
      }
      checksum -= 10;
      var letters_lookup = ["A", "B", "C", "D", "E", "F", "H", "J", "K", "L", "M", "N", "P", "R", "S", "T", "U", "V", "W", "X", "Y"];
      return letters_lookup[checksum] === tin.slice(10);
    }
    function frBeCheck(tin) {
      if (tin.slice(2, 4) !== "00" || tin.slice(4, 6) !== "00") {
        var date = "".concat(tin.slice(0, 2), "/").concat(tin.slice(2, 4), "/").concat(tin.slice(4, 6));
        if (!(0, _isDate.default)(date, "YY/MM/DD")) {
          return false;
        }
      }
      var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;
      var checkdigits = parseInt(tin.slice(9, 11), 10);
      if (checksum !== checkdigits) {
        checksum = 97 - parseInt("2".concat(tin.slice(0, 9)), 10) % 97;
        if (checksum !== checkdigits) {
          return false;
        }
      }
      return true;
    }
    function frFrCheck(tin) {
      tin = tin.replace(/\s/g, "");
      var checksum = parseInt(tin.slice(0, 10), 10) % 511;
      var checkdigits = parseInt(tin.slice(10, 13), 10);
      return checksum === checkdigits;
    }
    function frLuCheck(tin) {
      var date = "".concat(tin.slice(0, 4), "/").concat(tin.slice(4, 6), "/").concat(tin.slice(6, 8));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      if (!algorithms.luhnCheck(tin.slice(0, 12))) {
        return false;
      }
      return algorithms.verhoeffCheck("".concat(tin.slice(0, 11)).concat(tin[12]));
    }
    function hrHrCheck(tin) {
      return algorithms.iso7064Check(tin);
    }
    function huHuCheck(tin) {
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var checksum = 8;
      for (var i = 1; i < 9; i++) {
        checksum += digits[i] * (i + 1);
      }
      return checksum % 11 === digits[9];
    }
    function itItNameCheck(name) {
      var vowelflag = false;
      var xflag = false;
      for (var i = 0; i < 3; i++) {
        if (!vowelflag && /[AEIOU]/.test(name[i])) {
          vowelflag = true;
        } else if (!xflag && vowelflag && name[i] === "X") {
          xflag = true;
        } else if (i > 0) {
          if (vowelflag && !xflag) {
            if (!/[AEIOU]/.test(name[i])) {
              return false;
            }
          }
          if (xflag) {
            if (!/X/.test(name[i])) {
              return false;
            }
          }
        }
      }
      return true;
    }
    function itItCheck(tin) {
      var chars = tin.toUpperCase().split("");
      if (!itItNameCheck(chars.slice(0, 3))) {
        return false;
      }
      if (!itItNameCheck(chars.slice(3, 6))) {
        return false;
      }
      var number_locations = [6, 7, 9, 10, 12, 13, 14];
      var number_replace = {
        L: "0",
        M: "1",
        N: "2",
        P: "3",
        Q: "4",
        R: "5",
        S: "6",
        T: "7",
        U: "8",
        V: "9"
      };
      for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {
        var i = _number_locations[_i4];
        if (chars[i] in number_replace) {
          chars.splice(i, 1, number_replace[chars[i]]);
        }
      }
      var month_replace = {
        A: "01",
        B: "02",
        C: "03",
        D: "04",
        E: "05",
        H: "06",
        L: "07",
        M: "08",
        P: "09",
        R: "10",
        S: "11",
        T: "12"
      };
      var month = month_replace[chars[8]];
      var day = parseInt(chars[9] + chars[10], 10);
      if (day > 40) {
        day -= 40;
      }
      if (day < 10) {
        day = "0".concat(day);
      }
      var date = "".concat(chars[6]).concat(chars[7], "/").concat(month, "/").concat(day);
      if (!(0, _isDate.default)(date, "YY/MM/DD")) {
        return false;
      }
      var checksum = 0;
      for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {
        var char_to_int = parseInt(chars[_i5], 10);
        if (isNaN(char_to_int)) {
          char_to_int = chars[_i5].charCodeAt(0) - 65;
        }
        checksum += char_to_int;
      }
      var odd_convert = {
        // Maps of characters at odd places
        A: 1,
        B: 0,
        C: 5,
        D: 7,
        E: 9,
        F: 13,
        G: 15,
        H: 17,
        I: 19,
        J: 21,
        K: 2,
        L: 4,
        M: 18,
        N: 20,
        O: 11,
        P: 3,
        Q: 6,
        R: 8,
        S: 12,
        T: 14,
        U: 16,
        V: 10,
        W: 22,
        X: 25,
        Y: 24,
        Z: 23,
        0: 1,
        1: 0
      };
      for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {
        var _char_to_int = 0;
        if (chars[_i6] in odd_convert) {
          _char_to_int = odd_convert[chars[_i6]];
        } else {
          var multiplier = parseInt(chars[_i6], 10);
          _char_to_int = 2 * multiplier + 1;
          if (multiplier > 4) {
            _char_to_int += 2;
          }
        }
        checksum += _char_to_int;
      }
      if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {
        return false;
      }
      return true;
    }
    function lvLvCheck(tin) {
      tin = tin.replace(/\W/, "");
      var day = tin.slice(0, 2);
      if (day !== "32") {
        var month = tin.slice(2, 4);
        if (month !== "00") {
          var full_year = tin.slice(4, 6);
          switch (tin[6]) {
            case "0":
              full_year = "18".concat(full_year);
              break;
            case "1":
              full_year = "19".concat(full_year);
              break;
            default:
              full_year = "20".concat(full_year);
              break;
          }
          var date = "".concat(full_year, "/").concat(tin.slice(2, 4), "/").concat(day);
          if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
            return false;
          }
        }
        var checksum = 1101;
        var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
        for (var i = 0; i < tin.length - 1; i++) {
          checksum -= parseInt(tin[i], 10) * multip_lookup[i];
        }
        return parseInt(tin[10], 10) === checksum % 11;
      }
      return true;
    }
    function mtMtCheck(tin) {
      if (tin.length !== 9) {
        var chars = tin.toUpperCase().split("");
        while (chars.length < 8) {
          chars.unshift(0);
        }
        switch (tin[7]) {
          case "A":
          case "P":
            if (parseInt(chars[6], 10) === 0) {
              return false;
            }
            break;
          default: {
            var first_part = parseInt(chars.join("").slice(0, 5), 10);
            if (first_part > 32e3) {
              return false;
            }
            var second_part = parseInt(chars.join("").slice(5, 7), 10);
            if (first_part === second_part) {
              return false;
            }
          }
        }
      }
      return true;
    }
    function nlNlCheck(tin) {
      return algorithms.reverseMultiplyAndSum(tin.split("").slice(0, 8).map(function(a) {
        return parseInt(a, 10);
      }), 9) % 11 === parseInt(tin[8], 10);
    }
    function plPlCheck(tin) {
      if (tin.length === 10) {
        var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];
        var _checksum = 0;
        for (var i = 0; i < lookup.length; i++) {
          _checksum += parseInt(tin[i], 10) * lookup[i];
        }
        _checksum %= 11;
        if (_checksum === 10) {
          return false;
        }
        return _checksum === parseInt(tin[9], 10);
      }
      var full_year = tin.slice(0, 2);
      var month = parseInt(tin.slice(2, 4), 10);
      if (month > 80) {
        full_year = "18".concat(full_year);
        month -= 80;
      } else if (month > 60) {
        full_year = "22".concat(full_year);
        month -= 60;
      } else if (month > 40) {
        full_year = "21".concat(full_year);
        month -= 40;
      } else if (month > 20) {
        full_year = "20".concat(full_year);
        month -= 20;
      } else {
        full_year = "19".concat(full_year);
      }
      if (month < 10) {
        month = "0".concat(month);
      }
      var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));
      if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      var checksum = 0;
      var multiplier = 1;
      for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {
        checksum += parseInt(tin[_i7], 10) * multiplier % 10;
        multiplier += 2;
        if (multiplier > 10) {
          multiplier = 1;
        } else if (multiplier === 5) {
          multiplier += 2;
        }
      }
      checksum = 10 - checksum % 10;
      return checksum === parseInt(tin[10], 10);
    }
    function ptBrCheck(tin) {
      if (tin.length === 11) {
        var _sum;
        var remainder;
        _sum = 0;
        if (
          // Reject known invalid CPFs
          tin === "11111111111" || tin === "22222222222" || tin === "33333333333" || tin === "44444444444" || tin === "55555555555" || tin === "66666666666" || tin === "77777777777" || tin === "88888888888" || tin === "99999999999" || tin === "00000000000"
        ) return false;
        for (var i = 1; i <= 9; i++) _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);
        remainder = _sum * 10 % 11;
        if (remainder === 10) remainder = 0;
        if (remainder !== parseInt(tin.substring(9, 10), 10)) return false;
        _sum = 0;
        for (var _i8 = 1; _i8 <= 10; _i8++) _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);
        remainder = _sum * 10 % 11;
        if (remainder === 10) remainder = 0;
        if (remainder !== parseInt(tin.substring(10, 11), 10)) return false;
        return true;
      }
      if (
        // Reject know invalid CNPJs
        tin === "00000000000000" || tin === "11111111111111" || tin === "22222222222222" || tin === "33333333333333" || tin === "44444444444444" || tin === "55555555555555" || tin === "66666666666666" || tin === "77777777777777" || tin === "88888888888888" || tin === "99999999999999"
      ) {
        return false;
      }
      var length = tin.length - 2;
      var identifiers = tin.substring(0, length);
      var verificators = tin.substring(length);
      var sum = 0;
      var pos = length - 7;
      for (var _i9 = length; _i9 >= 1; _i9--) {
        sum += identifiers.charAt(length - _i9) * pos;
        pos -= 1;
        if (pos < 2) {
          pos = 9;
        }
      }
      var result = sum % 11 < 2 ? 0 : 11 - sum % 11;
      if (result !== parseInt(verificators.charAt(0), 10)) {
        return false;
      }
      length += 1;
      identifiers = tin.substring(0, length);
      sum = 0;
      pos = length - 7;
      for (var _i0 = length; _i0 >= 1; _i0--) {
        sum += identifiers.charAt(length - _i0) * pos;
        pos -= 1;
        if (pos < 2) {
          pos = 9;
        }
      }
      result = sum % 11 < 2 ? 0 : 11 - sum % 11;
      if (result !== parseInt(verificators.charAt(1), 10)) {
        return false;
      }
      return true;
    }
    function ptPtCheck(tin) {
      var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split("").slice(0, 8).map(function(a) {
        return parseInt(a, 10);
      }), 9) % 11;
      if (checksum > 9) {
        return parseInt(tin[8], 10) === 0;
      }
      return checksum === parseInt(tin[8], 10);
    }
    function roRoCheck(tin) {
      if (tin.slice(0, 4) !== "9000") {
        var full_year = tin.slice(1, 3);
        switch (tin[0]) {
          case "1":
          case "2":
            full_year = "19".concat(full_year);
            break;
          case "3":
          case "4":
            full_year = "18".concat(full_year);
            break;
          case "5":
          case "6":
            full_year = "20".concat(full_year);
            break;
          default:
        }
        var date = "".concat(full_year, "/").concat(tin.slice(3, 5), "/").concat(tin.slice(5, 7));
        if (date.length === 8) {
          if (!(0, _isDate.default)(date, "YY/MM/DD")) {
            return false;
          }
        } else if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
          return false;
        }
        var digits = tin.split("").map(function(a) {
          return parseInt(a, 10);
        });
        var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];
        var checksum = 0;
        for (var i = 0; i < multipliers.length; i++) {
          checksum += digits[i] * multipliers[i];
        }
        if (checksum % 11 === 10) {
          return digits[12] === 1;
        }
        return digits[12] === checksum % 11;
      }
      return true;
    }
    function skSkCheck(tin) {
      if (tin.length === 9) {
        tin = tin.replace(/\W/, "");
        if (tin.slice(6) === "000") {
          return false;
        }
        var full_year = parseInt(tin.slice(0, 2), 10);
        if (full_year > 53) {
          return false;
        }
        if (full_year < 10) {
          full_year = "190".concat(full_year);
        } else {
          full_year = "19".concat(full_year);
        }
        var month = parseInt(tin.slice(2, 4), 10);
        if (month > 50) {
          month -= 50;
        }
        if (month < 10) {
          month = "0".concat(month);
        }
        var date = "".concat(full_year, "/").concat(month, "/").concat(tin.slice(4, 6));
        if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
          return false;
        }
      }
      return true;
    }
    function slSiCheck(tin) {
      var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split("").slice(0, 7).map(function(a) {
        return parseInt(a, 10);
      }), 8) % 11;
      if (checksum === 10) {
        return parseInt(tin[7], 10) === 0;
      }
      return checksum === parseInt(tin[7], 10);
    }
    function svSeCheck(tin) {
      var tin_copy = tin.slice(0);
      if (tin.length > 11) {
        tin_copy = tin_copy.slice(2);
      }
      var full_year = "";
      var month = tin_copy.slice(2, 4);
      var day = parseInt(tin_copy.slice(4, 6), 10);
      if (tin.length > 11) {
        full_year = tin.slice(0, 4);
      } else {
        full_year = tin.slice(0, 2);
        if (tin.length === 11 && day < 60) {
          var current_year = (/* @__PURE__ */ new Date()).getFullYear().toString();
          var current_century = parseInt(current_year.slice(0, 2), 10);
          current_year = parseInt(current_year, 10);
          if (tin[6] === "-") {
            if (parseInt("".concat(current_century).concat(full_year), 10) > current_year) {
              full_year = "".concat(current_century - 1).concat(full_year);
            } else {
              full_year = "".concat(current_century).concat(full_year);
            }
          } else {
            full_year = "".concat(current_century - 1).concat(full_year);
            if (current_year - parseInt(full_year, 10) < 100) {
              return false;
            }
          }
        }
      }
      if (day > 60) {
        day -= 60;
      }
      if (day < 10) {
        day = "0".concat(day);
      }
      var date = "".concat(full_year, "/").concat(month, "/").concat(day);
      if (date.length === 8) {
        if (!(0, _isDate.default)(date, "YY/MM/DD")) {
          return false;
        }
      } else if (!(0, _isDate.default)(date, "YYYY/MM/DD")) {
        return false;
      }
      return algorithms.luhnCheck(tin.replace(/\W/, ""));
    }
    function ukUaCheck(tin) {
      var digits = tin.split("").map(function(a) {
        return parseInt(a, 10);
      });
      var multipliers = [-1, 5, 7, 9, 4, 6, 10, 5, 7];
      var checksum = 0;
      for (var i = 0; i < multipliers.length; i++) {
        checksum += digits[i] * multipliers[i];
      }
      return checksum % 11 === 10 ? digits[9] === 0 : digits[9] === checksum % 11;
    }
    var taxIdFormat = {
      "bg-BG": /^\d{10}$/,
      "cs-CZ": /^\d{6}\/{0,1}\d{3,4}$/,
      "de-AT": /^\d{9}$/,
      "de-DE": /^[1-9]\d{10}$/,
      "dk-DK": /^\d{6}-{0,1}\d{4}$/,
      "el-CY": /^[09]\d{7}[A-Z]$/,
      "el-GR": /^([0-4]|[7-9])\d{8}$/,
      "en-CA": /^\d{9}$/,
      "en-GB": /^\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\d{6}[ABCD ]$/i,
      "en-IE": /^\d{7}[A-W][A-IW]{0,1}$/i,
      "en-US": /^\d{2}[- ]{0,1}\d{7}$/,
      "es-AR": /(20|23|24|27|30|33|34)[0-9]{8}[0-9]/,
      "es-ES": /^(\d{0,8}|[XYZKLM]\d{7})[A-HJ-NP-TV-Z]$/i,
      "et-EE": /^[1-6]\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\d$/,
      "fi-FI": /^\d{6}[-+A]\d{3}[0-9A-FHJ-NPR-Y]$/i,
      "fr-BE": /^\d{11}$/,
      "fr-FR": /^[0-3]\d{12}$|^[0-3]\d\s\d{2}(\s\d{3}){3}$/,
      // Conforms both to official spec and provided example
      "fr-LU": /^\d{13}$/,
      "hr-HR": /^\d{11}$/,
      "hu-HU": /^8\d{9}$/,
      "it-IT": /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,
      "lv-LV": /^\d{6}-{0,1}\d{5}$/,
      // Conforms both to DG TAXUD spec and original research
      "mt-MT": /^\d{3,7}[APMGLHBZ]$|^([1-8])\1\d{7}$/i,
      "nl-NL": /^\d{9}$/,
      "pl-PL": /^\d{10,11}$/,
      "pt-BR": /(?:^\d{11}$)|(?:^\d{14}$)/,
      "pt-PT": /^\d{9}$/,
      "ro-RO": /^\d{13}$/,
      "sk-SK": /^\d{6}\/{0,1}\d{3,4}$/,
      "sl-SI": /^[1-9]\d{7}$/,
      "sv-SE": /^(\d{6}[-+]{0,1}\d{4}|(18|19|20)\d{6}[-+]{0,1}\d{4})$/,
      "uk-UA": /^\d{10}$/
    };
    taxIdFormat["lb-LU"] = taxIdFormat["fr-LU"];
    taxIdFormat["lt-LT"] = taxIdFormat["et-EE"];
    taxIdFormat["nl-BE"] = taxIdFormat["fr-BE"];
    taxIdFormat["fr-CA"] = taxIdFormat["en-CA"];
    var taxIdCheck = {
      "bg-BG": bgBgCheck,
      "cs-CZ": csCzCheck,
      "de-AT": deAtCheck,
      "de-DE": deDeCheck,
      "dk-DK": dkDkCheck,
      "el-CY": elCyCheck,
      "el-GR": elGrCheck,
      "en-CA": isCanadianSIN,
      "en-IE": enIeCheck,
      "en-US": enUsCheck,
      "es-AR": esArCheck,
      "es-ES": esEsCheck,
      "et-EE": etEeCheck,
      "fi-FI": fiFiCheck,
      "fr-BE": frBeCheck,
      "fr-FR": frFrCheck,
      "fr-LU": frLuCheck,
      "hr-HR": hrHrCheck,
      "hu-HU": huHuCheck,
      "it-IT": itItCheck,
      "lv-LV": lvLvCheck,
      "mt-MT": mtMtCheck,
      "nl-NL": nlNlCheck,
      "pl-PL": plPlCheck,
      "pt-BR": ptBrCheck,
      "pt-PT": ptPtCheck,
      "ro-RO": roRoCheck,
      "sk-SK": skSkCheck,
      "sl-SI": slSiCheck,
      "sv-SE": svSeCheck,
      "uk-UA": ukUaCheck
    };
    taxIdCheck["lb-LU"] = taxIdCheck["fr-LU"];
    taxIdCheck["lt-LT"] = taxIdCheck["et-EE"];
    taxIdCheck["nl-BE"] = taxIdCheck["fr-BE"];
    taxIdCheck["fr-CA"] = taxIdCheck["en-CA"];
    var allsymbols = /[-\\\/!@#$%\^&\*\(\)\+\=\[\]]+/g;
    var sanitizeRegexes = {
      "de-AT": allsymbols,
      "de-DE": /[\/\\]/g,
      "fr-BE": allsymbols
    };
    sanitizeRegexes["nl-BE"] = sanitizeRegexes["fr-BE"];
    function isTaxID(str) {
      var locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "en-US";
      (0, _assertString.default)(str);
      var strcopy = str.slice(0);
      if (locale in taxIdFormat) {
        if (locale in sanitizeRegexes) {
          strcopy = strcopy.replace(sanitizeRegexes[locale], "");
        }
        if (!taxIdFormat[locale].test(strcopy)) {
          return false;
        }
        if (locale in taxIdCheck) {
          return taxIdCheck[locale](strcopy);
        }
        return true;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMobilePhone.js
var require_isMobilePhone = __commonJS({
  "node_modules/validator/lib/isMobilePhone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMobilePhone;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var phones = {
      "am-AM": /^(\+?374|0)(33|4[134]|55|77|88|9[13-689])\d{6}$/,
      "ar-AE": /^((\+?971)|0)?5[024568]\d{7}$/,
      "ar-BH": /^(\+?973)?(3|6)\d{7}$/,
      "ar-DZ": /^(\+?213|0)(5|6|7)\d{8}$/,
      "ar-LB": /^(\+?961)?((3|81)\d{6}|7\d{7})$/,
      "ar-EG": /^((\+?20)|0)?1[0125]\d{8}$/,
      "ar-IQ": /^(\+?964|0)?7[0-9]\d{8}$/,
      "ar-JO": /^(\+?962|0)?7[789]\d{7}$/,
      "ar-KW": /^(\+?965)([569]\d{7}|41\d{6})$/,
      "ar-LY": /^((\+?218)|0)?(9[1-6]\d{7}|[1-8]\d{7,9})$/,
      "ar-MA": /^(?:(?:\+|00)212|0)[5-7]\d{8}$/,
      "ar-OM": /^((\+|00)968)?([79][1-9])\d{6}$/,
      "ar-PS": /^(\+?970|0)5[6|9](\d{7})$/,
      "ar-SA": /^(!?(\+?966)|0)?5\d{8}$/,
      "ar-SD": /^((\+?249)|0)?(9[012369]|1[012])\d{7}$/,
      "ar-SY": /^(!?(\+?963)|0)?9\d{8}$/,
      "ar-TN": /^(\+?216)?[2459]\d{7}$/,
      "az-AZ": /^(\+994|0)(10|5[015]|7[07]|99)\d{7}$/,
      "bs-BA": /^((((\+|00)3876)|06))((([0-3]|[5-6])\d{6})|(4\d{7}))$/,
      "be-BY": /^(\+?375)?(24|25|29|33|44)\d{7}$/,
      "bg-BG": /^(\+?359|0)?8[789]\d{7}$/,
      "bn-BD": /^(\+?880|0)1[13456789][0-9]{8}$/,
      "ca-AD": /^(\+376)?[346]\d{5}$/,
      "cs-CZ": /^(\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
      "da-DK": /^(\+?45)?\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2}$/,
      "de-DE": /^((\+49|0)1)(5[0-25-9]\d|6([23]|0\d?)|7([0-57-9]|6\d))\d{7,9}$/,
      "de-AT": /^(\+43|0)\d{1,4}\d{3,12}$/,
      "de-CH": /^(\+41|0)([1-9])\d{1,9}$/,
      "de-LU": /^(\+352)?((6\d1)\d{6})$/,
      "dv-MV": /^(\+?960)?(7[2-9]|9[1-9])\d{5}$/,
      "el-GR": /^(\+?30|0)?6(8[5-9]|9(?![26])[0-9])\d{7}$/,
      "el-CY": /^(\+?357?)?(9(9|7|6|5|4)\d{6})$/,
      "en-AI": /^(\+?1|0)264(?:2(35|92)|4(?:6[1-2]|76|97)|5(?:3[6-9]|8[1-4])|7(?:2(4|9)|72))\d{4}$/,
      "en-AU": /^(\+?61|0)4\d{8}$/,
      "en-AG": /^(?:\+1|1)268(?:464|7(?:1[3-9]|[28]\d|3[0246]|64|7[0-689]))\d{4}$/,
      "en-BM": /^(\+?1)?441(((3|7)\d{6}$)|(5[0-3][0-9]\d{4}$)|(59\d{5}$))/,
      "en-BS": /^(\+?1[-\s]?|0)?\(?242\)?[-\s]?\d{3}[-\s]?\d{4}$/,
      "en-GB": /^(\+?44|0)7[1-9]\d{8}$/,
      "en-GG": /^(\+?44|0)1481\d{6}$/,
      "en-GH": /^(\+233|0)(20|50|24|54|27|57|26|56|23|53|28|55|59)\d{7}$/,
      "en-GY": /^(\+592|0)6\d{6}$/,
      "en-HK": /^(\+?852[-\s]?)?[456789]\d{3}[-\s]?\d{4}$/,
      "en-MO": /^(\+?853[-\s]?)?[6]\d{3}[-\s]?\d{4}$/,
      "en-IE": /^(\+?353|0)8[356789]\d{7}$/,
      "en-IN": /^(\+?91|0)?[6789]\d{9}$/,
      "en-JM": /^(\+?876)?\d{7}$/,
      "en-KE": /^(\+?254|0)(7|1)\d{8}$/,
      "fr-CF": /^(\+?236| ?)(70|75|77|72|21|22)\d{6}$/,
      "en-SS": /^(\+?211|0)(9[1257])\d{7}$/,
      "en-KI": /^((\+686|686)?)?( )?((6|7)(2|3|8)[0-9]{6})$/,
      "en-KN": /^(?:\+1|1)869(?:46\d|48[89]|55[6-8]|66\d|76[02-7])\d{4}$/,
      "en-LS": /^(\+?266)(22|28|57|58|59|27|52)\d{6}$/,
      "en-MT": /^(\+?356|0)?(99|79|77|21|27|22|25)[0-9]{6}$/,
      "en-MU": /^(\+?230|0)?\d{8}$/,
      "en-MW": /^(\+?265|0)(((77|88|31|99|98|21)\d{7})|(((111)|1)\d{6})|(32000\d{4}))$/,
      "en-NA": /^(\+?264|0)(6|8)\d{7}$/,
      "en-NG": /^(\+?234|0)?[789]\d{9}$/,
      "en-NZ": /^(\+?64|0)[28]\d{7,9}$/,
      "en-PG": /^(\+?675|0)?(7\d|8[18])\d{6}$/,
      "en-PK": /^((00|\+)?92|0)3[0-6]\d{8}$/,
      "en-PH": /^(09|\+639)\d{9}$/,
      "en-RW": /^(\+?250|0)?[7]\d{8}$/,
      "en-SG": /^(\+65)?[3689]\d{7}$/,
      "en-SL": /^(\+?232|0)\d{8}$/,
      "en-TZ": /^(\+?255|0)?[67]\d{8}$/,
      "en-UG": /^(\+?256|0)?[7]\d{8}$/,
      "en-US": /^((\+1|1)?( |-)?)?(\([2-9][0-9]{2}\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,
      "en-ZA": /^(\+?27|0)\d{9}$/,
      "en-ZM": /^(\+?26)?0[79][567]\d{7}$/,
      "en-ZW": /^(\+263)[0-9]{9}$/,
      "en-BW": /^(\+?267)?(7[1-8]{1})\d{6}$/,
      "es-AR": /^\+?549(11|[2368]\d)\d{8}$/,
      "es-BO": /^(\+?591)?(6|7)\d{7}$/,
      "es-CO": /^(\+?57)?3(0(0|1|2|4|5)|1\d|2[0-4]|5(0|1))\d{7}$/,
      "es-CL": /^(\+?56|0)[2-9]\d{1}\d{7}$/,
      "es-CR": /^(\+506)?[2-8]\d{7}$/,
      "es-CU": /^(\+53|0053)?5\d{7}$/,
      "es-DO": /^(\+?1)?8[024]9\d{7}$/,
      "es-HN": /^(\+?504)?[9|8|3|2]\d{7}$/,
      "es-EC": /^(\+?593|0)([2-7]|9[2-9])\d{7}$/,
      "es-ES": /^(\+?34)?[6|7]\d{8}$/,
      "es-GT": /^(\+?502)?[2|6|7]\d{7}$/,
      "es-PE": /^(\+?51)?9\d{8}$/,
      "es-MX": /^(\+?52)?(1|01)?\d{10,11}$/,
      "es-NI": /^(\+?505)\d{7,8}$/,
      "es-PA": /^(\+?507)\d{7,8}$/,
      "es-PY": /^(\+?595|0)9[9876]\d{7}$/,
      "es-SV": /^(\+?503)?[67]\d{7}$/,
      "es-UY": /^(\+598|0)9[1-9][\d]{6}$/,
      "es-VE": /^(\+?58)?(2|4)\d{9}$/,
      "et-EE": /^(\+?372)?\s?(5|8[1-4])\s?([0-9]\s?){6,7}$/,
      "fa-IR": /^(\+?98[\-\s]?|0)9[0-39]\d[\-\s]?\d{3}[\-\s]?\d{4}$/,
      "fi-FI": /^(\+?358|0)\s?(4[0-6]|50)\s?(\d\s?){4,8}$/,
      "fj-FJ": /^(\+?679)?\s?\d{3}\s?\d{4}$/,
      "fo-FO": /^(\+?298)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
      "fr-BF": /^(\+226|0)[67]\d{7}$/,
      "fr-BJ": /^(\+229)\d{8}$/,
      "fr-CD": /^(\+?243|0)?(8|9)\d{8}$/,
      "fr-CM": /^(\+?237)6[0-9]{8}$/,
      "fr-FR": /^(\+?33|0)[67]\d{8}$/,
      "fr-GF": /^(\+?594|0|00594)[67]\d{8}$/,
      "fr-GP": /^(\+?590|0|00590)[67]\d{8}$/,
      "fr-MQ": /^(\+?596|0|00596)[67]\d{8}$/,
      "fr-PF": /^(\+?689)?8[789]\d{6}$/,
      "fr-RE": /^(\+?262|0|00262)[67]\d{8}$/,
      "fr-WF": /^(\+681)?\d{6}$/,
      "he-IL": /^(\+972|0)([23489]|5[012345689]|77)[1-9]\d{6}$/,
      "hu-HU": /^(\+?36|06)(20|30|31|50|70)\d{7}$/,
      "id-ID": /^(\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\s?|\d]{5,11})$/,
      "ir-IR": /^(\+98|0)?9\d{9}$/,
      "it-IT": /^(\+?39)?\s?3\d{2} ?\d{6,7}$/,
      "it-SM": /^((\+378)|(0549)|(\+390549)|(\+3780549))?6\d{5,9}$/,
      "ja-JP": /^(\+81[ \-]?(\(0\))?|0)[6789]0[ \-]?\d{4}[ \-]?\d{4}$/,
      "ka-GE": /^(\+?995)?(79\d{7}|5\d{8})$/,
      "kk-KZ": /^(\+?7|8)?7\d{9}$/,
      "kl-GL": /^(\+?299)?\s?\d{2}\s?\d{2}\s?\d{2}$/,
      "ko-KR": /^((\+?82)[ \-]?)?0?1([0|1|6|7|8|9]{1})[ \-]?\d{3,4}[ \-]?\d{4}$/,
      "ky-KG": /^(\+996\s?)?(22[0-9]|50[0-9]|55[0-9]|70[0-9]|75[0-9]|77[0-9]|880|990|995|996|997|998)\s?\d{3}\s?\d{3}$/,
      "lt-LT": /^(\+370|8)\d{8}$/,
      "lv-LV": /^(\+?371)2\d{7}$/,
      "mg-MG": /^((\+?261|0)(2|3)\d)?\d{7}$/,
      "mn-MN": /^(\+|00|011)?976(77|81|88|91|94|95|96|99)\d{6}$/,
      "my-MM": /^(\+?959|09|9)(2[5-7]|3[1-2]|4[0-5]|6[6-9]|7[5-9]|9[6-9])[0-9]{7}$/,
      "ms-MY": /^(\+?60|0)1(([0145](-|\s)?\d{7,8})|([236-9](-|\s)?\d{7}))$/,
      "mz-MZ": /^(\+?258)?8[234567]\d{7}$/,
      "nb-NO": /^(\+?47)?[49]\d{7}$/,
      "ne-NP": /^(\+?977)?9[78]\d{8}$/,
      "nl-BE": /^(\+?32|0)4\d{8}$/,
      "nl-NL": /^(((\+|00)?31\(0\))|((\+|00)?31)|0)6{1}\d{8}$/,
      "nl-AW": /^(\+)?297(56|59|64|73|74|99)\d{5}$/,
      "nn-NO": /^(\+?47)?[49]\d{7}$/,
      "pl-PL": /^(\+?48)? ?([5-8]\d|45) ?\d{3} ?\d{2} ?\d{2}$/,
      "pt-BR": /^((\+?55\ ?[1-9]{2}\ ?)|(\+?55\ ?\([1-9]{2}\)\ ?)|(0[1-9]{2}\ ?)|(\([1-9]{2}\)\ ?)|([1-9]{2}\ ?))((\d{4}\-?\d{4})|(9[1-9]{1}\d{3}\-?\d{4}))$/,
      "pt-PT": /^(\+?351)?9[1236]\d{7}$/,
      "pt-AO": /^(\+?244)?9\d{8}$/,
      "ro-MD": /^(\+?373|0)((6(0|1|2|6|7|8|9))|(7(6|7|8|9)))\d{6}$/,
      "ro-RO": /^(\+?40|0)\s?7\d{2}(\/|\s|\.|-)?\d{3}(\s|\.|-)?\d{3}$/,
      "ru-RU": /^(\+?7|8)?9\d{9}$/,
      "si-LK": /^(?:0|94|\+94)?(7(0|1|2|4|5|6|7|8)( |-)?)\d{7}$/,
      "sl-SI": /^(\+386\s?|0)(\d{1}\s?\d{3}\s?\d{2}\s?\d{2}|\d{2}\s?\d{3}\s?\d{3})$/,
      "sk-SK": /^(\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,
      "so-SO": /^(\+?252|0)((6[0-9])\d{7}|(7[1-9])\d{7})$/,
      "sq-AL": /^(\+355|0)6[2-9]\d{7}$/,
      "sr-RS": /^(\+3816|06)[- \d]{5,9}$/,
      "sv-SE": /^(\+?46|0)[\s\-]?7[\s\-]?[02369]([\s\-]?\d){7}$/,
      "tg-TJ": /^(\+?992)?[5][5]\d{7}$/,
      "th-TH": /^(\+66|66|0)\d{9}$/,
      "tr-TR": /^(\+?90|0)?5\d{9}$/,
      "tk-TM": /^(\+993|993|8)\d{8}$/,
      "uk-UA": /^(\+?38)?0(50|6[36-8]|7[357]|9[1-9])\d{7}$/,
      "uz-UZ": /^(\+?998)?(6[125-79]|7[1-69]|88|9\d)\d{7}$/,
      "vi-VN": /^((\+?84)|0)((3([2-9]))|(5([25689]))|(7([0|6-9]))|(8([1-9]))|(9([0-9])))([0-9]{7})$/,
      "zh-CN": /^((\+|00)86)?(1[3-9]|9[28])\d{9}$/,
      "zh-TW": /^(\+?886\-?|0)?9\d{8}$/,
      "dz-BT": /^(\+?975|0)?(17|16|77|02)\d{6}$/,
      "ar-YE": /^(((\+|00)9677|0?7)[0137]\d{7}|((\+|00)967|0)[1-7]\d{6})$/,
      "ar-EH": /^(\+?212|0)[\s\-]?(5288|5289)[\s\-]?\d{5}$/,
      "fa-AF": /^(\+93|0)?(2{1}[0-8]{1}|[3-5]{1}[0-4]{1})(\d{7})$/,
      "mk-MK": /^(\+?389|0)?((?:2[2-9]\d{6}|(?:3[1-4]|4[2-8])\d{6}|500\d{5}|5[2-9]\d{6}|7[0-9][2-9]\d{5}|8[1-9]\d{6}|800\d{5}|8009\d{4}))$/
    };
    phones["en-CA"] = phones["en-US"];
    phones["fr-CA"] = phones["en-CA"];
    phones["fr-BE"] = phones["nl-BE"];
    phones["zh-HK"] = phones["en-HK"];
    phones["zh-MO"] = phones["en-MO"];
    phones["ga-IE"] = phones["en-IE"];
    phones["fr-CH"] = phones["de-CH"];
    phones["it-CH"] = phones["fr-CH"];
    function isMobilePhone(str, locale, options) {
      (0, _assertString.default)(str);
      if (options && options.strictMode && !str.startsWith("+")) {
        return false;
      }
      if (Array.isArray(locale)) {
        return locale.some(function(key2) {
          if (phones.hasOwnProperty(key2)) {
            var phone2 = phones[key2];
            if (phone2.test(str)) {
              return true;
            }
          }
          return false;
        });
      } else if (locale in phones) {
        return phones[locale].test(str);
      } else if (!locale || locale === "any") {
        for (var key in phones) {
          if (phones.hasOwnProperty(key)) {
            var phone = phones[key];
            if (phone.test(str)) {
              return true;
            }
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    var locales = exports.locales = Object.keys(phones);
  }
});

// node_modules/validator/lib/isEthereumAddress.js
var require_isEthereumAddress = __commonJS({
  "node_modules/validator/lib/isEthereumAddress.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isEthereumAddress;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var eth = /^(0x)[0-9a-f]{40}$/i;
    function isEthereumAddress(str) {
      (0, _assertString.default)(str);
      return eth.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isCurrency.js
var require_isCurrency = __commonJS({
  "node_modules/validator/lib/isCurrency.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isCurrency;
    var _merge = _interopRequireDefault(require_merge());
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function currencyRegex(options) {
      var decimal_digits = "\\d{".concat(options.digits_after_decimal[0], "}");
      options.digits_after_decimal.forEach(function(digit, index) {
        if (index !== 0) decimal_digits = "".concat(decimal_digits, "|\\d{").concat(digit, "}");
      });
      var symbol = "(".concat(options.symbol.replace(/\W/, function(m) {
        return "\\".concat(m);
      }), ")").concat(options.require_symbol ? "" : "?"), negative = "-?", whole_dollar_amount_without_sep = "[1-9]\\d*", whole_dollar_amount_with_sep = "[1-9]\\d{0,2}(\\".concat(options.thousands_separator, "\\d{3})*"), valid_whole_dollar_amounts = ["0", whole_dollar_amount_without_sep, whole_dollar_amount_with_sep], whole_dollar_amount = "(".concat(valid_whole_dollar_amounts.join("|"), ")?"), decimal_amount = "(\\".concat(options.decimal_separator, "(").concat(decimal_digits, "))").concat(options.require_decimal ? "" : "?");
      var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : "");
      if (options.allow_negatives && !options.parens_for_negatives) {
        if (options.negative_sign_after_digits) {
          pattern += negative;
        } else if (options.negative_sign_before_digits) {
          pattern = negative + pattern;
        }
      }
      if (options.allow_negative_sign_placeholder) {
        pattern = "( (?!\\-))?".concat(pattern);
      } else if (options.allow_space_after_symbol) {
        pattern = " ?".concat(pattern);
      } else if (options.allow_space_after_digits) {
        pattern += "( (?!$))?";
      }
      if (options.symbol_after_digits) {
        pattern += symbol;
      } else {
        pattern = symbol + pattern;
      }
      if (options.allow_negatives) {
        if (options.parens_for_negatives) {
          pattern = "(\\(".concat(pattern, "\\)|").concat(pattern, ")");
        } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {
          pattern = negative + pattern;
        }
      }
      return new RegExp("^(?!-? )(?=.*\\d)".concat(pattern, "$"));
    }
    var default_currency_options = {
      symbol: "$",
      require_symbol: false,
      allow_space_after_symbol: false,
      symbol_after_digits: false,
      allow_negatives: true,
      parens_for_negatives: false,
      negative_sign_before_digits: false,
      negative_sign_after_digits: false,
      allow_negative_sign_placeholder: false,
      thousands_separator: ",",
      decimal_separator: ".",
      allow_decimal: true,
      require_decimal: false,
      digits_after_decimal: [2],
      allow_space_after_digits: false
    };
    function isCurrency(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_currency_options);
      return currencyRegex(options).test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isBtcAddress.js
var require_isBtcAddress = __commonJS({
  "node_modules/validator/lib/isBtcAddress.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBtcAddress;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var bech32 = /^(bc1|tb1|bc1p|tb1p)[ac-hj-np-z02-9]{39,58}$/;
    var base58 = /^(1|2|3|m)[A-HJ-NP-Za-km-z1-9]{25,39}$/;
    function isBtcAddress(str) {
      (0, _assertString.default)(str);
      return bech32.test(str) || base58.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISO6346.js
var require_isISO6346 = __commonJS({
  "node_modules/validator/lib/isISO6346.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isFreightContainerID = void 0;
    exports.isISO6346 = isISO6346;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var isISO6346Str = /^[A-Z]{3}(U[0-9]{7})|([J,Z][0-9]{6,7})$/;
    var isDigit = /^[0-9]$/;
    function isISO6346(str) {
      (0, _assertString.default)(str);
      str = str.toUpperCase();
      if (!isISO6346Str.test(str)) return false;
      if (str.length === 11) {
        var sum = 0;
        for (var i = 0; i < str.length - 1; i++) {
          if (!isDigit.test(str[i])) {
            var convertedCode = void 0;
            var letterCode = str.charCodeAt(i) - 55;
            if (letterCode < 11) convertedCode = letterCode;
            else if (letterCode >= 11 && letterCode <= 20) convertedCode = 12 + letterCode % 11;
            else if (letterCode >= 21 && letterCode <= 30) convertedCode = 23 + letterCode % 21;
            else convertedCode = 34 + letterCode % 31;
            sum += convertedCode * Math.pow(2, i);
          } else sum += str[i] * Math.pow(2, i);
        }
        var checkSumDigit = sum % 11;
        if (checkSumDigit === 10) checkSumDigit = 0;
        return Number(str[str.length - 1]) === checkSumDigit;
      }
      return true;
    }
    var isFreightContainerID = exports.isFreightContainerID = isISO6346;
  }
});

// node_modules/validator/lib/isISO6391.js
var require_isISO6391 = __commonJS({
  "node_modules/validator/lib/isISO6391.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO6391;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var isISO6391Set = /* @__PURE__ */ new Set(["aa", "ab", "ae", "af", "ak", "am", "an", "ar", "as", "av", "ay", "az", "az", "ba", "be", "bg", "bh", "bi", "bm", "bn", "bo", "br", "bs", "ca", "ce", "ch", "co", "cr", "cs", "cu", "cv", "cy", "da", "de", "dv", "dz", "ee", "el", "en", "eo", "es", "et", "eu", "fa", "ff", "fi", "fj", "fo", "fr", "fy", "ga", "gd", "gl", "gn", "gu", "gv", "ha", "he", "hi", "ho", "hr", "ht", "hu", "hy", "hz", "ia", "id", "ie", "ig", "ii", "ik", "io", "is", "it", "iu", "ja", "jv", "ka", "kg", "ki", "kj", "kk", "kl", "km", "kn", "ko", "kr", "ks", "ku", "kv", "kw", "ky", "la", "lb", "lg", "li", "ln", "lo", "lt", "lu", "lv", "mg", "mh", "mi", "mk", "ml", "mn", "mr", "ms", "mt", "my", "na", "nb", "nd", "ne", "ng", "nl", "nn", "no", "nr", "nv", "ny", "oc", "oj", "om", "or", "os", "pa", "pi", "pl", "ps", "pt", "qu", "rm", "rn", "ro", "ru", "rw", "sa", "sc", "sd", "se", "sg", "si", "sk", "sl", "sm", "sn", "so", "sq", "sr", "ss", "st", "su", "sv", "sw", "ta", "te", "tg", "th", "ti", "tk", "tl", "tn", "to", "tr", "ts", "tt", "tw", "ty", "ug", "uk", "ur", "uz", "ve", "vi", "vo", "wa", "wo", "xh", "yi", "yo", "za", "zh", "zu"]);
    function isISO6391(str) {
      (0, _assertString.default)(str);
      return isISO6391Set.has(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISO8601.js
var require_isISO8601 = __commonJS({
  "node_modules/validator/lib/isISO8601.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO8601;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var iso8601 = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
    var iso8601StrictSeparator = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
    var isValidDate = function isValidDate2(str) {
      var ordinalMatch = str.match(/^(\d{4})-?(\d{3})([ T]{1}\.*|$)/);
      if (ordinalMatch) {
        var oYear = Number(ordinalMatch[1]);
        var oDay = Number(ordinalMatch[2]);
        if (oYear % 4 === 0 && oYear % 100 !== 0 || oYear % 400 === 0) return oDay <= 366;
        return oDay <= 365;
      }
      var match = str.match(/(\d{4})-?(\d{0,2})-?(\d*)/).map(Number);
      var year = match[1];
      var month = match[2];
      var day = match[3];
      var monthString = month ? "0".concat(month).slice(-2) : month;
      var dayString = day ? "0".concat(day).slice(-2) : day;
      var d = new Date("".concat(year, "-").concat(monthString || "01", "-").concat(dayString || "01"));
      if (month && day) {
        return d.getUTCFullYear() === year && d.getUTCMonth() + 1 === month && d.getUTCDate() === day;
      }
      return true;
    };
    function isISO8601(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      (0, _assertString.default)(str);
      var check = options.strictSeparator ? iso8601StrictSeparator.test(str) : iso8601.test(str);
      if (check && options.strict) return isValidDate(str);
      return check;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isRFC3339.js
var require_isRFC3339 = __commonJS({
  "node_modules/validator/lib/isRFC3339.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isRFC3339;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var dateFullYear = /[0-9]{4}/;
    var dateMonth = /(0[1-9]|1[0-2])/;
    var dateMDay = /([12]\d|0[1-9]|3[01])/;
    var timeHour = /([01][0-9]|2[0-3])/;
    var timeMinute = /[0-5][0-9]/;
    var timeSecond = /([0-5][0-9]|60)/;
    var timeSecFrac = /(\.[0-9]+)?/;
    var timeNumOffset = new RegExp("[-+]".concat(timeHour.source, ":").concat(timeMinute.source));
    var timeOffset = new RegExp("([zZ]|".concat(timeNumOffset.source, ")"));
    var partialTime = new RegExp("".concat(timeHour.source, ":").concat(timeMinute.source, ":").concat(timeSecond.source).concat(timeSecFrac.source));
    var fullDate = new RegExp("".concat(dateFullYear.source, "-").concat(dateMonth.source, "-").concat(dateMDay.source));
    var fullTime = new RegExp("".concat(partialTime.source).concat(timeOffset.source));
    var rfc3339 = new RegExp("^".concat(fullDate.source, "[ tT]").concat(fullTime.source, "$"));
    function isRFC3339(str) {
      (0, _assertString.default)(str);
      return rfc3339.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISO15924.js
var require_isISO15924 = __commonJS({
  "node_modules/validator/lib/isISO15924.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ScriptCodes = void 0;
    exports.default = isISO15924;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var validISO15924Codes = /* @__PURE__ */ new Set(["Adlm", "Afak", "Aghb", "Ahom", "Arab", "Aran", "Armi", "Armn", "Avst", "Bali", "Bamu", "Bass", "Batk", "Beng", "Bhks", "Blis", "Bopo", "Brah", "Brai", "Bugi", "Buhd", "Cakm", "Cans", "Cari", "Cham", "Cher", "Chis", "Chrs", "Cirt", "Copt", "Cpmn", "Cprt", "Cyrl", "Cyrs", "Deva", "Diak", "Dogr", "Dsrt", "Dupl", "Egyd", "Egyh", "Egyp", "Elba", "Elym", "Ethi", "Gara", "Geok", "Geor", "Glag", "Gong", "Gonm", "Goth", "Gran", "Grek", "Gujr", "Gukh", "Guru", "Hanb", "Hang", "Hani", "Hano", "Hans", "Hant", "Hatr", "Hebr", "Hira", "Hluw", "Hmng", "Hmnp", "Hrkt", "Hung", "Inds", "Ital", "Jamo", "Java", "Jpan", "Jurc", "Kali", "Kana", "Kawi", "Khar", "Khmr", "Khoj", "Kitl", "Kits", "Knda", "Kore", "Kpel", "Krai", "Kthi", "Lana", "Laoo", "Latf", "Latg", "Latn", "Leke", "Lepc", "Limb", "Lina", "Linb", "Lisu", "Loma", "Lyci", "Lydi", "Mahj", "Maka", "Mand", "Mani", "Marc", "Maya", "Medf", "Mend", "Merc", "Mero", "Mlym", "Modi", "Mong", "Moon", "Mroo", "Mtei", "Mult", "Mymr", "Nagm", "Nand", "Narb", "Nbat", "Newa", "Nkdb", "Nkgb", "Nkoo", "Nshu", "Ogam", "Olck", "Onao", "Orkh", "Orya", "Osge", "Osma", "Ougr", "Palm", "Pauc", "Pcun", "Pelm", "Perm", "Phag", "Phli", "Phlp", "Phlv", "Phnx", "Plrd", "Piqd", "Prti", "Psin", "Qaaa", "Qaab", "Qaac", "Qaad", "Qaae", "Qaaf", "Qaag", "Qaah", "Qaai", "Qaaj", "Qaak", "Qaal", "Qaam", "Qaan", "Qaao", "Qaap", "Qaaq", "Qaar", "Qaas", "Qaat", "Qaau", "Qaav", "Qaaw", "Qaax", "Qaay", "Qaaz", "Qaba", "Qabb", "Qabc", "Qabd", "Qabe", "Qabf", "Qabg", "Qabh", "Qabi", "Qabj", "Qabk", "Qabl", "Qabm", "Qabn", "Qabo", "Qabp", "Qabq", "Qabr", "Qabs", "Qabt", "Qabu", "Qabv", "Qabw", "Qabx", "Ranj", "Rjng", "Rohg", "Roro", "Runr", "Samr", "Sara", "Sarb", "Saur", "Sgnw", "Shaw", "Shrd", "Shui", "Sidd", "Sidt", "Sind", "Sinh", "Sogd", "Sogo", "Sora", "Soyo", "Sund", "Sunu", "Sylo", "Syrc", "Syre", "Syrj", "Syrn", "Tagb", "Takr", "Tale", "Talu", "Taml", "Tang", "Tavt", "Tayo", "Telu", "Teng", "Tfng", "Tglg", "Thaa", "Thai", "Tibt", "Tirh", "Tnsa", "Todr", "Tols", "Toto", "Tutg", "Ugar", "Vaii", "Visp", "Vith", "Wara", "Wcho", "Wole", "Xpeo", "Xsux", "Yezi", "Yiii", "Zanb", "Zinh", "Zmth", "Zsye", "Zsym", "Zxxx", "Zyyy", "Zzzz"]);
    function isISO15924(str) {
      (0, _assertString.default)(str);
      return validISO15924Codes.has(str);
    }
    var ScriptCodes = exports.ScriptCodes = validISO15924Codes;
  }
});

// node_modules/validator/lib/isISO31661Alpha3.js
var require_isISO31661Alpha3 = __commonJS({
  "node_modules/validator/lib/isISO31661Alpha3.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO31661Alpha3;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var validISO31661Alpha3CountriesCodes = /* @__PURE__ */ new Set(["AFG", "ALA", "ALB", "DZA", "ASM", "AND", "AGO", "AIA", "ATA", "ATG", "ARG", "ARM", "ABW", "AUS", "AUT", "AZE", "BHS", "BHR", "BGD", "BRB", "BLR", "BEL", "BLZ", "BEN", "BMU", "BTN", "BOL", "BES", "BIH", "BWA", "BVT", "BRA", "IOT", "BRN", "BGR", "BFA", "BDI", "KHM", "CMR", "CAN", "CPV", "CYM", "CAF", "TCD", "CHL", "CHN", "CXR", "CCK", "COL", "COM", "COG", "COD", "COK", "CRI", "CIV", "HRV", "CUB", "CUW", "CYP", "CZE", "DNK", "DJI", "DMA", "DOM", "ECU", "EGY", "SLV", "GNQ", "ERI", "EST", "ETH", "FLK", "FRO", "FJI", "FIN", "FRA", "GUF", "PYF", "ATF", "GAB", "GMB", "GEO", "DEU", "GHA", "GIB", "GRC", "GRL", "GRD", "GLP", "GUM", "GTM", "GGY", "GIN", "GNB", "GUY", "HTI", "HMD", "VAT", "HND", "HKG", "HUN", "ISL", "IND", "IDN", "IRN", "IRQ", "IRL", "IMN", "ISR", "ITA", "JAM", "JPN", "JEY", "JOR", "KAZ", "KEN", "KIR", "PRK", "KOR", "KWT", "KGZ", "LAO", "LVA", "LBN", "LSO", "LBR", "LBY", "LIE", "LTU", "LUX", "MAC", "MKD", "MDG", "MWI", "MYS", "MDV", "MLI", "MLT", "MHL", "MTQ", "MRT", "MUS", "MYT", "MEX", "FSM", "MDA", "MCO", "MNG", "MNE", "MSR", "MAR", "MOZ", "MMR", "NAM", "NRU", "NPL", "NLD", "NCL", "NZL", "NIC", "NER", "NGA", "NIU", "NFK", "MNP", "NOR", "OMN", "PAK", "PLW", "PSE", "PAN", "PNG", "PRY", "PER", "PHL", "PCN", "POL", "PRT", "PRI", "QAT", "REU", "ROU", "RUS", "RWA", "BLM", "SHN", "KNA", "LCA", "MAF", "SPM", "VCT", "WSM", "SMR", "STP", "SAU", "SEN", "SRB", "SYC", "SLE", "SGP", "SXM", "SVK", "SVN", "SLB", "SOM", "ZAF", "SGS", "SSD", "ESP", "LKA", "SDN", "SUR", "SJM", "SWZ", "SWE", "CHE", "SYR", "TWN", "TJK", "TZA", "THA", "TLS", "TGO", "TKL", "TON", "TTO", "TUN", "TUR", "TKM", "TCA", "TUV", "UGA", "UKR", "ARE", "GBR", "USA", "UMI", "URY", "UZB", "VUT", "VEN", "VNM", "VGB", "VIR", "WLF", "ESH", "YEM", "ZMB", "ZWE"]);
    function isISO31661Alpha3(str) {
      (0, _assertString.default)(str);
      return validISO31661Alpha3CountriesCodes.has(str.toUpperCase());
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISO31661Numeric.js
var require_isISO31661Numeric = __commonJS({
  "node_modules/validator/lib/isISO31661Numeric.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isISO31661Numeric;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var validISO31661NumericCountriesCodes = /* @__PURE__ */ new Set(["004", "008", "010", "012", "016", "020", "024", "028", "031", "032", "036", "040", "044", "048", "050", "051", "052", "056", "060", "064", "068", "070", "072", "074", "076", "084", "086", "090", "092", "096", "100", "104", "108", "112", "116", "120", "124", "132", "136", "140", "144", "148", "152", "156", "158", "162", "166", "170", "174", "175", "178", "180", "184", "188", "191", "192", "196", "203", "204", "208", "212", "214", "218", "222", "226", "231", "232", "233", "234", "238", "239", "242", "246", "248", "250", "254", "258", "260", "262", "266", "268", "270", "275", "276", "288", "292", "296", "300", "304", "308", "312", "316", "320", "324", "328", "332", "334", "336", "340", "344", "348", "352", "356", "360", "364", "368", "372", "376", "380", "384", "388", "392", "398", "400", "404", "408", "410", "414", "417", "418", "422", "426", "428", "430", "434", "438", "440", "442", "446", "450", "454", "458", "462", "466", "470", "474", "478", "480", "484", "492", "496", "498", "499", "500", "504", "508", "512", "516", "520", "524", "528", "531", "533", "534", "535", "540", "548", "554", "558", "562", "566", "570", "574", "578", "580", "581", "583", "584", "585", "586", "591", "598", "600", "604", "608", "612", "616", "620", "624", "626", "630", "634", "638", "642", "643", "646", "652", "654", "659", "660", "662", "663", "666", "670", "674", "678", "682", "686", "688", "690", "694", "702", "703", "704", "705", "706", "710", "716", "724", "728", "729", "732", "740", "744", "748", "752", "756", "760", "762", "764", "768", "772", "776", "780", "784", "788", "792", "795", "796", "798", "800", "804", "807", "818", "826", "831", "832", "833", "834", "840", "850", "854", "858", "860", "862", "876", "882", "887", "894"]);
    function isISO31661Numeric(str) {
      (0, _assertString.default)(str);
      return validISO31661NumericCountriesCodes.has(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isISO4217.js
var require_isISO4217 = __commonJS({
  "node_modules/validator/lib/isISO4217.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.CurrencyCodes = void 0;
    exports.default = isISO4217;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var validISO4217CurrencyCodes = /* @__PURE__ */ new Set(["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF", "BMD", "BND", "BOB", "BOV", "BRL", "BSD", "BTN", "BWP", "BYN", "BZD", "CAD", "CDF", "CHE", "CHF", "CHW", "CLF", "CLP", "CNY", "COP", "COU", "CRC", "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GHS", "GIP", "GMD", "GNF", "GTQ", "GYD", "HKD", "HNL", "HTG", "HUF", "IDR", "ILS", "INR", "IQD", "IRR", "ISK", "JMD", "JOD", "JPY", "KES", "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LYD", "MAD", "MDL", "MGA", "MKD", "MMK", "MNT", "MOP", "MRU", "MUR", "MVR", "MWK", "MXN", "MXV", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK", "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLE", "SLL", "SOS", "SRD", "SSP", "STN", "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "USD", "USN", "UYI", "UYU", "UYW", "UZS", "VED", "VES", "VND", "VUV", "WST", "XAF", "XAG", "XAU", "XBA", "XBB", "XBC", "XBD", "XCD", "XDR", "XOF", "XPD", "XPF", "XPT", "XSU", "XTS", "XUA", "XXX", "YER", "ZAR", "ZMW", "ZWL"]);
    function isISO4217(str) {
      (0, _assertString.default)(str);
      return validISO4217CurrencyCodes.has(str.toUpperCase());
    }
    var CurrencyCodes = exports.CurrencyCodes = validISO4217CurrencyCodes;
  }
});

// node_modules/validator/lib/isBase32.js
var require_isBase32 = __commonJS({
  "node_modules/validator/lib/isBase32.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBase32;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var base32 = /^[A-Z2-7]+=*$/;
    var crockfordBase32 = /^[A-HJKMNP-TV-Z0-9]+$/;
    var defaultBase32Options = {
      crockford: false
    };
    function isBase32(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, defaultBase32Options);
      if (options.crockford) {
        return crockfordBase32.test(str);
      }
      var len = str.length;
      if (len % 8 === 0 && base32.test(str)) {
        return true;
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isBase58.js
var require_isBase58 = __commonJS({
  "node_modules/validator/lib/isBase58.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isBase58;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var base58Reg = /^[A-HJ-NP-Za-km-z1-9]*$/;
    function isBase58(str) {
      (0, _assertString.default)(str);
      if (base58Reg.test(str)) {
        return true;
      }
      return false;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isDataURI.js
var require_isDataURI = __commonJS({
  "node_modules/validator/lib/isDataURI.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isDataURI;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var validMediaType = /^[a-z]+\/[a-z0-9\-\+\._]+$/i;
    var validAttribute = /^[a-z\-]+=[a-z0-9\-]+$/i;
    var validData = /^[a-z0-9!\$&'\(\)\*\+,;=\-\._~:@\/\?%\s]*$/i;
    function isDataURI(str) {
      (0, _assertString.default)(str);
      var data = str.split(",");
      if (data.length < 2) {
        return false;
      }
      var attributes = data.shift().trim().split(";");
      var schemeAndMediaType = attributes.shift();
      if (schemeAndMediaType.slice(0, 5) !== "data:") {
        return false;
      }
      var mediaType = schemeAndMediaType.slice(5);
      if (mediaType !== "" && !validMediaType.test(mediaType)) {
        return false;
      }
      for (var i = 0; i < attributes.length; i++) {
        if (!(i === attributes.length - 1 && attributes[i].toLowerCase() === "base64") && !validAttribute.test(attributes[i])) {
          return false;
        }
      }
      for (var _i = 0; _i < data.length; _i++) {
        if (!validData.test(data[_i])) {
          return false;
        }
      }
      return true;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMagnetURI.js
var require_isMagnetURI = __commonJS({
  "node_modules/validator/lib/isMagnetURI.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMagnetURI;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var magnetURIComponent = /(?:^magnet:\?|[^?&]&)xt(?:\.1)?=urn:(?:(?:aich|bitprint|btih|ed2k|ed2khash|kzhash|md5|sha1|tree:tiger):[a-z0-9]{32}(?:[a-z0-9]{8})?|btmh:1220[a-z0-9]{64})(?:$|&)/i;
    function isMagnetURI(url) {
      (0, _assertString.default)(url);
      if (url.indexOf("magnet:?") !== 0) {
        return false;
      }
      return magnetURIComponent.test(url);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/rtrim.js
var require_rtrim = __commonJS({
  "node_modules/validator/lib/rtrim.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rtrim;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function rtrim(str, chars) {
      (0, _assertString.default)(str);
      if (chars) {
        var pattern = new RegExp("[".concat(chars.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "]+$"), "g");
        return str.replace(pattern, "");
      }
      var strIndex = str.length - 1;
      while (/\s/.test(str.charAt(strIndex))) {
        strIndex -= 1;
      }
      return str.slice(0, strIndex + 1);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/ltrim.js
var require_ltrim = __commonJS({
  "node_modules/validator/lib/ltrim.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = ltrim;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function ltrim(str, chars) {
      (0, _assertString.default)(str);
      var pattern = chars ? new RegExp("^[".concat(chars.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), "]+"), "g") : /^\s+/g;
      return str.replace(pattern, "");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/trim.js
var require_trim = __commonJS({
  "node_modules/validator/lib/trim.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = trim;
    var _rtrim = _interopRequireDefault(require_rtrim());
    var _ltrim = _interopRequireDefault(require_ltrim());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function trim(str, chars) {
      return (0, _rtrim.default)((0, _ltrim.default)(str, chars), chars);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMailtoURI.js
var require_isMailtoURI = __commonJS({
  "node_modules/validator/lib/isMailtoURI.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMailtoURI;
    var _trim = _interopRequireDefault(require_trim());
    var _isEmail = _interopRequireDefault(require_isEmail());
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function _slicedToArray(r2, e) {
      return _arrayWithHoles(r2) || _iterableToArrayLimit(r2, e) || _unsupportedIterableToArray(r2, e) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _iterableToArrayLimit(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n, i, u, a = [], f = true, o = false;
        try {
          if (i = (t = t.call(r2)).next, 0 === l) {
            if (Object(t) !== t) return;
            f = false;
          } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
        } catch (r3) {
          o = true, n = r3;
        } finally {
          try {
            if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
          } finally {
            if (o) throw n;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(r2) {
      if (Array.isArray(r2)) return r2;
    }
    function _createForOfIteratorHelper(r2, e) {
      var t = "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (!t) {
        if (Array.isArray(r2) || (t = _unsupportedIterableToArray(r2)) || e && r2 && "number" == typeof r2.length) {
          t && (r2 = t);
          var _n = 0, F = function F2() {
          };
          return { s: F, n: function n() {
            return _n >= r2.length ? { done: true } : { done: false, value: r2[_n++] };
          }, e: function e2(r3) {
            throw r3;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var o, a = true, u = false;
      return { s: function s() {
        t = t.call(r2);
      }, n: function n() {
        var r3 = t.next();
        return a = r3.done, r3;
      }, e: function e2(r3) {
        u = true, o = r3;
      }, f: function f() {
        try {
          a || null == t.return || t.return();
        } finally {
          if (u) throw o;
        }
      } };
    }
    function _unsupportedIterableToArray(r2, a) {
      if (r2) {
        if ("string" == typeof r2) return _arrayLikeToArray(r2, a);
        var t = {}.toString.call(r2).slice(8, -1);
        return "Object" === t && r2.constructor && (t = r2.constructor.name), "Map" === t || "Set" === t ? Array.from(r2) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r2, a) : void 0;
      }
    }
    function _arrayLikeToArray(r2, a) {
      (null == a || a > r2.length) && (a = r2.length);
      for (var e = 0, n = Array(a); e < a; e++) n[e] = r2[e];
      return n;
    }
    function parseMailtoQueryString(queryString) {
      var allowedParams = /* @__PURE__ */ new Set(["subject", "body", "cc", "bcc"]), query = {
        cc: "",
        bcc: ""
      };
      var isParseFailed = false;
      var queryParams = queryString.split("&");
      if (queryParams.length > 4) {
        return false;
      }
      var _iterator = _createForOfIteratorHelper(queryParams), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var q = _step.value;
          var _q$split = q.split("="), _q$split2 = _slicedToArray(_q$split, 2), key = _q$split2[0], value = _q$split2[1];
          if (key && !allowedParams.has(key)) {
            isParseFailed = true;
            break;
          }
          if (value && (key === "cc" || key === "bcc")) {
            query[key] = value;
          }
          if (key) {
            allowedParams.delete(key);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return isParseFailed ? false : query;
    }
    function isMailtoURI(url, options) {
      (0, _assertString.default)(url);
      if (url.indexOf("mailto:") !== 0) {
        return false;
      }
      var _url$replace$split = url.replace("mailto:", "").split("?"), _url$replace$split2 = _slicedToArray(_url$replace$split, 2), to = _url$replace$split2[0], _url$replace$split2$ = _url$replace$split2[1], queryString = _url$replace$split2$ === void 0 ? "" : _url$replace$split2$;
      if (!to && !queryString) {
        return true;
      }
      var query = parseMailtoQueryString(queryString);
      if (!query) {
        return false;
      }
      return "".concat(to, ",").concat(query.cc, ",").concat(query.bcc).split(",").every(function(email) {
        email = (0, _trim.default)(email, " ");
        if (email) {
          return (0, _isEmail.default)(email, options);
        }
        return true;
      });
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isMimeType.js
var require_isMimeType = __commonJS({
  "node_modules/validator/lib/isMimeType.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isMimeType;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\/[a-zA-Z0-9\.\-\+_]{1,100}$/i;
    var mimeTypeText = /^text\/[a-zA-Z0-9\.\-\+]{1,100};\s?charset=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?$/i;
    var mimeTypeMultipart = /^multipart\/[a-zA-Z0-9\.\-\+]{1,100}(;\s?(boundary|charset)=("[a-zA-Z0-9\.\-\+\s]{0,70}"|[a-zA-Z0-9\.\-\+]{0,70})(\s?\([a-zA-Z0-9\.\-\+\s]{1,20}\))?){0,2}$/i;
    function isMimeType(str) {
      (0, _assertString.default)(str);
      return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLatLong.js
var require_isLatLong = __commonJS({
  "node_modules/validator/lib/isLatLong.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLatLong;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    var _includesString = _interopRequireDefault(require_includesString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var lat = /^\(?[+-]?(90(\.0+)?|[1-8]?\d(\.\d+)?)$/;
    var long = /^\s?[+-]?(180(\.0+)?|1[0-7]\d(\.\d+)?|\d{1,2}(\.\d+)?)\)?$/;
    var latDMS = /^(([1-8]?\d)\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|90\D+0\D+0)\D+[NSns]?$/i;
    var longDMS = /^\s*([1-7]?\d{1,2}\D+([1-5]?\d|60)\D+([1-5]?\d|60)(\.\d+)?|180\D+0\D+0)\D+[EWew]?$/i;
    var defaultLatLongOptions = {
      checkDMS: false
    };
    function isLatLong(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, defaultLatLongOptions);
      if (!(0, _includesString.default)(str, ",")) return false;
      var pair = str.split(",");
      if (pair[0].startsWith("(") && !pair[1].endsWith(")") || pair[1].endsWith(")") && !pair[0].startsWith("(")) return false;
      if (options.checkDMS) {
        return latDMS.test(pair[0]) && longDMS.test(pair[1]);
      }
      return lat.test(pair[0]) && long.test(pair[1]);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isPostalCode.js
var require_isPostalCode = __commonJS({
  "node_modules/validator/lib/isPostalCode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isPostalCode;
    exports.locales = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var threeDigit = /^\d{3}$/;
    var fourDigit = /^\d{4}$/;
    var fiveDigit = /^\d{5}$/;
    var sixDigit = /^\d{6}$/;
    var patterns = {
      AD: /^AD\d{3}$/,
      AT: fourDigit,
      AU: fourDigit,
      AZ: /^AZ\d{4}$/,
      BA: /^([7-8]\d{4}$)/,
      BD: /^([1-8][0-9]{3}|9[0-4][0-9]{2})$/,
      BE: fourDigit,
      BG: fourDigit,
      BR: /^\d{5}-?\d{3}$/,
      BY: /^2[1-4]\d{4}$/,
      CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
      CH: fourDigit,
      CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\d{4}$/,
      CO: /^(05|08|11|13|15|17|18|19|20|23|25|27|41|44|47|50|52|54|63|66|68|70|73|76|81|85|86|88|91|94|95|97|99)(\d{4})$/,
      CZ: /^\d{3}\s?\d{2}$/,
      DE: fiveDigit,
      DK: fourDigit,
      DO: fiveDigit,
      DZ: fiveDigit,
      EE: fiveDigit,
      ES: /^(5[0-2]{1}|[0-4]{1}\d{1})\d{3}$/,
      FI: fiveDigit,
      FR: /^(?:(?:0[1-9]|[1-8]\d|9[0-5])\d{3}|97[1-46]\d{2})$/,
      GB: /^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,
      GR: /^\d{3}\s?\d{2}$/,
      HR: /^([1-5]\d{4}$)/,
      HT: /^HT\d{4}$/,
      HU: fourDigit,
      ID: fiveDigit,
      IE: /^(?!.*(?:o))[A-Za-z]\d[\dw]\s\w{4}$/i,
      IL: /^(\d{5}|\d{7})$/,
      IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,
      IR: /^(?!(\d)\1{3})[13-9]{4}[1346-9][013-9]{5}$/,
      IS: threeDigit,
      IT: fiveDigit,
      JP: /^\d{3}\-\d{4}$/,
      KE: fiveDigit,
      KR: /^(\d{5}|\d{6})$/,
      LI: /^(948[5-9]|949[0-7])$/,
      LT: /^LT\-\d{5}$/,
      LU: fourDigit,
      LV: /^LV\-\d{4}$/,
      LK: fiveDigit,
      MG: threeDigit,
      MX: fiveDigit,
      MT: /^[A-Za-z]{3}\s{0,1}\d{4}$/,
      MY: fiveDigit,
      NL: /^[1-9]\d{3}\s?(?!sa|sd|ss)[a-z]{2}$/i,
      NO: fourDigit,
      NP: /^(10|21|22|32|33|34|44|45|56|57)\d{3}$|^(977)$/i,
      NZ: fourDigit,
      // https://www.pakpost.gov.pk/postcodes.php
      PK: fiveDigit,
      PL: /^\d{2}\-\d{3}$/,
      PR: /^00[679]\d{2}([ -]\d{4})?$/,
      PT: /^\d{4}\-\d{3}?$/,
      RO: sixDigit,
      RU: sixDigit,
      SA: fiveDigit,
      SE: /^[1-9]\d{2}\s?\d{2}$/,
      SG: sixDigit,
      SI: fourDigit,
      SK: /^\d{3}\s?\d{2}$/,
      TH: fiveDigit,
      TN: fourDigit,
      TW: /^\d{3}(\d{2,3})?$/,
      UA: fiveDigit,
      US: /^\d{5}(-\d{4})?$/,
      ZA: fourDigit,
      ZM: fiveDigit
    };
    var locales = exports.locales = Object.keys(patterns);
    function isPostalCode(str, locale) {
      (0, _assertString.default)(str);
      if (locale in patterns) {
        return patterns[locale].test(str);
      } else if (locale === "any") {
        for (var key in patterns) {
          if (patterns.hasOwnProperty(key)) {
            var pattern = patterns[key];
            if (pattern.test(str)) {
              return true;
            }
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
  }
});

// node_modules/validator/lib/escape.js
var require_escape = __commonJS({
  "node_modules/validator/lib/escape.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = escape;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function escape(str) {
      (0, _assertString.default)(str);
      return str.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\//g, "&#x2F;").replace(/\\/g, "&#x5C;").replace(/`/g, "&#96;");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/unescape.js
var require_unescape = __commonJS({
  "node_modules/validator/lib/unescape.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = unescape2;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function unescape2(str) {
      (0, _assertString.default)(str);
      return str.replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&#x2F;/g, "/").replace(/&#x5C;/g, "\\").replace(/&#96;/g, "`").replace(/&amp;/g, "&");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/blacklist.js
var require_blacklist = __commonJS({
  "node_modules/validator/lib/blacklist.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = blacklist;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function blacklist(str, chars) {
      (0, _assertString.default)(str);
      return str.replace(new RegExp("[".concat(chars, "]+"), "g"), "");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/stripLow.js
var require_stripLow = __commonJS({
  "node_modules/validator/lib/stripLow.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = stripLow;
    var _assertString = _interopRequireDefault(require_assertString());
    var _blacklist = _interopRequireDefault(require_blacklist());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function stripLow(str, keep_new_lines) {
      (0, _assertString.default)(str);
      var chars = keep_new_lines ? "\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F" : "\\x00-\\x1F\\x7F";
      return (0, _blacklist.default)(str, chars);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/whitelist.js
var require_whitelist = __commonJS({
  "node_modules/validator/lib/whitelist.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = whitelist;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function whitelist(str, chars) {
      (0, _assertString.default)(str);
      return str.replace(new RegExp("[^".concat(chars, "]+"), "g"), "");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isWhitelisted.js
var require_isWhitelisted = __commonJS({
  "node_modules/validator/lib/isWhitelisted.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isWhitelisted;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    function isWhitelisted(str, chars) {
      (0, _assertString.default)(str);
      for (var i = str.length - 1; i >= 0; i--) {
        if (chars.indexOf(str[i]) === -1) {
          return false;
        }
      }
      return true;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/normalizeEmail.js
var require_normalizeEmail = __commonJS({
  "node_modules/validator/lib/normalizeEmail.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = normalizeEmail;
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var default_normalize_email_options = {
      // The following options apply to all email addresses
      // Lowercases the local part of the email address.
      // Please note this may violate RFC 5321 as per http://stackoverflow.com/a/9808332/192024).
      // The domain is always lowercased, as per RFC 1035
      all_lowercase: true,
      // The following conversions are specific to GMail
      // Lowercases the local part of the GMail address (known to be case-insensitive)
      gmail_lowercase: true,
      // Removes dots from the local part of the email address, as that's ignored by GMail
      gmail_remove_dots: true,
      // Removes the subaddress (e.g. "+foo") from the email address
      gmail_remove_subaddress: true,
      // Conversts the googlemail.com domain to gmail.com
      gmail_convert_googlemaildotcom: true,
      // The following conversions are specific to Outlook.com / Windows Live / Hotmail
      // Lowercases the local part of the Outlook.com address (known to be case-insensitive)
      outlookdotcom_lowercase: true,
      // Removes the subaddress (e.g. "+foo") from the email address
      outlookdotcom_remove_subaddress: true,
      // The following conversions are specific to Yahoo
      // Lowercases the local part of the Yahoo address (known to be case-insensitive)
      yahoo_lowercase: true,
      // Removes the subaddress (e.g. "-foo") from the email address
      yahoo_remove_subaddress: true,
      // The following conversions are specific to Yandex
      // Lowercases the local part of the Yandex address (known to be case-insensitive)
      yandex_lowercase: true,
      // all yandex domains are equal, this explicitly sets the domain to 'yandex.ru'
      yandex_convert_yandexru: true,
      // The following conversions are specific to iCloud
      // Lowercases the local part of the iCloud address (known to be case-insensitive)
      icloud_lowercase: true,
      // Removes the subaddress (e.g. "+foo") from the email address
      icloud_remove_subaddress: true
    };
    var icloud_domains = ["icloud.com", "me.com"];
    var outlookdotcom_domains = ["hotmail.at", "hotmail.be", "hotmail.ca", "hotmail.cl", "hotmail.co.il", "hotmail.co.nz", "hotmail.co.th", "hotmail.co.uk", "hotmail.com", "hotmail.com.ar", "hotmail.com.au", "hotmail.com.br", "hotmail.com.gr", "hotmail.com.mx", "hotmail.com.pe", "hotmail.com.tr", "hotmail.com.vn", "hotmail.cz", "hotmail.de", "hotmail.dk", "hotmail.es", "hotmail.fr", "hotmail.hu", "hotmail.id", "hotmail.ie", "hotmail.in", "hotmail.it", "hotmail.jp", "hotmail.kr", "hotmail.lv", "hotmail.my", "hotmail.ph", "hotmail.pt", "hotmail.sa", "hotmail.sg", "hotmail.sk", "live.be", "live.co.uk", "live.com", "live.com.ar", "live.com.mx", "live.de", "live.es", "live.eu", "live.fr", "live.it", "live.nl", "msn.com", "outlook.at", "outlook.be", "outlook.cl", "outlook.co.il", "outlook.co.nz", "outlook.co.th", "outlook.com", "outlook.com.ar", "outlook.com.au", "outlook.com.br", "outlook.com.gr", "outlook.com.pe", "outlook.com.tr", "outlook.com.vn", "outlook.cz", "outlook.de", "outlook.dk", "outlook.es", "outlook.fr", "outlook.hu", "outlook.id", "outlook.ie", "outlook.in", "outlook.it", "outlook.jp", "outlook.kr", "outlook.lv", "outlook.my", "outlook.ph", "outlook.pt", "outlook.sa", "outlook.sg", "outlook.sk", "passport.com"];
    var yahoo_domains = ["rocketmail.com", "yahoo.ca", "yahoo.co.uk", "yahoo.com", "yahoo.de", "yahoo.fr", "yahoo.in", "yahoo.it", "ymail.com"];
    var yandex_domains = ["yandex.ru", "yandex.ua", "yandex.kz", "yandex.com", "yandex.by", "ya.ru"];
    function dotsReplacer(match) {
      if (match.length > 1) {
        return match;
      }
      return "";
    }
    function normalizeEmail(email, options) {
      options = (0, _merge.default)(options, default_normalize_email_options);
      var raw_parts = email.split("@");
      var domain = raw_parts.pop();
      var user = raw_parts.join("@");
      var parts = [user, domain];
      parts[1] = parts[1].toLowerCase();
      if (parts[1] === "gmail.com" || parts[1] === "googlemail.com") {
        if (options.gmail_remove_subaddress) {
          parts[0] = parts[0].split("+")[0];
        }
        if (options.gmail_remove_dots) {
          parts[0] = parts[0].replace(/\.+/g, dotsReplacer);
        }
        if (!parts[0].length) {
          return false;
        }
        if (options.all_lowercase || options.gmail_lowercase) {
          parts[0] = parts[0].toLowerCase();
        }
        parts[1] = options.gmail_convert_googlemaildotcom ? "gmail.com" : parts[1];
      } else if (icloud_domains.indexOf(parts[1]) >= 0) {
        if (options.icloud_remove_subaddress) {
          parts[0] = parts[0].split("+")[0];
        }
        if (!parts[0].length) {
          return false;
        }
        if (options.all_lowercase || options.icloud_lowercase) {
          parts[0] = parts[0].toLowerCase();
        }
      } else if (outlookdotcom_domains.indexOf(parts[1]) >= 0) {
        if (options.outlookdotcom_remove_subaddress) {
          parts[0] = parts[0].split("+")[0];
        }
        if (!parts[0].length) {
          return false;
        }
        if (options.all_lowercase || options.outlookdotcom_lowercase) {
          parts[0] = parts[0].toLowerCase();
        }
      } else if (yahoo_domains.indexOf(parts[1]) >= 0) {
        if (options.yahoo_remove_subaddress) {
          var components = parts[0].split("-");
          parts[0] = components.length > 1 ? components.slice(0, -1).join("-") : components[0];
        }
        if (!parts[0].length) {
          return false;
        }
        if (options.all_lowercase || options.yahoo_lowercase) {
          parts[0] = parts[0].toLowerCase();
        }
      } else if (yandex_domains.indexOf(parts[1]) >= 0) {
        if (options.all_lowercase || options.yandex_lowercase) {
          parts[0] = parts[0].toLowerCase();
        }
        parts[1] = options.yandex_convert_yandexru ? "yandex.ru" : parts[1];
      } else if (options.all_lowercase) {
        parts[0] = parts[0].toLowerCase();
      }
      return parts.join("@");
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isSlug.js
var require_isSlug = __commonJS({
  "node_modules/validator/lib/isSlug.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isSlug;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var charsetRegex = /^[^\s-_](?!.*?[-_]{2,})[a-z0-9-\\][^\s]*[^-_\s]$/;
    function isSlug(str) {
      (0, _assertString.default)(str);
      return charsetRegex.test(str);
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isLicensePlate.js
var require_isLicensePlate = __commonJS({
  "node_modules/validator/lib/isLicensePlate.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isLicensePlate;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var validators = {
      "cs-CZ": function csCZ(str) {
        return /^(([ABCDEFHIJKLMNPRSTUVXYZ]|[0-9])-?){5,8}$/.test(str);
      },
      "de-DE": function deDE(str) {
        return /^((A|AA|AB|AC|AE|AH|AK|AM|AN|AÖ|AP|AS|AT|AU|AW|AZ|B|BA|BB|BC|BE|BF|BH|BI|BK|BL|BM|BN|BO|BÖ|BS|BT|BZ|C|CA|CB|CE|CO|CR|CW|D|DA|DD|DE|DH|DI|DL|DM|DN|DO|DU|DW|DZ|E|EA|EB|ED|EE|EF|EG|EH|EI|EL|EM|EN|ER|ES|EU|EW|F|FB|FD|FF|FG|FI|FL|FN|FO|FR|FS|FT|FÜ|FW|FZ|G|GA|GC|GD|GE|GF|GG|GI|GK|GL|GM|GN|GÖ|GP|GR|GS|GT|GÜ|GV|GW|GZ|H|HA|HB|HC|HD|HE|HF|HG|HH|HI|HK|HL|HM|HN|HO|HP|HR|HS|HU|HV|HX|HY|HZ|IK|IL|IN|IZ|J|JE|JL|K|KA|KB|KC|KE|KF|KG|KH|KI|KK|KL|KM|KN|KO|KR|KS|KT|KU|KW|KY|L|LA|LB|LC|LD|LF|LG|LH|LI|LL|LM|LN|LÖ|LP|LR|LU|M|MA|MB|MC|MD|ME|MG|MH|MI|MK|ML|MM|MN|MO|MQ|MR|MS|MÜ|MW|MY|MZ|N|NB|ND|NE|NF|NH|NI|NK|NM|NÖ|NP|NR|NT|NU|NW|NY|NZ|OA|OB|OC|OD|OE|OF|OG|OH|OK|OL|OP|OS|OZ|P|PA|PB|PE|PF|PI|PL|PM|PN|PR|PS|PW|PZ|R|RA|RC|RD|RE|RG|RH|RI|RL|RM|RN|RO|RP|RS|RT|RU|RV|RW|RZ|S|SB|SC|SE|SG|SI|SK|SL|SM|SN|SO|SP|SR|ST|SU|SW|SY|SZ|TE|TF|TG|TO|TP|TR|TS|TT|TÜ|ÜB|UE|UH|UL|UM|UN|V|VB|VG|VK|VR|VS|W|WA|WB|WE|WF|WI|WK|WL|WM|WN|WO|WR|WS|WT|WÜ|WW|WZ|Z|ZE|ZI|ZP|ZR|ZW|ZZ)[- ]?[A-Z]{1,2}[- ]?\d{1,4}|(ABG|ABI|AIB|AIC|ALF|ALZ|ANA|ANG|ANK|APD|ARN|ART|ASL|ASZ|AUR|AZE|BAD|BAR|BBG|BCH|BED|BER|BGD|BGL|BID|BIN|BIR|BIT|BIW|BKS|BLB|BLK|BNA|BOG|BOH|BOR|BOT|BRA|BRB|BRG|BRK|BRL|BRV|BSB|BSK|BTF|BÜD|BUL|BÜR|BÜS|BÜZ|CAS|CHA|CLP|CLZ|COC|COE|CUX|DAH|DAN|DAU|DBR|DEG|DEL|DGF|DIL|DIN|DIZ|DKB|DLG|DON|DUD|DÜW|EBE|EBN|EBS|ECK|EIC|EIL|EIN|EIS|EMD|EMS|ERB|ERH|ERK|ERZ|ESB|ESW|FDB|FDS|FEU|FFB|FKB|FLÖ|FOR|FRG|FRI|FRW|FTL|FÜS|GAN|GAP|GDB|GEL|GEO|GER|GHA|GHC|GLA|GMN|GNT|GOA|GOH|GRA|GRH|GRI|GRM|GRZ|GTH|GUB|GUN|GVM|HAB|HAL|HAM|HAS|HBN|HBS|HCH|HDH|HDL|HEB|HEF|HEI|HER|HET|HGN|HGW|HHM|HIG|HIP|HMÜ|HOG|HOH|HOL|HOM|HOR|HÖS|HOT|HRO|HSK|HST|HVL|HWI|IGB|ILL|JÜL|KEH|KEL|KEM|KIB|KLE|KLZ|KÖN|KÖT|KÖZ|KRU|KÜN|KUS|KYF|LAN|LAU|LBS|LBZ|LDK|LDS|LEO|LER|LEV|LIB|LIF|LIP|LÖB|LOS|LRO|LSZ|LÜN|LUP|LWL|MAB|MAI|MAK|MAL|MED|MEG|MEI|MEK|MEL|MER|MET|MGH|MGN|MHL|MIL|MKK|MOD|MOL|MON|MOS|MSE|MSH|MSP|MST|MTK|MTL|MÜB|MÜR|MYK|MZG|NAB|NAI|NAU|NDH|NEA|NEB|NEC|NEN|NES|NEW|NMB|NMS|NOH|NOL|NOM|NOR|NVP|NWM|OAL|OBB|OBG|OCH|OHA|ÖHR|OHV|OHZ|OPR|OSL|OVI|OVL|OVP|PAF|PAN|PAR|PCH|PEG|PIR|PLÖ|PRÜ|QFT|QLB|RDG|REG|REH|REI|RID|RIE|ROD|ROF|ROK|ROL|ROS|ROT|ROW|RSL|RÜD|RÜG|SAB|SAD|SAN|SAW|SBG|SBK|SCZ|SDH|SDL|SDT|SEB|SEE|SEF|SEL|SFB|SFT|SGH|SHA|SHG|SHK|SHL|SIG|SIM|SLE|SLF|SLK|SLN|SLS|SLÜ|SLZ|SMÜ|SOB|SOG|SOK|SÖM|SON|SPB|SPN|SRB|SRO|STA|STB|STD|STE|STL|SUL|SÜW|SWA|SZB|TBB|TDO|TET|TIR|TÖL|TUT|UEM|UER|UFF|USI|VAI|VEC|VER|VIB|VIE|VIT|VOH|WAF|WAK|WAN|WAR|WAT|WBS|WDA|WEL|WEN|WER|WES|WHV|WIL|WIS|WIT|WIZ|WLG|WMS|WND|WOB|WOH|WOL|WOR|WOS|WRN|WSF|WST|WSW|WTL|WTM|WUG|WÜM|WUN|WUR|WZL|ZEL|ZIG)[- ]?(([A-Z][- ]?\d{1,4})|([A-Z]{2}[- ]?\d{1,3})))[- ]?(E|H)?$/.test(str);
      },
      "de-LI": function deLI(str) {
        return /^FL[- ]?\d{1,5}[UZ]?$/.test(str);
      },
      "en-IN": function enIN(str) {
        return /^[A-Z]{2}[ -]?[0-9]{1,2}(?:[ -]?[A-Z])(?:[ -]?[A-Z]*)?[ -]?[0-9]{4}$/.test(str);
      },
      "en-SG": function enSG(str) {
        return /^[A-Z]{3}[ -]?[\d]{4}[ -]?[A-Z]{1}$/.test(str);
      },
      "es-AR": function esAR(str) {
        return /^(([A-Z]{2} ?[0-9]{3} ?[A-Z]{2})|([A-Z]{3} ?[0-9]{3}))$/.test(str);
      },
      "fi-FI": function fiFI(str) {
        return /^(?=.{4,7})(([A-Z]{1,3}|[0-9]{1,3})[\s-]?([A-Z]{1,3}|[0-9]{1,5}))$/.test(str);
      },
      "hu-HU": function huHU(str) {
        return /^((((?!AAA)(([A-NPRSTVZWXY]{1})([A-PR-Z]{1})([A-HJ-NPR-Z]))|(A[ABC]I)|A[ABC]O|A[A-W]Q|BPI|BPO|UCO|UDO|XAO)-(?!000)\d{3})|(M\d{6})|((CK|DT|CD|HC|H[ABEFIKLMNPRSTVX]|MA|OT|R[A-Z]) \d{2}-\d{2})|(CD \d{3}-\d{3})|(C-(C|X) \d{4})|(X-(A|B|C) \d{4})|(([EPVZ]-\d{5}))|(S A[A-Z]{2} \d{2})|(SP \d{2}-\d{2}))$/.test(str);
      },
      "pt-BR": function ptBR(str) {
        return /^[A-Z]{3}[ -]?[0-9][A-Z][0-9]{2}|[A-Z]{3}[ -]?[0-9]{4}$/.test(str);
      },
      "pt-PT": function ptPT(str) {
        return /^(([A-Z]{2}[ -·]?[0-9]{2}[ -·]?[0-9]{2})|([0-9]{2}[ -·]?[A-Z]{2}[ -·]?[0-9]{2})|([0-9]{2}[ -·]?[0-9]{2}[ -·]?[A-Z]{2})|([A-Z]{2}[ -·]?[0-9]{2}[ -·]?[A-Z]{2}))$/.test(str);
      },
      "sq-AL": function sqAL(str) {
        return /^[A-Z]{2}[- ]?((\d{3}[- ]?(([A-Z]{2})|T))|(R[- ]?\d{3}))$/.test(str);
      },
      "sv-SE": function svSE(str) {
        return /^[A-HJ-PR-UW-Z]{3} ?[\d]{2}[A-HJ-PR-UW-Z1-9]$|(^[A-ZÅÄÖ ]{2,7}$)/.test(str.trim());
      },
      "en-PK": function enPK(str) {
        return /(^[A-Z]{2}((\s|-){0,1})[0-9]{3,4}((\s|-)[0-9]{2}){0,1}$)|(^[A-Z]{3}((\s|-){0,1})[0-9]{3,4}((\s|-)[0-9]{2}){0,1}$)|(^[A-Z]{4}((\s|-){0,1})[0-9]{3,4}((\s|-)[0-9]{2}){0,1}$)|(^[A-Z]((\s|-){0,1})[0-9]{4}((\s|-)[0-9]{2}){0,1}$)/.test(str.trim());
      }
    };
    function isLicensePlate(str, locale) {
      (0, _assertString.default)(str);
      if (locale in validators) {
        return validators[locale](str);
      } else if (locale === "any") {
        for (var key in validators) {
          var validator = validators[key];
          if (validator(str)) {
            return true;
          }
        }
        return false;
      }
      throw new Error("Invalid locale '".concat(locale, "'"));
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isStrongPassword.js
var require_isStrongPassword = __commonJS({
  "node_modules/validator/lib/isStrongPassword.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isStrongPassword;
    var _merge = _interopRequireDefault(require_merge());
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var upperCaseRegex = /^[A-Z]$/;
    var lowerCaseRegex = /^[a-z]$/;
    var numberRegex = /^[0-9]$/;
    var symbolRegex = /^[-#!$@£%^&*()_+|~=`{}\[\]:";'<>?,.\/\\ ]$/;
    var defaultOptions = {
      minLength: 8,
      minLowercase: 1,
      minUppercase: 1,
      minNumbers: 1,
      minSymbols: 1,
      returnScore: false,
      pointsPerUnique: 1,
      pointsPerRepeat: 0.5,
      pointsForContainingLower: 10,
      pointsForContainingUpper: 10,
      pointsForContainingNumber: 10,
      pointsForContainingSymbol: 10
    };
    function countChars(str) {
      var result = {};
      Array.from(str).forEach(function(char) {
        var curVal = result[char];
        if (curVal) {
          result[char] += 1;
        } else {
          result[char] = 1;
        }
      });
      return result;
    }
    function analyzePassword(password) {
      var charMap = countChars(password);
      var analysis = {
        length: password.length,
        uniqueChars: Object.keys(charMap).length,
        uppercaseCount: 0,
        lowercaseCount: 0,
        numberCount: 0,
        symbolCount: 0
      };
      Object.keys(charMap).forEach(function(char) {
        if (upperCaseRegex.test(char)) {
          analysis.uppercaseCount += charMap[char];
        } else if (lowerCaseRegex.test(char)) {
          analysis.lowercaseCount += charMap[char];
        } else if (numberRegex.test(char)) {
          analysis.numberCount += charMap[char];
        } else if (symbolRegex.test(char)) {
          analysis.symbolCount += charMap[char];
        }
      });
      return analysis;
    }
    function scorePassword(analysis, scoringOptions) {
      var points = 0;
      points += analysis.uniqueChars * scoringOptions.pointsPerUnique;
      points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;
      if (analysis.lowercaseCount > 0) {
        points += scoringOptions.pointsForContainingLower;
      }
      if (analysis.uppercaseCount > 0) {
        points += scoringOptions.pointsForContainingUpper;
      }
      if (analysis.numberCount > 0) {
        points += scoringOptions.pointsForContainingNumber;
      }
      if (analysis.symbolCount > 0) {
        points += scoringOptions.pointsForContainingSymbol;
      }
      return points;
    }
    function isStrongPassword(str) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
      (0, _assertString.default)(str);
      var analysis = analyzePassword(str);
      options = (0, _merge.default)(options || {}, defaultOptions);
      if (options.returnScore) {
        return scorePassword(analysis, options);
      }
      return analysis.length >= options.minLength && analysis.lowercaseCount >= options.minLowercase && analysis.uppercaseCount >= options.minUppercase && analysis.numberCount >= options.minNumbers && analysis.symbolCount >= options.minSymbols;
    }
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isVAT.js
var require_isVAT = __commonJS({
  "node_modules/validator/lib/isVAT.js"(exports) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isVAT;
    exports.vatMatchers = void 0;
    var _assertString = _interopRequireDefault(require_assertString());
    var algorithms = _interopRequireWildcard(require_algorithms());
    function _interopRequireWildcard(e, t) {
      if ("function" == typeof WeakMap) var r2 = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function _interopRequireWildcard2(e2, t2) {
        if (!t2 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != _typeof(e2) && "function" != typeof e2) return f;
        if (o = t2 ? n : r2) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (var _t in e2) "default" !== _t && {}.hasOwnProperty.call(e2, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e2[_t]);
        return f;
      })(e, t);
    }
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var AU = function AU2(str) {
      var match = str.match(/^(AU)?(\d{11})$/);
      if (!match) {
        return false;
      }
      var weights = [10, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19];
      str = str.replace(/^AU/, "");
      var ABN = (parseInt(str.slice(0, 1), 10) - 1).toString() + str.slice(1);
      var total = 0;
      for (var i = 0; i < 11; i++) {
        total += weights[i] * ABN.charAt(i);
      }
      return total !== 0 && total % 89 === 0;
    };
    var CH = function CH2(str) {
      var hasValidCheckNumber = function hasValidCheckNumber2(digits) {
        var lastDigit = digits.pop();
        var weights = [5, 4, 3, 2, 7, 6, 5, 4];
        var calculatedCheckNumber = (11 - digits.reduce(function(acc, el, idx) {
          return acc + el * weights[idx];
        }, 0) % 11) % 11;
        return lastDigit === calculatedCheckNumber;
      };
      return /^(CHE[- ]?)?(\d{9}|(\d{3}\.\d{3}\.\d{3})|(\d{3} \d{3} \d{3})) ?(TVA|MWST|IVA)?$/.test(str) && hasValidCheckNumber(str.match(/\d/g).map(function(el) {
        return +el;
      }));
    };
    var PT = function PT2(str) {
      var match = str.match(/^(PT)?(\d{9})$/);
      if (!match) {
        return false;
      }
      var tin = match[2];
      var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split("").slice(0, 8).map(function(a) {
        return parseInt(a, 10);
      }), 9) % 11;
      if (checksum > 9) {
        return parseInt(tin[8], 10) === 0;
      }
      return checksum === parseInt(tin[8], 10);
    };
    var vatMatchers = exports.vatMatchers = {
      /**
       * European Union VAT identification numbers
       */
      AT: function AT(str) {
        return /^(AT)?U\d{8}$/.test(str);
      },
      BE: function BE(str) {
        return /^(BE)?\d{10}$/.test(str);
      },
      BG: function BG(str) {
        return /^(BG)?\d{9,10}$/.test(str);
      },
      HR: function HR(str) {
        return /^(HR)?\d{11}$/.test(str);
      },
      CY: function CY(str) {
        return /^(CY)?\w{9}$/.test(str);
      },
      CZ: function CZ(str) {
        return /^(CZ)?\d{8,10}$/.test(str);
      },
      DK: function DK(str) {
        return /^(DK)?\d{8}$/.test(str);
      },
      EE: function EE(str) {
        return /^(EE)?\d{9}$/.test(str);
      },
      FI: function FI(str) {
        return /^(FI)?\d{8}$/.test(str);
      },
      FR: function FR(str) {
        return /^(FR)?\w{2}\d{9}$/.test(str);
      },
      DE: function DE(str) {
        return /^(DE)?\d{9}$/.test(str);
      },
      EL: function EL(str) {
        return /^(EL)?\d{9}$/.test(str);
      },
      HU: function HU(str) {
        return /^(HU)?\d{8}$/.test(str);
      },
      IE: function IE(str) {
        return /^(IE)?\d{7}\w{1}(W)?$/.test(str);
      },
      IT: function IT(str) {
        return /^(IT)?\d{11}$/.test(str);
      },
      LV: function LV(str) {
        return /^(LV)?\d{11}$/.test(str);
      },
      LT: function LT(str) {
        return /^(LT)?\d{9,12}$/.test(str);
      },
      LU: function LU(str) {
        return /^(LU)?\d{8}$/.test(str);
      },
      MT: function MT(str) {
        return /^(MT)?\d{8}$/.test(str);
      },
      NL: function NL(str) {
        return /^(NL)?\d{9}B\d{2}$/.test(str);
      },
      PL: function PL(str) {
        return /^(PL)?(\d{10}|(\d{3}-\d{3}-\d{2}-\d{2})|(\d{3}-\d{2}-\d{2}-\d{3}))$/.test(str);
      },
      PT,
      RO: function RO(str) {
        return /^(RO)?\d{2,10}$/.test(str);
      },
      SK: function SK(str) {
        return /^(SK)?\d{10}$/.test(str);
      },
      SI: function SI(str) {
        return /^(SI)?\d{8}$/.test(str);
      },
      ES: function ES(str) {
        return /^(ES)?\w\d{7}[A-Z]$/.test(str);
      },
      SE: function SE(str) {
        return /^(SE)?\d{12}$/.test(str);
      },
      /**
       * VAT numbers of non-EU countries
       */
      AL: function AL(str) {
        return /^(AL)?\w{9}[A-Z]$/.test(str);
      },
      MK: function MK(str) {
        return /^(MK)?\d{13}$/.test(str);
      },
      AU,
      BY: function BY(str) {
        return /^(УНП )?\d{9}$/.test(str);
      },
      CA: function CA(str) {
        return /^(CA)?\d{9}$/.test(str);
      },
      IS: function IS(str) {
        return /^(IS)?\d{5,6}$/.test(str);
      },
      IN: function IN(str) {
        return /^(IN)?\d{15}$/.test(str);
      },
      ID: function ID(str) {
        return /^(ID)?(\d{15}|(\d{2}.\d{3}.\d{3}.\d{1}-\d{3}.\d{3}))$/.test(str);
      },
      IL: function IL(str) {
        return /^(IL)?\d{9}$/.test(str);
      },
      KZ: function KZ(str) {
        return /^(KZ)?\d{12}$/.test(str);
      },
      NZ: function NZ(str) {
        return /^(NZ)?\d{9}$/.test(str);
      },
      NG: function NG(str) {
        return /^(NG)?(\d{12}|(\d{8}-\d{4}))$/.test(str);
      },
      NO: function NO(str) {
        return /^(NO)?\d{9}MVA$/.test(str);
      },
      PH: function PH(str) {
        return /^(PH)?(\d{12}|\d{3} \d{3} \d{3} \d{3})$/.test(str);
      },
      RU: function RU(str) {
        return /^(RU)?(\d{10}|\d{12})$/.test(str);
      },
      SM: function SM(str) {
        return /^(SM)?\d{5}$/.test(str);
      },
      SA: function SA(str) {
        return /^(SA)?\d{15}$/.test(str);
      },
      RS: function RS(str) {
        return /^(RS)?\d{9}$/.test(str);
      },
      CH,
      TR: function TR(str) {
        return /^(TR)?\d{10}$/.test(str);
      },
      UA: function UA(str) {
        return /^(UA)?\d{12}$/.test(str);
      },
      GB: function GB(str) {
        return /^GB((\d{3} \d{4} ([0-8][0-9]|9[0-6]))|(\d{9} \d{3})|(((GD[0-4])|(HA[5-9]))[0-9]{2}))$/.test(str);
      },
      UZ: function UZ(str) {
        return /^(UZ)?\d{9}$/.test(str);
      },
      /**
       * VAT numbers of Latin American countries
       */
      AR: function AR(str) {
        return /^(AR)?\d{11}$/.test(str);
      },
      BO: function BO(str) {
        return /^(BO)?\d{7}$/.test(str);
      },
      BR: function BR(str) {
        return /^(BR)?((\d{2}.\d{3}.\d{3}\/\d{4}-\d{2})|(\d{3}.\d{3}.\d{3}-\d{2}))$/.test(str);
      },
      CL: function CL(str) {
        return /^(CL)?\d{8}-\d{1}$/.test(str);
      },
      CO: function CO(str) {
        return /^(CO)?\d{10}$/.test(str);
      },
      CR: function CR(str) {
        return /^(CR)?\d{9,12}$/.test(str);
      },
      EC: function EC(str) {
        return /^(EC)?\d{13}$/.test(str);
      },
      SV: function SV(str) {
        return /^(SV)?\d{4}-\d{6}-\d{3}-\d{1}$/.test(str);
      },
      GT: function GT(str) {
        return /^(GT)?\d{7}-\d{1}$/.test(str);
      },
      HN: function HN(str) {
        return /^(HN)?$/.test(str);
      },
      MX: function MX(str) {
        return /^(MX)?\w{3,4}\d{6}\w{3}$/.test(str);
      },
      NI: function NI(str) {
        return /^(NI)?\d{3}-\d{6}-\d{4}\w{1}$/.test(str);
      },
      PA: function PA(str) {
        return /^(PA)?$/.test(str);
      },
      PY: function PY(str) {
        return /^(PY)?\d{6,8}-\d{1}$/.test(str);
      },
      PE: function PE(str) {
        return /^(PE)?\d{11}$/.test(str);
      },
      DO: function DO(str) {
        return /^(DO)?(\d{11}|(\d{3}-\d{7}-\d{1})|[1,4,5]{1}\d{8}|([1,4,5]{1})-\d{2}-\d{5}-\d{1})$/.test(str);
      },
      UY: function UY(str) {
        return /^(UY)?\d{12}$/.test(str);
      },
      VE: function VE(str) {
        return /^(VE)?[J,G,V,E]{1}-(\d{9}|(\d{8}-\d{1}))$/.test(str);
      }
    };
    function isVAT(str, countryCode) {
      (0, _assertString.default)(str);
      (0, _assertString.default)(countryCode);
      if (countryCode in vatMatchers) {
        return vatMatchers[countryCode](str);
      }
      throw new Error("Invalid country code: '".concat(countryCode, "'"));
    }
  }
});

// node_modules/validator/index.js
var require_validator = __commonJS({
  "node_modules/validator/index.js"(exports, module) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _toDate = _interopRequireDefault(require_toDate());
    var _toFloat = _interopRequireDefault(require_toFloat());
    var _toInt = _interopRequireDefault(require_toInt());
    var _toBoolean = _interopRequireDefault(require_toBoolean());
    var _equals = _interopRequireDefault(require_equals());
    var _contains = _interopRequireDefault(require_contains());
    var _matches = _interopRequireDefault(require_matches());
    var _isEmail = _interopRequireDefault(require_isEmail());
    var _isURL = _interopRequireDefault(require_isURL());
    var _isMACAddress = _interopRequireDefault(require_isMACAddress());
    var _isIP = _interopRequireDefault(require_isIP());
    var _isIPRange = _interopRequireDefault(require_isIPRange());
    var _isFQDN = _interopRequireDefault(require_isFQDN());
    var _isDate = _interopRequireDefault(require_isDate());
    var _isTime = _interopRequireDefault(require_isTime());
    var _isBoolean = _interopRequireDefault(require_isBoolean());
    var _isLocale = _interopRequireDefault(require_isLocale());
    var _isAbaRouting = _interopRequireDefault(require_isAbaRouting());
    var _isAlpha = _interopRequireWildcard(require_isAlpha());
    var _isAlphanumeric = _interopRequireWildcard(require_isAlphanumeric());
    var _isNumeric = _interopRequireDefault(require_isNumeric());
    var _isPassportNumber = _interopRequireWildcard(require_isPassportNumber());
    var _isPort = _interopRequireDefault(require_isPort());
    var _isLowercase = _interopRequireDefault(require_isLowercase());
    var _isUppercase = _interopRequireDefault(require_isUppercase());
    var _isIMEI = _interopRequireDefault(require_isIMEI());
    var _isAscii = _interopRequireDefault(require_isAscii());
    var _isFullWidth = _interopRequireDefault(require_isFullWidth());
    var _isHalfWidth = _interopRequireDefault(require_isHalfWidth());
    var _isVariableWidth = _interopRequireDefault(require_isVariableWidth());
    var _isMultibyte = _interopRequireDefault(require_isMultibyte());
    var _isSemVer = _interopRequireDefault(require_isSemVer());
    var _isSurrogatePair = _interopRequireDefault(require_isSurrogatePair());
    var _isInt = _interopRequireDefault(require_isInt());
    var _isFloat = _interopRequireWildcard(require_isFloat());
    var _isDecimal = _interopRequireDefault(require_isDecimal());
    var _isHexadecimal = _interopRequireDefault(require_isHexadecimal());
    var _isOctal = _interopRequireDefault(require_isOctal());
    var _isDivisibleBy = _interopRequireDefault(require_isDivisibleBy());
    var _isHexColor = _interopRequireDefault(require_isHexColor());
    var _isRgbColor = _interopRequireDefault(require_isRgbColor());
    var _isHSL = _interopRequireDefault(require_isHSL());
    var _isISRC = _interopRequireDefault(require_isISRC());
    var _isIBAN = _interopRequireWildcard(require_isIBAN());
    var _isBIC = _interopRequireDefault(require_isBIC());
    var _isMD = _interopRequireDefault(require_isMD5());
    var _isHash = _interopRequireDefault(require_isHash());
    var _isJWT = _interopRequireDefault(require_isJWT());
    var _isJSON = _interopRequireDefault(require_isJSON());
    var _isEmpty = _interopRequireDefault(require_isEmpty());
    var _isLength = _interopRequireDefault(require_isLength());
    var _isByteLength = _interopRequireDefault(require_isByteLength());
    var _isULID = _interopRequireDefault(require_isULID());
    var _isUUID = _interopRequireDefault(require_isUUID());
    var _isMongoId = _interopRequireDefault(require_isMongoId());
    var _isAfter = _interopRequireDefault(require_isAfter());
    var _isBefore = _interopRequireDefault(require_isBefore());
    var _isIn = _interopRequireDefault(require_isIn());
    var _isLuhnNumber = _interopRequireDefault(require_isLuhnNumber());
    var _isCreditCard = _interopRequireDefault(require_isCreditCard());
    var _isIdentityCard = _interopRequireDefault(require_isIdentityCard());
    var _isEAN = _interopRequireDefault(require_isEAN());
    var _isISIN = _interopRequireDefault(require_isISIN());
    var _isISBN = _interopRequireDefault(require_isISBN());
    var _isISSN = _interopRequireDefault(require_isISSN());
    var _isTaxID = _interopRequireDefault(require_isTaxID());
    var _isMobilePhone = _interopRequireWildcard(require_isMobilePhone());
    var _isEthereumAddress = _interopRequireDefault(require_isEthereumAddress());
    var _isCurrency = _interopRequireDefault(require_isCurrency());
    var _isBtcAddress = _interopRequireDefault(require_isBtcAddress());
    var _isISO = require_isISO6346();
    var _isISO2 = _interopRequireDefault(require_isISO6391());
    var _isISO3 = _interopRequireDefault(require_isISO8601());
    var _isRFC = _interopRequireDefault(require_isRFC3339());
    var _isISO4 = _interopRequireDefault(require_isISO15924());
    var _isISO31661Alpha = _interopRequireDefault(require_isISO31661Alpha2());
    var _isISO31661Alpha2 = _interopRequireDefault(require_isISO31661Alpha3());
    var _isISO31661Numeric = _interopRequireDefault(require_isISO31661Numeric());
    var _isISO5 = _interopRequireDefault(require_isISO4217());
    var _isBase = _interopRequireDefault(require_isBase32());
    var _isBase2 = _interopRequireDefault(require_isBase58());
    var _isBase3 = _interopRequireDefault(require_isBase64());
    var _isDataURI = _interopRequireDefault(require_isDataURI());
    var _isMagnetURI = _interopRequireDefault(require_isMagnetURI());
    var _isMailtoURI = _interopRequireDefault(require_isMailtoURI());
    var _isMimeType = _interopRequireDefault(require_isMimeType());
    var _isLatLong = _interopRequireDefault(require_isLatLong());
    var _isPostalCode = _interopRequireWildcard(require_isPostalCode());
    var _ltrim = _interopRequireDefault(require_ltrim());
    var _rtrim = _interopRequireDefault(require_rtrim());
    var _trim = _interopRequireDefault(require_trim());
    var _escape = _interopRequireDefault(require_escape());
    var _unescape = _interopRequireDefault(require_unescape());
    var _stripLow = _interopRequireDefault(require_stripLow());
    var _whitelist = _interopRequireDefault(require_whitelist());
    var _blacklist = _interopRequireDefault(require_blacklist());
    var _isWhitelisted = _interopRequireDefault(require_isWhitelisted());
    var _normalizeEmail = _interopRequireDefault(require_normalizeEmail());
    var _isSlug = _interopRequireDefault(require_isSlug());
    var _isLicensePlate = _interopRequireDefault(require_isLicensePlate());
    var _isStrongPassword = _interopRequireDefault(require_isStrongPassword());
    var _isVAT = _interopRequireDefault(require_isVAT());
    function _interopRequireWildcard(e, t) {
      if ("function" == typeof WeakMap) var r2 = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
      return (_interopRequireWildcard = function _interopRequireWildcard2(e2, t2) {
        if (!t2 && e2 && e2.__esModule) return e2;
        var o, i, f = { __proto__: null, default: e2 };
        if (null === e2 || "object" != _typeof(e2) && "function" != typeof e2) return f;
        if (o = t2 ? n : r2) {
          if (o.has(e2)) return o.get(e2);
          o.set(e2, f);
        }
        for (var _t in e2) "default" !== _t && {}.hasOwnProperty.call(e2, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e2, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e2[_t]);
        return f;
      })(e, t);
    }
    function _interopRequireDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var version10 = "13.15.15";
    var validator = {
      version: version10,
      toDate: _toDate.default,
      toFloat: _toFloat.default,
      toInt: _toInt.default,
      toBoolean: _toBoolean.default,
      equals: _equals.default,
      contains: _contains.default,
      matches: _matches.default,
      isEmail: _isEmail.default,
      isURL: _isURL.default,
      isMACAddress: _isMACAddress.default,
      isIP: _isIP.default,
      isIPRange: _isIPRange.default,
      isFQDN: _isFQDN.default,
      isBoolean: _isBoolean.default,
      isIBAN: _isIBAN.default,
      isBIC: _isBIC.default,
      isAbaRouting: _isAbaRouting.default,
      isAlpha: _isAlpha.default,
      isAlphaLocales: _isAlpha.locales,
      isAlphanumeric: _isAlphanumeric.default,
      isAlphanumericLocales: _isAlphanumeric.locales,
      isNumeric: _isNumeric.default,
      isPassportNumber: _isPassportNumber.default,
      passportNumberLocales: _isPassportNumber.locales,
      isPort: _isPort.default,
      isLowercase: _isLowercase.default,
      isUppercase: _isUppercase.default,
      isAscii: _isAscii.default,
      isFullWidth: _isFullWidth.default,
      isHalfWidth: _isHalfWidth.default,
      isVariableWidth: _isVariableWidth.default,
      isMultibyte: _isMultibyte.default,
      isSemVer: _isSemVer.default,
      isSurrogatePair: _isSurrogatePair.default,
      isInt: _isInt.default,
      isIMEI: _isIMEI.default,
      isFloat: _isFloat.default,
      isFloatLocales: _isFloat.locales,
      isDecimal: _isDecimal.default,
      isHexadecimal: _isHexadecimal.default,
      isOctal: _isOctal.default,
      isDivisibleBy: _isDivisibleBy.default,
      isHexColor: _isHexColor.default,
      isRgbColor: _isRgbColor.default,
      isHSL: _isHSL.default,
      isISRC: _isISRC.default,
      isMD5: _isMD.default,
      isHash: _isHash.default,
      isJWT: _isJWT.default,
      isJSON: _isJSON.default,
      isEmpty: _isEmpty.default,
      isLength: _isLength.default,
      isLocale: _isLocale.default,
      isByteLength: _isByteLength.default,
      isULID: _isULID.default,
      isUUID: _isUUID.default,
      isMongoId: _isMongoId.default,
      isAfter: _isAfter.default,
      isBefore: _isBefore.default,
      isIn: _isIn.default,
      isLuhnNumber: _isLuhnNumber.default,
      isCreditCard: _isCreditCard.default,
      isIdentityCard: _isIdentityCard.default,
      isEAN: _isEAN.default,
      isISIN: _isISIN.default,
      isISBN: _isISBN.default,
      isISSN: _isISSN.default,
      isMobilePhone: _isMobilePhone.default,
      isMobilePhoneLocales: _isMobilePhone.locales,
      isPostalCode: _isPostalCode.default,
      isPostalCodeLocales: _isPostalCode.locales,
      isEthereumAddress: _isEthereumAddress.default,
      isCurrency: _isCurrency.default,
      isBtcAddress: _isBtcAddress.default,
      isISO6346: _isISO.isISO6346,
      isFreightContainerID: _isISO.isFreightContainerID,
      isISO6391: _isISO2.default,
      isISO8601: _isISO3.default,
      isISO15924: _isISO4.default,
      isRFC3339: _isRFC.default,
      isISO31661Alpha2: _isISO31661Alpha.default,
      isISO31661Alpha3: _isISO31661Alpha2.default,
      isISO31661Numeric: _isISO31661Numeric.default,
      isISO4217: _isISO5.default,
      isBase32: _isBase.default,
      isBase58: _isBase2.default,
      isBase64: _isBase3.default,
      isDataURI: _isDataURI.default,
      isMagnetURI: _isMagnetURI.default,
      isMailtoURI: _isMailtoURI.default,
      isMimeType: _isMimeType.default,
      isLatLong: _isLatLong.default,
      ltrim: _ltrim.default,
      rtrim: _rtrim.default,
      trim: _trim.default,
      escape: _escape.default,
      unescape: _unescape.default,
      stripLow: _stripLow.default,
      whitelist: _whitelist.default,
      blacklist: _blacklist.default,
      isWhitelisted: _isWhitelisted.default,
      normalizeEmail: _normalizeEmail.default,
      toString,
      isSlug: _isSlug.default,
      isStrongPassword: _isStrongPassword.default,
      isTaxID: _isTaxID.default,
      isDate: _isDate.default,
      isTime: _isTime.default,
      isLicensePlate: _isLicensePlate.default,
      isVAT: _isVAT.default,
      ibanLocales: _isIBAN.locales
    };
    var _default = exports.default = validator;
    module.exports = exports.default;
    module.exports.default = exports.default;
  }
});

// node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "node_modules/bignumber.js/bignumber.js"(exports, module) {
    (function(globalObject) {
      "use strict";
      var BigNumber2, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER2 = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber3.prototype = { constructor: BigNumber3, toString: null, valueOf: null }, ONE2 = new BigNumber3(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: " ",
          // non-breaking space
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber3(v, b) {
          var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
          if (!(x instanceof BigNumber3)) return new BigNumber3(v, b);
          if (b == null) {
            if (v && v._isBigNumber === true) {
              x.s = v.s;
              if (!v.c || v.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v.e;
                x.c = v.c.slice();
              }
              return;
            }
            if ((isNum = typeof v == "number") && v * 0 == 0) {
              x.s = 1 / v < 0 ? (v = -v, -1) : 1;
              if (v === ~~v) {
                for (e = 0, i = v; i >= 10; i /= 10, e++) ;
                if (e > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e;
                  x.c = [v];
                }
                return;
              }
              str = String(v);
            } else {
              if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            if ((i = str.search(/e/i)) > 0) {
              if (e < 0) e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {
              e = str.length;
            }
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            if (b == 10 && alphabetHasNormalDecimalDigits) {
              x = new BigNumber3(v);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }
            str = String(v);
            if (isNum = typeof v == "number") {
              if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
              x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber3.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b);
            e = i = 0;
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == ".") {
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }
                return parseNumeric(x, String(v), isNum, b);
              }
            }
            isNum = false;
            str = convertBase(str, b, 10, x.s);
            if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
            else e = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; i++) ;
          for (len = str.length; str.charCodeAt(--len) === 48; ) ;
          if (str = str.slice(i, ++len)) {
            len -= i;
            if (isNum && BigNumber3.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER2 || v !== mathfloor(v))) {
              throw Error(tooManyDigits + x.s * v);
            }
            if ((e = e - i - 1) > MAX_EXP) {
              x.c = x.e = null;
            } else if (e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];
              i = (e + 1) % LOG_BASE;
              if (e < 0) i += LOG_BASE;
              if (i < len) {
                if (i) x.c.push(+str.slice(0, i));
                for (len -= LOG_BASE; i < len; ) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }
                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }
              for (; i--; str += "0") ;
              x.c.push(+str);
            }
          } else {
            x.c = [x.e = 0];
          }
        }
        BigNumber3.clone = clone;
        BigNumber3.ROUND_UP = 0;
        BigNumber3.ROUND_DOWN = 1;
        BigNumber3.ROUND_CEIL = 2;
        BigNumber3.ROUND_FLOOR = 3;
        BigNumber3.ROUND_HALF_UP = 4;
        BigNumber3.ROUND_HALF_DOWN = 5;
        BigNumber3.ROUND_HALF_EVEN = 6;
        BigNumber3.ROUND_HALF_CEIL = 7;
        BigNumber3.ROUND_HALF_FLOOR = 8;
        BigNumber3.EUCLID = 9;
        BigNumber3.config = BigNumber3.set = function(obj) {
          var p, v;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }
              if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }
              if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }
              if (obj.hasOwnProperty(p = "RANGE")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error(bignumberError + p + " cannot be zero: " + v);
                  }
                }
              }
              if (obj.hasOwnProperty(p = "CRYPTO")) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error(bignumberError + p + " not true or false: " + v);
                }
              }
              if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }
              if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }
              if (obj.hasOwnProperty(p = "FORMAT")) {
                v = obj[p];
                if (typeof v == "object") FORMAT = v;
                else throw Error(bignumberError + p + " not an object: " + v);
              }
              if (obj.hasOwnProperty(p = "ALPHABET")) {
                v = obj[p];
                if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                  alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                  ALPHABET = v;
                } else {
                  throw Error(bignumberError + p + " invalid: " + v);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber3.isBigNumber = function(v) {
          if (!v || v._isBigNumber !== true) return false;
          if (!BigNumber3.DEBUG) return true;
          var i, n, c = v.c, e = v.e, s = v.s;
          out: if ({}.toString.call(c) == "[object Array]") {
            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
              if (c[0] === 0) {
                if (e === 0 && c.length === 1) return true;
                break out;
              }
              i = (e + 1) % LOG_BASE;
              if (i < 1) i += LOG_BASE;
              if (String(c[0]).length == i) {
                for (i = 0; i < c.length; i++) {
                  n = c[i];
                  if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
                }
                if (n !== 0) return true;
              }
            }
          } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
            return true;
          }
          throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        BigNumber3.maximum = BigNumber3.max = function() {
          return maxOrMin(arguments, -1);
        };
        BigNumber3.minimum = BigNumber3.min = function() {
          return maxOrMin(arguments, 1);
        };
        BigNumber3.random = function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b, e, k, v, i = 0, c = [], rand = new BigNumber3(ONE2);
            if (dp == null) dp = DECIMAL_PLACES;
            else intCheck(dp, 0, MAX);
            k = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k *= 2));
                for (; i < k; ) {
                  v = a[i] * 131072 + (a[i + 1] >>> 11);
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k *= 7);
                for (; i < k; ) {
                  v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i < k; ) {
                v = random53bitInt();
                if (v < 9e15) c[i++] = v % 1e14;
              }
            }
            k = c[--i];
            dp %= LOG_BASE;
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }
            for (; c[i] === 0; c.pop(), i--) ;
            if (i < 0) {
              c = [e = 0];
            } else {
              for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++) ;
              if (i < LOG_BASE) e -= LOG_BASE - i;
            }
            rand.e = e;
            rand.c = c;
            return rand;
          };
        }();
        BigNumber3.sum = function() {
          var i = 1, args = arguments, sum = new BigNumber3(args[0]);
          for (; i < args.length; ) sum = sum.plus(args[i++]);
          return sum;
        };
        convertBase = /* @__PURE__ */ function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j, arr = [0], arrL, i = 0, len = str.length;
            for (; i < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
              arr[0] += alphabet.indexOf(str.charAt(i++));
              for (j = 0; j < arr.length; j++) {
                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null) arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e, k, r2, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i >= 0) {
              k = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y = new BigNumber3(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k;
              y.c = toBaseOut(
                toFixedPoint(coeffToString(x.c), x.e, "0"),
                10,
                baseOut,
                decimal
              );
              y.e = y.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e = k = xc.length;
            for (; xc[--k] == 0; xc.pop()) ;
            if (!xc[0]) return alphabet.charAt(0);
            if (i < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;
              x.s = sign;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r2 = x.r;
              e = x.e;
            }
            d = e + dp + 1;
            i = xc[d];
            k = baseOut / 2;
            r2 = r2 || d < 0 || xc[d + 1] != null;
            r2 = rm < 4 ? (i != null || r2) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r2 || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) {
              str = r2 ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d;
              if (r2) {
                for (--baseOut; ++xc[--d] > baseOut; ) {
                  xc[d] = 0;
                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k = xc.length; !xc[--k]; ) ;
              for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++])) ;
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }
            return str;
          };
        }();
        div = /* @__PURE__ */ function() {
          function multiply(x, k, base) {
            var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
            for (x = x.slice(); i--; ) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }
            if (carry) x = [carry].concat(x);
            return x;
          }
          function compare2(a, b, aL, bL) {
            var i, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i = cmp = 0; i < aL; i++) {
                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b, aL, base) {
            var i = 0;
            for (; aL--; ) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
          }
          return function(x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber3(
                // Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                )
              );
            }
            q = new BigNumber3(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;
            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
            for (i = 0; yc[i] == (xc[i] || 0); i++) ;
            if (yc[i] > (xc[i] || 0)) e--;
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;
              n = mathfloor(base / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0) ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2) yc0++;
              do {
                n = 0;
                cmp = compare2(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base) n = base - 1;
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare2(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL) prod = [0].concat(prod);
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare2(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
              more = rem[0] != null;
              if (!qc[0]) qc.splice(0, 1);
            }
            if (base == BASE) {
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) ;
              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
            } else {
              q.e = e;
              q.r = +more;
            }
            return q;
          };
        }();
        function format(n, i, rm, id2) {
          var c0, e, ne, len, str;
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          if (!n.c) return n.toString();
          c0 = n.c[0];
          ne = n.e;
          if (i == null) {
            str = coeffToString(n.c);
            str = id2 == 1 || id2 == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
          } else {
            n = round(new BigNumber3(n), i, rm);
            e = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id2 == 1 || id2 == 2 && (i <= e || e <= TO_EXP_NEG)) {
              for (; len < i; str += "0", len++) ;
              str = toExponential(str, e);
            } else {
              i -= ne + (id2 === 2 && e > ne);
              str = toFixedPoint(str, e, "0");
              if (e + 1 > len) {
                if (--i > 0) for (str += "."; i--; str += "0") ;
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len) str += ".";
                  for (; i--; str += "0") ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, n) {
          var k, y, i = 1, x = new BigNumber3(args[0]);
          for (; i < args.length; i++) {
            y = new BigNumber3(args[i]);
            if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
              x = y;
            }
          }
          return x;
        }
        function normalise(n, c, e) {
          var i = 1, j = c.length;
          for (; !c[--j]; c.pop()) ;
          for (j = c[0]; j >= 10; j /= 10, i++) ;
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }
          return n;
        }
        parseNumeric = /* @__PURE__ */ function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x, str, isNum, b) {
            var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s = s.replace(basePrefix, function(m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });
                if (b) {
                  base = b;
                  s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s) return new BigNumber3(s, base);
              }
              if (BigNumber3.DEBUG) {
                throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
              }
              x.s = null;
            }
            x.c = x.e = null;
          };
        }();
        function round(x, sd, rm, r2) {
          var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
              i = sd - d;
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];
                rd = mathfloor(n / pows10[d - j - 1] % 10);
              } else {
                ni = mathceil((i + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r2) {
                    for (; xc.length <= ni; xc.push(0)) ;
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];
                  for (d = 1; k >= 10; k /= 10, d++) ;
                  i %= LOG_BASE;
                  j = i - LOG_BASE + d;
                  rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                }
              }
              r2 = r2 || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
              r2 = rm < 4 ? (rd || r2) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r2 || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r2) {
                  sd -= x.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {
                  xc[0] = x.e = 0;
                }
                return x;
              }
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }
              if (r2) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) ;
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++) ;
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE) xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE) break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }
              for (i = xc.length; xc[--i] === 0; xc.pop()) ;
            }
            if (x.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }
          return x;
        }
        function valueOf(n) {
          var str, e = n.e;
          if (e === null) return n.toString();
          str = coeffToString(n.c);
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P.absoluteValue = P.abs = function() {
          var x = new BigNumber3(this);
          if (x.s < 0) x.s = 1;
          return x;
        };
        P.comparedTo = function(y, b) {
          return compare(this, new BigNumber3(y, b));
        };
        P.decimalPlaces = P.dp = function(dp, rm) {
          var c, n, v, x = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber3(x), dp + x.e + 1, rm);
          }
          if (!(c = x.c)) return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) ;
          if (n < 0) n = 0;
          return n;
        };
        P.dividedBy = P.div = function(y, b) {
          return div(this, new BigNumber3(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P.dividedToIntegerBy = P.idiv = function(y, b) {
          return div(this, new BigNumber3(y, b), 0, 1);
        };
        P.exponentiatedBy = P.pow = function(n, m) {
          var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
          n = new BigNumber3(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
          }
          if (m != null) m = new BigNumber3(m);
          nIsBig = n.e > 14;
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
            y = new BigNumber3(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
            return m ? y.mod(m) : y;
          }
          nIsNeg = n.s < 0;
          if (m) {
            if (m.c ? !m.c[0] : !m.s) return new BigNumber3(NaN);
            isModExp = !nIsNeg && x.isInteger() && m.isInteger();
            if (isModExp) x = x.mod(m);
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
            k = x.s < 0 && isOdd(n) ? -0 : 0;
            if (x.e > -1) k = 1 / k;
            return new BigNumber3(nIsNeg ? 1 / k : k);
          } else if (POW_PRECISION) {
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber3(0.5);
            if (nIsNeg) n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
          }
          y = new BigNumber3(ONE2);
          for (; ; ) {
            if (nIsOdd) {
              y = y.times(x);
              if (!y.c) break;
              if (k) {
                if (y.c.length > k) y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);
              }
            }
            if (i) {
              i = mathfloor(i / 2);
              if (i === 0) break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf(n);
                if (i === 0) break;
                nIsOdd = i % 2;
              }
            }
            x = x.times(x);
            if (k) {
              if (x.c && x.c.length > k) x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);
            }
          }
          if (isModExp) return y;
          if (nIsNeg) y = ONE2.div(y);
          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        P.integerValue = function(rm) {
          var n = new BigNumber3(this);
          if (rm == null) rm = ROUNDING_MODE;
          else intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P.isEqualTo = P.eq = function(y, b) {
          return compare(this, new BigNumber3(y, b)) === 0;
        };
        P.isFinite = function() {
          return !!this.c;
        };
        P.isGreaterThan = P.gt = function(y, b) {
          return compare(this, new BigNumber3(y, b)) > 0;
        };
        P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
          return (b = compare(this, new BigNumber3(y, b))) === 1 || b === 0;
        };
        P.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P.isLessThan = P.lt = function(y, b) {
          return compare(this, new BigNumber3(y, b)) < 0;
        };
        P.isLessThanOrEqualTo = P.lte = function(y, b) {
          return (b = compare(this, new BigNumber3(y, b))) === -1 || b === 0;
        };
        P.isNaN = function() {
          return !this.s;
        };
        P.isNegative = function() {
          return this.s < 0;
        };
        P.isPositive = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P.minus = function(y, b) {
          var i, j, t, xLTy, x = this, a = x.s;
          y = new BigNumber3(y, b);
          b = y.s;
          if (!a || !b) return new BigNumber3(NaN);
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber3(yc ? x : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y.s = -b, y) : new BigNumber3(xc[0] ? x : (
                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0
              ));
            }
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }
            t.reverse();
            for (b = a; b--; t.push(0)) ;
            t.reverse();
          } else {
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
            for (a = b = 0; b < j; b++) {
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }
          if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
          }
          b = (j = yc.length) - (i = xc.length);
          if (b > 0) for (; b--; xc[i++] = 0) ;
          b = BASE - 1;
          for (; j > a; ) {
            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b) ;
              --xc[i];
              xc[j] += BASE;
            }
            xc[j] -= yc[j];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye) ;
          if (!xc[0]) {
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
          return normalise(y, xc, ye);
        };
        P.modulo = P.mod = function(y, b) {
          var q, s, x = this;
          y = new BigNumber3(y, b);
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber3(NaN);
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber3(x);
          }
          if (MODULO_MODE == 9) {
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }
          y = x.minus(q.times(y));
          if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
          return y;
        };
        P.multipliedBy = P.times = function(y, b) {
          var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber3(y, b)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;
              if (!xc || !yc) {
                y.c = y.e = null;
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
            return y;
          }
          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i = xcL;
            xcL = ycL;
            ycL = i;
          }
          for (i = xcL + ycL, zc = []; i--; zc.push(0)) ;
          base = BASE;
          sqrtBase = SQRT_BASE;
          for (i = ycL; --i >= 0; ) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;
            for (k = xcL, j = i + k; j > i; ) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }
            zc[j] = c;
          }
          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y, zc, e);
        };
        P.negated = function() {
          var x = new BigNumber3(this);
          x.s = -x.s || null;
          return x;
        };
        P.plus = function(y, b) {
          var t, x = this, a = x.s;
          y = new BigNumber3(y, b);
          b = y.s;
          if (!a || !b) return new BigNumber3(NaN);
          if (a != b) {
            y.s = -b;
            return x.minus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc) return new BigNumber3(a / 0);
            if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber3(xc[0] ? x : a * 0);
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
            t.reverse();
            for (; a--; t.push(0)) ;
            t.reverse();
          }
          a = xc.length;
          b = yc.length;
          if (a - b < 0) {
            t = yc;
            yc = xc;
            xc = t;
            b = a;
          }
          for (a = 0; b; ) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
          return normalise(y, xc, ye);
        };
        P.precision = P.sd = function(sd, rm) {
          var c, n, v, x = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(new BigNumber3(x), sd, rm);
          }
          if (!(c = x.c)) return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;
          if (v = c[v]) {
            for (; v % 10 == 0; v /= 10, n--) ;
            for (v = c[0]; v >= 10; v /= 10, n++) ;
          }
          if (sd && x.e + 1 > n) n = x.e + 1;
          return n;
        };
        P.shiftedBy = function(k) {
          intCheck(k, -MAX_SAFE_INTEGER2, MAX_SAFE_INTEGER2);
          return this.times("1e" + k);
        };
        P.squareRoot = P.sqrt = function() {
          var m, n, r2, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber3("0.5");
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber3(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }
          s = Math.sqrt(+valueOf(x));
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0) n += "0";
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r2 = new BigNumber3(n);
          } else {
            r2 = new BigNumber3(s + "");
          }
          if (r2.c[0]) {
            e = r2.e;
            s = e + dp;
            if (s < 3) s = 0;
            for (; ; ) {
              t = r2;
              r2 = half.times(t.plus(div(x, t, dp, 1)));
              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r2.c)).slice(0, s)) {
                if (r2.e < e) --s;
                n = n.slice(s - 3, s + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
                    if (t.times(t).eq(x)) {
                      r2 = t;
                      break;
                    }
                  }
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r2, r2.e + DECIMAL_PLACES + 2, 1);
                    m = !r2.times(r2).eq(x);
                  }
                  break;
                }
              }
            }
          }
          return round(r2, r2.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        P.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P.toFormat = function(dp, rm, format2) {
          var str, x = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x.toFixed(dp, rm);
          if (x.c) {
            var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i = g1;
              g1 = g2;
              g2 = i;
              len -= i;
            }
            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
              if (isNeg) intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P.toFraction = function(md) {
          var d, d0, d1, d2, e, exp, n, n0, n1, q, r2, s, x = this, xc = x.c;
          if (md != null) {
            n = new BigNumber3(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE2)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
          }
          if (!xc) return new BigNumber3(x);
          d = new BigNumber3(ONE2);
          n1 = d0 = new BigNumber3(ONE2);
          d1 = n0 = new BigNumber3(ONE2);
          s = coeffToString(xc);
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber3(s);
          n0.c[0] = 0;
          for (; ; ) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1) break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e = e * 2;
          r2 = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r2;
        };
        P.toNumber = function() {
          return +valueOf(this);
        };
        P.toPrecision = function(sd, rm) {
          if (sd != null) intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P.toString = function(b) {
          var str, n = this, s = n.s, e = n.e;
          if (e === null) {
            if (s) {
              str = "Infinity";
              if (s < 0) str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
            } else if (b === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber3(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
            }
            if (s < 0 && n.c[0]) str = "-" + str;
          }
          return str;
        };
        P.valueOf = P.toJSON = function() {
          return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null) BigNumber3.set(configObject);
        return BigNumber3;
      }
      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }
      function coeffToString(a) {
        var s, z, i = 1, j = a.length, r2 = a[0] + "";
        for (; i < j; ) {
          s = a[i++] + "";
          z = LOG_BASE - s.length;
          for (; z--; s = "0" + s) ;
          r2 += s;
        }
        for (j = r2.length; r2.charCodeAt(--j) === 48; ) ;
        return r2.slice(0, j + 1 || 1);
      }
      function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        if (!i || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        if (a || b) return a ? b ? 0 : -j : i;
        if (i != j) return i;
        a = i < 0;
        b = k == l;
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }
      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
      }
      function toFixedPoint(str, e, z) {
        var len, zs;
        if (e < 0) {
          for (zs = z + "."; ++e; zs += z) ;
          str = zs + str;
        } else {
          len = str.length;
          if (++e > len) {
            for (zs = z, e -= len; --e; zs += z) ;
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + "." + str.slice(e);
          }
        }
        return str;
      }
      BigNumber2 = clone();
      BigNumber2["default"] = BigNumber2.BigNumber = BigNumber2;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber2;
        });
      } else if (typeof module != "undefined" && module.exports) {
        module.exports = BigNumber2;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber2;
      }
    })(exports);
  }
});

// node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__) prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0) return names;
      for (name in events = this._events) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                args[j - 1] = arguments[j];
              }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;
    EventEmitter.prefixed = prefix;
    EventEmitter.EventEmitter = EventEmitter;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter;
    }
  }
});

// node_modules/tronweb/node_modules/semver/semver.js
var require_semver = __commonJS({
  "node_modules/tronweb/node_modules/semver/semver.js"(exports, module) {
    exports = module.exports = SemVer;
    var debug;
    if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug = function() {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift("SEMVER");
        console.log.apply(console, args);
      };
    } else {
      debug = function() {
      };
    }
    exports.SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER2 = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var re = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    function makeSafeRe(value) {
      for (var i2 = 0; i2 < safeRegexReplacements.length; i2++) {
        var token = safeRegexReplacements[i2][0];
        var max = safeRegexReplacements[i2][1];
        value = value.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
      }
      return value;
    }
    var NUMERICIDENTIFIER = R++;
    src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
    var NUMERICIDENTIFIERLOOSE = R++;
    src[NUMERICIDENTIFIERLOOSE] = "\\d+";
    var NONNUMERICIDENTIFIER = R++;
    src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-]" + LETTERDASHNUMBER + "*";
    var MAINVERSION = R++;
    src[MAINVERSION] = "(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")";
    var MAINVERSIONLOOSE = R++;
    src[MAINVERSIONLOOSE] = "(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")";
    var PRERELEASEIDENTIFIER = R++;
    src[PRERELEASEIDENTIFIER] = "(?:" + src[NUMERICIDENTIFIER] + "|" + src[NONNUMERICIDENTIFIER] + ")";
    var PRERELEASEIDENTIFIERLOOSE = R++;
    src[PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[NUMERICIDENTIFIERLOOSE] + "|" + src[NONNUMERICIDENTIFIER] + ")";
    var PRERELEASE = R++;
    src[PRERELEASE] = "(?:-(" + src[PRERELEASEIDENTIFIER] + "(?:\\." + src[PRERELEASEIDENTIFIER] + ")*))";
    var PRERELEASELOOSE = R++;
    src[PRERELEASELOOSE] = "(?:-?(" + src[PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[PRERELEASEIDENTIFIERLOOSE] + ")*))";
    var BUILDIDENTIFIER = R++;
    src[BUILDIDENTIFIER] = LETTERDASHNUMBER + "+";
    var BUILD = R++;
    src[BUILD] = "(?:\\+(" + src[BUILDIDENTIFIER] + "(?:\\." + src[BUILDIDENTIFIER] + ")*))";
    var FULL = R++;
    var FULLPLAIN = "v?" + src[MAINVERSION] + src[PRERELEASE] + "?" + src[BUILD] + "?";
    src[FULL] = "^" + FULLPLAIN + "$";
    var LOOSEPLAIN = "[v=\\s]*" + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + "?" + src[BUILD] + "?";
    var LOOSE = R++;
    src[LOOSE] = "^" + LOOSEPLAIN + "$";
    var GTLT = R++;
    src[GTLT] = "((?:<|>)?=?)";
    var XRANGEIDENTIFIERLOOSE = R++;
    src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
    var XRANGEIDENTIFIER = R++;
    src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
    var XRANGEPLAIN = R++;
    src[XRANGEPLAIN] = "[v=\\s]*(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:" + src[PRERELEASE] + ")?" + src[BUILD] + "?)?)?";
    var XRANGEPLAINLOOSE = R++;
    src[XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:" + src[PRERELEASELOOSE] + ")?" + src[BUILD] + "?)?)?";
    var XRANGE = R++;
    src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
    var XRANGELOOSE = R++;
    src[XRANGELOOSE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";
    var COERCE = R++;
    src[COERCE] = "(?:^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
    var LONETILDE = R++;
    src[LONETILDE] = "(?:~>?)";
    var TILDETRIM = R++;
    src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
    re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
    safeRe[TILDETRIM] = new RegExp(makeSafeRe(src[TILDETRIM]), "g");
    var tildeTrimReplace = "$1~";
    var TILDE = R++;
    src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
    var TILDELOOSE = R++;
    src[TILDELOOSE] = "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";
    var LONECARET = R++;
    src[LONECARET] = "(?:\\^)";
    var CARETTRIM = R++;
    src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
    re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
    safeRe[CARETTRIM] = new RegExp(makeSafeRe(src[CARETTRIM]), "g");
    var caretTrimReplace = "$1^";
    var CARET = R++;
    src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
    var CARETLOOSE = R++;
    src[CARETLOOSE] = "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";
    var COMPARATORLOOSE = R++;
    src[COMPARATORLOOSE] = "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
    var COMPARATOR = R++;
    src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";
    var COMPARATORTRIM = R++;
    src[COMPARATORTRIM] = "(\\s*)" + src[GTLT] + "\\s*(" + LOOSEPLAIN + "|" + src[XRANGEPLAIN] + ")";
    re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
    safeRe[COMPARATORTRIM] = new RegExp(makeSafeRe(src[COMPARATORTRIM]), "g");
    var comparatorTrimReplace = "$1$2$3";
    var HYPHENRANGE = R++;
    src[HYPHENRANGE] = "^\\s*(" + src[XRANGEPLAIN] + ")\\s+-\\s+(" + src[XRANGEPLAIN] + ")\\s*$";
    var HYPHENRANGELOOSE = R++;
    src[HYPHENRANGELOOSE] = "^\\s*(" + src[XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[XRANGEPLAINLOOSE] + ")\\s*$";
    var STAR = R++;
    src[STAR] = "(<|>)?=?\\s*\\*";
    for (i = 0; i < R; i++) {
      debug(i, src[i]);
      if (!re[i]) {
        re[i] = new RegExp(src[i]);
        safeRe[i] = new RegExp(makeSafeRe(src[i]));
      }
    }
    var i;
    exports.parse = parse;
    function parse(version10, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version10 instanceof SemVer) {
        return version10;
      }
      if (typeof version10 !== "string") {
        return null;
      }
      if (version10.length > MAX_LENGTH) {
        return null;
      }
      var r2 = options.loose ? safeRe[LOOSE] : safeRe[FULL];
      if (!r2.test(version10)) {
        return null;
      }
      try {
        return new SemVer(version10, options);
      } catch (er) {
        return null;
      }
    }
    exports.valid = valid;
    function valid(version10, options) {
      var v = parse(version10, options);
      return v ? v.version : null;
    }
    exports.clean = clean;
    function clean(version10, options) {
      var s = parse(version10.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    }
    exports.SemVer = SemVer;
    function SemVer(version10, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version10 instanceof SemVer) {
        if (version10.loose === options.loose) {
          return version10;
        } else {
          version10 = version10.version;
        }
      } else if (typeof version10 !== "string") {
        throw new TypeError("Invalid Version: " + version10);
      }
      if (version10.length > MAX_LENGTH) {
        throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version10, options);
      }
      debug("SemVer", version10, options);
      this.options = options;
      this.loose = !!options.loose;
      var m = version10.trim().match(options.loose ? safeRe[LOOSE] : safeRe[FULL]);
      if (!m) {
        throw new TypeError("Invalid Version: " + version10);
      }
      this.raw = version10;
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];
      if (this.major > MAX_SAFE_INTEGER2 || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER2 || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER2 || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split(".").map(function(id2) {
          if (/^[0-9]+$/.test(id2)) {
            var num = +id2;
            if (num >= 0 && num < MAX_SAFE_INTEGER2) {
              return num;
            }
          }
          return id2;
        });
      }
      this.build = m[5] ? m[5].split(".") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + "." + this.minor + "." + this.patch;
      if (this.prerelease.length) {
        this.version += "-" + this.prerelease.join(".");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a = this.prerelease[i2];
        var b = other.prerelease[i2];
        debug("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier);
          this.inc("pre", identifier);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier);
          }
          this.inc("pre", identifier);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break;
        default:
          throw new Error("invalid increment argument: " + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports.inc = inc;
    function inc(version10, release, loose, identifier) {
      if (typeof loose === "string") {
        identifier = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version10, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }
    exports.diff = diff;
    function diff(version1, version22) {
      if (eq(version1, version22)) {
        return null;
      } else {
        var v1 = parse(version1);
        var v2 = parse(version22);
        var prefix = "";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    }
    exports.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }
    exports.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }
    exports.major = major;
    function major(a, loose) {
      return new SemVer(a, loose).major;
    }
    exports.minor = minor;
    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }
    exports.patch = patch;
    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }
    exports.compare = compare;
    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }
    exports.compareLoose = compareLoose;
    function compareLoose(a, b) {
      return compare(a, b, true);
    }
    exports.rcompare = rcompare;
    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }
    exports.sort = sort;
    function sort(list, loose) {
      return list.sort(function(a, b) {
        return exports.compare(a, b, loose);
      });
    }
    exports.rsort = rsort;
    function rsort(list, loose) {
      return list.sort(function(a, b) {
        return exports.rcompare(a, b, loose);
      });
    }
    exports.gt = gt;
    function gt(a, b, loose) {
      return compare(a, b, loose) > 0;
    }
    exports.lt = lt;
    function lt(a, b, loose) {
      return compare(a, b, loose) < 0;
    }
    exports.eq = eq;
    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }
    exports.neq = neq;
    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }
    exports.gte = gte;
    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }
    exports.lte = lte;
    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }
    exports.cmp = cmp;
    function cmp(a, op, b, loose) {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError("Invalid operator: " + op);
      }
    }
    exports.Comparator = Comparator;
    function Comparator(comp, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }
      comp = comp.trim().split(/\s+/).join(" ");
      debug("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug("comp", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r2 = this.options.loose ? safeRe[COMPARATORLOOSE] : safeRe[COMPARATOR];
      var m = comp.match(r2);
      if (!m) {
        throw new TypeError("Invalid comparator: " + comp);
      }
      this.operator = m[1];
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version10) {
      debug("Comparator.test", version10, this.options.loose);
      if (this.semver === ANY) {
        return true;
      }
      if (typeof version10 === "string") {
        version10 = new SemVer(version10, this.options);
      }
      return cmp(version10, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === "") {
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === "") {
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports.Range = Range;
    function Range(range, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options);
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range.trim().split(/\s+/).join(" ");
      this.set = this.raw.split("||").map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c) {
        return c.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: " + this.raw);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      var hr = loose ? safeRe[HYPHENRANGELOOSE] : safeRe[HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug("hyphen replace", range);
      range = range.replace(safeRe[COMPARATORTRIM], comparatorTrimReplace);
      debug("comparator trim", range, safeRe[COMPARATORTRIM]);
      range = range.replace(safeRe[TILDETRIM], tildeTrimReplace);
      range = range.replace(safeRe[CARETTRIM], caretTrimReplace);
      var compRe = loose ? safeRe[COMPARATORLOOSE] : safeRe[COMPARATOR];
      var set = range.split(" ").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(" ").split(/\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some(function(thisComparators) {
        return thisComparators.every(function(thisComparator) {
          return range.set.some(function(rangeComparators) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    };
    exports.toComparators = toComparators;
    function toComparators(range, options) {
      return new Range(range, options).set.map(function(comp) {
        return comp.map(function(c) {
          return c.value;
        }).join(" ").trim().split(" ");
      });
    }
    function parseComparator(comp, options) {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    }
    function isX(id2) {
      return !id2 || id2.toLowerCase() === "x" || id2 === "*";
    }
    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceTilde(comp2, options);
      }).join(" ");
    }
    function replaceTilde(comp, options) {
      var r2 = options.loose ? safeRe[TILDELOOSE] : safeRe[TILDE];
      return comp.replace(r2, function(_, M, m, p, pr) {
        debug("tilde", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
        }
        debug("tilde return", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceCaret(comp2, options);
      }).join(" ");
    }
    function replaceCaret(comp, options) {
      debug("caret", comp, options);
      var r2 = options.loose ? safeRe[CARETLOOSE] : safeRe[CARET];
      return comp.replace(r2, function(_, M, m, p, pr) {
        debug("caret", comp, _, M, m, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          if (M === "0") {
            ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
          } else {
            ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
          }
        }
        debug("caret return", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options) {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map(function(comp2) {
        return replaceXRange(comp2, options);
      }).join(" ");
    }
    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r2 = options.loose ? safeRe[XRANGELOOSE] : safeRe[XRANGE];
      return comp.replace(r2, function(ret, gtlt, M, m, p, pr) {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          ret = gtlt + M + "." + m + "." + p;
        } else if (xm) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (xp) {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        }
        debug("xRange return", ret);
        return ret;
      });
    }
    function replaceStars(comp, options) {
      debug("replaceStars", comp, options);
      return comp.trim().replace(safeRe[STAR], "");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = ">=" + fM + ".0.0";
      } else if (isX(fp)) {
        from = ">=" + fM + "." + fm + ".0";
      } else {
        from = ">=" + from;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = "<" + (+tM + 1) + ".0.0";
      } else if (isX(tp)) {
        to = "<" + tM + "." + (+tm + 1) + ".0";
      } else if (tpr) {
        to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
      } else {
        to = "<=" + to;
      }
      return (from + " " + to).trim();
    }
    Range.prototype.test = function(version10) {
      if (!version10) {
        return false;
      }
      if (typeof version10 === "string") {
        version10 = new SemVer(version10, this.options);
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version10, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version10, options) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version10)) {
          return false;
        }
      }
      if (version10.prerelease.length && !options.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version10.major && allowed.minor === version10.minor && allowed.patch === version10.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports.satisfies = satisfies;
    function satisfies(version10, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version10);
    }
    exports.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }
    exports.minSatisfying = minSatisfying;
    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }
    exports.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error("Unexpected operation: " + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports.validRange = validRange;
    function validRange(range, options) {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    }
    exports.ltr = ltr;
    function ltr(version10, range, options) {
      return outside(version10, range, "<", options);
    }
    exports.gtr = gtr;
    function gtr(version10, range, options) {
      return outside(version10, range, ">", options);
    }
    exports.outside = outside;
    function outside(version10, range, hilo, options) {
      version10 = new SemVer(version10, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version10, range, options)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version10, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version10, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports.prerelease = prerelease;
    function prerelease(version10, options) {
      var parsed = parse(version10, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports.intersects = intersects;
    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }
    exports.coerce = coerce;
    function coerce(version10) {
      if (version10 instanceof SemVer) {
        return version10;
      }
      if (typeof version10 !== "string") {
        return null;
      }
      var match = version10.match(safeRe[COERCE]);
      if (match == null) {
        return null;
      }
      return parse(match[1] + "." + (match[2] || "0") + "." + (match[3] || "0"));
    }
  }
});

// node_modules/injectpromise/index.js
var require_injectpromise = __commonJS({
  "node_modules/injectpromise/index.js"(exports, module) {
    module.exports = function(scope) {
      return (func, ...args) => {
        return function(func2, ...args2) {
          return new Promise((resolve, reject) => {
            func2(...args2, (err, res) => {
              if (err) {
                reject(err);
              } else {
                resolve(res);
              }
            });
          });
        }(func.bind(scope), ...args);
      };
    };
  }
});

// node_modules/querystring-es3/decode.js
var require_decode = __commonJS({
  "node_modules/querystring-es3/decode.js"(exports, module) {
    "use strict";
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    module.exports = function(qs, sep, eq, options) {
      sep = sep || "&";
      eq = eq || "=";
      var obj = {};
      if (typeof qs !== "string" || qs.length === 0) {
        return obj;
      }
      var regexp = /\+/g;
      qs = qs.split(sep);
      var maxKeys = 1e3;
      if (options && typeof options.maxKeys === "number") {
        maxKeys = options.maxKeys;
      }
      var len = qs.length;
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }
      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = "";
        }
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }
      return obj;
    };
    var isArray = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
  }
});

// node_modules/querystring-es3/encode.js
var require_encode = __commonJS({
  "node_modules/querystring-es3/encode.js"(exports, module) {
    "use strict";
    var stringifyPrimitive = function(v) {
      switch (typeof v) {
        case "string":
          return v;
        case "boolean":
          return v ? "true" : "false";
        case "number":
          return isFinite(v) ? v : "";
        default:
          return "";
      }
    };
    module.exports = function(obj, sep, eq, name) {
      sep = sep || "&";
      eq = eq || "=";
      if (obj === null) {
        obj = void 0;
      }
      if (typeof obj === "object") {
        return map(objectKeys(obj), function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (isArray(obj[k])) {
            return map(obj[k], function(v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);
      }
      if (!name) return "";
      return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
    };
    var isArray = Array.isArray || function(xs) {
      return Object.prototype.toString.call(xs) === "[object Array]";
    };
    function map(xs, f) {
      if (xs.map) return xs.map(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
        res.push(f(xs[i], i));
      }
      return res;
    }
    var objectKeys = Object.keys || function(obj) {
      var res = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
      }
      return res;
    };
  }
});

// node_modules/querystring-es3/index.js
var require_querystring_es3 = __commonJS({
  "node_modules/querystring-es3/index.js"(exports) {
    "use strict";
    exports.decode = exports.parse = require_decode();
    exports.encode = exports.stringify = require_encode();
  }
});

// node_modules/tronweb/dist/TronWeb.node.js
var require_TronWeb_node = __commonJS({
  "node_modules/tronweb/dist/TronWeb.node.js"(exports, module) {
    (() => {
      var e = { 37: (e2, t2, r3) => {
        var n2 = r3(306), o = n2, a = "undefined" != typeof globalThis && globalThis || "undefined" != typeof window && window || void 0 !== a && a || "undefined" != typeof self && self || (function() {
          return this;
        }).call(null) || Function("return this")(), i = r3(203);
        o.object.extend(proto, i), o.exportSymbol("TronWebProto.Account", null, a), o.exportSymbol("TronWebProto.Account.AccountResource", null, a), o.exportSymbol("TronWebProto.Account.Frozen", null, a), o.exportSymbol("TronWebProto.AccountId", null, a), o.exportSymbol("TronWebProto.AccountType", null, a), o.exportSymbol("TronWebProto.DelegatedResource", null, a), o.exportSymbol("TronWebProto.Exchange", null, a), o.exportSymbol("TronWebProto.Key", null, a), o.exportSymbol("TronWebProto.MarketOrderDetail", null, a), o.exportSymbol("TronWebProto.Permission", null, a), o.exportSymbol("TronWebProto.Permission.PermissionType", null, a), o.exportSymbol("TronWebProto.Proposal", null, a), o.exportSymbol("TronWebProto.Proposal.State", null, a), o.exportSymbol("TronWebProto.Transaction", null, a), o.exportSymbol("TronWebProto.Transaction.Contract", null, a), o.exportSymbol("TronWebProto.Transaction.Contract.ContractType", null, a), o.exportSymbol("TronWebProto.Transaction.Result", null, a), o.exportSymbol("TronWebProto.Transaction.Result.code", null, a), o.exportSymbol("TronWebProto.Transaction.Result.contractResult", null, a), o.exportSymbol("TronWebProto.Transaction.raw", null, a), o.exportSymbol("TronWebProto.Vote", null, a), o.exportSymbol("TronWebProto.Votes", null, a), o.exportSymbol("TronWebProto.Witness", null, a), o.exportSymbol("TronWebProto.authority", null, a), TronWebProto.AccountId = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.AccountId, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.AccountId.displayName = "TronWebProto.AccountId"), TronWebProto.Vote = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.Vote, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Vote.displayName = "TronWebProto.Vote"), TronWebProto.Proposal = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.Proposal.repeatedFields_, null);
        }, o.inherits(TronWebProto.Proposal, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Proposal.displayName = "TronWebProto.Proposal"), TronWebProto.Exchange = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.Exchange, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Exchange.displayName = "TronWebProto.Exchange"), TronWebProto.Account = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.Account.repeatedFields_, null);
        }, o.inherits(TronWebProto.Account, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Account.displayName = "TronWebProto.Account"), TronWebProto.Account.Frozen = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.Account.Frozen, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Account.Frozen.displayName = "TronWebProto.Account.Frozen"), TronWebProto.Account.AccountResource = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.Account.AccountResource, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Account.AccountResource.displayName = "TronWebProto.Account.AccountResource"), TronWebProto.Key = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.Key, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Key.displayName = "TronWebProto.Key"), TronWebProto.DelegatedResource = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.DelegatedResource, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.DelegatedResource.displayName = "TronWebProto.DelegatedResource"), TronWebProto.authority = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.authority, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.authority.displayName = "TronWebProto.authority"), TronWebProto.Permission = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.Permission.repeatedFields_, null);
        }, o.inherits(TronWebProto.Permission, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Permission.displayName = "TronWebProto.Permission"), TronWebProto.Witness = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.Witness, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Witness.displayName = "TronWebProto.Witness"), TronWebProto.Votes = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.Votes.repeatedFields_, null);
        }, o.inherits(TronWebProto.Votes, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Votes.displayName = "TronWebProto.Votes"), TronWebProto.MarketOrderDetail = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.MarketOrderDetail, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.MarketOrderDetail.displayName = "TronWebProto.MarketOrderDetail"), TronWebProto.Transaction = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.Transaction.repeatedFields_, null);
        }, o.inherits(TronWebProto.Transaction, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Transaction.displayName = "TronWebProto.Transaction"), TronWebProto.Transaction.Contract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.Transaction.Contract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Transaction.Contract.displayName = "TronWebProto.Transaction.Contract"), TronWebProto.Transaction.Result = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.Transaction.Result.repeatedFields_, null);
        }, o.inherits(TronWebProto.Transaction.Result, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Transaction.Result.displayName = "TronWebProto.Transaction.Result"), TronWebProto.Transaction.raw = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.Transaction.raw.repeatedFields_, null);
        }, o.inherits(TronWebProto.Transaction.raw, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.Transaction.raw.displayName = "TronWebProto.Transaction.raw"), n2.Message.GENERATE_TO_OBJECT && (TronWebProto.AccountId.prototype.toObject = function(e3) {
          return TronWebProto.AccountId.toObject(e3, this);
        }, TronWebProto.AccountId.toObject = function(e3, t3) {
          var r4 = { name: t3.getName_asB64(), address: t3.getAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.AccountId.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.AccountId();
          return TronWebProto.AccountId.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.AccountId.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setName(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setAddress(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.AccountId.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.AccountId.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.AccountId.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getName_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getAddress_asU8()).length > 0 && t3.writeBytes(2, r4);
        }, TronWebProto.AccountId.prototype.getName = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.AccountId.prototype.getName_asB64 = function() {
          return n2.Message.bytesAsB64(this.getName());
        }, TronWebProto.AccountId.prototype.getName_asU8 = function() {
          return n2.Message.bytesAsU8(this.getName());
        }, TronWebProto.AccountId.prototype.setName = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.AccountId.prototype.getAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.AccountId.prototype.getAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAddress());
        }, TronWebProto.AccountId.prototype.getAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAddress());
        }, TronWebProto.AccountId.prototype.setAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Vote.prototype.toObject = function(e3) {
          return TronWebProto.Vote.toObject(e3, this);
        }, TronWebProto.Vote.toObject = function(e3, t3) {
          var r4 = { voteAddress: t3.getVoteAddress_asB64(), voteCount: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.Vote.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Vote();
          return TronWebProto.Vote.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Vote.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setVoteAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setVoteCount(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Vote.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Vote.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Vote.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getVoteAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getVoteCount()) && t3.writeInt64(2, r4);
        }, TronWebProto.Vote.prototype.getVoteAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.Vote.prototype.getVoteAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getVoteAddress());
        }, TronWebProto.Vote.prototype.getVoteAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getVoteAddress());
        }, TronWebProto.Vote.prototype.setVoteAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.Vote.prototype.getVoteCount = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.Vote.prototype.setVoteCount = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.Proposal.repeatedFields_ = [6], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Proposal.prototype.toObject = function(e3) {
          return TronWebProto.Proposal.toObject(e3, this);
        }, TronWebProto.Proposal.toObject = function(e3, t3) {
          var r4, o2 = { proposalId: n2.Message.getFieldWithDefault(t3, 1, 0), proposerAddress: t3.getProposerAddress_asB64(), parametersMap: (r4 = t3.getParametersMap()) ? r4.toObject(e3, void 0) : [], expirationTime: n2.Message.getFieldWithDefault(t3, 4, 0), createTime: n2.Message.getFieldWithDefault(t3, 5, 0), approvalsList: t3.getApprovalsList_asB64(), state: n2.Message.getFieldWithDefault(t3, 7, 0) };
          return e3 && (o2.$jspbMessageInstance = t3), o2;
        }), TronWebProto.Proposal.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Proposal();
          return TronWebProto.Proposal.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Proposal.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readInt64();
              e3.setProposalId(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setProposerAddress(r4);
              break;
            case 3:
              r4 = e3.getParametersMap(), t3.readMessage(r4, function(e4, t4) {
                n2.Map.deserializeBinary(e4, t4, n2.BinaryReader.prototype.readInt64, n2.BinaryReader.prototype.readInt64, null, 0, 0);
              });
              break;
            case 4:
              r4 = t3.readInt64(), e3.setExpirationTime(r4);
              break;
            case 5:
              r4 = t3.readInt64(), e3.setCreateTime(r4);
              break;
            case 6:
              r4 = t3.readBytes(), e3.addApprovals(r4);
              break;
            case 7:
              r4 = t3.readEnum(), e3.setState(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Proposal.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Proposal.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Proposal.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getProposalId()) && t3.writeInt64(1, r4), (r4 = e3.getProposerAddress_asU8()).length > 0 && t3.writeBytes(2, r4), (r4 = e3.getParametersMap(true)) && r4.getLength() > 0 && r4.serializeBinary(3, t3, n2.BinaryWriter.prototype.writeInt64, n2.BinaryWriter.prototype.writeInt64), 0 !== (r4 = e3.getExpirationTime()) && t3.writeInt64(4, r4), 0 !== (r4 = e3.getCreateTime()) && t3.writeInt64(5, r4), (r4 = e3.getApprovalsList_asU8()).length > 0 && t3.writeRepeatedBytes(6, r4), 0 !== (r4 = e3.getState()) && t3.writeEnum(7, r4);
        }, TronWebProto.Proposal.State = { PENDING: 0, DISAPPROVED: 1, APPROVED: 2, CANCELED: 3 }, TronWebProto.Proposal.prototype.getProposalId = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.Proposal.prototype.setProposalId = function(e3) {
          return n2.Message.setProto3IntField(this, 1, e3);
        }, TronWebProto.Proposal.prototype.getProposerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.Proposal.prototype.getProposerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getProposerAddress());
        }, TronWebProto.Proposal.prototype.getProposerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getProposerAddress());
        }, TronWebProto.Proposal.prototype.setProposerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.Proposal.prototype.getParametersMap = function(e3) {
          return n2.Message.getMapField(this, 3, e3, null);
        }, TronWebProto.Proposal.prototype.clearParametersMap = function() {
          return this.getParametersMap().clear(), this;
        }, TronWebProto.Proposal.prototype.getExpirationTime = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.Proposal.prototype.setExpirationTime = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, TronWebProto.Proposal.prototype.getCreateTime = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.Proposal.prototype.setCreateTime = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, TronWebProto.Proposal.prototype.getApprovalsList = function() {
          return n2.Message.getRepeatedField(this, 6);
        }, TronWebProto.Proposal.prototype.getApprovalsList_asB64 = function() {
          return n2.Message.bytesListAsB64(this.getApprovalsList());
        }, TronWebProto.Proposal.prototype.getApprovalsList_asU8 = function() {
          return n2.Message.bytesListAsU8(this.getApprovalsList());
        }, TronWebProto.Proposal.prototype.setApprovalsList = function(e3) {
          return n2.Message.setField(this, 6, e3 || []);
        }, TronWebProto.Proposal.prototype.addApprovals = function(e3, t3) {
          return n2.Message.addToRepeatedField(this, 6, e3, t3);
        }, TronWebProto.Proposal.prototype.clearApprovalsList = function() {
          return this.setApprovalsList([]);
        }, TronWebProto.Proposal.prototype.getState = function() {
          return n2.Message.getFieldWithDefault(this, 7, 0);
        }, TronWebProto.Proposal.prototype.setState = function(e3) {
          return n2.Message.setProto3EnumField(this, 7, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Exchange.prototype.toObject = function(e3) {
          return TronWebProto.Exchange.toObject(e3, this);
        }, TronWebProto.Exchange.toObject = function(e3, t3) {
          var r4 = { exchangeId: n2.Message.getFieldWithDefault(t3, 1, 0), creatorAddress: t3.getCreatorAddress_asB64(), createTime: n2.Message.getFieldWithDefault(t3, 3, 0), firstTokenId: t3.getFirstTokenId_asB64(), firstTokenBalance: n2.Message.getFieldWithDefault(t3, 7, 0), secondTokenId: t3.getSecondTokenId_asB64(), secondTokenBalance: n2.Message.getFieldWithDefault(t3, 9, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.Exchange.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Exchange();
          return TronWebProto.Exchange.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Exchange.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readInt64();
              e3.setExchangeId(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setCreatorAddress(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setCreateTime(r4);
              break;
            case 6:
              r4 = t3.readBytes(), e3.setFirstTokenId(r4);
              break;
            case 7:
              r4 = t3.readInt64(), e3.setFirstTokenBalance(r4);
              break;
            case 8:
              r4 = t3.readBytes(), e3.setSecondTokenId(r4);
              break;
            case 9:
              r4 = t3.readInt64(), e3.setSecondTokenBalance(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Exchange.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Exchange.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Exchange.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getExchangeId()) && t3.writeInt64(1, r4), (r4 = e3.getCreatorAddress_asU8()).length > 0 && t3.writeBytes(2, r4), 0 !== (r4 = e3.getCreateTime()) && t3.writeInt64(3, r4), (r4 = e3.getFirstTokenId_asU8()).length > 0 && t3.writeBytes(6, r4), 0 !== (r4 = e3.getFirstTokenBalance()) && t3.writeInt64(7, r4), (r4 = e3.getSecondTokenId_asU8()).length > 0 && t3.writeBytes(8, r4), 0 !== (r4 = e3.getSecondTokenBalance()) && t3.writeInt64(9, r4);
        }, TronWebProto.Exchange.prototype.getExchangeId = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.Exchange.prototype.setExchangeId = function(e3) {
          return n2.Message.setProto3IntField(this, 1, e3);
        }, TronWebProto.Exchange.prototype.getCreatorAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.Exchange.prototype.getCreatorAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getCreatorAddress());
        }, TronWebProto.Exchange.prototype.getCreatorAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getCreatorAddress());
        }, TronWebProto.Exchange.prototype.setCreatorAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.Exchange.prototype.getCreateTime = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.Exchange.prototype.setCreateTime = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.Exchange.prototype.getFirstTokenId = function() {
          return n2.Message.getFieldWithDefault(this, 6, "");
        }, TronWebProto.Exchange.prototype.getFirstTokenId_asB64 = function() {
          return n2.Message.bytesAsB64(this.getFirstTokenId());
        }, TronWebProto.Exchange.prototype.getFirstTokenId_asU8 = function() {
          return n2.Message.bytesAsU8(this.getFirstTokenId());
        }, TronWebProto.Exchange.prototype.setFirstTokenId = function(e3) {
          return n2.Message.setProto3BytesField(this, 6, e3);
        }, TronWebProto.Exchange.prototype.getFirstTokenBalance = function() {
          return n2.Message.getFieldWithDefault(this, 7, 0);
        }, TronWebProto.Exchange.prototype.setFirstTokenBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 7, e3);
        }, TronWebProto.Exchange.prototype.getSecondTokenId = function() {
          return n2.Message.getFieldWithDefault(this, 8, "");
        }, TronWebProto.Exchange.prototype.getSecondTokenId_asB64 = function() {
          return n2.Message.bytesAsB64(this.getSecondTokenId());
        }, TronWebProto.Exchange.prototype.getSecondTokenId_asU8 = function() {
          return n2.Message.bytesAsU8(this.getSecondTokenId());
        }, TronWebProto.Exchange.prototype.setSecondTokenId = function(e3) {
          return n2.Message.setProto3BytesField(this, 8, e3);
        }, TronWebProto.Exchange.prototype.getSecondTokenBalance = function() {
          return n2.Message.getFieldWithDefault(this, 9, 0);
        }, TronWebProto.Exchange.prototype.setSecondTokenBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 9, e3);
        }, TronWebProto.Account.repeatedFields_ = [5, 7, 16, 33], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Account.prototype.toObject = function(e3) {
          return TronWebProto.Account.toObject(e3, this);
        }, TronWebProto.Account.toObject = function(e3, t3) {
          var r4, o2 = { accountName: t3.getAccountName_asB64(), type: n2.Message.getFieldWithDefault(t3, 2, 0), address: t3.getAddress_asB64(), balance: n2.Message.getFieldWithDefault(t3, 4, 0), votesList: n2.Message.toObjectList(t3.getVotesList(), TronWebProto.Vote.toObject, e3), assetMap: (r4 = t3.getAssetMap()) ? r4.toObject(e3, void 0) : [], assetv2Map: (r4 = t3.getAssetv2Map()) ? r4.toObject(e3, void 0) : [], frozenList: n2.Message.toObjectList(t3.getFrozenList(), TronWebProto.Account.Frozen.toObject, e3), netUsage: n2.Message.getFieldWithDefault(t3, 8, 0), acquiredDelegatedFrozenBalanceForBandwidth: n2.Message.getFieldWithDefault(t3, 41, 0), delegatedFrozenBalanceForBandwidth: n2.Message.getFieldWithDefault(t3, 42, 0), oldTronPower: n2.Message.getFieldWithDefault(t3, 46, 0), tronPower: (r4 = t3.getTronPower()) && TronWebProto.Account.Frozen.toObject(e3, r4), assetOptimized: n2.Message.getBooleanFieldWithDefault(t3, 60, false), createTime: n2.Message.getFieldWithDefault(t3, 9, 0), latestOprationTime: n2.Message.getFieldWithDefault(t3, 10, 0), allowance: n2.Message.getFieldWithDefault(t3, 11, 0), latestWithdrawTime: n2.Message.getFieldWithDefault(t3, 12, 0), code: t3.getCode_asB64(), isWitness: n2.Message.getBooleanFieldWithDefault(t3, 14, false), isCommittee: n2.Message.getBooleanFieldWithDefault(t3, 15, false), frozenSupplyList: n2.Message.toObjectList(t3.getFrozenSupplyList(), TronWebProto.Account.Frozen.toObject, e3), assetIssuedName: t3.getAssetIssuedName_asB64(), assetIssuedId: t3.getAssetIssuedId_asB64(), latestAssetOperationTimeMap: (r4 = t3.getLatestAssetOperationTimeMap()) ? r4.toObject(e3, void 0) : [], latestAssetOperationTimev2Map: (r4 = t3.getLatestAssetOperationTimev2Map()) ? r4.toObject(e3, void 0) : [], freeNetUsage: n2.Message.getFieldWithDefault(t3, 19, 0), freeAssetNetUsageMap: (r4 = t3.getFreeAssetNetUsageMap()) ? r4.toObject(e3, void 0) : [], freeAssetNetUsagev2Map: (r4 = t3.getFreeAssetNetUsagev2Map()) ? r4.toObject(e3, void 0) : [], latestConsumeTime: n2.Message.getFieldWithDefault(t3, 21, 0), latestConsumeFreeTime: n2.Message.getFieldWithDefault(t3, 22, 0), accountId: t3.getAccountId_asB64(), accountResource: (r4 = t3.getAccountResource()) && TronWebProto.Account.AccountResource.toObject(e3, r4), codehash: t3.getCodehash_asB64(), ownerPermission: (r4 = t3.getOwnerPermission()) && TronWebProto.Permission.toObject(e3, r4), witnessPermission: (r4 = t3.getWitnessPermission()) && TronWebProto.Permission.toObject(e3, r4), activePermissionList: n2.Message.toObjectList(t3.getActivePermissionList(), TronWebProto.Permission.toObject, e3) };
          return e3 && (o2.$jspbMessageInstance = t3), o2;
        }), TronWebProto.Account.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Account();
          return TronWebProto.Account.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Account.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setAccountName(r4);
              break;
            case 2:
              r4 = t3.readEnum(), e3.setType(r4);
              break;
            case 3:
              r4 = t3.readBytes(), e3.setAddress(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setBalance(r4);
              break;
            case 5:
              r4 = new TronWebProto.Vote(), t3.readMessage(r4, TronWebProto.Vote.deserializeBinaryFromReader), e3.addVotes(r4);
              break;
            case 6:
              r4 = e3.getAssetMap(), t3.readMessage(r4, function(e4, t4) {
                n2.Map.deserializeBinary(e4, t4, n2.BinaryReader.prototype.readString, n2.BinaryReader.prototype.readInt64, null, "", 0);
              });
              break;
            case 56:
              r4 = e3.getAssetv2Map(), t3.readMessage(r4, function(e4, t4) {
                n2.Map.deserializeBinary(e4, t4, n2.BinaryReader.prototype.readString, n2.BinaryReader.prototype.readInt64, null, "", 0);
              });
              break;
            case 7:
              r4 = new TronWebProto.Account.Frozen(), t3.readMessage(r4, TronWebProto.Account.Frozen.deserializeBinaryFromReader), e3.addFrozen(r4);
              break;
            case 8:
              r4 = t3.readInt64(), e3.setNetUsage(r4);
              break;
            case 41:
              r4 = t3.readInt64(), e3.setAcquiredDelegatedFrozenBalanceForBandwidth(r4);
              break;
            case 42:
              r4 = t3.readInt64(), e3.setDelegatedFrozenBalanceForBandwidth(r4);
              break;
            case 46:
              r4 = t3.readInt64(), e3.setOldTronPower(r4);
              break;
            case 47:
              r4 = new TronWebProto.Account.Frozen(), t3.readMessage(r4, TronWebProto.Account.Frozen.deserializeBinaryFromReader), e3.setTronPower(r4);
              break;
            case 60:
              r4 = t3.readBool(), e3.setAssetOptimized(r4);
              break;
            case 9:
              r4 = t3.readInt64(), e3.setCreateTime(r4);
              break;
            case 10:
              r4 = t3.readInt64(), e3.setLatestOprationTime(r4);
              break;
            case 11:
              r4 = t3.readInt64(), e3.setAllowance(r4);
              break;
            case 12:
              r4 = t3.readInt64(), e3.setLatestWithdrawTime(r4);
              break;
            case 13:
              r4 = t3.readBytes(), e3.setCode(r4);
              break;
            case 14:
              r4 = t3.readBool(), e3.setIsWitness(r4);
              break;
            case 15:
              r4 = t3.readBool(), e3.setIsCommittee(r4);
              break;
            case 16:
              r4 = new TronWebProto.Account.Frozen(), t3.readMessage(r4, TronWebProto.Account.Frozen.deserializeBinaryFromReader), e3.addFrozenSupply(r4);
              break;
            case 17:
              r4 = t3.readBytes(), e3.setAssetIssuedName(r4);
              break;
            case 57:
              r4 = t3.readBytes(), e3.setAssetIssuedId(r4);
              break;
            case 18:
              r4 = e3.getLatestAssetOperationTimeMap(), t3.readMessage(r4, function(e4, t4) {
                n2.Map.deserializeBinary(e4, t4, n2.BinaryReader.prototype.readString, n2.BinaryReader.prototype.readInt64, null, "", 0);
              });
              break;
            case 58:
              r4 = e3.getLatestAssetOperationTimev2Map(), t3.readMessage(r4, function(e4, t4) {
                n2.Map.deserializeBinary(e4, t4, n2.BinaryReader.prototype.readString, n2.BinaryReader.prototype.readInt64, null, "", 0);
              });
              break;
            case 19:
              r4 = t3.readInt64(), e3.setFreeNetUsage(r4);
              break;
            case 20:
              r4 = e3.getFreeAssetNetUsageMap(), t3.readMessage(r4, function(e4, t4) {
                n2.Map.deserializeBinary(e4, t4, n2.BinaryReader.prototype.readString, n2.BinaryReader.prototype.readInt64, null, "", 0);
              });
              break;
            case 59:
              r4 = e3.getFreeAssetNetUsagev2Map(), t3.readMessage(r4, function(e4, t4) {
                n2.Map.deserializeBinary(e4, t4, n2.BinaryReader.prototype.readString, n2.BinaryReader.prototype.readInt64, null, "", 0);
              });
              break;
            case 21:
              r4 = t3.readInt64(), e3.setLatestConsumeTime(r4);
              break;
            case 22:
              r4 = t3.readInt64(), e3.setLatestConsumeFreeTime(r4);
              break;
            case 23:
              r4 = t3.readBytes(), e3.setAccountId(r4);
              break;
            case 26:
              r4 = new TronWebProto.Account.AccountResource(), t3.readMessage(r4, TronWebProto.Account.AccountResource.deserializeBinaryFromReader), e3.setAccountResource(r4);
              break;
            case 30:
              r4 = t3.readBytes(), e3.setCodehash(r4);
              break;
            case 31:
              r4 = new TronWebProto.Permission(), t3.readMessage(r4, TronWebProto.Permission.deserializeBinaryFromReader), e3.setOwnerPermission(r4);
              break;
            case 32:
              r4 = new TronWebProto.Permission(), t3.readMessage(r4, TronWebProto.Permission.deserializeBinaryFromReader), e3.setWitnessPermission(r4);
              break;
            case 33:
              r4 = new TronWebProto.Permission(), t3.readMessage(r4, TronWebProto.Permission.deserializeBinaryFromReader), e3.addActivePermission(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Account.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Account.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Account.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getAccountName_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getType()) && t3.writeEnum(2, r4), (r4 = e3.getAddress_asU8()).length > 0 && t3.writeBytes(3, r4), 0 !== (r4 = e3.getBalance()) && t3.writeInt64(4, r4), (r4 = e3.getVotesList()).length > 0 && t3.writeRepeatedMessage(5, r4, TronWebProto.Vote.serializeBinaryToWriter), (r4 = e3.getAssetMap(true)) && r4.getLength() > 0 && r4.serializeBinary(6, t3, n2.BinaryWriter.prototype.writeString, n2.BinaryWriter.prototype.writeInt64), (r4 = e3.getAssetv2Map(true)) && r4.getLength() > 0 && r4.serializeBinary(56, t3, n2.BinaryWriter.prototype.writeString, n2.BinaryWriter.prototype.writeInt64), (r4 = e3.getFrozenList()).length > 0 && t3.writeRepeatedMessage(7, r4, TronWebProto.Account.Frozen.serializeBinaryToWriter), 0 !== (r4 = e3.getNetUsage()) && t3.writeInt64(8, r4), 0 !== (r4 = e3.getAcquiredDelegatedFrozenBalanceForBandwidth()) && t3.writeInt64(41, r4), 0 !== (r4 = e3.getDelegatedFrozenBalanceForBandwidth()) && t3.writeInt64(42, r4), 0 !== (r4 = e3.getOldTronPower()) && t3.writeInt64(46, r4), null != (r4 = e3.getTronPower()) && t3.writeMessage(47, r4, TronWebProto.Account.Frozen.serializeBinaryToWriter), (r4 = e3.getAssetOptimized()) && t3.writeBool(60, r4), 0 !== (r4 = e3.getCreateTime()) && t3.writeInt64(9, r4), 0 !== (r4 = e3.getLatestOprationTime()) && t3.writeInt64(10, r4), 0 !== (r4 = e3.getAllowance()) && t3.writeInt64(11, r4), 0 !== (r4 = e3.getLatestWithdrawTime()) && t3.writeInt64(12, r4), (r4 = e3.getCode_asU8()).length > 0 && t3.writeBytes(13, r4), (r4 = e3.getIsWitness()) && t3.writeBool(14, r4), (r4 = e3.getIsCommittee()) && t3.writeBool(15, r4), (r4 = e3.getFrozenSupplyList()).length > 0 && t3.writeRepeatedMessage(16, r4, TronWebProto.Account.Frozen.serializeBinaryToWriter), (r4 = e3.getAssetIssuedName_asU8()).length > 0 && t3.writeBytes(17, r4), (r4 = e3.getAssetIssuedId_asU8()).length > 0 && t3.writeBytes(57, r4), (r4 = e3.getLatestAssetOperationTimeMap(true)) && r4.getLength() > 0 && r4.serializeBinary(18, t3, n2.BinaryWriter.prototype.writeString, n2.BinaryWriter.prototype.writeInt64), (r4 = e3.getLatestAssetOperationTimev2Map(true)) && r4.getLength() > 0 && r4.serializeBinary(58, t3, n2.BinaryWriter.prototype.writeString, n2.BinaryWriter.prototype.writeInt64), 0 !== (r4 = e3.getFreeNetUsage()) && t3.writeInt64(19, r4), (r4 = e3.getFreeAssetNetUsageMap(true)) && r4.getLength() > 0 && r4.serializeBinary(20, t3, n2.BinaryWriter.prototype.writeString, n2.BinaryWriter.prototype.writeInt64), (r4 = e3.getFreeAssetNetUsagev2Map(true)) && r4.getLength() > 0 && r4.serializeBinary(59, t3, n2.BinaryWriter.prototype.writeString, n2.BinaryWriter.prototype.writeInt64), 0 !== (r4 = e3.getLatestConsumeTime()) && t3.writeInt64(21, r4), 0 !== (r4 = e3.getLatestConsumeFreeTime()) && t3.writeInt64(22, r4), (r4 = e3.getAccountId_asU8()).length > 0 && t3.writeBytes(23, r4), null != (r4 = e3.getAccountResource()) && t3.writeMessage(26, r4, TronWebProto.Account.AccountResource.serializeBinaryToWriter), (r4 = e3.getCodehash_asU8()).length > 0 && t3.writeBytes(30, r4), null != (r4 = e3.getOwnerPermission()) && t3.writeMessage(31, r4, TronWebProto.Permission.serializeBinaryToWriter), null != (r4 = e3.getWitnessPermission()) && t3.writeMessage(32, r4, TronWebProto.Permission.serializeBinaryToWriter), (r4 = e3.getActivePermissionList()).length > 0 && t3.writeRepeatedMessage(33, r4, TronWebProto.Permission.serializeBinaryToWriter);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Account.Frozen.prototype.toObject = function(e3) {
          return TronWebProto.Account.Frozen.toObject(e3, this);
        }, TronWebProto.Account.Frozen.toObject = function(e3, t3) {
          var r4 = { frozenBalance: n2.Message.getFieldWithDefault(t3, 1, 0), expireTime: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.Account.Frozen.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Account.Frozen();
          return TronWebProto.Account.Frozen.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Account.Frozen.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readInt64();
              e3.setFrozenBalance(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setExpireTime(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Account.Frozen.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Account.Frozen.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Account.Frozen.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getFrozenBalance()) && t3.writeInt64(1, r4), 0 !== (r4 = e3.getExpireTime()) && t3.writeInt64(2, r4);
        }, TronWebProto.Account.Frozen.prototype.getFrozenBalance = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.Account.Frozen.prototype.setFrozenBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 1, e3);
        }, TronWebProto.Account.Frozen.prototype.getExpireTime = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.Account.Frozen.prototype.setExpireTime = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Account.AccountResource.prototype.toObject = function(e3) {
          return TronWebProto.Account.AccountResource.toObject(e3, this);
        }, TronWebProto.Account.AccountResource.toObject = function(e3, t3) {
          var r4, o2 = { energyUsage: n2.Message.getFieldWithDefault(t3, 1, 0), frozenBalanceForEnergy: (r4 = t3.getFrozenBalanceForEnergy()) && TronWebProto.Account.Frozen.toObject(e3, r4), latestConsumeTimeForEnergy: n2.Message.getFieldWithDefault(t3, 3, 0), acquiredDelegatedFrozenBalanceForEnergy: n2.Message.getFieldWithDefault(t3, 4, 0), delegatedFrozenBalanceForEnergy: n2.Message.getFieldWithDefault(t3, 5, 0), storageLimit: n2.Message.getFieldWithDefault(t3, 6, 0), storageUsage: n2.Message.getFieldWithDefault(t3, 7, 0), latestExchangeStorageTime: n2.Message.getFieldWithDefault(t3, 8, 0) };
          return e3 && (o2.$jspbMessageInstance = t3), o2;
        }), TronWebProto.Account.AccountResource.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Account.AccountResource();
          return TronWebProto.Account.AccountResource.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Account.AccountResource.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readInt64();
              e3.setEnergyUsage(r4);
              break;
            case 2:
              r4 = new TronWebProto.Account.Frozen(), t3.readMessage(r4, TronWebProto.Account.Frozen.deserializeBinaryFromReader), e3.setFrozenBalanceForEnergy(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setLatestConsumeTimeForEnergy(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setAcquiredDelegatedFrozenBalanceForEnergy(r4);
              break;
            case 5:
              r4 = t3.readInt64(), e3.setDelegatedFrozenBalanceForEnergy(r4);
              break;
            case 6:
              r4 = t3.readInt64(), e3.setStorageLimit(r4);
              break;
            case 7:
              r4 = t3.readInt64(), e3.setStorageUsage(r4);
              break;
            case 8:
              r4 = t3.readInt64(), e3.setLatestExchangeStorageTime(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Account.AccountResource.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Account.AccountResource.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Account.AccountResource.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getEnergyUsage()) && t3.writeInt64(1, r4), null != (r4 = e3.getFrozenBalanceForEnergy()) && t3.writeMessage(2, r4, TronWebProto.Account.Frozen.serializeBinaryToWriter), 0 !== (r4 = e3.getLatestConsumeTimeForEnergy()) && t3.writeInt64(3, r4), 0 !== (r4 = e3.getAcquiredDelegatedFrozenBalanceForEnergy()) && t3.writeInt64(4, r4), 0 !== (r4 = e3.getDelegatedFrozenBalanceForEnergy()) && t3.writeInt64(5, r4), 0 !== (r4 = e3.getStorageLimit()) && t3.writeInt64(6, r4), 0 !== (r4 = e3.getStorageUsage()) && t3.writeInt64(7, r4), 0 !== (r4 = e3.getLatestExchangeStorageTime()) && t3.writeInt64(8, r4);
        }, TronWebProto.Account.AccountResource.prototype.getEnergyUsage = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.Account.AccountResource.prototype.setEnergyUsage = function(e3) {
          return n2.Message.setProto3IntField(this, 1, e3);
        }, TronWebProto.Account.AccountResource.prototype.getFrozenBalanceForEnergy = function() {
          return n2.Message.getWrapperField(this, TronWebProto.Account.Frozen, 2);
        }, TronWebProto.Account.AccountResource.prototype.setFrozenBalanceForEnergy = function(e3) {
          return n2.Message.setWrapperField(this, 2, e3);
        }, TronWebProto.Account.AccountResource.prototype.clearFrozenBalanceForEnergy = function() {
          return this.setFrozenBalanceForEnergy(void 0);
        }, TronWebProto.Account.AccountResource.prototype.hasFrozenBalanceForEnergy = function() {
          return null != n2.Message.getField(this, 2);
        }, TronWebProto.Account.AccountResource.prototype.getLatestConsumeTimeForEnergy = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.Account.AccountResource.prototype.setLatestConsumeTimeForEnergy = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.Account.AccountResource.prototype.getAcquiredDelegatedFrozenBalanceForEnergy = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.Account.AccountResource.prototype.setAcquiredDelegatedFrozenBalanceForEnergy = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, TronWebProto.Account.AccountResource.prototype.getDelegatedFrozenBalanceForEnergy = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.Account.AccountResource.prototype.setDelegatedFrozenBalanceForEnergy = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, TronWebProto.Account.AccountResource.prototype.getStorageLimit = function() {
          return n2.Message.getFieldWithDefault(this, 6, 0);
        }, TronWebProto.Account.AccountResource.prototype.setStorageLimit = function(e3) {
          return n2.Message.setProto3IntField(this, 6, e3);
        }, TronWebProto.Account.AccountResource.prototype.getStorageUsage = function() {
          return n2.Message.getFieldWithDefault(this, 7, 0);
        }, TronWebProto.Account.AccountResource.prototype.setStorageUsage = function(e3) {
          return n2.Message.setProto3IntField(this, 7, e3);
        }, TronWebProto.Account.AccountResource.prototype.getLatestExchangeStorageTime = function() {
          return n2.Message.getFieldWithDefault(this, 8, 0);
        }, TronWebProto.Account.AccountResource.prototype.setLatestExchangeStorageTime = function(e3) {
          return n2.Message.setProto3IntField(this, 8, e3);
        }, TronWebProto.Account.prototype.getAccountName = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.Account.prototype.getAccountName_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAccountName());
        }, TronWebProto.Account.prototype.getAccountName_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAccountName());
        }, TronWebProto.Account.prototype.setAccountName = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.Account.prototype.getType = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.Account.prototype.setType = function(e3) {
          return n2.Message.setProto3EnumField(this, 2, e3);
        }, TronWebProto.Account.prototype.getAddress = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.Account.prototype.getAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAddress());
        }, TronWebProto.Account.prototype.getAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAddress());
        }, TronWebProto.Account.prototype.setAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 3, e3);
        }, TronWebProto.Account.prototype.getBalance = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.Account.prototype.setBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, TronWebProto.Account.prototype.getVotesList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.Vote, 5);
        }, TronWebProto.Account.prototype.setVotesList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 5, e3);
        }, TronWebProto.Account.prototype.addVotes = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 5, e3, TronWebProto.Vote, t3);
        }, TronWebProto.Account.prototype.clearVotesList = function() {
          return this.setVotesList([]);
        }, TronWebProto.Account.prototype.getAssetMap = function(e3) {
          return n2.Message.getMapField(this, 6, e3, null);
        }, TronWebProto.Account.prototype.clearAssetMap = function() {
          return this.getAssetMap().clear(), this;
        }, TronWebProto.Account.prototype.getAssetv2Map = function(e3) {
          return n2.Message.getMapField(this, 56, e3, null);
        }, TronWebProto.Account.prototype.clearAssetv2Map = function() {
          return this.getAssetv2Map().clear(), this;
        }, TronWebProto.Account.prototype.getFrozenList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.Account.Frozen, 7);
        }, TronWebProto.Account.prototype.setFrozenList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 7, e3);
        }, TronWebProto.Account.prototype.addFrozen = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 7, e3, TronWebProto.Account.Frozen, t3);
        }, TronWebProto.Account.prototype.clearFrozenList = function() {
          return this.setFrozenList([]);
        }, TronWebProto.Account.prototype.getNetUsage = function() {
          return n2.Message.getFieldWithDefault(this, 8, 0);
        }, TronWebProto.Account.prototype.setNetUsage = function(e3) {
          return n2.Message.setProto3IntField(this, 8, e3);
        }, TronWebProto.Account.prototype.getAcquiredDelegatedFrozenBalanceForBandwidth = function() {
          return n2.Message.getFieldWithDefault(this, 41, 0);
        }, TronWebProto.Account.prototype.setAcquiredDelegatedFrozenBalanceForBandwidth = function(e3) {
          return n2.Message.setProto3IntField(this, 41, e3);
        }, TronWebProto.Account.prototype.getDelegatedFrozenBalanceForBandwidth = function() {
          return n2.Message.getFieldWithDefault(this, 42, 0);
        }, TronWebProto.Account.prototype.setDelegatedFrozenBalanceForBandwidth = function(e3) {
          return n2.Message.setProto3IntField(this, 42, e3);
        }, TronWebProto.Account.prototype.getOldTronPower = function() {
          return n2.Message.getFieldWithDefault(this, 46, 0);
        }, TronWebProto.Account.prototype.setOldTronPower = function(e3) {
          return n2.Message.setProto3IntField(this, 46, e3);
        }, TronWebProto.Account.prototype.getTronPower = function() {
          return n2.Message.getWrapperField(this, TronWebProto.Account.Frozen, 47);
        }, TronWebProto.Account.prototype.setTronPower = function(e3) {
          return n2.Message.setWrapperField(this, 47, e3);
        }, TronWebProto.Account.prototype.clearTronPower = function() {
          return this.setTronPower(void 0);
        }, TronWebProto.Account.prototype.hasTronPower = function() {
          return null != n2.Message.getField(this, 47);
        }, TronWebProto.Account.prototype.getAssetOptimized = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 60, false);
        }, TronWebProto.Account.prototype.setAssetOptimized = function(e3) {
          return n2.Message.setProto3BooleanField(this, 60, e3);
        }, TronWebProto.Account.prototype.getCreateTime = function() {
          return n2.Message.getFieldWithDefault(this, 9, 0);
        }, TronWebProto.Account.prototype.setCreateTime = function(e3) {
          return n2.Message.setProto3IntField(this, 9, e3);
        }, TronWebProto.Account.prototype.getLatestOprationTime = function() {
          return n2.Message.getFieldWithDefault(this, 10, 0);
        }, TronWebProto.Account.prototype.setLatestOprationTime = function(e3) {
          return n2.Message.setProto3IntField(this, 10, e3);
        }, TronWebProto.Account.prototype.getAllowance = function() {
          return n2.Message.getFieldWithDefault(this, 11, 0);
        }, TronWebProto.Account.prototype.setAllowance = function(e3) {
          return n2.Message.setProto3IntField(this, 11, e3);
        }, TronWebProto.Account.prototype.getLatestWithdrawTime = function() {
          return n2.Message.getFieldWithDefault(this, 12, 0);
        }, TronWebProto.Account.prototype.setLatestWithdrawTime = function(e3) {
          return n2.Message.setProto3IntField(this, 12, e3);
        }, TronWebProto.Account.prototype.getCode = function() {
          return n2.Message.getFieldWithDefault(this, 13, "");
        }, TronWebProto.Account.prototype.getCode_asB64 = function() {
          return n2.Message.bytesAsB64(this.getCode());
        }, TronWebProto.Account.prototype.getCode_asU8 = function() {
          return n2.Message.bytesAsU8(this.getCode());
        }, TronWebProto.Account.prototype.setCode = function(e3) {
          return n2.Message.setProto3BytesField(this, 13, e3);
        }, TronWebProto.Account.prototype.getIsWitness = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 14, false);
        }, TronWebProto.Account.prototype.setIsWitness = function(e3) {
          return n2.Message.setProto3BooleanField(this, 14, e3);
        }, TronWebProto.Account.prototype.getIsCommittee = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 15, false);
        }, TronWebProto.Account.prototype.setIsCommittee = function(e3) {
          return n2.Message.setProto3BooleanField(this, 15, e3);
        }, TronWebProto.Account.prototype.getFrozenSupplyList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.Account.Frozen, 16);
        }, TronWebProto.Account.prototype.setFrozenSupplyList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 16, e3);
        }, TronWebProto.Account.prototype.addFrozenSupply = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 16, e3, TronWebProto.Account.Frozen, t3);
        }, TronWebProto.Account.prototype.clearFrozenSupplyList = function() {
          return this.setFrozenSupplyList([]);
        }, TronWebProto.Account.prototype.getAssetIssuedName = function() {
          return n2.Message.getFieldWithDefault(this, 17, "");
        }, TronWebProto.Account.prototype.getAssetIssuedName_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAssetIssuedName());
        }, TronWebProto.Account.prototype.getAssetIssuedName_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAssetIssuedName());
        }, TronWebProto.Account.prototype.setAssetIssuedName = function(e3) {
          return n2.Message.setProto3BytesField(this, 17, e3);
        }, TronWebProto.Account.prototype.getAssetIssuedId = function() {
          return n2.Message.getFieldWithDefault(this, 57, "");
        }, TronWebProto.Account.prototype.getAssetIssuedId_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAssetIssuedId());
        }, TronWebProto.Account.prototype.getAssetIssuedId_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAssetIssuedId());
        }, TronWebProto.Account.prototype.setAssetIssuedId = function(e3) {
          return n2.Message.setProto3BytesField(this, 57, e3);
        }, TronWebProto.Account.prototype.getLatestAssetOperationTimeMap = function(e3) {
          return n2.Message.getMapField(this, 18, e3, null);
        }, TronWebProto.Account.prototype.clearLatestAssetOperationTimeMap = function() {
          return this.getLatestAssetOperationTimeMap().clear(), this;
        }, TronWebProto.Account.prototype.getLatestAssetOperationTimev2Map = function(e3) {
          return n2.Message.getMapField(this, 58, e3, null);
        }, TronWebProto.Account.prototype.clearLatestAssetOperationTimev2Map = function() {
          return this.getLatestAssetOperationTimev2Map().clear(), this;
        }, TronWebProto.Account.prototype.getFreeNetUsage = function() {
          return n2.Message.getFieldWithDefault(this, 19, 0);
        }, TronWebProto.Account.prototype.setFreeNetUsage = function(e3) {
          return n2.Message.setProto3IntField(this, 19, e3);
        }, TronWebProto.Account.prototype.getFreeAssetNetUsageMap = function(e3) {
          return n2.Message.getMapField(this, 20, e3, null);
        }, TronWebProto.Account.prototype.clearFreeAssetNetUsageMap = function() {
          return this.getFreeAssetNetUsageMap().clear(), this;
        }, TronWebProto.Account.prototype.getFreeAssetNetUsagev2Map = function(e3) {
          return n2.Message.getMapField(this, 59, e3, null);
        }, TronWebProto.Account.prototype.clearFreeAssetNetUsagev2Map = function() {
          return this.getFreeAssetNetUsagev2Map().clear(), this;
        }, TronWebProto.Account.prototype.getLatestConsumeTime = function() {
          return n2.Message.getFieldWithDefault(this, 21, 0);
        }, TronWebProto.Account.prototype.setLatestConsumeTime = function(e3) {
          return n2.Message.setProto3IntField(this, 21, e3);
        }, TronWebProto.Account.prototype.getLatestConsumeFreeTime = function() {
          return n2.Message.getFieldWithDefault(this, 22, 0);
        }, TronWebProto.Account.prototype.setLatestConsumeFreeTime = function(e3) {
          return n2.Message.setProto3IntField(this, 22, e3);
        }, TronWebProto.Account.prototype.getAccountId = function() {
          return n2.Message.getFieldWithDefault(this, 23, "");
        }, TronWebProto.Account.prototype.getAccountId_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAccountId());
        }, TronWebProto.Account.prototype.getAccountId_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAccountId());
        }, TronWebProto.Account.prototype.setAccountId = function(e3) {
          return n2.Message.setProto3BytesField(this, 23, e3);
        }, TronWebProto.Account.prototype.getAccountResource = function() {
          return n2.Message.getWrapperField(this, TronWebProto.Account.AccountResource, 26);
        }, TronWebProto.Account.prototype.setAccountResource = function(e3) {
          return n2.Message.setWrapperField(this, 26, e3);
        }, TronWebProto.Account.prototype.clearAccountResource = function() {
          return this.setAccountResource(void 0);
        }, TronWebProto.Account.prototype.hasAccountResource = function() {
          return null != n2.Message.getField(this, 26);
        }, TronWebProto.Account.prototype.getCodehash = function() {
          return n2.Message.getFieldWithDefault(this, 30, "");
        }, TronWebProto.Account.prototype.getCodehash_asB64 = function() {
          return n2.Message.bytesAsB64(this.getCodehash());
        }, TronWebProto.Account.prototype.getCodehash_asU8 = function() {
          return n2.Message.bytesAsU8(this.getCodehash());
        }, TronWebProto.Account.prototype.setCodehash = function(e3) {
          return n2.Message.setProto3BytesField(this, 30, e3);
        }, TronWebProto.Account.prototype.getOwnerPermission = function() {
          return n2.Message.getWrapperField(this, TronWebProto.Permission, 31);
        }, TronWebProto.Account.prototype.setOwnerPermission = function(e3) {
          return n2.Message.setWrapperField(this, 31, e3);
        }, TronWebProto.Account.prototype.clearOwnerPermission = function() {
          return this.setOwnerPermission(void 0);
        }, TronWebProto.Account.prototype.hasOwnerPermission = function() {
          return null != n2.Message.getField(this, 31);
        }, TronWebProto.Account.prototype.getWitnessPermission = function() {
          return n2.Message.getWrapperField(this, TronWebProto.Permission, 32);
        }, TronWebProto.Account.prototype.setWitnessPermission = function(e3) {
          return n2.Message.setWrapperField(this, 32, e3);
        }, TronWebProto.Account.prototype.clearWitnessPermission = function() {
          return this.setWitnessPermission(void 0);
        }, TronWebProto.Account.prototype.hasWitnessPermission = function() {
          return null != n2.Message.getField(this, 32);
        }, TronWebProto.Account.prototype.getActivePermissionList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.Permission, 33);
        }, TronWebProto.Account.prototype.setActivePermissionList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 33, e3);
        }, TronWebProto.Account.prototype.addActivePermission = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 33, e3, TronWebProto.Permission, t3);
        }, TronWebProto.Account.prototype.clearActivePermissionList = function() {
          return this.setActivePermissionList([]);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Key.prototype.toObject = function(e3) {
          return TronWebProto.Key.toObject(e3, this);
        }, TronWebProto.Key.toObject = function(e3, t3) {
          var r4 = { address: t3.getAddress_asB64(), weight: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.Key.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Key();
          return TronWebProto.Key.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Key.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setWeight(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Key.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Key.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Key.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getWeight()) && t3.writeInt64(2, r4);
        }, TronWebProto.Key.prototype.getAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.Key.prototype.getAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAddress());
        }, TronWebProto.Key.prototype.getAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAddress());
        }, TronWebProto.Key.prototype.setAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.Key.prototype.getWeight = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.Key.prototype.setWeight = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.DelegatedResource.prototype.toObject = function(e3) {
          return TronWebProto.DelegatedResource.toObject(e3, this);
        }, TronWebProto.DelegatedResource.toObject = function(e3, t3) {
          var r4 = { from: t3.getFrom_asB64(), to: t3.getTo_asB64(), frozenBalanceForBandwidth: n2.Message.getFieldWithDefault(t3, 3, 0), frozenBalanceForEnergy: n2.Message.getFieldWithDefault(t3, 4, 0), expireTimeForBandwidth: n2.Message.getFieldWithDefault(t3, 5, 0), expireTimeForEnergy: n2.Message.getFieldWithDefault(t3, 6, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.DelegatedResource.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.DelegatedResource();
          return TronWebProto.DelegatedResource.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.DelegatedResource.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setFrom(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setTo(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setFrozenBalanceForBandwidth(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setFrozenBalanceForEnergy(r4);
              break;
            case 5:
              r4 = t3.readInt64(), e3.setExpireTimeForBandwidth(r4);
              break;
            case 6:
              r4 = t3.readInt64(), e3.setExpireTimeForEnergy(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.DelegatedResource.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.DelegatedResource.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.DelegatedResource.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getFrom_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getTo_asU8()).length > 0 && t3.writeBytes(2, r4), 0 !== (r4 = e3.getFrozenBalanceForBandwidth()) && t3.writeInt64(3, r4), 0 !== (r4 = e3.getFrozenBalanceForEnergy()) && t3.writeInt64(4, r4), 0 !== (r4 = e3.getExpireTimeForBandwidth()) && t3.writeInt64(5, r4), 0 !== (r4 = e3.getExpireTimeForEnergy()) && t3.writeInt64(6, r4);
        }, TronWebProto.DelegatedResource.prototype.getFrom = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.DelegatedResource.prototype.getFrom_asB64 = function() {
          return n2.Message.bytesAsB64(this.getFrom());
        }, TronWebProto.DelegatedResource.prototype.getFrom_asU8 = function() {
          return n2.Message.bytesAsU8(this.getFrom());
        }, TronWebProto.DelegatedResource.prototype.setFrom = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.DelegatedResource.prototype.getTo = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.DelegatedResource.prototype.getTo_asB64 = function() {
          return n2.Message.bytesAsB64(this.getTo());
        }, TronWebProto.DelegatedResource.prototype.getTo_asU8 = function() {
          return n2.Message.bytesAsU8(this.getTo());
        }, TronWebProto.DelegatedResource.prototype.setTo = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.DelegatedResource.prototype.getFrozenBalanceForBandwidth = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.DelegatedResource.prototype.setFrozenBalanceForBandwidth = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.DelegatedResource.prototype.getFrozenBalanceForEnergy = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.DelegatedResource.prototype.setFrozenBalanceForEnergy = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, TronWebProto.DelegatedResource.prototype.getExpireTimeForBandwidth = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.DelegatedResource.prototype.setExpireTimeForBandwidth = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, TronWebProto.DelegatedResource.prototype.getExpireTimeForEnergy = function() {
          return n2.Message.getFieldWithDefault(this, 6, 0);
        }, TronWebProto.DelegatedResource.prototype.setExpireTimeForEnergy = function(e3) {
          return n2.Message.setProto3IntField(this, 6, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.authority.prototype.toObject = function(e3) {
          return TronWebProto.authority.toObject(e3, this);
        }, TronWebProto.authority.toObject = function(e3, t3) {
          var r4, n3 = { account: (r4 = t3.getAccount()) && TronWebProto.AccountId.toObject(e3, r4), permissionName: t3.getPermissionName_asB64() };
          return e3 && (n3.$jspbMessageInstance = t3), n3;
        }), TronWebProto.authority.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.authority();
          return TronWebProto.authority.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.authority.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = new TronWebProto.AccountId();
              t3.readMessage(r4, TronWebProto.AccountId.deserializeBinaryFromReader), e3.setAccount(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setPermissionName(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.authority.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.authority.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.authority.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          null != (r4 = e3.getAccount()) && t3.writeMessage(1, r4, TronWebProto.AccountId.serializeBinaryToWriter), (r4 = e3.getPermissionName_asU8()).length > 0 && t3.writeBytes(2, r4);
        }, TronWebProto.authority.prototype.getAccount = function() {
          return n2.Message.getWrapperField(this, TronWebProto.AccountId, 1);
        }, TronWebProto.authority.prototype.setAccount = function(e3) {
          return n2.Message.setWrapperField(this, 1, e3);
        }, TronWebProto.authority.prototype.clearAccount = function() {
          return this.setAccount(void 0);
        }, TronWebProto.authority.prototype.hasAccount = function() {
          return null != n2.Message.getField(this, 1);
        }, TronWebProto.authority.prototype.getPermissionName = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.authority.prototype.getPermissionName_asB64 = function() {
          return n2.Message.bytesAsB64(this.getPermissionName());
        }, TronWebProto.authority.prototype.getPermissionName_asU8 = function() {
          return n2.Message.bytesAsU8(this.getPermissionName());
        }, TronWebProto.authority.prototype.setPermissionName = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.Permission.repeatedFields_ = [7], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Permission.prototype.toObject = function(e3) {
          return TronWebProto.Permission.toObject(e3, this);
        }, TronWebProto.Permission.toObject = function(e3, t3) {
          var r4 = { type: n2.Message.getFieldWithDefault(t3, 1, 0), id: n2.Message.getFieldWithDefault(t3, 2, 0), permissionName: n2.Message.getFieldWithDefault(t3, 3, ""), threshold: n2.Message.getFieldWithDefault(t3, 4, 0), parentId: n2.Message.getFieldWithDefault(t3, 5, 0), operations: t3.getOperations_asB64(), keysList: n2.Message.toObjectList(t3.getKeysList(), TronWebProto.Key.toObject, e3) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.Permission.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Permission();
          return TronWebProto.Permission.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Permission.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readEnum();
              e3.setType(r4);
              break;
            case 2:
              r4 = t3.readInt32(), e3.setId(r4);
              break;
            case 3:
              r4 = t3.readString(), e3.setPermissionName(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setThreshold(r4);
              break;
            case 5:
              r4 = t3.readInt32(), e3.setParentId(r4);
              break;
            case 6:
              r4 = t3.readBytes(), e3.setOperations(r4);
              break;
            case 7:
              r4 = new TronWebProto.Key(), t3.readMessage(r4, TronWebProto.Key.deserializeBinaryFromReader), e3.addKeys(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Permission.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Permission.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Permission.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getType()) && t3.writeEnum(1, r4), 0 !== (r4 = e3.getId()) && t3.writeInt32(2, r4), (r4 = e3.getPermissionName()).length > 0 && t3.writeString(3, r4), 0 !== (r4 = e3.getThreshold()) && t3.writeInt64(4, r4), 0 !== (r4 = e3.getParentId()) && t3.writeInt32(5, r4), (r4 = e3.getOperations_asU8()).length > 0 && t3.writeBytes(6, r4), (r4 = e3.getKeysList()).length > 0 && t3.writeRepeatedMessage(7, r4, TronWebProto.Key.serializeBinaryToWriter);
        }, TronWebProto.Permission.PermissionType = { OWNER: 0, WITNESS: 1, ACTIVE: 2 }, TronWebProto.Permission.prototype.getType = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.Permission.prototype.setType = function(e3) {
          return n2.Message.setProto3EnumField(this, 1, e3);
        }, TronWebProto.Permission.prototype.getId = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.Permission.prototype.setId = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.Permission.prototype.getPermissionName = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.Permission.prototype.setPermissionName = function(e3) {
          return n2.Message.setProto3StringField(this, 3, e3);
        }, TronWebProto.Permission.prototype.getThreshold = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.Permission.prototype.setThreshold = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, TronWebProto.Permission.prototype.getParentId = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.Permission.prototype.setParentId = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, TronWebProto.Permission.prototype.getOperations = function() {
          return n2.Message.getFieldWithDefault(this, 6, "");
        }, TronWebProto.Permission.prototype.getOperations_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOperations());
        }, TronWebProto.Permission.prototype.getOperations_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOperations());
        }, TronWebProto.Permission.prototype.setOperations = function(e3) {
          return n2.Message.setProto3BytesField(this, 6, e3);
        }, TronWebProto.Permission.prototype.getKeysList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.Key, 7);
        }, TronWebProto.Permission.prototype.setKeysList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 7, e3);
        }, TronWebProto.Permission.prototype.addKeys = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 7, e3, TronWebProto.Key, t3);
        }, TronWebProto.Permission.prototype.clearKeysList = function() {
          return this.setKeysList([]);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Witness.prototype.toObject = function(e3) {
          return TronWebProto.Witness.toObject(e3, this);
        }, TronWebProto.Witness.toObject = function(e3, t3) {
          var r4 = { address: t3.getAddress_asB64(), votecount: n2.Message.getFieldWithDefault(t3, 2, 0), pubkey: t3.getPubkey_asB64(), url: n2.Message.getFieldWithDefault(t3, 4, ""), totalproduced: n2.Message.getFieldWithDefault(t3, 5, 0), totalmissed: n2.Message.getFieldWithDefault(t3, 6, 0), latestblocknum: n2.Message.getFieldWithDefault(t3, 7, 0), latestslotnum: n2.Message.getFieldWithDefault(t3, 8, 0), isjobs: n2.Message.getBooleanFieldWithDefault(t3, 9, false) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.Witness.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Witness();
          return TronWebProto.Witness.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Witness.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setVotecount(r4);
              break;
            case 3:
              r4 = t3.readBytes(), e3.setPubkey(r4);
              break;
            case 4:
              r4 = t3.readString(), e3.setUrl(r4);
              break;
            case 5:
              r4 = t3.readInt64(), e3.setTotalproduced(r4);
              break;
            case 6:
              r4 = t3.readInt64(), e3.setTotalmissed(r4);
              break;
            case 7:
              r4 = t3.readInt64(), e3.setLatestblocknum(r4);
              break;
            case 8:
              r4 = t3.readInt64(), e3.setLatestslotnum(r4);
              break;
            case 9:
              r4 = t3.readBool(), e3.setIsjobs(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Witness.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Witness.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Witness.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getVotecount()) && t3.writeInt64(2, r4), (r4 = e3.getPubkey_asU8()).length > 0 && t3.writeBytes(3, r4), (r4 = e3.getUrl()).length > 0 && t3.writeString(4, r4), 0 !== (r4 = e3.getTotalproduced()) && t3.writeInt64(5, r4), 0 !== (r4 = e3.getTotalmissed()) && t3.writeInt64(6, r4), 0 !== (r4 = e3.getLatestblocknum()) && t3.writeInt64(7, r4), 0 !== (r4 = e3.getLatestslotnum()) && t3.writeInt64(8, r4), (r4 = e3.getIsjobs()) && t3.writeBool(9, r4);
        }, TronWebProto.Witness.prototype.getAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.Witness.prototype.getAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAddress());
        }, TronWebProto.Witness.prototype.getAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAddress());
        }, TronWebProto.Witness.prototype.setAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.Witness.prototype.getVotecount = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.Witness.prototype.setVotecount = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.Witness.prototype.getPubkey = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.Witness.prototype.getPubkey_asB64 = function() {
          return n2.Message.bytesAsB64(this.getPubkey());
        }, TronWebProto.Witness.prototype.getPubkey_asU8 = function() {
          return n2.Message.bytesAsU8(this.getPubkey());
        }, TronWebProto.Witness.prototype.setPubkey = function(e3) {
          return n2.Message.setProto3BytesField(this, 3, e3);
        }, TronWebProto.Witness.prototype.getUrl = function() {
          return n2.Message.getFieldWithDefault(this, 4, "");
        }, TronWebProto.Witness.prototype.setUrl = function(e3) {
          return n2.Message.setProto3StringField(this, 4, e3);
        }, TronWebProto.Witness.prototype.getTotalproduced = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.Witness.prototype.setTotalproduced = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, TronWebProto.Witness.prototype.getTotalmissed = function() {
          return n2.Message.getFieldWithDefault(this, 6, 0);
        }, TronWebProto.Witness.prototype.setTotalmissed = function(e3) {
          return n2.Message.setProto3IntField(this, 6, e3);
        }, TronWebProto.Witness.prototype.getLatestblocknum = function() {
          return n2.Message.getFieldWithDefault(this, 7, 0);
        }, TronWebProto.Witness.prototype.setLatestblocknum = function(e3) {
          return n2.Message.setProto3IntField(this, 7, e3);
        }, TronWebProto.Witness.prototype.getLatestslotnum = function() {
          return n2.Message.getFieldWithDefault(this, 8, 0);
        }, TronWebProto.Witness.prototype.setLatestslotnum = function(e3) {
          return n2.Message.setProto3IntField(this, 8, e3);
        }, TronWebProto.Witness.prototype.getIsjobs = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 9, false);
        }, TronWebProto.Witness.prototype.setIsjobs = function(e3) {
          return n2.Message.setProto3BooleanField(this, 9, e3);
        }, TronWebProto.Votes.repeatedFields_ = [2, 3], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Votes.prototype.toObject = function(e3) {
          return TronWebProto.Votes.toObject(e3, this);
        }, TronWebProto.Votes.toObject = function(e3, t3) {
          var r4 = { address: t3.getAddress_asB64(), oldVotesList: n2.Message.toObjectList(t3.getOldVotesList(), TronWebProto.Vote.toObject, e3), newVotesList: n2.Message.toObjectList(t3.getNewVotesList(), TronWebProto.Vote.toObject, e3) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.Votes.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Votes();
          return TronWebProto.Votes.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Votes.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setAddress(r4);
              break;
            case 2:
              r4 = new TronWebProto.Vote(), t3.readMessage(r4, TronWebProto.Vote.deserializeBinaryFromReader), e3.addOldVotes(r4);
              break;
            case 3:
              r4 = new TronWebProto.Vote(), t3.readMessage(r4, TronWebProto.Vote.deserializeBinaryFromReader), e3.addNewVotes(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Votes.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Votes.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Votes.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getOldVotesList()).length > 0 && t3.writeRepeatedMessage(2, r4, TronWebProto.Vote.serializeBinaryToWriter), (r4 = e3.getNewVotesList()).length > 0 && t3.writeRepeatedMessage(3, r4, TronWebProto.Vote.serializeBinaryToWriter);
        }, TronWebProto.Votes.prototype.getAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.Votes.prototype.getAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAddress());
        }, TronWebProto.Votes.prototype.getAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAddress());
        }, TronWebProto.Votes.prototype.setAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.Votes.prototype.getOldVotesList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.Vote, 2);
        }, TronWebProto.Votes.prototype.setOldVotesList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 2, e3);
        }, TronWebProto.Votes.prototype.addOldVotes = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 2, e3, TronWebProto.Vote, t3);
        }, TronWebProto.Votes.prototype.clearOldVotesList = function() {
          return this.setOldVotesList([]);
        }, TronWebProto.Votes.prototype.getNewVotesList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.Vote, 3);
        }, TronWebProto.Votes.prototype.setNewVotesList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 3, e3);
        }, TronWebProto.Votes.prototype.addNewVotes = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 3, e3, TronWebProto.Vote, t3);
        }, TronWebProto.Votes.prototype.clearNewVotesList = function() {
          return this.setNewVotesList([]);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.MarketOrderDetail.prototype.toObject = function(e3) {
          return TronWebProto.MarketOrderDetail.toObject(e3, this);
        }, TronWebProto.MarketOrderDetail.toObject = function(e3, t3) {
          var r4 = { makerorderid: t3.getMakerorderid_asB64(), takerorderid: t3.getTakerorderid_asB64(), fillsellquantity: n2.Message.getFieldWithDefault(t3, 3, 0), fillbuyquantity: n2.Message.getFieldWithDefault(t3, 4, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.MarketOrderDetail.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.MarketOrderDetail();
          return TronWebProto.MarketOrderDetail.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.MarketOrderDetail.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setMakerorderid(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setTakerorderid(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setFillsellquantity(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setFillbuyquantity(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.MarketOrderDetail.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.MarketOrderDetail.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.MarketOrderDetail.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getMakerorderid_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getTakerorderid_asU8()).length > 0 && t3.writeBytes(2, r4), 0 !== (r4 = e3.getFillsellquantity()) && t3.writeInt64(3, r4), 0 !== (r4 = e3.getFillbuyquantity()) && t3.writeInt64(4, r4);
        }, TronWebProto.MarketOrderDetail.prototype.getMakerorderid = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.MarketOrderDetail.prototype.getMakerorderid_asB64 = function() {
          return n2.Message.bytesAsB64(this.getMakerorderid());
        }, TronWebProto.MarketOrderDetail.prototype.getMakerorderid_asU8 = function() {
          return n2.Message.bytesAsU8(this.getMakerorderid());
        }, TronWebProto.MarketOrderDetail.prototype.setMakerorderid = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.MarketOrderDetail.prototype.getTakerorderid = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.MarketOrderDetail.prototype.getTakerorderid_asB64 = function() {
          return n2.Message.bytesAsB64(this.getTakerorderid());
        }, TronWebProto.MarketOrderDetail.prototype.getTakerorderid_asU8 = function() {
          return n2.Message.bytesAsU8(this.getTakerorderid());
        }, TronWebProto.MarketOrderDetail.prototype.setTakerorderid = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.MarketOrderDetail.prototype.getFillsellquantity = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.MarketOrderDetail.prototype.setFillsellquantity = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.MarketOrderDetail.prototype.getFillbuyquantity = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.MarketOrderDetail.prototype.setFillbuyquantity = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, TronWebProto.Transaction.repeatedFields_ = [2, 5], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Transaction.prototype.toObject = function(e3) {
          return TronWebProto.Transaction.toObject(e3, this);
        }, TronWebProto.Transaction.toObject = function(e3, t3) {
          var r4, o2 = { rawData: (r4 = t3.getRawData()) && TronWebProto.Transaction.raw.toObject(e3, r4), signatureList: t3.getSignatureList_asB64(), retList: n2.Message.toObjectList(t3.getRetList(), TronWebProto.Transaction.Result.toObject, e3) };
          return e3 && (o2.$jspbMessageInstance = t3), o2;
        }), TronWebProto.Transaction.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Transaction();
          return TronWebProto.Transaction.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Transaction.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = new TronWebProto.Transaction.raw();
              t3.readMessage(r4, TronWebProto.Transaction.raw.deserializeBinaryFromReader), e3.setRawData(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.addSignature(r4);
              break;
            case 5:
              r4 = new TronWebProto.Transaction.Result(), t3.readMessage(r4, TronWebProto.Transaction.Result.deserializeBinaryFromReader), e3.addRet(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Transaction.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Transaction.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Transaction.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          null != (r4 = e3.getRawData()) && t3.writeMessage(1, r4, TronWebProto.Transaction.raw.serializeBinaryToWriter), (r4 = e3.getSignatureList_asU8()).length > 0 && t3.writeRepeatedBytes(2, r4), (r4 = e3.getRetList()).length > 0 && t3.writeRepeatedMessage(5, r4, TronWebProto.Transaction.Result.serializeBinaryToWriter);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Transaction.Contract.prototype.toObject = function(e3) {
          return TronWebProto.Transaction.Contract.toObject(e3, this);
        }, TronWebProto.Transaction.Contract.toObject = function(e3, t3) {
          var r4, o2 = { type: n2.Message.getFieldWithDefault(t3, 1, 0), parameter: (r4 = t3.getParameter()) && i.Any.toObject(e3, r4), provider: t3.getProvider_asB64(), contractname: t3.getContractname_asB64(), permissionId: n2.Message.getFieldWithDefault(t3, 5, 0) };
          return e3 && (o2.$jspbMessageInstance = t3), o2;
        }), TronWebProto.Transaction.Contract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Transaction.Contract();
          return TronWebProto.Transaction.Contract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Transaction.Contract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readEnum();
              e3.setType(r4);
              break;
            case 2:
              r4 = new i.Any(), t3.readMessage(r4, i.Any.deserializeBinaryFromReader), e3.setParameter(r4);
              break;
            case 3:
              r4 = t3.readBytes(), e3.setProvider(r4);
              break;
            case 4:
              r4 = t3.readBytes(), e3.setContractname(r4);
              break;
            case 5:
              r4 = t3.readInt32(), e3.setPermissionId(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Transaction.Contract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Transaction.Contract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Transaction.Contract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getType()) && t3.writeEnum(1, r4), null != (r4 = e3.getParameter()) && t3.writeMessage(2, r4, i.Any.serializeBinaryToWriter), (r4 = e3.getProvider_asU8()).length > 0 && t3.writeBytes(3, r4), (r4 = e3.getContractname_asU8()).length > 0 && t3.writeBytes(4, r4), 0 !== (r4 = e3.getPermissionId()) && t3.writeInt32(5, r4);
        }, TronWebProto.Transaction.Contract.ContractType = { ACCOUNTCREATECONTRACT: 0, TRANSFERCONTRACT: 1, TRANSFERASSETCONTRACT: 2, VOTEASSETCONTRACT: 3, VOTEWITNESSCONTRACT: 4, WITNESSCREATECONTRACT: 5, ASSETISSUECONTRACT: 6, WITNESSUPDATECONTRACT: 8, PARTICIPATEASSETISSUECONTRACT: 9, ACCOUNTUPDATECONTRACT: 10, FREEZEBALANCECONTRACT: 11, UNFREEZEBALANCECONTRACT: 12, WITHDRAWBALANCECONTRACT: 13, UNFREEZEASSETCONTRACT: 14, UPDATEASSETCONTRACT: 15, PROPOSALCREATECONTRACT: 16, PROPOSALAPPROVECONTRACT: 17, PROPOSALDELETECONTRACT: 18, SETACCOUNTIDCONTRACT: 19, CUSTOMCONTRACT: 20, CREATESMARTCONTRACT: 30, TRIGGERSMARTCONTRACT: 31, GETCONTRACT: 32, UPDATESETTINGCONTRACT: 33, EXCHANGECREATECONTRACT: 41, EXCHANGEINJECTCONTRACT: 42, EXCHANGEWITHDRAWCONTRACT: 43, EXCHANGETRANSACTIONCONTRACT: 44, UPDATEENERGYLIMITCONTRACT: 45, ACCOUNTPERMISSIONUPDATECONTRACT: 46, CLEARABICONTRACT: 48, UPDATEBROKERAGECONTRACT: 49, SHIELDEDTRANSFERCONTRACT: 51, MARKETSELLASSETCONTRACT: 52, MARKETCANCELORDERCONTRACT: 53, FREEZEBALANCEV2CONTRACT: 54, UNFREEZEBALANCEV2CONTRACT: 55, WITHDRAWEXPIREUNFREEZECONTRACT: 56, DELEGATERESOURCECONTRACT: 57, UNDELEGATERESOURCECONTRACT: 58, CANCELALLUNFREEZEV2CONTRACT: 59 }, TronWebProto.Transaction.Contract.prototype.getType = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.Transaction.Contract.prototype.setType = function(e3) {
          return n2.Message.setProto3EnumField(this, 1, e3);
        }, TronWebProto.Transaction.Contract.prototype.getParameter = function() {
          return n2.Message.getWrapperField(this, i.Any, 2);
        }, TronWebProto.Transaction.Contract.prototype.setParameter = function(e3) {
          return n2.Message.setWrapperField(this, 2, e3);
        }, TronWebProto.Transaction.Contract.prototype.clearParameter = function() {
          return this.setParameter(void 0);
        }, TronWebProto.Transaction.Contract.prototype.hasParameter = function() {
          return null != n2.Message.getField(this, 2);
        }, TronWebProto.Transaction.Contract.prototype.getProvider = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.Transaction.Contract.prototype.getProvider_asB64 = function() {
          return n2.Message.bytesAsB64(this.getProvider());
        }, TronWebProto.Transaction.Contract.prototype.getProvider_asU8 = function() {
          return n2.Message.bytesAsU8(this.getProvider());
        }, TronWebProto.Transaction.Contract.prototype.setProvider = function(e3) {
          return n2.Message.setProto3BytesField(this, 3, e3);
        }, TronWebProto.Transaction.Contract.prototype.getContractname = function() {
          return n2.Message.getFieldWithDefault(this, 4, "");
        }, TronWebProto.Transaction.Contract.prototype.getContractname_asB64 = function() {
          return n2.Message.bytesAsB64(this.getContractname());
        }, TronWebProto.Transaction.Contract.prototype.getContractname_asU8 = function() {
          return n2.Message.bytesAsU8(this.getContractname());
        }, TronWebProto.Transaction.Contract.prototype.setContractname = function(e3) {
          return n2.Message.setProto3BytesField(this, 4, e3);
        }, TronWebProto.Transaction.Contract.prototype.getPermissionId = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.Transaction.Contract.prototype.setPermissionId = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, TronWebProto.Transaction.Result.repeatedFields_ = [26], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Transaction.Result.prototype.toObject = function(e3) {
          return TronWebProto.Transaction.Result.toObject(e3, this);
        }, TronWebProto.Transaction.Result.toObject = function(e3, t3) {
          var r4 = { fee: n2.Message.getFieldWithDefault(t3, 1, 0), ret: n2.Message.getFieldWithDefault(t3, 2, 0), contractret: n2.Message.getFieldWithDefault(t3, 3, 0), assetissueid: n2.Message.getFieldWithDefault(t3, 14, ""), withdrawAmount: n2.Message.getFieldWithDefault(t3, 15, 0), unfreezeAmount: n2.Message.getFieldWithDefault(t3, 16, 0), exchangeReceivedAmount: n2.Message.getFieldWithDefault(t3, 18, 0), exchangeInjectAnotherAmount: n2.Message.getFieldWithDefault(t3, 19, 0), exchangeWithdrawAnotherAmount: n2.Message.getFieldWithDefault(t3, 20, 0), exchangeId: n2.Message.getFieldWithDefault(t3, 21, 0), shieldedTransactionFee: n2.Message.getFieldWithDefault(t3, 22, 0), orderid: t3.getOrderid_asB64(), orderdetailsList: n2.Message.toObjectList(t3.getOrderdetailsList(), TronWebProto.MarketOrderDetail.toObject, e3) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.Transaction.Result.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Transaction.Result();
          return TronWebProto.Transaction.Result.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Transaction.Result.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readInt64();
              e3.setFee(r4);
              break;
            case 2:
              r4 = t3.readEnum(), e3.setRet(r4);
              break;
            case 3:
              r4 = t3.readEnum(), e3.setContractret(r4);
              break;
            case 14:
              r4 = t3.readString(), e3.setAssetissueid(r4);
              break;
            case 15:
              r4 = t3.readInt64(), e3.setWithdrawAmount(r4);
              break;
            case 16:
              r4 = t3.readInt64(), e3.setUnfreezeAmount(r4);
              break;
            case 18:
              r4 = t3.readInt64(), e3.setExchangeReceivedAmount(r4);
              break;
            case 19:
              r4 = t3.readInt64(), e3.setExchangeInjectAnotherAmount(r4);
              break;
            case 20:
              r4 = t3.readInt64(), e3.setExchangeWithdrawAnotherAmount(r4);
              break;
            case 21:
              r4 = t3.readInt64(), e3.setExchangeId(r4);
              break;
            case 22:
              r4 = t3.readInt64(), e3.setShieldedTransactionFee(r4);
              break;
            case 25:
              r4 = t3.readBytes(), e3.setOrderid(r4);
              break;
            case 26:
              r4 = new TronWebProto.MarketOrderDetail(), t3.readMessage(r4, TronWebProto.MarketOrderDetail.deserializeBinaryFromReader), e3.addOrderdetails(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Transaction.Result.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Transaction.Result.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Transaction.Result.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getFee()) && t3.writeInt64(1, r4), 0 !== (r4 = e3.getRet()) && t3.writeEnum(2, r4), 0 !== (r4 = e3.getContractret()) && t3.writeEnum(3, r4), (r4 = e3.getAssetissueid()).length > 0 && t3.writeString(14, r4), 0 !== (r4 = e3.getWithdrawAmount()) && t3.writeInt64(15, r4), 0 !== (r4 = e3.getUnfreezeAmount()) && t3.writeInt64(16, r4), 0 !== (r4 = e3.getExchangeReceivedAmount()) && t3.writeInt64(18, r4), 0 !== (r4 = e3.getExchangeInjectAnotherAmount()) && t3.writeInt64(19, r4), 0 !== (r4 = e3.getExchangeWithdrawAnotherAmount()) && t3.writeInt64(20, r4), 0 !== (r4 = e3.getExchangeId()) && t3.writeInt64(21, r4), 0 !== (r4 = e3.getShieldedTransactionFee()) && t3.writeInt64(22, r4), (r4 = e3.getOrderid_asU8()).length > 0 && t3.writeBytes(25, r4), (r4 = e3.getOrderdetailsList()).length > 0 && t3.writeRepeatedMessage(26, r4, TronWebProto.MarketOrderDetail.serializeBinaryToWriter);
        }, TronWebProto.Transaction.Result.code = { SUCESS: 0, FAILED: 1 }, TronWebProto.Transaction.Result.contractResult = { DEFAULT: 0, SUCCESS: 1, REVERT: 2, BAD_JUMP_DESTINATION: 3, OUT_OF_MEMORY: 4, PRECOMPILED_CONTRACT: 5, STACK_TOO_SMALL: 6, STACK_TOO_LARGE: 7, ILLEGAL_OPERATION: 8, STACK_OVERFLOW: 9, OUT_OF_ENERGY: 10, OUT_OF_TIME: 11, JVM_STACK_OVER_FLOW: 12, UNKNOWN: 13, TRANSFER_FAILED: 14, INVALID_CODE: 15 }, TronWebProto.Transaction.Result.prototype.getFee = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.Transaction.Result.prototype.setFee = function(e3) {
          return n2.Message.setProto3IntField(this, 1, e3);
        }, TronWebProto.Transaction.Result.prototype.getRet = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.Transaction.Result.prototype.setRet = function(e3) {
          return n2.Message.setProto3EnumField(this, 2, e3);
        }, TronWebProto.Transaction.Result.prototype.getContractret = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.Transaction.Result.prototype.setContractret = function(e3) {
          return n2.Message.setProto3EnumField(this, 3, e3);
        }, TronWebProto.Transaction.Result.prototype.getAssetissueid = function() {
          return n2.Message.getFieldWithDefault(this, 14, "");
        }, TronWebProto.Transaction.Result.prototype.setAssetissueid = function(e3) {
          return n2.Message.setProto3StringField(this, 14, e3);
        }, TronWebProto.Transaction.Result.prototype.getWithdrawAmount = function() {
          return n2.Message.getFieldWithDefault(this, 15, 0);
        }, TronWebProto.Transaction.Result.prototype.setWithdrawAmount = function(e3) {
          return n2.Message.setProto3IntField(this, 15, e3);
        }, TronWebProto.Transaction.Result.prototype.getUnfreezeAmount = function() {
          return n2.Message.getFieldWithDefault(this, 16, 0);
        }, TronWebProto.Transaction.Result.prototype.setUnfreezeAmount = function(e3) {
          return n2.Message.setProto3IntField(this, 16, e3);
        }, TronWebProto.Transaction.Result.prototype.getExchangeReceivedAmount = function() {
          return n2.Message.getFieldWithDefault(this, 18, 0);
        }, TronWebProto.Transaction.Result.prototype.setExchangeReceivedAmount = function(e3) {
          return n2.Message.setProto3IntField(this, 18, e3);
        }, TronWebProto.Transaction.Result.prototype.getExchangeInjectAnotherAmount = function() {
          return n2.Message.getFieldWithDefault(this, 19, 0);
        }, TronWebProto.Transaction.Result.prototype.setExchangeInjectAnotherAmount = function(e3) {
          return n2.Message.setProto3IntField(this, 19, e3);
        }, TronWebProto.Transaction.Result.prototype.getExchangeWithdrawAnotherAmount = function() {
          return n2.Message.getFieldWithDefault(this, 20, 0);
        }, TronWebProto.Transaction.Result.prototype.setExchangeWithdrawAnotherAmount = function(e3) {
          return n2.Message.setProto3IntField(this, 20, e3);
        }, TronWebProto.Transaction.Result.prototype.getExchangeId = function() {
          return n2.Message.getFieldWithDefault(this, 21, 0);
        }, TronWebProto.Transaction.Result.prototype.setExchangeId = function(e3) {
          return n2.Message.setProto3IntField(this, 21, e3);
        }, TronWebProto.Transaction.Result.prototype.getShieldedTransactionFee = function() {
          return n2.Message.getFieldWithDefault(this, 22, 0);
        }, TronWebProto.Transaction.Result.prototype.setShieldedTransactionFee = function(e3) {
          return n2.Message.setProto3IntField(this, 22, e3);
        }, TronWebProto.Transaction.Result.prototype.getOrderid = function() {
          return n2.Message.getFieldWithDefault(this, 25, "");
        }, TronWebProto.Transaction.Result.prototype.getOrderid_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOrderid());
        }, TronWebProto.Transaction.Result.prototype.getOrderid_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOrderid());
        }, TronWebProto.Transaction.Result.prototype.setOrderid = function(e3) {
          return n2.Message.setProto3BytesField(this, 25, e3);
        }, TronWebProto.Transaction.Result.prototype.getOrderdetailsList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.MarketOrderDetail, 26);
        }, TronWebProto.Transaction.Result.prototype.setOrderdetailsList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 26, e3);
        }, TronWebProto.Transaction.Result.prototype.addOrderdetails = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 26, e3, TronWebProto.MarketOrderDetail, t3);
        }, TronWebProto.Transaction.Result.prototype.clearOrderdetailsList = function() {
          return this.setOrderdetailsList([]);
        }, TronWebProto.Transaction.raw.repeatedFields_ = [9, 11], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.Transaction.raw.prototype.toObject = function(e3) {
          return TronWebProto.Transaction.raw.toObject(e3, this);
        }, TronWebProto.Transaction.raw.toObject = function(e3, t3) {
          var r4 = { refBlockBytes: t3.getRefBlockBytes_asB64(), refBlockNum: n2.Message.getFieldWithDefault(t3, 3, 0), refBlockHash: t3.getRefBlockHash_asB64(), expiration: n2.Message.getFieldWithDefault(t3, 8, 0), authsList: n2.Message.toObjectList(t3.getAuthsList(), TronWebProto.authority.toObject, e3), data: t3.getData_asB64(), contractList: n2.Message.toObjectList(t3.getContractList(), TronWebProto.Transaction.Contract.toObject, e3), scripts: t3.getScripts_asB64(), timestamp: n2.Message.getFieldWithDefault(t3, 14, 0), feeLimit: n2.Message.getFieldWithDefault(t3, 18, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.Transaction.raw.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.Transaction.raw();
          return TronWebProto.Transaction.raw.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.Transaction.raw.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setRefBlockBytes(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setRefBlockNum(r4);
              break;
            case 4:
              r4 = t3.readBytes(), e3.setRefBlockHash(r4);
              break;
            case 8:
              r4 = t3.readInt64(), e3.setExpiration(r4);
              break;
            case 9:
              r4 = new TronWebProto.authority(), t3.readMessage(r4, TronWebProto.authority.deserializeBinaryFromReader), e3.addAuths(r4);
              break;
            case 10:
              r4 = t3.readBytes(), e3.setData(r4);
              break;
            case 11:
              r4 = new TronWebProto.Transaction.Contract(), t3.readMessage(r4, TronWebProto.Transaction.Contract.deserializeBinaryFromReader), e3.addContract(r4);
              break;
            case 12:
              r4 = t3.readBytes(), e3.setScripts(r4);
              break;
            case 14:
              r4 = t3.readInt64(), e3.setTimestamp(r4);
              break;
            case 18:
              r4 = t3.readInt64(), e3.setFeeLimit(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.Transaction.raw.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.Transaction.raw.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.Transaction.raw.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getRefBlockBytes_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getRefBlockNum()) && t3.writeInt64(3, r4), (r4 = e3.getRefBlockHash_asU8()).length > 0 && t3.writeBytes(4, r4), 0 !== (r4 = e3.getExpiration()) && t3.writeInt64(8, r4), (r4 = e3.getAuthsList()).length > 0 && t3.writeRepeatedMessage(9, r4, TronWebProto.authority.serializeBinaryToWriter), (r4 = e3.getData_asU8()).length > 0 && t3.writeBytes(10, r4), (r4 = e3.getContractList()).length > 0 && t3.writeRepeatedMessage(11, r4, TronWebProto.Transaction.Contract.serializeBinaryToWriter), (r4 = e3.getScripts_asU8()).length > 0 && t3.writeBytes(12, r4), 0 !== (r4 = e3.getTimestamp()) && t3.writeInt64(14, r4), 0 !== (r4 = e3.getFeeLimit()) && t3.writeInt64(18, r4);
        }, TronWebProto.Transaction.raw.prototype.getRefBlockBytes = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.Transaction.raw.prototype.getRefBlockBytes_asB64 = function() {
          return n2.Message.bytesAsB64(this.getRefBlockBytes());
        }, TronWebProto.Transaction.raw.prototype.getRefBlockBytes_asU8 = function() {
          return n2.Message.bytesAsU8(this.getRefBlockBytes());
        }, TronWebProto.Transaction.raw.prototype.setRefBlockBytes = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.Transaction.raw.prototype.getRefBlockNum = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.Transaction.raw.prototype.setRefBlockNum = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.Transaction.raw.prototype.getRefBlockHash = function() {
          return n2.Message.getFieldWithDefault(this, 4, "");
        }, TronWebProto.Transaction.raw.prototype.getRefBlockHash_asB64 = function() {
          return n2.Message.bytesAsB64(this.getRefBlockHash());
        }, TronWebProto.Transaction.raw.prototype.getRefBlockHash_asU8 = function() {
          return n2.Message.bytesAsU8(this.getRefBlockHash());
        }, TronWebProto.Transaction.raw.prototype.setRefBlockHash = function(e3) {
          return n2.Message.setProto3BytesField(this, 4, e3);
        }, TronWebProto.Transaction.raw.prototype.getExpiration = function() {
          return n2.Message.getFieldWithDefault(this, 8, 0);
        }, TronWebProto.Transaction.raw.prototype.setExpiration = function(e3) {
          return n2.Message.setProto3IntField(this, 8, e3);
        }, TronWebProto.Transaction.raw.prototype.getAuthsList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.authority, 9);
        }, TronWebProto.Transaction.raw.prototype.setAuthsList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 9, e3);
        }, TronWebProto.Transaction.raw.prototype.addAuths = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 9, e3, TronWebProto.authority, t3);
        }, TronWebProto.Transaction.raw.prototype.clearAuthsList = function() {
          return this.setAuthsList([]);
        }, TronWebProto.Transaction.raw.prototype.getData = function() {
          return n2.Message.getFieldWithDefault(this, 10, "");
        }, TronWebProto.Transaction.raw.prototype.getData_asB64 = function() {
          return n2.Message.bytesAsB64(this.getData());
        }, TronWebProto.Transaction.raw.prototype.getData_asU8 = function() {
          return n2.Message.bytesAsU8(this.getData());
        }, TronWebProto.Transaction.raw.prototype.setData = function(e3) {
          return n2.Message.setProto3BytesField(this, 10, e3);
        }, TronWebProto.Transaction.raw.prototype.getContractList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.Transaction.Contract, 11);
        }, TronWebProto.Transaction.raw.prototype.setContractList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 11, e3);
        }, TronWebProto.Transaction.raw.prototype.addContract = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 11, e3, TronWebProto.Transaction.Contract, t3);
        }, TronWebProto.Transaction.raw.prototype.clearContractList = function() {
          return this.setContractList([]);
        }, TronWebProto.Transaction.raw.prototype.getScripts = function() {
          return n2.Message.getFieldWithDefault(this, 12, "");
        }, TronWebProto.Transaction.raw.prototype.getScripts_asB64 = function() {
          return n2.Message.bytesAsB64(this.getScripts());
        }, TronWebProto.Transaction.raw.prototype.getScripts_asU8 = function() {
          return n2.Message.bytesAsU8(this.getScripts());
        }, TronWebProto.Transaction.raw.prototype.setScripts = function(e3) {
          return n2.Message.setProto3BytesField(this, 12, e3);
        }, TronWebProto.Transaction.raw.prototype.getTimestamp = function() {
          return n2.Message.getFieldWithDefault(this, 14, 0);
        }, TronWebProto.Transaction.raw.prototype.setTimestamp = function(e3) {
          return n2.Message.setProto3IntField(this, 14, e3);
        }, TronWebProto.Transaction.raw.prototype.getFeeLimit = function() {
          return n2.Message.getFieldWithDefault(this, 18, 0);
        }, TronWebProto.Transaction.raw.prototype.setFeeLimit = function(e3) {
          return n2.Message.setProto3IntField(this, 18, e3);
        }, TronWebProto.Transaction.prototype.getRawData = function() {
          return n2.Message.getWrapperField(this, TronWebProto.Transaction.raw, 1);
        }, TronWebProto.Transaction.prototype.setRawData = function(e3) {
          return n2.Message.setWrapperField(this, 1, e3);
        }, TronWebProto.Transaction.prototype.clearRawData = function() {
          return this.setRawData(void 0);
        }, TronWebProto.Transaction.prototype.hasRawData = function() {
          return null != n2.Message.getField(this, 1);
        }, TronWebProto.Transaction.prototype.getSignatureList = function() {
          return n2.Message.getRepeatedField(this, 2);
        }, TronWebProto.Transaction.prototype.getSignatureList_asB64 = function() {
          return n2.Message.bytesListAsB64(this.getSignatureList());
        }, TronWebProto.Transaction.prototype.getSignatureList_asU8 = function() {
          return n2.Message.bytesListAsU8(this.getSignatureList());
        }, TronWebProto.Transaction.prototype.setSignatureList = function(e3) {
          return n2.Message.setField(this, 2, e3 || []);
        }, TronWebProto.Transaction.prototype.addSignature = function(e3, t3) {
          return n2.Message.addToRepeatedField(this, 2, e3, t3);
        }, TronWebProto.Transaction.prototype.clearSignatureList = function() {
          return this.setSignatureList([]);
        }, TronWebProto.Transaction.prototype.getRetList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.Transaction.Result, 5);
        }, TronWebProto.Transaction.prototype.setRetList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 5, e3);
        }, TronWebProto.Transaction.prototype.addRet = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 5, e3, TronWebProto.Transaction.Result, t3);
        }, TronWebProto.Transaction.prototype.clearRetList = function() {
          return this.setRetList([]);
        }, TronWebProto.AccountType = { NORMAL: 0, ASSETISSUE: 1, CONTRACT: 2 }, o.object.extend(t2, TronWebProto);
      }, 203: (e2) => {
        "use strict";
        e2.exports = require_any_pb();
      }, 248: (e2, t2, r3) => {
        var n2 = r3(306), o = n2, a = "undefined" != typeof globalThis && globalThis || "undefined" != typeof window && window || void 0 !== a && a || "undefined" != typeof self && self || (function() {
          return this;
        }).call(null) || Function("return this")(), i = r3(594);
        o.object.extend(proto, i), o.exportSymbol("TronWebProto.AccountBalanceRequest", null, a), o.exportSymbol("TronWebProto.AccountBalanceResponse", null, a), o.exportSymbol("TronWebProto.AccountIdentifier", null, a), o.exportSymbol("TronWebProto.AccountTrace", null, a), o.exportSymbol("TronWebProto.BlockBalanceTrace", null, a), o.exportSymbol("TronWebProto.BlockBalanceTrace.BlockIdentifier", null, a), o.exportSymbol("TronWebProto.CancelAllUnfreezeV2Contract", null, a), o.exportSymbol("TronWebProto.DelegateResourceContract", null, a), o.exportSymbol("TronWebProto.FreezeBalanceContract", null, a), o.exportSymbol("TronWebProto.FreezeBalanceV2Contract", null, a), o.exportSymbol("TronWebProto.TransactionBalanceTrace", null, a), o.exportSymbol("TronWebProto.TransactionBalanceTrace.Operation", null, a), o.exportSymbol("TronWebProto.TransferContract", null, a), o.exportSymbol("TronWebProto.UnDelegateResourceContract", null, a), o.exportSymbol("TronWebProto.UnfreezeBalanceContract", null, a), o.exportSymbol("TronWebProto.UnfreezeBalanceV2Contract", null, a), o.exportSymbol("TronWebProto.WithdrawBalanceContract", null, a), o.exportSymbol("TronWebProto.WithdrawExpireUnfreezeContract", null, a), TronWebProto.FreezeBalanceContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.FreezeBalanceContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.FreezeBalanceContract.displayName = "TronWebProto.FreezeBalanceContract"), TronWebProto.UnfreezeBalanceContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.UnfreezeBalanceContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.UnfreezeBalanceContract.displayName = "TronWebProto.UnfreezeBalanceContract"), TronWebProto.WithdrawBalanceContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.WithdrawBalanceContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.WithdrawBalanceContract.displayName = "TronWebProto.WithdrawBalanceContract"), TronWebProto.TransferContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.TransferContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.TransferContract.displayName = "TronWebProto.TransferContract"), TronWebProto.TransactionBalanceTrace = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.TransactionBalanceTrace.repeatedFields_, null);
        }, o.inherits(TronWebProto.TransactionBalanceTrace, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.TransactionBalanceTrace.displayName = "TronWebProto.TransactionBalanceTrace"), TronWebProto.TransactionBalanceTrace.Operation = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.TransactionBalanceTrace.Operation, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.TransactionBalanceTrace.Operation.displayName = "TronWebProto.TransactionBalanceTrace.Operation"), TronWebProto.BlockBalanceTrace = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.BlockBalanceTrace.repeatedFields_, null);
        }, o.inherits(TronWebProto.BlockBalanceTrace, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.BlockBalanceTrace.displayName = "TronWebProto.BlockBalanceTrace"), TronWebProto.BlockBalanceTrace.BlockIdentifier = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.BlockBalanceTrace.BlockIdentifier, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.BlockBalanceTrace.BlockIdentifier.displayName = "TronWebProto.BlockBalanceTrace.BlockIdentifier"), TronWebProto.AccountTrace = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.AccountTrace, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.AccountTrace.displayName = "TronWebProto.AccountTrace"), TronWebProto.AccountIdentifier = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.AccountIdentifier, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.AccountIdentifier.displayName = "TronWebProto.AccountIdentifier"), TronWebProto.AccountBalanceRequest = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.AccountBalanceRequest, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.AccountBalanceRequest.displayName = "TronWebProto.AccountBalanceRequest"), TronWebProto.AccountBalanceResponse = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.AccountBalanceResponse, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.AccountBalanceResponse.displayName = "TronWebProto.AccountBalanceResponse"), TronWebProto.FreezeBalanceV2Contract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.FreezeBalanceV2Contract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.FreezeBalanceV2Contract.displayName = "TronWebProto.FreezeBalanceV2Contract"), TronWebProto.UnfreezeBalanceV2Contract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.UnfreezeBalanceV2Contract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.UnfreezeBalanceV2Contract.displayName = "TronWebProto.UnfreezeBalanceV2Contract"), TronWebProto.WithdrawExpireUnfreezeContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.WithdrawExpireUnfreezeContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.WithdrawExpireUnfreezeContract.displayName = "TronWebProto.WithdrawExpireUnfreezeContract"), TronWebProto.DelegateResourceContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.DelegateResourceContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.DelegateResourceContract.displayName = "TronWebProto.DelegateResourceContract"), TronWebProto.UnDelegateResourceContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.UnDelegateResourceContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.UnDelegateResourceContract.displayName = "TronWebProto.UnDelegateResourceContract"), TronWebProto.CancelAllUnfreezeV2Contract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.CancelAllUnfreezeV2Contract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.CancelAllUnfreezeV2Contract.displayName = "TronWebProto.CancelAllUnfreezeV2Contract"), n2.Message.GENERATE_TO_OBJECT && (TronWebProto.FreezeBalanceContract.prototype.toObject = function(e3) {
          return TronWebProto.FreezeBalanceContract.toObject(e3, this);
        }, TronWebProto.FreezeBalanceContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), frozenBalance: n2.Message.getFieldWithDefault(t3, 2, 0), frozenDuration: n2.Message.getFieldWithDefault(t3, 3, 0), resource: n2.Message.getFieldWithDefault(t3, 10, 0), receiverAddress: t3.getReceiverAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.FreezeBalanceContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.FreezeBalanceContract();
          return TronWebProto.FreezeBalanceContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.FreezeBalanceContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setFrozenBalance(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setFrozenDuration(r4);
              break;
            case 10:
              r4 = t3.readEnum(), e3.setResource(r4);
              break;
            case 15:
              r4 = t3.readBytes(), e3.setReceiverAddress(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.FreezeBalanceContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.FreezeBalanceContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.FreezeBalanceContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getFrozenBalance()) && t3.writeInt64(2, r4), 0 !== (r4 = e3.getFrozenDuration()) && t3.writeInt64(3, r4), 0 !== (r4 = e3.getResource()) && t3.writeEnum(10, r4), (r4 = e3.getReceiverAddress_asU8()).length > 0 && t3.writeBytes(15, r4);
        }, TronWebProto.FreezeBalanceContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.FreezeBalanceContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.FreezeBalanceContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.FreezeBalanceContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.FreezeBalanceContract.prototype.getFrozenBalance = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.FreezeBalanceContract.prototype.setFrozenBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.FreezeBalanceContract.prototype.getFrozenDuration = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.FreezeBalanceContract.prototype.setFrozenDuration = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.FreezeBalanceContract.prototype.getResource = function() {
          return n2.Message.getFieldWithDefault(this, 10, 0);
        }, TronWebProto.FreezeBalanceContract.prototype.setResource = function(e3) {
          return n2.Message.setProto3EnumField(this, 10, e3);
        }, TronWebProto.FreezeBalanceContract.prototype.getReceiverAddress = function() {
          return n2.Message.getFieldWithDefault(this, 15, "");
        }, TronWebProto.FreezeBalanceContract.prototype.getReceiverAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getReceiverAddress());
        }, TronWebProto.FreezeBalanceContract.prototype.getReceiverAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getReceiverAddress());
        }, TronWebProto.FreezeBalanceContract.prototype.setReceiverAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 15, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.UnfreezeBalanceContract.prototype.toObject = function(e3) {
          return TronWebProto.UnfreezeBalanceContract.toObject(e3, this);
        }, TronWebProto.UnfreezeBalanceContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), resource: n2.Message.getFieldWithDefault(t3, 10, 0), receiverAddress: t3.getReceiverAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.UnfreezeBalanceContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.UnfreezeBalanceContract();
          return TronWebProto.UnfreezeBalanceContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.UnfreezeBalanceContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 10:
              r4 = t3.readEnum(), e3.setResource(r4);
              break;
            case 15:
              r4 = t3.readBytes(), e3.setReceiverAddress(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.UnfreezeBalanceContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.UnfreezeBalanceContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.UnfreezeBalanceContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getResource()) && t3.writeEnum(10, r4), (r4 = e3.getReceiverAddress_asU8()).length > 0 && t3.writeBytes(15, r4);
        }, TronWebProto.UnfreezeBalanceContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.UnfreezeBalanceContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.UnfreezeBalanceContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.UnfreezeBalanceContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.UnfreezeBalanceContract.prototype.getResource = function() {
          return n2.Message.getFieldWithDefault(this, 10, 0);
        }, TronWebProto.UnfreezeBalanceContract.prototype.setResource = function(e3) {
          return n2.Message.setProto3EnumField(this, 10, e3);
        }, TronWebProto.UnfreezeBalanceContract.prototype.getReceiverAddress = function() {
          return n2.Message.getFieldWithDefault(this, 15, "");
        }, TronWebProto.UnfreezeBalanceContract.prototype.getReceiverAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getReceiverAddress());
        }, TronWebProto.UnfreezeBalanceContract.prototype.getReceiverAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getReceiverAddress());
        }, TronWebProto.UnfreezeBalanceContract.prototype.setReceiverAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 15, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.WithdrawBalanceContract.prototype.toObject = function(e3) {
          return TronWebProto.WithdrawBalanceContract.toObject(e3, this);
        }, TronWebProto.WithdrawBalanceContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.WithdrawBalanceContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.WithdrawBalanceContract();
          return TronWebProto.WithdrawBalanceContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.WithdrawBalanceContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) if (1 === t3.getFieldNumber()) {
            var r4 = t3.readBytes();
            e3.setOwnerAddress(r4);
          } else t3.skipField();
          return e3;
        }, TronWebProto.WithdrawBalanceContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.WithdrawBalanceContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.WithdrawBalanceContract.serializeBinaryToWriter = function(e3, t3) {
          var r4;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4);
        }, TronWebProto.WithdrawBalanceContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.WithdrawBalanceContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.WithdrawBalanceContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.WithdrawBalanceContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.TransferContract.prototype.toObject = function(e3) {
          return TronWebProto.TransferContract.toObject(e3, this);
        }, TronWebProto.TransferContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), toAddress: t3.getToAddress_asB64(), amount: n2.Message.getFieldWithDefault(t3, 3, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.TransferContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.TransferContract();
          return TronWebProto.TransferContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.TransferContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setToAddress(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setAmount(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.TransferContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.TransferContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.TransferContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getToAddress_asU8()).length > 0 && t3.writeBytes(2, r4), 0 !== (r4 = e3.getAmount()) && t3.writeInt64(3, r4);
        }, TronWebProto.TransferContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.TransferContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.TransferContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.TransferContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.TransferContract.prototype.getToAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.TransferContract.prototype.getToAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getToAddress());
        }, TronWebProto.TransferContract.prototype.getToAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getToAddress());
        }, TronWebProto.TransferContract.prototype.setToAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.TransferContract.prototype.getAmount = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.TransferContract.prototype.setAmount = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.TransactionBalanceTrace.repeatedFields_ = [2], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.TransactionBalanceTrace.prototype.toObject = function(e3) {
          return TronWebProto.TransactionBalanceTrace.toObject(e3, this);
        }, TronWebProto.TransactionBalanceTrace.toObject = function(e3, t3) {
          var r4 = { transactionIdentifier: t3.getTransactionIdentifier_asB64(), operationList: n2.Message.toObjectList(t3.getOperationList(), TronWebProto.TransactionBalanceTrace.Operation.toObject, e3), type: n2.Message.getFieldWithDefault(t3, 3, ""), status: n2.Message.getFieldWithDefault(t3, 4, "") };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.TransactionBalanceTrace.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.TransactionBalanceTrace();
          return TronWebProto.TransactionBalanceTrace.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.TransactionBalanceTrace.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setTransactionIdentifier(r4);
              break;
            case 2:
              r4 = new TronWebProto.TransactionBalanceTrace.Operation(), t3.readMessage(r4, TronWebProto.TransactionBalanceTrace.Operation.deserializeBinaryFromReader), e3.addOperation(r4);
              break;
            case 3:
              r4 = t3.readString(), e3.setType(r4);
              break;
            case 4:
              r4 = t3.readString(), e3.setStatus(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.TransactionBalanceTrace.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.TransactionBalanceTrace.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.TransactionBalanceTrace.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getTransactionIdentifier_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getOperationList()).length > 0 && t3.writeRepeatedMessage(2, r4, TronWebProto.TransactionBalanceTrace.Operation.serializeBinaryToWriter), (r4 = e3.getType()).length > 0 && t3.writeString(3, r4), (r4 = e3.getStatus()).length > 0 && t3.writeString(4, r4);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.TransactionBalanceTrace.Operation.prototype.toObject = function(e3) {
          return TronWebProto.TransactionBalanceTrace.Operation.toObject(e3, this);
        }, TronWebProto.TransactionBalanceTrace.Operation.toObject = function(e3, t3) {
          var r4 = { operationIdentifier: n2.Message.getFieldWithDefault(t3, 1, 0), address: t3.getAddress_asB64(), amount: n2.Message.getFieldWithDefault(t3, 3, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.TransactionBalanceTrace.Operation.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.TransactionBalanceTrace.Operation();
          return TronWebProto.TransactionBalanceTrace.Operation.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.TransactionBalanceTrace.Operation.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readInt64();
              e3.setOperationIdentifier(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setAddress(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setAmount(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.TransactionBalanceTrace.Operation.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.TransactionBalanceTrace.Operation.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.TransactionBalanceTrace.Operation.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getOperationIdentifier()) && t3.writeInt64(1, r4), (r4 = e3.getAddress_asU8()).length > 0 && t3.writeBytes(2, r4), 0 !== (r4 = e3.getAmount()) && t3.writeInt64(3, r4);
        }, TronWebProto.TransactionBalanceTrace.Operation.prototype.getOperationIdentifier = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.TransactionBalanceTrace.Operation.prototype.setOperationIdentifier = function(e3) {
          return n2.Message.setProto3IntField(this, 1, e3);
        }, TronWebProto.TransactionBalanceTrace.Operation.prototype.getAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.TransactionBalanceTrace.Operation.prototype.getAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAddress());
        }, TronWebProto.TransactionBalanceTrace.Operation.prototype.getAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAddress());
        }, TronWebProto.TransactionBalanceTrace.Operation.prototype.setAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.TransactionBalanceTrace.Operation.prototype.getAmount = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.TransactionBalanceTrace.Operation.prototype.setAmount = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.TransactionBalanceTrace.prototype.getTransactionIdentifier = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.TransactionBalanceTrace.prototype.getTransactionIdentifier_asB64 = function() {
          return n2.Message.bytesAsB64(this.getTransactionIdentifier());
        }, TronWebProto.TransactionBalanceTrace.prototype.getTransactionIdentifier_asU8 = function() {
          return n2.Message.bytesAsU8(this.getTransactionIdentifier());
        }, TronWebProto.TransactionBalanceTrace.prototype.setTransactionIdentifier = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.TransactionBalanceTrace.prototype.getOperationList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.TransactionBalanceTrace.Operation, 2);
        }, TronWebProto.TransactionBalanceTrace.prototype.setOperationList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 2, e3);
        }, TronWebProto.TransactionBalanceTrace.prototype.addOperation = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 2, e3, TronWebProto.TransactionBalanceTrace.Operation, t3);
        }, TronWebProto.TransactionBalanceTrace.prototype.clearOperationList = function() {
          return this.setOperationList([]);
        }, TronWebProto.TransactionBalanceTrace.prototype.getType = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.TransactionBalanceTrace.prototype.setType = function(e3) {
          return n2.Message.setProto3StringField(this, 3, e3);
        }, TronWebProto.TransactionBalanceTrace.prototype.getStatus = function() {
          return n2.Message.getFieldWithDefault(this, 4, "");
        }, TronWebProto.TransactionBalanceTrace.prototype.setStatus = function(e3) {
          return n2.Message.setProto3StringField(this, 4, e3);
        }, TronWebProto.BlockBalanceTrace.repeatedFields_ = [3], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.BlockBalanceTrace.prototype.toObject = function(e3) {
          return TronWebProto.BlockBalanceTrace.toObject(e3, this);
        }, TronWebProto.BlockBalanceTrace.toObject = function(e3, t3) {
          var r4, o2 = { blockIdentifier: (r4 = t3.getBlockIdentifier()) && TronWebProto.BlockBalanceTrace.BlockIdentifier.toObject(e3, r4), timestamp: n2.Message.getFieldWithDefault(t3, 2, 0), transactionBalanceTraceList: n2.Message.toObjectList(t3.getTransactionBalanceTraceList(), TronWebProto.TransactionBalanceTrace.toObject, e3) };
          return e3 && (o2.$jspbMessageInstance = t3), o2;
        }), TronWebProto.BlockBalanceTrace.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.BlockBalanceTrace();
          return TronWebProto.BlockBalanceTrace.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.BlockBalanceTrace.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = new TronWebProto.BlockBalanceTrace.BlockIdentifier();
              t3.readMessage(r4, TronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinaryFromReader), e3.setBlockIdentifier(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setTimestamp(r4);
              break;
            case 3:
              r4 = new TronWebProto.TransactionBalanceTrace(), t3.readMessage(r4, TronWebProto.TransactionBalanceTrace.deserializeBinaryFromReader), e3.addTransactionBalanceTrace(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.BlockBalanceTrace.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.BlockBalanceTrace.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.BlockBalanceTrace.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          null != (r4 = e3.getBlockIdentifier()) && t3.writeMessage(1, r4, TronWebProto.BlockBalanceTrace.BlockIdentifier.serializeBinaryToWriter), 0 !== (r4 = e3.getTimestamp()) && t3.writeInt64(2, r4), (r4 = e3.getTransactionBalanceTraceList()).length > 0 && t3.writeRepeatedMessage(3, r4, TronWebProto.TransactionBalanceTrace.serializeBinaryToWriter);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.toObject = function(e3) {
          return TronWebProto.BlockBalanceTrace.BlockIdentifier.toObject(e3, this);
        }, TronWebProto.BlockBalanceTrace.BlockIdentifier.toObject = function(e3, t3) {
          var r4 = { hash: t3.getHash_asB64(), number: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.BlockBalanceTrace.BlockIdentifier();
          return TronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setHash(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setNumber(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.BlockBalanceTrace.BlockIdentifier.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.BlockBalanceTrace.BlockIdentifier.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getHash_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getNumber()) && t3.writeInt64(2, r4);
        }, TronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.getHash = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.getHash_asB64 = function() {
          return n2.Message.bytesAsB64(this.getHash());
        }, TronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.getHash_asU8 = function() {
          return n2.Message.bytesAsU8(this.getHash());
        }, TronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.setHash = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.getNumber = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.BlockBalanceTrace.BlockIdentifier.prototype.setNumber = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.BlockBalanceTrace.prototype.getBlockIdentifier = function() {
          return n2.Message.getWrapperField(this, TronWebProto.BlockBalanceTrace.BlockIdentifier, 1);
        }, TronWebProto.BlockBalanceTrace.prototype.setBlockIdentifier = function(e3) {
          return n2.Message.setWrapperField(this, 1, e3);
        }, TronWebProto.BlockBalanceTrace.prototype.clearBlockIdentifier = function() {
          return this.setBlockIdentifier(void 0);
        }, TronWebProto.BlockBalanceTrace.prototype.hasBlockIdentifier = function() {
          return null != n2.Message.getField(this, 1);
        }, TronWebProto.BlockBalanceTrace.prototype.getTimestamp = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.BlockBalanceTrace.prototype.setTimestamp = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.BlockBalanceTrace.prototype.getTransactionBalanceTraceList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.TransactionBalanceTrace, 3);
        }, TronWebProto.BlockBalanceTrace.prototype.setTransactionBalanceTraceList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 3, e3);
        }, TronWebProto.BlockBalanceTrace.prototype.addTransactionBalanceTrace = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 3, e3, TronWebProto.TransactionBalanceTrace, t3);
        }, TronWebProto.BlockBalanceTrace.prototype.clearTransactionBalanceTraceList = function() {
          return this.setTransactionBalanceTraceList([]);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.AccountTrace.prototype.toObject = function(e3) {
          return TronWebProto.AccountTrace.toObject(e3, this);
        }, TronWebProto.AccountTrace.toObject = function(e3, t3) {
          var r4 = { balance: n2.Message.getFieldWithDefault(t3, 1, 0), placeholder: n2.Message.getFieldWithDefault(t3, 99, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.AccountTrace.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.AccountTrace();
          return TronWebProto.AccountTrace.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.AccountTrace.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readInt64();
              e3.setBalance(r4);
              break;
            case 99:
              r4 = t3.readInt64(), e3.setPlaceholder(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.AccountTrace.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.AccountTrace.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.AccountTrace.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getBalance()) && t3.writeInt64(1, r4), 0 !== (r4 = e3.getPlaceholder()) && t3.writeInt64(99, r4);
        }, TronWebProto.AccountTrace.prototype.getBalance = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.AccountTrace.prototype.setBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 1, e3);
        }, TronWebProto.AccountTrace.prototype.getPlaceholder = function() {
          return n2.Message.getFieldWithDefault(this, 99, 0);
        }, TronWebProto.AccountTrace.prototype.setPlaceholder = function(e3) {
          return n2.Message.setProto3IntField(this, 99, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.AccountIdentifier.prototype.toObject = function(e3) {
          return TronWebProto.AccountIdentifier.toObject(e3, this);
        }, TronWebProto.AccountIdentifier.toObject = function(e3, t3) {
          var r4 = { address: t3.getAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.AccountIdentifier.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.AccountIdentifier();
          return TronWebProto.AccountIdentifier.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.AccountIdentifier.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) if (1 === t3.getFieldNumber()) {
            var r4 = t3.readBytes();
            e3.setAddress(r4);
          } else t3.skipField();
          return e3;
        }, TronWebProto.AccountIdentifier.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.AccountIdentifier.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.AccountIdentifier.serializeBinaryToWriter = function(e3, t3) {
          var r4;
          (r4 = e3.getAddress_asU8()).length > 0 && t3.writeBytes(1, r4);
        }, TronWebProto.AccountIdentifier.prototype.getAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.AccountIdentifier.prototype.getAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAddress());
        }, TronWebProto.AccountIdentifier.prototype.getAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAddress());
        }, TronWebProto.AccountIdentifier.prototype.setAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.AccountBalanceRequest.prototype.toObject = function(e3) {
          return TronWebProto.AccountBalanceRequest.toObject(e3, this);
        }, TronWebProto.AccountBalanceRequest.toObject = function(e3, t3) {
          var r4, n3 = { accountIdentifier: (r4 = t3.getAccountIdentifier()) && TronWebProto.AccountIdentifier.toObject(e3, r4), blockIdentifier: (r4 = t3.getBlockIdentifier()) && TronWebProto.BlockBalanceTrace.BlockIdentifier.toObject(e3, r4) };
          return e3 && (n3.$jspbMessageInstance = t3), n3;
        }), TronWebProto.AccountBalanceRequest.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.AccountBalanceRequest();
          return TronWebProto.AccountBalanceRequest.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.AccountBalanceRequest.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = new TronWebProto.AccountIdentifier();
              t3.readMessage(r4, TronWebProto.AccountIdentifier.deserializeBinaryFromReader), e3.setAccountIdentifier(r4);
              break;
            case 2:
              r4 = new TronWebProto.BlockBalanceTrace.BlockIdentifier(), t3.readMessage(r4, TronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinaryFromReader), e3.setBlockIdentifier(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.AccountBalanceRequest.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.AccountBalanceRequest.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.AccountBalanceRequest.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          null != (r4 = e3.getAccountIdentifier()) && t3.writeMessage(1, r4, TronWebProto.AccountIdentifier.serializeBinaryToWriter), null != (r4 = e3.getBlockIdentifier()) && t3.writeMessage(2, r4, TronWebProto.BlockBalanceTrace.BlockIdentifier.serializeBinaryToWriter);
        }, TronWebProto.AccountBalanceRequest.prototype.getAccountIdentifier = function() {
          return n2.Message.getWrapperField(this, TronWebProto.AccountIdentifier, 1);
        }, TronWebProto.AccountBalanceRequest.prototype.setAccountIdentifier = function(e3) {
          return n2.Message.setWrapperField(this, 1, e3);
        }, TronWebProto.AccountBalanceRequest.prototype.clearAccountIdentifier = function() {
          return this.setAccountIdentifier(void 0);
        }, TronWebProto.AccountBalanceRequest.prototype.hasAccountIdentifier = function() {
          return null != n2.Message.getField(this, 1);
        }, TronWebProto.AccountBalanceRequest.prototype.getBlockIdentifier = function() {
          return n2.Message.getWrapperField(this, TronWebProto.BlockBalanceTrace.BlockIdentifier, 2);
        }, TronWebProto.AccountBalanceRequest.prototype.setBlockIdentifier = function(e3) {
          return n2.Message.setWrapperField(this, 2, e3);
        }, TronWebProto.AccountBalanceRequest.prototype.clearBlockIdentifier = function() {
          return this.setBlockIdentifier(void 0);
        }, TronWebProto.AccountBalanceRequest.prototype.hasBlockIdentifier = function() {
          return null != n2.Message.getField(this, 2);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.AccountBalanceResponse.prototype.toObject = function(e3) {
          return TronWebProto.AccountBalanceResponse.toObject(e3, this);
        }, TronWebProto.AccountBalanceResponse.toObject = function(e3, t3) {
          var r4, o2 = { balance: n2.Message.getFieldWithDefault(t3, 1, 0), blockIdentifier: (r4 = t3.getBlockIdentifier()) && TronWebProto.BlockBalanceTrace.BlockIdentifier.toObject(e3, r4) };
          return e3 && (o2.$jspbMessageInstance = t3), o2;
        }), TronWebProto.AccountBalanceResponse.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.AccountBalanceResponse();
          return TronWebProto.AccountBalanceResponse.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.AccountBalanceResponse.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readInt64();
              e3.setBalance(r4);
              break;
            case 2:
              r4 = new TronWebProto.BlockBalanceTrace.BlockIdentifier(), t3.readMessage(r4, TronWebProto.BlockBalanceTrace.BlockIdentifier.deserializeBinaryFromReader), e3.setBlockIdentifier(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.AccountBalanceResponse.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.AccountBalanceResponse.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.AccountBalanceResponse.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getBalance()) && t3.writeInt64(1, r4), null != (r4 = e3.getBlockIdentifier()) && t3.writeMessage(2, r4, TronWebProto.BlockBalanceTrace.BlockIdentifier.serializeBinaryToWriter);
        }, TronWebProto.AccountBalanceResponse.prototype.getBalance = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.AccountBalanceResponse.prototype.setBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 1, e3);
        }, TronWebProto.AccountBalanceResponse.prototype.getBlockIdentifier = function() {
          return n2.Message.getWrapperField(this, TronWebProto.BlockBalanceTrace.BlockIdentifier, 2);
        }, TronWebProto.AccountBalanceResponse.prototype.setBlockIdentifier = function(e3) {
          return n2.Message.setWrapperField(this, 2, e3);
        }, TronWebProto.AccountBalanceResponse.prototype.clearBlockIdentifier = function() {
          return this.setBlockIdentifier(void 0);
        }, TronWebProto.AccountBalanceResponse.prototype.hasBlockIdentifier = function() {
          return null != n2.Message.getField(this, 2);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.FreezeBalanceV2Contract.prototype.toObject = function(e3) {
          return TronWebProto.FreezeBalanceV2Contract.toObject(e3, this);
        }, TronWebProto.FreezeBalanceV2Contract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), frozenBalance: n2.Message.getFieldWithDefault(t3, 2, 0), resource: n2.Message.getFieldWithDefault(t3, 3, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.FreezeBalanceV2Contract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.FreezeBalanceV2Contract();
          return TronWebProto.FreezeBalanceV2Contract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.FreezeBalanceV2Contract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setFrozenBalance(r4);
              break;
            case 3:
              r4 = t3.readEnum(), e3.setResource(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.FreezeBalanceV2Contract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.FreezeBalanceV2Contract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.FreezeBalanceV2Contract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getFrozenBalance()) && t3.writeInt64(2, r4), 0 !== (r4 = e3.getResource()) && t3.writeEnum(3, r4);
        }, TronWebProto.FreezeBalanceV2Contract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.FreezeBalanceV2Contract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.FreezeBalanceV2Contract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.FreezeBalanceV2Contract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.FreezeBalanceV2Contract.prototype.getFrozenBalance = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.FreezeBalanceV2Contract.prototype.setFrozenBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.FreezeBalanceV2Contract.prototype.getResource = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.FreezeBalanceV2Contract.prototype.setResource = function(e3) {
          return n2.Message.setProto3EnumField(this, 3, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.UnfreezeBalanceV2Contract.prototype.toObject = function(e3) {
          return TronWebProto.UnfreezeBalanceV2Contract.toObject(e3, this);
        }, TronWebProto.UnfreezeBalanceV2Contract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), unfreezeBalance: n2.Message.getFieldWithDefault(t3, 2, 0), resource: n2.Message.getFieldWithDefault(t3, 3, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.UnfreezeBalanceV2Contract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.UnfreezeBalanceV2Contract();
          return TronWebProto.UnfreezeBalanceV2Contract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.UnfreezeBalanceV2Contract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setUnfreezeBalance(r4);
              break;
            case 3:
              r4 = t3.readEnum(), e3.setResource(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.UnfreezeBalanceV2Contract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.UnfreezeBalanceV2Contract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.UnfreezeBalanceV2Contract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getUnfreezeBalance()) && t3.writeInt64(2, r4), 0 !== (r4 = e3.getResource()) && t3.writeEnum(3, r4);
        }, TronWebProto.UnfreezeBalanceV2Contract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.UnfreezeBalanceV2Contract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.UnfreezeBalanceV2Contract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.UnfreezeBalanceV2Contract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.UnfreezeBalanceV2Contract.prototype.getUnfreezeBalance = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.UnfreezeBalanceV2Contract.prototype.setUnfreezeBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.UnfreezeBalanceV2Contract.prototype.getResource = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.UnfreezeBalanceV2Contract.prototype.setResource = function(e3) {
          return n2.Message.setProto3EnumField(this, 3, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.WithdrawExpireUnfreezeContract.prototype.toObject = function(e3) {
          return TronWebProto.WithdrawExpireUnfreezeContract.toObject(e3, this);
        }, TronWebProto.WithdrawExpireUnfreezeContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.WithdrawExpireUnfreezeContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.WithdrawExpireUnfreezeContract();
          return TronWebProto.WithdrawExpireUnfreezeContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.WithdrawExpireUnfreezeContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) if (1 === t3.getFieldNumber()) {
            var r4 = t3.readBytes();
            e3.setOwnerAddress(r4);
          } else t3.skipField();
          return e3;
        }, TronWebProto.WithdrawExpireUnfreezeContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.WithdrawExpireUnfreezeContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.WithdrawExpireUnfreezeContract.serializeBinaryToWriter = function(e3, t3) {
          var r4;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4);
        }, TronWebProto.WithdrawExpireUnfreezeContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.WithdrawExpireUnfreezeContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.WithdrawExpireUnfreezeContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.WithdrawExpireUnfreezeContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.DelegateResourceContract.prototype.toObject = function(e3) {
          return TronWebProto.DelegateResourceContract.toObject(e3, this);
        }, TronWebProto.DelegateResourceContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), resource: n2.Message.getFieldWithDefault(t3, 2, 0), balance: n2.Message.getFieldWithDefault(t3, 3, 0), receiverAddress: t3.getReceiverAddress_asB64(), lock: n2.Message.getBooleanFieldWithDefault(t3, 5, false), lockPeriod: n2.Message.getFieldWithDefault(t3, 6, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.DelegateResourceContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.DelegateResourceContract();
          return TronWebProto.DelegateResourceContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.DelegateResourceContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readEnum(), e3.setResource(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setBalance(r4);
              break;
            case 4:
              r4 = t3.readBytes(), e3.setReceiverAddress(r4);
              break;
            case 5:
              r4 = t3.readBool(), e3.setLock(r4);
              break;
            case 6:
              r4 = t3.readInt64(), e3.setLockPeriod(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.DelegateResourceContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.DelegateResourceContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.DelegateResourceContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getResource()) && t3.writeEnum(2, r4), 0 !== (r4 = e3.getBalance()) && t3.writeInt64(3, r4), (r4 = e3.getReceiverAddress_asU8()).length > 0 && t3.writeBytes(4, r4), (r4 = e3.getLock()) && t3.writeBool(5, r4), 0 !== (r4 = e3.getLockPeriod()) && t3.writeInt64(6, r4);
        }, TronWebProto.DelegateResourceContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.DelegateResourceContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.DelegateResourceContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.DelegateResourceContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.DelegateResourceContract.prototype.getResource = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.DelegateResourceContract.prototype.setResource = function(e3) {
          return n2.Message.setProto3EnumField(this, 2, e3);
        }, TronWebProto.DelegateResourceContract.prototype.getBalance = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.DelegateResourceContract.prototype.setBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.DelegateResourceContract.prototype.getReceiverAddress = function() {
          return n2.Message.getFieldWithDefault(this, 4, "");
        }, TronWebProto.DelegateResourceContract.prototype.getReceiverAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getReceiverAddress());
        }, TronWebProto.DelegateResourceContract.prototype.getReceiverAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getReceiverAddress());
        }, TronWebProto.DelegateResourceContract.prototype.setReceiverAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 4, e3);
        }, TronWebProto.DelegateResourceContract.prototype.getLock = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 5, false);
        }, TronWebProto.DelegateResourceContract.prototype.setLock = function(e3) {
          return n2.Message.setProto3BooleanField(this, 5, e3);
        }, TronWebProto.DelegateResourceContract.prototype.getLockPeriod = function() {
          return n2.Message.getFieldWithDefault(this, 6, 0);
        }, TronWebProto.DelegateResourceContract.prototype.setLockPeriod = function(e3) {
          return n2.Message.setProto3IntField(this, 6, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.UnDelegateResourceContract.prototype.toObject = function(e3) {
          return TronWebProto.UnDelegateResourceContract.toObject(e3, this);
        }, TronWebProto.UnDelegateResourceContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), resource: n2.Message.getFieldWithDefault(t3, 2, 0), balance: n2.Message.getFieldWithDefault(t3, 3, 0), receiverAddress: t3.getReceiverAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.UnDelegateResourceContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.UnDelegateResourceContract();
          return TronWebProto.UnDelegateResourceContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.UnDelegateResourceContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readEnum(), e3.setResource(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setBalance(r4);
              break;
            case 4:
              r4 = t3.readBytes(), e3.setReceiverAddress(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.UnDelegateResourceContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.UnDelegateResourceContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.UnDelegateResourceContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getResource()) && t3.writeEnum(2, r4), 0 !== (r4 = e3.getBalance()) && t3.writeInt64(3, r4), (r4 = e3.getReceiverAddress_asU8()).length > 0 && t3.writeBytes(4, r4);
        }, TronWebProto.UnDelegateResourceContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.UnDelegateResourceContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.UnDelegateResourceContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.UnDelegateResourceContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.UnDelegateResourceContract.prototype.getResource = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.UnDelegateResourceContract.prototype.setResource = function(e3) {
          return n2.Message.setProto3EnumField(this, 2, e3);
        }, TronWebProto.UnDelegateResourceContract.prototype.getBalance = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.UnDelegateResourceContract.prototype.setBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.UnDelegateResourceContract.prototype.getReceiverAddress = function() {
          return n2.Message.getFieldWithDefault(this, 4, "");
        }, TronWebProto.UnDelegateResourceContract.prototype.getReceiverAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getReceiverAddress());
        }, TronWebProto.UnDelegateResourceContract.prototype.getReceiverAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getReceiverAddress());
        }, TronWebProto.UnDelegateResourceContract.prototype.setReceiverAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 4, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.CancelAllUnfreezeV2Contract.prototype.toObject = function(e3) {
          return TronWebProto.CancelAllUnfreezeV2Contract.toObject(e3, this);
        }, TronWebProto.CancelAllUnfreezeV2Contract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.CancelAllUnfreezeV2Contract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.CancelAllUnfreezeV2Contract();
          return TronWebProto.CancelAllUnfreezeV2Contract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.CancelAllUnfreezeV2Contract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) if (1 === t3.getFieldNumber()) {
            var r4 = t3.readBytes();
            e3.setOwnerAddress(r4);
          } else t3.skipField();
          return e3;
        }, TronWebProto.CancelAllUnfreezeV2Contract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.CancelAllUnfreezeV2Contract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.CancelAllUnfreezeV2Contract.serializeBinaryToWriter = function(e3, t3) {
          var r4;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4);
        }, TronWebProto.CancelAllUnfreezeV2Contract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.CancelAllUnfreezeV2Contract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.CancelAllUnfreezeV2Contract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.CancelAllUnfreezeV2Contract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, o.object.extend(t2, TronWebProto);
      }, 268: (e2, t2, r3) => {
        var n2 = r3(306), o = n2, a = "undefined" != typeof globalThis && globalThis || "undefined" != typeof window && window || void 0 !== a && a || "undefined" != typeof self && self || (function() {
          return this;
        }).call(null) || Function("return this")();
        o.exportSymbol("TronWebProto.ProposalApproveContract", null, a), o.exportSymbol("TronWebProto.ProposalCreateContract", null, a), o.exportSymbol("TronWebProto.ProposalDeleteContract", null, a), TronWebProto.ProposalApproveContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.ProposalApproveContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.ProposalApproveContract.displayName = "TronWebProto.ProposalApproveContract"), TronWebProto.ProposalCreateContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.ProposalCreateContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.ProposalCreateContract.displayName = "TronWebProto.ProposalCreateContract"), TronWebProto.ProposalDeleteContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.ProposalDeleteContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.ProposalDeleteContract.displayName = "TronWebProto.ProposalDeleteContract"), n2.Message.GENERATE_TO_OBJECT && (TronWebProto.ProposalApproveContract.prototype.toObject = function(e3) {
          return TronWebProto.ProposalApproveContract.toObject(e3, this);
        }, TronWebProto.ProposalApproveContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), proposalId: n2.Message.getFieldWithDefault(t3, 2, 0), isAddApproval: n2.Message.getBooleanFieldWithDefault(t3, 3, false) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.ProposalApproveContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.ProposalApproveContract();
          return TronWebProto.ProposalApproveContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.ProposalApproveContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setProposalId(r4);
              break;
            case 3:
              r4 = t3.readBool(), e3.setIsAddApproval(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.ProposalApproveContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.ProposalApproveContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.ProposalApproveContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getProposalId()) && t3.writeInt64(2, r4), (r4 = e3.getIsAddApproval()) && t3.writeBool(3, r4);
        }, TronWebProto.ProposalApproveContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.ProposalApproveContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.ProposalApproveContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.ProposalApproveContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.ProposalApproveContract.prototype.getProposalId = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.ProposalApproveContract.prototype.setProposalId = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.ProposalApproveContract.prototype.getIsAddApproval = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 3, false);
        }, TronWebProto.ProposalApproveContract.prototype.setIsAddApproval = function(e3) {
          return n2.Message.setProto3BooleanField(this, 3, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.ProposalCreateContract.prototype.toObject = function(e3) {
          return TronWebProto.ProposalCreateContract.toObject(e3, this);
        }, TronWebProto.ProposalCreateContract.toObject = function(e3, t3) {
          var r4, n3 = { ownerAddress: t3.getOwnerAddress_asB64(), parametersMap: (r4 = t3.getParametersMap()) ? r4.toObject(e3, void 0) : [] };
          return e3 && (n3.$jspbMessageInstance = t3), n3;
        }), TronWebProto.ProposalCreateContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.ProposalCreateContract();
          return TronWebProto.ProposalCreateContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.ProposalCreateContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = e3.getParametersMap(), t3.readMessage(r4, function(e4, t4) {
                n2.Map.deserializeBinary(e4, t4, n2.BinaryReader.prototype.readInt64, n2.BinaryReader.prototype.readInt64, null, 0, 0);
              });
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.ProposalCreateContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.ProposalCreateContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.ProposalCreateContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getParametersMap(true)) && r4.getLength() > 0 && r4.serializeBinary(2, t3, n2.BinaryWriter.prototype.writeInt64, n2.BinaryWriter.prototype.writeInt64);
        }, TronWebProto.ProposalCreateContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.ProposalCreateContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.ProposalCreateContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.ProposalCreateContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.ProposalCreateContract.prototype.getParametersMap = function(e3) {
          return n2.Message.getMapField(this, 2, e3, null);
        }, TronWebProto.ProposalCreateContract.prototype.clearParametersMap = function() {
          return this.getParametersMap().clear(), this;
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.ProposalDeleteContract.prototype.toObject = function(e3) {
          return TronWebProto.ProposalDeleteContract.toObject(e3, this);
        }, TronWebProto.ProposalDeleteContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), proposalId: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.ProposalDeleteContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.ProposalDeleteContract();
          return TronWebProto.ProposalDeleteContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.ProposalDeleteContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setProposalId(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.ProposalDeleteContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.ProposalDeleteContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.ProposalDeleteContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getProposalId()) && t3.writeInt64(2, r4);
        }, TronWebProto.ProposalDeleteContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.ProposalDeleteContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.ProposalDeleteContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.ProposalDeleteContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.ProposalDeleteContract.prototype.getProposalId = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.ProposalDeleteContract.prototype.setProposalId = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, o.object.extend(t2, TronWebProto);
      }, 306: (e2) => {
        "use strict";
        e2.exports = require_google_protobuf();
      }, 351: (e2, t2, r3) => {
        var n2 = r3(306), o = n2, a = "undefined" != typeof globalThis && globalThis || "undefined" != typeof window && window || void 0 !== a && a || "undefined" != typeof self && self || (function() {
          return this;
        }).call(null) || Function("return this")();
        o.exportSymbol("TronWebProto.ExchangeCreateContract", null, a), o.exportSymbol("TronWebProto.ExchangeInjectContract", null, a), o.exportSymbol("TronWebProto.ExchangeTransactionContract", null, a), o.exportSymbol("TronWebProto.ExchangeWithdrawContract", null, a), TronWebProto.ExchangeCreateContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.ExchangeCreateContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.ExchangeCreateContract.displayName = "TronWebProto.ExchangeCreateContract"), TronWebProto.ExchangeInjectContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.ExchangeInjectContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.ExchangeInjectContract.displayName = "TronWebProto.ExchangeInjectContract"), TronWebProto.ExchangeWithdrawContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.ExchangeWithdrawContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.ExchangeWithdrawContract.displayName = "TronWebProto.ExchangeWithdrawContract"), TronWebProto.ExchangeTransactionContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.ExchangeTransactionContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.ExchangeTransactionContract.displayName = "TronWebProto.ExchangeTransactionContract"), n2.Message.GENERATE_TO_OBJECT && (TronWebProto.ExchangeCreateContract.prototype.toObject = function(e3) {
          return TronWebProto.ExchangeCreateContract.toObject(e3, this);
        }, TronWebProto.ExchangeCreateContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), firstTokenId: t3.getFirstTokenId_asB64(), firstTokenBalance: n2.Message.getFieldWithDefault(t3, 3, 0), secondTokenId: t3.getSecondTokenId_asB64(), secondTokenBalance: n2.Message.getFieldWithDefault(t3, 5, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.ExchangeCreateContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.ExchangeCreateContract();
          return TronWebProto.ExchangeCreateContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.ExchangeCreateContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setFirstTokenId(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setFirstTokenBalance(r4);
              break;
            case 4:
              r4 = t3.readBytes(), e3.setSecondTokenId(r4);
              break;
            case 5:
              r4 = t3.readInt64(), e3.setSecondTokenBalance(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.ExchangeCreateContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.ExchangeCreateContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.ExchangeCreateContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getFirstTokenId_asU8()).length > 0 && t3.writeBytes(2, r4), 0 !== (r4 = e3.getFirstTokenBalance()) && t3.writeInt64(3, r4), (r4 = e3.getSecondTokenId_asU8()).length > 0 && t3.writeBytes(4, r4), 0 !== (r4 = e3.getSecondTokenBalance()) && t3.writeInt64(5, r4);
        }, TronWebProto.ExchangeCreateContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.ExchangeCreateContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.ExchangeCreateContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.ExchangeCreateContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.ExchangeCreateContract.prototype.getFirstTokenId = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.ExchangeCreateContract.prototype.getFirstTokenId_asB64 = function() {
          return n2.Message.bytesAsB64(this.getFirstTokenId());
        }, TronWebProto.ExchangeCreateContract.prototype.getFirstTokenId_asU8 = function() {
          return n2.Message.bytesAsU8(this.getFirstTokenId());
        }, TronWebProto.ExchangeCreateContract.prototype.setFirstTokenId = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.ExchangeCreateContract.prototype.getFirstTokenBalance = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.ExchangeCreateContract.prototype.setFirstTokenBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.ExchangeCreateContract.prototype.getSecondTokenId = function() {
          return n2.Message.getFieldWithDefault(this, 4, "");
        }, TronWebProto.ExchangeCreateContract.prototype.getSecondTokenId_asB64 = function() {
          return n2.Message.bytesAsB64(this.getSecondTokenId());
        }, TronWebProto.ExchangeCreateContract.prototype.getSecondTokenId_asU8 = function() {
          return n2.Message.bytesAsU8(this.getSecondTokenId());
        }, TronWebProto.ExchangeCreateContract.prototype.setSecondTokenId = function(e3) {
          return n2.Message.setProto3BytesField(this, 4, e3);
        }, TronWebProto.ExchangeCreateContract.prototype.getSecondTokenBalance = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.ExchangeCreateContract.prototype.setSecondTokenBalance = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.ExchangeInjectContract.prototype.toObject = function(e3) {
          return TronWebProto.ExchangeInjectContract.toObject(e3, this);
        }, TronWebProto.ExchangeInjectContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), exchangeId: n2.Message.getFieldWithDefault(t3, 2, 0), tokenId: t3.getTokenId_asB64(), quant: n2.Message.getFieldWithDefault(t3, 4, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.ExchangeInjectContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.ExchangeInjectContract();
          return TronWebProto.ExchangeInjectContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.ExchangeInjectContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setExchangeId(r4);
              break;
            case 3:
              r4 = t3.readBytes(), e3.setTokenId(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setQuant(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.ExchangeInjectContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.ExchangeInjectContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.ExchangeInjectContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getExchangeId()) && t3.writeInt64(2, r4), (r4 = e3.getTokenId_asU8()).length > 0 && t3.writeBytes(3, r4), 0 !== (r4 = e3.getQuant()) && t3.writeInt64(4, r4);
        }, TronWebProto.ExchangeInjectContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.ExchangeInjectContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.ExchangeInjectContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.ExchangeInjectContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.ExchangeInjectContract.prototype.getExchangeId = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.ExchangeInjectContract.prototype.setExchangeId = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.ExchangeInjectContract.prototype.getTokenId = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.ExchangeInjectContract.prototype.getTokenId_asB64 = function() {
          return n2.Message.bytesAsB64(this.getTokenId());
        }, TronWebProto.ExchangeInjectContract.prototype.getTokenId_asU8 = function() {
          return n2.Message.bytesAsU8(this.getTokenId());
        }, TronWebProto.ExchangeInjectContract.prototype.setTokenId = function(e3) {
          return n2.Message.setProto3BytesField(this, 3, e3);
        }, TronWebProto.ExchangeInjectContract.prototype.getQuant = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.ExchangeInjectContract.prototype.setQuant = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.ExchangeWithdrawContract.prototype.toObject = function(e3) {
          return TronWebProto.ExchangeWithdrawContract.toObject(e3, this);
        }, TronWebProto.ExchangeWithdrawContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), exchangeId: n2.Message.getFieldWithDefault(t3, 2, 0), tokenId: t3.getTokenId_asB64(), quant: n2.Message.getFieldWithDefault(t3, 4, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.ExchangeWithdrawContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.ExchangeWithdrawContract();
          return TronWebProto.ExchangeWithdrawContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.ExchangeWithdrawContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setExchangeId(r4);
              break;
            case 3:
              r4 = t3.readBytes(), e3.setTokenId(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setQuant(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.ExchangeWithdrawContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.ExchangeWithdrawContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.ExchangeWithdrawContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getExchangeId()) && t3.writeInt64(2, r4), (r4 = e3.getTokenId_asU8()).length > 0 && t3.writeBytes(3, r4), 0 !== (r4 = e3.getQuant()) && t3.writeInt64(4, r4);
        }, TronWebProto.ExchangeWithdrawContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.ExchangeWithdrawContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.ExchangeWithdrawContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.ExchangeWithdrawContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.ExchangeWithdrawContract.prototype.getExchangeId = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.ExchangeWithdrawContract.prototype.setExchangeId = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.ExchangeWithdrawContract.prototype.getTokenId = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.ExchangeWithdrawContract.prototype.getTokenId_asB64 = function() {
          return n2.Message.bytesAsB64(this.getTokenId());
        }, TronWebProto.ExchangeWithdrawContract.prototype.getTokenId_asU8 = function() {
          return n2.Message.bytesAsU8(this.getTokenId());
        }, TronWebProto.ExchangeWithdrawContract.prototype.setTokenId = function(e3) {
          return n2.Message.setProto3BytesField(this, 3, e3);
        }, TronWebProto.ExchangeWithdrawContract.prototype.getQuant = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.ExchangeWithdrawContract.prototype.setQuant = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.ExchangeTransactionContract.prototype.toObject = function(e3) {
          return TronWebProto.ExchangeTransactionContract.toObject(e3, this);
        }, TronWebProto.ExchangeTransactionContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), exchangeId: n2.Message.getFieldWithDefault(t3, 2, 0), tokenId: t3.getTokenId_asB64(), quant: n2.Message.getFieldWithDefault(t3, 4, 0), expected: n2.Message.getFieldWithDefault(t3, 5, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.ExchangeTransactionContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.ExchangeTransactionContract();
          return TronWebProto.ExchangeTransactionContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.ExchangeTransactionContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setExchangeId(r4);
              break;
            case 3:
              r4 = t3.readBytes(), e3.setTokenId(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setQuant(r4);
              break;
            case 5:
              r4 = t3.readInt64(), e3.setExpected(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.ExchangeTransactionContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.ExchangeTransactionContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.ExchangeTransactionContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getExchangeId()) && t3.writeInt64(2, r4), (r4 = e3.getTokenId_asU8()).length > 0 && t3.writeBytes(3, r4), 0 !== (r4 = e3.getQuant()) && t3.writeInt64(4, r4), 0 !== (r4 = e3.getExpected()) && t3.writeInt64(5, r4);
        }, TronWebProto.ExchangeTransactionContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.ExchangeTransactionContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.ExchangeTransactionContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.ExchangeTransactionContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.ExchangeTransactionContract.prototype.getExchangeId = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.ExchangeTransactionContract.prototype.setExchangeId = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.ExchangeTransactionContract.prototype.getTokenId = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.ExchangeTransactionContract.prototype.getTokenId_asB64 = function() {
          return n2.Message.bytesAsB64(this.getTokenId());
        }, TronWebProto.ExchangeTransactionContract.prototype.getTokenId_asU8 = function() {
          return n2.Message.bytesAsU8(this.getTokenId());
        }, TronWebProto.ExchangeTransactionContract.prototype.setTokenId = function(e3) {
          return n2.Message.setProto3BytesField(this, 3, e3);
        }, TronWebProto.ExchangeTransactionContract.prototype.getQuant = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.ExchangeTransactionContract.prototype.setQuant = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, TronWebProto.ExchangeTransactionContract.prototype.getExpected = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.ExchangeTransactionContract.prototype.setExpected = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, o.object.extend(t2, TronWebProto);
      }, 443: (e2, t2, r3) => {
        var n2 = r3(306), o = n2, a = "undefined" != typeof globalThis && globalThis || "undefined" != typeof window && window || void 0 !== a && a || "undefined" != typeof self && self || (function() {
          return this;
        }).call(null) || Function("return this")(), i = r3(37);
        o.object.extend(proto, i), o.exportSymbol("TronWebProto.AccountCreateContract", null, a), o.exportSymbol("TronWebProto.AccountPermissionUpdateContract", null, a), o.exportSymbol("TronWebProto.AccountUpdateContract", null, a), o.exportSymbol("TronWebProto.SetAccountIdContract", null, a), TronWebProto.AccountCreateContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.AccountCreateContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.AccountCreateContract.displayName = "TronWebProto.AccountCreateContract"), TronWebProto.AccountUpdateContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.AccountUpdateContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.AccountUpdateContract.displayName = "TronWebProto.AccountUpdateContract"), TronWebProto.SetAccountIdContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.SetAccountIdContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.SetAccountIdContract.displayName = "TronWebProto.SetAccountIdContract"), TronWebProto.AccountPermissionUpdateContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.AccountPermissionUpdateContract.repeatedFields_, null);
        }, o.inherits(TronWebProto.AccountPermissionUpdateContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.AccountPermissionUpdateContract.displayName = "TronWebProto.AccountPermissionUpdateContract"), n2.Message.GENERATE_TO_OBJECT && (TronWebProto.AccountCreateContract.prototype.toObject = function(e3) {
          return TronWebProto.AccountCreateContract.toObject(e3, this);
        }, TronWebProto.AccountCreateContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), accountAddress: t3.getAccountAddress_asB64(), type: n2.Message.getFieldWithDefault(t3, 3, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.AccountCreateContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.AccountCreateContract();
          return TronWebProto.AccountCreateContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.AccountCreateContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setAccountAddress(r4);
              break;
            case 3:
              r4 = t3.readEnum(), e3.setType(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.AccountCreateContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.AccountCreateContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.AccountCreateContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getAccountAddress_asU8()).length > 0 && t3.writeBytes(2, r4), 0 !== (r4 = e3.getType()) && t3.writeEnum(3, r4);
        }, TronWebProto.AccountCreateContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.AccountCreateContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.AccountCreateContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.AccountCreateContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.AccountCreateContract.prototype.getAccountAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.AccountCreateContract.prototype.getAccountAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAccountAddress());
        }, TronWebProto.AccountCreateContract.prototype.getAccountAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAccountAddress());
        }, TronWebProto.AccountCreateContract.prototype.setAccountAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.AccountCreateContract.prototype.getType = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.AccountCreateContract.prototype.setType = function(e3) {
          return n2.Message.setProto3EnumField(this, 3, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.AccountUpdateContract.prototype.toObject = function(e3) {
          return TronWebProto.AccountUpdateContract.toObject(e3, this);
        }, TronWebProto.AccountUpdateContract.toObject = function(e3, t3) {
          var r4 = { accountName: t3.getAccountName_asB64(), ownerAddress: t3.getOwnerAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.AccountUpdateContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.AccountUpdateContract();
          return TronWebProto.AccountUpdateContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.AccountUpdateContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setAccountName(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setOwnerAddress(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.AccountUpdateContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.AccountUpdateContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.AccountUpdateContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getAccountName_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(2, r4);
        }, TronWebProto.AccountUpdateContract.prototype.getAccountName = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.AccountUpdateContract.prototype.getAccountName_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAccountName());
        }, TronWebProto.AccountUpdateContract.prototype.getAccountName_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAccountName());
        }, TronWebProto.AccountUpdateContract.prototype.setAccountName = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.AccountUpdateContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.AccountUpdateContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.AccountUpdateContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.AccountUpdateContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.SetAccountIdContract.prototype.toObject = function(e3) {
          return TronWebProto.SetAccountIdContract.toObject(e3, this);
        }, TronWebProto.SetAccountIdContract.toObject = function(e3, t3) {
          var r4 = { accountId: t3.getAccountId_asB64(), ownerAddress: t3.getOwnerAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.SetAccountIdContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.SetAccountIdContract();
          return TronWebProto.SetAccountIdContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.SetAccountIdContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setAccountId(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setOwnerAddress(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.SetAccountIdContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.SetAccountIdContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.SetAccountIdContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getAccountId_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(2, r4);
        }, TronWebProto.SetAccountIdContract.prototype.getAccountId = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.SetAccountIdContract.prototype.getAccountId_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAccountId());
        }, TronWebProto.SetAccountIdContract.prototype.getAccountId_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAccountId());
        }, TronWebProto.SetAccountIdContract.prototype.setAccountId = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.SetAccountIdContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.SetAccountIdContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.SetAccountIdContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.SetAccountIdContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.AccountPermissionUpdateContract.repeatedFields_ = [4], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.AccountPermissionUpdateContract.prototype.toObject = function(e3) {
          return TronWebProto.AccountPermissionUpdateContract.toObject(e3, this);
        }, TronWebProto.AccountPermissionUpdateContract.toObject = function(e3, t3) {
          var r4, o2 = { ownerAddress: t3.getOwnerAddress_asB64(), owner: (r4 = t3.getOwner()) && i.Permission.toObject(e3, r4), witness: (r4 = t3.getWitness()) && i.Permission.toObject(e3, r4), activesList: n2.Message.toObjectList(t3.getActivesList(), i.Permission.toObject, e3) };
          return e3 && (o2.$jspbMessageInstance = t3), o2;
        }), TronWebProto.AccountPermissionUpdateContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.AccountPermissionUpdateContract();
          return TronWebProto.AccountPermissionUpdateContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.AccountPermissionUpdateContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = new i.Permission(), t3.readMessage(r4, i.Permission.deserializeBinaryFromReader), e3.setOwner(r4);
              break;
            case 3:
              r4 = new i.Permission(), t3.readMessage(r4, i.Permission.deserializeBinaryFromReader), e3.setWitness(r4);
              break;
            case 4:
              r4 = new i.Permission(), t3.readMessage(r4, i.Permission.deserializeBinaryFromReader), e3.addActives(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.AccountPermissionUpdateContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.AccountPermissionUpdateContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.AccountPermissionUpdateContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), null != (r4 = e3.getOwner()) && t3.writeMessage(2, r4, i.Permission.serializeBinaryToWriter), null != (r4 = e3.getWitness()) && t3.writeMessage(3, r4, i.Permission.serializeBinaryToWriter), (r4 = e3.getActivesList()).length > 0 && t3.writeRepeatedMessage(4, r4, i.Permission.serializeBinaryToWriter);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.AccountPermissionUpdateContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.AccountPermissionUpdateContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.AccountPermissionUpdateContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.getOwner = function() {
          return n2.Message.getWrapperField(this, i.Permission, 2);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.setOwner = function(e3) {
          return n2.Message.setWrapperField(this, 2, e3);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.clearOwner = function() {
          return this.setOwner(void 0);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.hasOwner = function() {
          return null != n2.Message.getField(this, 2);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.getWitness = function() {
          return n2.Message.getWrapperField(this, i.Permission, 3);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.setWitness = function(e3) {
          return n2.Message.setWrapperField(this, 3, e3);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.clearWitness = function() {
          return this.setWitness(void 0);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.hasWitness = function() {
          return null != n2.Message.getField(this, 3);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.getActivesList = function() {
          return n2.Message.getRepeatedWrapperField(this, i.Permission, 4);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.setActivesList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 4, e3);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.addActives = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 4, e3, TronWebProto.Permission, t3);
        }, TronWebProto.AccountPermissionUpdateContract.prototype.clearActivesList = function() {
          return this.setActivesList([]);
        }, o.object.extend(t2, TronWebProto);
      }, 467: (e2, t2, r3) => {
        var n2 = r3(306), o = n2, a = "undefined" != typeof globalThis && globalThis || "undefined" != typeof window && window || void 0 !== a && a || "undefined" != typeof self && self || (function() {
          return this;
        }).call(null) || Function("return this")();
        o.exportSymbol("TronWebProto.VoteWitnessContract", null, a), o.exportSymbol("TronWebProto.VoteWitnessContract.Vote", null, a), o.exportSymbol("TronWebProto.WitnessCreateContract", null, a), o.exportSymbol("TronWebProto.WitnessUpdateContract", null, a), TronWebProto.WitnessCreateContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.WitnessCreateContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.WitnessCreateContract.displayName = "TronWebProto.WitnessCreateContract"), TronWebProto.WitnessUpdateContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.WitnessUpdateContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.WitnessUpdateContract.displayName = "TronWebProto.WitnessUpdateContract"), TronWebProto.VoteWitnessContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.VoteWitnessContract.repeatedFields_, null);
        }, o.inherits(TronWebProto.VoteWitnessContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.VoteWitnessContract.displayName = "TronWebProto.VoteWitnessContract"), TronWebProto.VoteWitnessContract.Vote = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.VoteWitnessContract.Vote, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.VoteWitnessContract.Vote.displayName = "TronWebProto.VoteWitnessContract.Vote"), n2.Message.GENERATE_TO_OBJECT && (TronWebProto.WitnessCreateContract.prototype.toObject = function(e3) {
          return TronWebProto.WitnessCreateContract.toObject(e3, this);
        }, TronWebProto.WitnessCreateContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), url: t3.getUrl_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.WitnessCreateContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.WitnessCreateContract();
          return TronWebProto.WitnessCreateContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.WitnessCreateContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setUrl(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.WitnessCreateContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.WitnessCreateContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.WitnessCreateContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getUrl_asU8()).length > 0 && t3.writeBytes(2, r4);
        }, TronWebProto.WitnessCreateContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.WitnessCreateContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.WitnessCreateContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.WitnessCreateContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.WitnessCreateContract.prototype.getUrl = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.WitnessCreateContract.prototype.getUrl_asB64 = function() {
          return n2.Message.bytesAsB64(this.getUrl());
        }, TronWebProto.WitnessCreateContract.prototype.getUrl_asU8 = function() {
          return n2.Message.bytesAsU8(this.getUrl());
        }, TronWebProto.WitnessCreateContract.prototype.setUrl = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.WitnessUpdateContract.prototype.toObject = function(e3) {
          return TronWebProto.WitnessUpdateContract.toObject(e3, this);
        }, TronWebProto.WitnessUpdateContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), updateUrl: t3.getUpdateUrl_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.WitnessUpdateContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.WitnessUpdateContract();
          return TronWebProto.WitnessUpdateContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.WitnessUpdateContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 12:
              r4 = t3.readBytes(), e3.setUpdateUrl(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.WitnessUpdateContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.WitnessUpdateContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.WitnessUpdateContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getUpdateUrl_asU8()).length > 0 && t3.writeBytes(12, r4);
        }, TronWebProto.WitnessUpdateContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.WitnessUpdateContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.WitnessUpdateContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.WitnessUpdateContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.WitnessUpdateContract.prototype.getUpdateUrl = function() {
          return n2.Message.getFieldWithDefault(this, 12, "");
        }, TronWebProto.WitnessUpdateContract.prototype.getUpdateUrl_asB64 = function() {
          return n2.Message.bytesAsB64(this.getUpdateUrl());
        }, TronWebProto.WitnessUpdateContract.prototype.getUpdateUrl_asU8 = function() {
          return n2.Message.bytesAsU8(this.getUpdateUrl());
        }, TronWebProto.WitnessUpdateContract.prototype.setUpdateUrl = function(e3) {
          return n2.Message.setProto3BytesField(this, 12, e3);
        }, TronWebProto.VoteWitnessContract.repeatedFields_ = [2], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.VoteWitnessContract.prototype.toObject = function(e3) {
          return TronWebProto.VoteWitnessContract.toObject(e3, this);
        }, TronWebProto.VoteWitnessContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), votesList: n2.Message.toObjectList(t3.getVotesList(), TronWebProto.VoteWitnessContract.Vote.toObject, e3), support: n2.Message.getBooleanFieldWithDefault(t3, 3, false) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.VoteWitnessContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.VoteWitnessContract();
          return TronWebProto.VoteWitnessContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.VoteWitnessContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = new TronWebProto.VoteWitnessContract.Vote(), t3.readMessage(r4, TronWebProto.VoteWitnessContract.Vote.deserializeBinaryFromReader), e3.addVotes(r4);
              break;
            case 3:
              r4 = t3.readBool(), e3.setSupport(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.VoteWitnessContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.VoteWitnessContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.VoteWitnessContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getVotesList()).length > 0 && t3.writeRepeatedMessage(2, r4, TronWebProto.VoteWitnessContract.Vote.serializeBinaryToWriter), (r4 = e3.getSupport()) && t3.writeBool(3, r4);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.VoteWitnessContract.Vote.prototype.toObject = function(e3) {
          return TronWebProto.VoteWitnessContract.Vote.toObject(e3, this);
        }, TronWebProto.VoteWitnessContract.Vote.toObject = function(e3, t3) {
          var r4 = { voteAddress: t3.getVoteAddress_asB64(), voteCount: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.VoteWitnessContract.Vote.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.VoteWitnessContract.Vote();
          return TronWebProto.VoteWitnessContract.Vote.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.VoteWitnessContract.Vote.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setVoteAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setVoteCount(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.VoteWitnessContract.Vote.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.VoteWitnessContract.Vote.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.VoteWitnessContract.Vote.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getVoteAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getVoteCount()) && t3.writeInt64(2, r4);
        }, TronWebProto.VoteWitnessContract.Vote.prototype.getVoteAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.VoteWitnessContract.Vote.prototype.getVoteAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getVoteAddress());
        }, TronWebProto.VoteWitnessContract.Vote.prototype.getVoteAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getVoteAddress());
        }, TronWebProto.VoteWitnessContract.Vote.prototype.setVoteAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.VoteWitnessContract.Vote.prototype.getVoteCount = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.VoteWitnessContract.Vote.prototype.setVoteCount = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.VoteWitnessContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.VoteWitnessContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.VoteWitnessContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.VoteWitnessContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.VoteWitnessContract.prototype.getVotesList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.VoteWitnessContract.Vote, 2);
        }, TronWebProto.VoteWitnessContract.prototype.setVotesList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 2, e3);
        }, TronWebProto.VoteWitnessContract.prototype.addVotes = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 2, e3, TronWebProto.VoteWitnessContract.Vote, t3);
        }, TronWebProto.VoteWitnessContract.prototype.clearVotesList = function() {
          return this.setVotesList([]);
        }, TronWebProto.VoteWitnessContract.prototype.getSupport = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 3, false);
        }, TronWebProto.VoteWitnessContract.prototype.setSupport = function(e3) {
          return n2.Message.setProto3BooleanField(this, 3, e3);
        }, o.object.extend(t2, TronWebProto);
      }, 521: (e2, t2, r3) => {
        var n2 = r3(306), o = n2, a = "undefined" != typeof globalThis && globalThis || "undefined" != typeof window && window || void 0 !== a && a || "undefined" != typeof self && self || (function() {
          return this;
        }).call(null) || Function("return this")();
        o.exportSymbol("TronWebProto.BuyStorageBytesContract", null, a), o.exportSymbol("TronWebProto.BuyStorageContract", null, a), o.exportSymbol("TronWebProto.SellStorageContract", null, a), o.exportSymbol("TronWebProto.UpdateBrokerageContract", null, a), TronWebProto.BuyStorageBytesContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.BuyStorageBytesContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.BuyStorageBytesContract.displayName = "TronWebProto.BuyStorageBytesContract"), TronWebProto.BuyStorageContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.BuyStorageContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.BuyStorageContract.displayName = "TronWebProto.BuyStorageContract"), TronWebProto.SellStorageContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.SellStorageContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.SellStorageContract.displayName = "TronWebProto.SellStorageContract"), TronWebProto.UpdateBrokerageContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.UpdateBrokerageContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.UpdateBrokerageContract.displayName = "TronWebProto.UpdateBrokerageContract"), n2.Message.GENERATE_TO_OBJECT && (TronWebProto.BuyStorageBytesContract.prototype.toObject = function(e3) {
          return TronWebProto.BuyStorageBytesContract.toObject(e3, this);
        }, TronWebProto.BuyStorageBytesContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), bytes: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.BuyStorageBytesContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.BuyStorageBytesContract();
          return TronWebProto.BuyStorageBytesContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.BuyStorageBytesContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setBytes(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.BuyStorageBytesContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.BuyStorageBytesContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.BuyStorageBytesContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getBytes()) && t3.writeInt64(2, r4);
        }, TronWebProto.BuyStorageBytesContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.BuyStorageBytesContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.BuyStorageBytesContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.BuyStorageBytesContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.BuyStorageBytesContract.prototype.getBytes = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.BuyStorageBytesContract.prototype.setBytes = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.BuyStorageContract.prototype.toObject = function(e3) {
          return TronWebProto.BuyStorageContract.toObject(e3, this);
        }, TronWebProto.BuyStorageContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), quant: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.BuyStorageContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.BuyStorageContract();
          return TronWebProto.BuyStorageContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.BuyStorageContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setQuant(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.BuyStorageContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.BuyStorageContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.BuyStorageContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getQuant()) && t3.writeInt64(2, r4);
        }, TronWebProto.BuyStorageContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.BuyStorageContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.BuyStorageContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.BuyStorageContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.BuyStorageContract.prototype.getQuant = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.BuyStorageContract.prototype.setQuant = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.SellStorageContract.prototype.toObject = function(e3) {
          return TronWebProto.SellStorageContract.toObject(e3, this);
        }, TronWebProto.SellStorageContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), storageBytes: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.SellStorageContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.SellStorageContract();
          return TronWebProto.SellStorageContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.SellStorageContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setStorageBytes(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.SellStorageContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.SellStorageContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.SellStorageContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getStorageBytes()) && t3.writeInt64(2, r4);
        }, TronWebProto.SellStorageContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.SellStorageContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.SellStorageContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.SellStorageContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.SellStorageContract.prototype.getStorageBytes = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.SellStorageContract.prototype.setStorageBytes = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.UpdateBrokerageContract.prototype.toObject = function(e3) {
          return TronWebProto.UpdateBrokerageContract.toObject(e3, this);
        }, TronWebProto.UpdateBrokerageContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), brokerage: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.UpdateBrokerageContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.UpdateBrokerageContract();
          return TronWebProto.UpdateBrokerageContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.UpdateBrokerageContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readInt32(), e3.setBrokerage(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.UpdateBrokerageContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.UpdateBrokerageContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.UpdateBrokerageContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), 0 !== (r4 = e3.getBrokerage()) && t3.writeInt32(2, r4);
        }, TronWebProto.UpdateBrokerageContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.UpdateBrokerageContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.UpdateBrokerageContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.UpdateBrokerageContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.UpdateBrokerageContract.prototype.getBrokerage = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.UpdateBrokerageContract.prototype.setBrokerage = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, o.object.extend(t2, TronWebProto);
      }, 540: (e2, t2, r3) => {
        var n2 = r3(306), o = n2, a = "undefined" != typeof globalThis && globalThis || "undefined" != typeof window && window || void 0 !== a && a || "undefined" != typeof self && self || (function() {
          return this;
        }).call(null) || Function("return this")();
        o.exportSymbol("TronWebProto.AssetIssueContract", null, a), o.exportSymbol("TronWebProto.AssetIssueContract.FrozenSupply", null, a), o.exportSymbol("TronWebProto.ParticipateAssetIssueContract", null, a), o.exportSymbol("TronWebProto.TransferAssetContract", null, a), o.exportSymbol("TronWebProto.UnfreezeAssetContract", null, a), o.exportSymbol("TronWebProto.UpdateAssetContract", null, a), TronWebProto.AssetIssueContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.AssetIssueContract.repeatedFields_, null);
        }, o.inherits(TronWebProto.AssetIssueContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.AssetIssueContract.displayName = "TronWebProto.AssetIssueContract"), TronWebProto.AssetIssueContract.FrozenSupply = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.AssetIssueContract.FrozenSupply, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.AssetIssueContract.FrozenSupply.displayName = "TronWebProto.AssetIssueContract.FrozenSupply"), TronWebProto.TransferAssetContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.TransferAssetContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.TransferAssetContract.displayName = "TronWebProto.TransferAssetContract"), TronWebProto.UnfreezeAssetContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.UnfreezeAssetContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.UnfreezeAssetContract.displayName = "TronWebProto.UnfreezeAssetContract"), TronWebProto.UpdateAssetContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.UpdateAssetContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.UpdateAssetContract.displayName = "TronWebProto.UpdateAssetContract"), TronWebProto.ParticipateAssetIssueContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.ParticipateAssetIssueContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.ParticipateAssetIssueContract.displayName = "TronWebProto.ParticipateAssetIssueContract"), TronWebProto.AssetIssueContract.repeatedFields_ = [5], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.AssetIssueContract.prototype.toObject = function(e3) {
          return TronWebProto.AssetIssueContract.toObject(e3, this);
        }, TronWebProto.AssetIssueContract.toObject = function(e3, t3) {
          var r4 = { id: n2.Message.getFieldWithDefault(t3, 41, ""), ownerAddress: t3.getOwnerAddress_asB64(), name: t3.getName_asB64(), abbr: t3.getAbbr_asB64(), totalSupply: n2.Message.getFieldWithDefault(t3, 4, 0), frozenSupplyList: n2.Message.toObjectList(t3.getFrozenSupplyList(), TronWebProto.AssetIssueContract.FrozenSupply.toObject, e3), trxNum: n2.Message.getFieldWithDefault(t3, 6, 0), precision: n2.Message.getFieldWithDefault(t3, 7, 0), num: n2.Message.getFieldWithDefault(t3, 8, 0), startTime: n2.Message.getFieldWithDefault(t3, 9, 0), endTime: n2.Message.getFieldWithDefault(t3, 10, 0), order: n2.Message.getFieldWithDefault(t3, 11, 0), voteScore: n2.Message.getFieldWithDefault(t3, 16, 0), description: t3.getDescription_asB64(), url: t3.getUrl_asB64(), freeAssetNetLimit: n2.Message.getFieldWithDefault(t3, 22, 0), publicFreeAssetNetLimit: n2.Message.getFieldWithDefault(t3, 23, 0), publicFreeAssetNetUsage: n2.Message.getFieldWithDefault(t3, 24, 0), publicLatestFreeNetTime: n2.Message.getFieldWithDefault(t3, 25, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.AssetIssueContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.AssetIssueContract();
          return TronWebProto.AssetIssueContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.AssetIssueContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 41:
              var r4 = t3.readString();
              e3.setId(r4);
              break;
            case 1:
              r4 = t3.readBytes(), e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setName(r4);
              break;
            case 3:
              r4 = t3.readBytes(), e3.setAbbr(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setTotalSupply(r4);
              break;
            case 5:
              r4 = new TronWebProto.AssetIssueContract.FrozenSupply(), t3.readMessage(r4, TronWebProto.AssetIssueContract.FrozenSupply.deserializeBinaryFromReader), e3.addFrozenSupply(r4);
              break;
            case 6:
              r4 = t3.readInt32(), e3.setTrxNum(r4);
              break;
            case 7:
              r4 = t3.readInt32(), e3.setPrecision(r4);
              break;
            case 8:
              r4 = t3.readInt32(), e3.setNum(r4);
              break;
            case 9:
              r4 = t3.readInt64(), e3.setStartTime(r4);
              break;
            case 10:
              r4 = t3.readInt64(), e3.setEndTime(r4);
              break;
            case 11:
              r4 = t3.readInt64(), e3.setOrder(r4);
              break;
            case 16:
              r4 = t3.readInt32(), e3.setVoteScore(r4);
              break;
            case 20:
              r4 = t3.readBytes(), e3.setDescription(r4);
              break;
            case 21:
              r4 = t3.readBytes(), e3.setUrl(r4);
              break;
            case 22:
              r4 = t3.readInt64(), e3.setFreeAssetNetLimit(r4);
              break;
            case 23:
              r4 = t3.readInt64(), e3.setPublicFreeAssetNetLimit(r4);
              break;
            case 24:
              r4 = t3.readInt64(), e3.setPublicFreeAssetNetUsage(r4);
              break;
            case 25:
              r4 = t3.readInt64(), e3.setPublicLatestFreeNetTime(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.AssetIssueContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.AssetIssueContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.AssetIssueContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getId()).length > 0 && t3.writeString(41, r4), (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getName_asU8()).length > 0 && t3.writeBytes(2, r4), (r4 = e3.getAbbr_asU8()).length > 0 && t3.writeBytes(3, r4), 0 !== (r4 = e3.getTotalSupply()) && t3.writeInt64(4, r4), (r4 = e3.getFrozenSupplyList()).length > 0 && t3.writeRepeatedMessage(5, r4, TronWebProto.AssetIssueContract.FrozenSupply.serializeBinaryToWriter), 0 !== (r4 = e3.getTrxNum()) && t3.writeInt32(6, r4), 0 !== (r4 = e3.getPrecision()) && t3.writeInt32(7, r4), 0 !== (r4 = e3.getNum()) && t3.writeInt32(8, r4), 0 !== (r4 = e3.getStartTime()) && t3.writeInt64(9, r4), 0 !== (r4 = e3.getEndTime()) && t3.writeInt64(10, r4), 0 !== (r4 = e3.getOrder()) && t3.writeInt64(11, r4), 0 !== (r4 = e3.getVoteScore()) && t3.writeInt32(16, r4), (r4 = e3.getDescription_asU8()).length > 0 && t3.writeBytes(20, r4), (r4 = e3.getUrl_asU8()).length > 0 && t3.writeBytes(21, r4), 0 !== (r4 = e3.getFreeAssetNetLimit()) && t3.writeInt64(22, r4), 0 !== (r4 = e3.getPublicFreeAssetNetLimit()) && t3.writeInt64(23, r4), 0 !== (r4 = e3.getPublicFreeAssetNetUsage()) && t3.writeInt64(24, r4), 0 !== (r4 = e3.getPublicLatestFreeNetTime()) && t3.writeInt64(25, r4);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.AssetIssueContract.FrozenSupply.prototype.toObject = function(e3) {
          return TronWebProto.AssetIssueContract.FrozenSupply.toObject(e3, this);
        }, TronWebProto.AssetIssueContract.FrozenSupply.toObject = function(e3, t3) {
          var r4 = { frozenAmount: n2.Message.getFieldWithDefault(t3, 1, 0), frozenDays: n2.Message.getFieldWithDefault(t3, 2, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.AssetIssueContract.FrozenSupply.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.AssetIssueContract.FrozenSupply();
          return TronWebProto.AssetIssueContract.FrozenSupply.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.AssetIssueContract.FrozenSupply.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readInt64();
              e3.setFrozenAmount(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setFrozenDays(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.AssetIssueContract.FrozenSupply.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.AssetIssueContract.FrozenSupply.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.AssetIssueContract.FrozenSupply.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getFrozenAmount()) && t3.writeInt64(1, r4), 0 !== (r4 = e3.getFrozenDays()) && t3.writeInt64(2, r4);
        }, TronWebProto.AssetIssueContract.FrozenSupply.prototype.getFrozenAmount = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.AssetIssueContract.FrozenSupply.prototype.setFrozenAmount = function(e3) {
          return n2.Message.setProto3IntField(this, 1, e3);
        }, TronWebProto.AssetIssueContract.FrozenSupply.prototype.getFrozenDays = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.AssetIssueContract.FrozenSupply.prototype.setFrozenDays = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.AssetIssueContract.prototype.getId = function() {
          return n2.Message.getFieldWithDefault(this, 41, "");
        }, TronWebProto.AssetIssueContract.prototype.setId = function(e3) {
          return n2.Message.setProto3StringField(this, 41, e3);
        }, TronWebProto.AssetIssueContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.AssetIssueContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.AssetIssueContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.AssetIssueContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.AssetIssueContract.prototype.getName = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.AssetIssueContract.prototype.getName_asB64 = function() {
          return n2.Message.bytesAsB64(this.getName());
        }, TronWebProto.AssetIssueContract.prototype.getName_asU8 = function() {
          return n2.Message.bytesAsU8(this.getName());
        }, TronWebProto.AssetIssueContract.prototype.setName = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.AssetIssueContract.prototype.getAbbr = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.AssetIssueContract.prototype.getAbbr_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAbbr());
        }, TronWebProto.AssetIssueContract.prototype.getAbbr_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAbbr());
        }, TronWebProto.AssetIssueContract.prototype.setAbbr = function(e3) {
          return n2.Message.setProto3BytesField(this, 3, e3);
        }, TronWebProto.AssetIssueContract.prototype.getTotalSupply = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.AssetIssueContract.prototype.setTotalSupply = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, TronWebProto.AssetIssueContract.prototype.getFrozenSupplyList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.AssetIssueContract.FrozenSupply, 5);
        }, TronWebProto.AssetIssueContract.prototype.setFrozenSupplyList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 5, e3);
        }, TronWebProto.AssetIssueContract.prototype.addFrozenSupply = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 5, e3, TronWebProto.AssetIssueContract.FrozenSupply, t3);
        }, TronWebProto.AssetIssueContract.prototype.clearFrozenSupplyList = function() {
          return this.setFrozenSupplyList([]);
        }, TronWebProto.AssetIssueContract.prototype.getTrxNum = function() {
          return n2.Message.getFieldWithDefault(this, 6, 0);
        }, TronWebProto.AssetIssueContract.prototype.setTrxNum = function(e3) {
          return n2.Message.setProto3IntField(this, 6, e3);
        }, TronWebProto.AssetIssueContract.prototype.getPrecision = function() {
          return n2.Message.getFieldWithDefault(this, 7, 0);
        }, TronWebProto.AssetIssueContract.prototype.setPrecision = function(e3) {
          return n2.Message.setProto3IntField(this, 7, e3);
        }, TronWebProto.AssetIssueContract.prototype.getNum = function() {
          return n2.Message.getFieldWithDefault(this, 8, 0);
        }, TronWebProto.AssetIssueContract.prototype.setNum = function(e3) {
          return n2.Message.setProto3IntField(this, 8, e3);
        }, TronWebProto.AssetIssueContract.prototype.getStartTime = function() {
          return n2.Message.getFieldWithDefault(this, 9, 0);
        }, TronWebProto.AssetIssueContract.prototype.setStartTime = function(e3) {
          return n2.Message.setProto3IntField(this, 9, e3);
        }, TronWebProto.AssetIssueContract.prototype.getEndTime = function() {
          return n2.Message.getFieldWithDefault(this, 10, 0);
        }, TronWebProto.AssetIssueContract.prototype.setEndTime = function(e3) {
          return n2.Message.setProto3IntField(this, 10, e3);
        }, TronWebProto.AssetIssueContract.prototype.getOrder = function() {
          return n2.Message.getFieldWithDefault(this, 11, 0);
        }, TronWebProto.AssetIssueContract.prototype.setOrder = function(e3) {
          return n2.Message.setProto3IntField(this, 11, e3);
        }, TronWebProto.AssetIssueContract.prototype.getVoteScore = function() {
          return n2.Message.getFieldWithDefault(this, 16, 0);
        }, TronWebProto.AssetIssueContract.prototype.setVoteScore = function(e3) {
          return n2.Message.setProto3IntField(this, 16, e3);
        }, TronWebProto.AssetIssueContract.prototype.getDescription = function() {
          return n2.Message.getFieldWithDefault(this, 20, "");
        }, TronWebProto.AssetIssueContract.prototype.getDescription_asB64 = function() {
          return n2.Message.bytesAsB64(this.getDescription());
        }, TronWebProto.AssetIssueContract.prototype.getDescription_asU8 = function() {
          return n2.Message.bytesAsU8(this.getDescription());
        }, TronWebProto.AssetIssueContract.prototype.setDescription = function(e3) {
          return n2.Message.setProto3BytesField(this, 20, e3);
        }, TronWebProto.AssetIssueContract.prototype.getUrl = function() {
          return n2.Message.getFieldWithDefault(this, 21, "");
        }, TronWebProto.AssetIssueContract.prototype.getUrl_asB64 = function() {
          return n2.Message.bytesAsB64(this.getUrl());
        }, TronWebProto.AssetIssueContract.prototype.getUrl_asU8 = function() {
          return n2.Message.bytesAsU8(this.getUrl());
        }, TronWebProto.AssetIssueContract.prototype.setUrl = function(e3) {
          return n2.Message.setProto3BytesField(this, 21, e3);
        }, TronWebProto.AssetIssueContract.prototype.getFreeAssetNetLimit = function() {
          return n2.Message.getFieldWithDefault(this, 22, 0);
        }, TronWebProto.AssetIssueContract.prototype.setFreeAssetNetLimit = function(e3) {
          return n2.Message.setProto3IntField(this, 22, e3);
        }, TronWebProto.AssetIssueContract.prototype.getPublicFreeAssetNetLimit = function() {
          return n2.Message.getFieldWithDefault(this, 23, 0);
        }, TronWebProto.AssetIssueContract.prototype.setPublicFreeAssetNetLimit = function(e3) {
          return n2.Message.setProto3IntField(this, 23, e3);
        }, TronWebProto.AssetIssueContract.prototype.getPublicFreeAssetNetUsage = function() {
          return n2.Message.getFieldWithDefault(this, 24, 0);
        }, TronWebProto.AssetIssueContract.prototype.setPublicFreeAssetNetUsage = function(e3) {
          return n2.Message.setProto3IntField(this, 24, e3);
        }, TronWebProto.AssetIssueContract.prototype.getPublicLatestFreeNetTime = function() {
          return n2.Message.getFieldWithDefault(this, 25, 0);
        }, TronWebProto.AssetIssueContract.prototype.setPublicLatestFreeNetTime = function(e3) {
          return n2.Message.setProto3IntField(this, 25, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.TransferAssetContract.prototype.toObject = function(e3) {
          return TronWebProto.TransferAssetContract.toObject(e3, this);
        }, TronWebProto.TransferAssetContract.toObject = function(e3, t3) {
          var r4 = { assetName: t3.getAssetName_asB64(), ownerAddress: t3.getOwnerAddress_asB64(), toAddress: t3.getToAddress_asB64(), amount: n2.Message.getFieldWithDefault(t3, 4, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.TransferAssetContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.TransferAssetContract();
          return TronWebProto.TransferAssetContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.TransferAssetContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setAssetName(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setOwnerAddress(r4);
              break;
            case 3:
              r4 = t3.readBytes(), e3.setToAddress(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setAmount(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.TransferAssetContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.TransferAssetContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.TransferAssetContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getAssetName_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(2, r4), (r4 = e3.getToAddress_asU8()).length > 0 && t3.writeBytes(3, r4), 0 !== (r4 = e3.getAmount()) && t3.writeInt64(4, r4);
        }, TronWebProto.TransferAssetContract.prototype.getAssetName = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.TransferAssetContract.prototype.getAssetName_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAssetName());
        }, TronWebProto.TransferAssetContract.prototype.getAssetName_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAssetName());
        }, TronWebProto.TransferAssetContract.prototype.setAssetName = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.TransferAssetContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.TransferAssetContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.TransferAssetContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.TransferAssetContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.TransferAssetContract.prototype.getToAddress = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.TransferAssetContract.prototype.getToAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getToAddress());
        }, TronWebProto.TransferAssetContract.prototype.getToAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getToAddress());
        }, TronWebProto.TransferAssetContract.prototype.setToAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 3, e3);
        }, TronWebProto.TransferAssetContract.prototype.getAmount = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.TransferAssetContract.prototype.setAmount = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.UnfreezeAssetContract.prototype.toObject = function(e3) {
          return TronWebProto.UnfreezeAssetContract.toObject(e3, this);
        }, TronWebProto.UnfreezeAssetContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.UnfreezeAssetContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.UnfreezeAssetContract();
          return TronWebProto.UnfreezeAssetContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.UnfreezeAssetContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) if (1 === t3.getFieldNumber()) {
            var r4 = t3.readBytes();
            e3.setOwnerAddress(r4);
          } else t3.skipField();
          return e3;
        }, TronWebProto.UnfreezeAssetContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.UnfreezeAssetContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.UnfreezeAssetContract.serializeBinaryToWriter = function(e3, t3) {
          var r4;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4);
        }, TronWebProto.UnfreezeAssetContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.UnfreezeAssetContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.UnfreezeAssetContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.UnfreezeAssetContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.UpdateAssetContract.prototype.toObject = function(e3) {
          return TronWebProto.UpdateAssetContract.toObject(e3, this);
        }, TronWebProto.UpdateAssetContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), description: t3.getDescription_asB64(), url: t3.getUrl_asB64(), newLimit: n2.Message.getFieldWithDefault(t3, 4, 0), newPublicLimit: n2.Message.getFieldWithDefault(t3, 5, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.UpdateAssetContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.UpdateAssetContract();
          return TronWebProto.UpdateAssetContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.UpdateAssetContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setDescription(r4);
              break;
            case 3:
              r4 = t3.readBytes(), e3.setUrl(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setNewLimit(r4);
              break;
            case 5:
              r4 = t3.readInt64(), e3.setNewPublicLimit(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.UpdateAssetContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.UpdateAssetContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.UpdateAssetContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getDescription_asU8()).length > 0 && t3.writeBytes(2, r4), (r4 = e3.getUrl_asU8()).length > 0 && t3.writeBytes(3, r4), 0 !== (r4 = e3.getNewLimit()) && t3.writeInt64(4, r4), 0 !== (r4 = e3.getNewPublicLimit()) && t3.writeInt64(5, r4);
        }, TronWebProto.UpdateAssetContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.UpdateAssetContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.UpdateAssetContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.UpdateAssetContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.UpdateAssetContract.prototype.getDescription = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.UpdateAssetContract.prototype.getDescription_asB64 = function() {
          return n2.Message.bytesAsB64(this.getDescription());
        }, TronWebProto.UpdateAssetContract.prototype.getDescription_asU8 = function() {
          return n2.Message.bytesAsU8(this.getDescription());
        }, TronWebProto.UpdateAssetContract.prototype.setDescription = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.UpdateAssetContract.prototype.getUrl = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.UpdateAssetContract.prototype.getUrl_asB64 = function() {
          return n2.Message.bytesAsB64(this.getUrl());
        }, TronWebProto.UpdateAssetContract.prototype.getUrl_asU8 = function() {
          return n2.Message.bytesAsU8(this.getUrl());
        }, TronWebProto.UpdateAssetContract.prototype.setUrl = function(e3) {
          return n2.Message.setProto3BytesField(this, 3, e3);
        }, TronWebProto.UpdateAssetContract.prototype.getNewLimit = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.UpdateAssetContract.prototype.setNewLimit = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, TronWebProto.UpdateAssetContract.prototype.getNewPublicLimit = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.UpdateAssetContract.prototype.setNewPublicLimit = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.ParticipateAssetIssueContract.prototype.toObject = function(e3) {
          return TronWebProto.ParticipateAssetIssueContract.toObject(e3, this);
        }, TronWebProto.ParticipateAssetIssueContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), toAddress: t3.getToAddress_asB64(), assetName: t3.getAssetName_asB64(), amount: n2.Message.getFieldWithDefault(t3, 4, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.ParticipateAssetIssueContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.ParticipateAssetIssueContract();
          return TronWebProto.ParticipateAssetIssueContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.ParticipateAssetIssueContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setToAddress(r4);
              break;
            case 3:
              r4 = t3.readBytes(), e3.setAssetName(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setAmount(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.ParticipateAssetIssueContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.ParticipateAssetIssueContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.ParticipateAssetIssueContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getToAddress_asU8()).length > 0 && t3.writeBytes(2, r4), (r4 = e3.getAssetName_asU8()).length > 0 && t3.writeBytes(3, r4), 0 !== (r4 = e3.getAmount()) && t3.writeInt64(4, r4);
        }, TronWebProto.ParticipateAssetIssueContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.ParticipateAssetIssueContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.ParticipateAssetIssueContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.ParticipateAssetIssueContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.ParticipateAssetIssueContract.prototype.getToAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.ParticipateAssetIssueContract.prototype.getToAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getToAddress());
        }, TronWebProto.ParticipateAssetIssueContract.prototype.getToAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getToAddress());
        }, TronWebProto.ParticipateAssetIssueContract.prototype.setToAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.ParticipateAssetIssueContract.prototype.getAssetName = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.ParticipateAssetIssueContract.prototype.getAssetName_asB64 = function() {
          return n2.Message.bytesAsB64(this.getAssetName());
        }, TronWebProto.ParticipateAssetIssueContract.prototype.getAssetName_asU8 = function() {
          return n2.Message.bytesAsU8(this.getAssetName());
        }, TronWebProto.ParticipateAssetIssueContract.prototype.setAssetName = function(e3) {
          return n2.Message.setProto3BytesField(this, 3, e3);
        }, TronWebProto.ParticipateAssetIssueContract.prototype.getAmount = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.ParticipateAssetIssueContract.prototype.setAmount = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, o.object.extend(t2, TronWebProto);
      }, 594: (e2, t2, r3) => {
        var n2 = r3(306), o = "undefined" != typeof globalThis && globalThis || "undefined" != typeof window && window || void 0 !== o && o || "undefined" != typeof self && self || (function() {
          return this;
        }).call(null) || Function("return this")();
        n2.exportSymbol("TronWebProto.ResourceCode", null, o), TronWebProto.ResourceCode = { BANDWIDTH: 0, ENERGY: 1, TRON_POWER: 2 }, n2.object.extend(t2, TronWebProto);
      }, 629: (e2, t2, r3) => {
        var n2 = r3(306), o = n2, a = "undefined" != typeof globalThis && globalThis || "undefined" != typeof window && window || void 0 !== a && a || "undefined" != typeof self && self || (function() {
          return this;
        }).call(null) || Function("return this")(), i = r3(37);
        o.object.extend(proto, i), o.exportSymbol("TronWebProto.ClearABIContract", null, a), o.exportSymbol("TronWebProto.ContractState", null, a), o.exportSymbol("TronWebProto.CreateSmartContract", null, a), o.exportSymbol("TronWebProto.SmartContract", null, a), o.exportSymbol("TronWebProto.SmartContract.ABI", null, a), o.exportSymbol("TronWebProto.SmartContract.ABI.Entry", null, a), o.exportSymbol("TronWebProto.SmartContract.ABI.Entry.EntryType", null, a), o.exportSymbol("TronWebProto.SmartContract.ABI.Entry.Param", null, a), o.exportSymbol("TronWebProto.SmartContract.ABI.Entry.StateMutabilityType", null, a), o.exportSymbol("TronWebProto.SmartContractDataWrapper", null, a), o.exportSymbol("TronWebProto.TriggerSmartContract", null, a), o.exportSymbol("TronWebProto.UpdateEnergyLimitContract", null, a), o.exportSymbol("TronWebProto.UpdateSettingContract", null, a), TronWebProto.SmartContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.SmartContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.SmartContract.displayName = "TronWebProto.SmartContract"), TronWebProto.SmartContract.ABI = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.SmartContract.ABI.repeatedFields_, null);
        }, o.inherits(TronWebProto.SmartContract.ABI, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.SmartContract.ABI.displayName = "TronWebProto.SmartContract.ABI"), TronWebProto.SmartContract.ABI.Entry = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, TronWebProto.SmartContract.ABI.Entry.repeatedFields_, null);
        }, o.inherits(TronWebProto.SmartContract.ABI.Entry, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.SmartContract.ABI.Entry.displayName = "TronWebProto.SmartContract.ABI.Entry"), TronWebProto.SmartContract.ABI.Entry.Param = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.SmartContract.ABI.Entry.Param, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.SmartContract.ABI.Entry.Param.displayName = "TronWebProto.SmartContract.ABI.Entry.Param"), TronWebProto.ContractState = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.ContractState, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.ContractState.displayName = "TronWebProto.ContractState"), TronWebProto.CreateSmartContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.CreateSmartContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.CreateSmartContract.displayName = "TronWebProto.CreateSmartContract"), TronWebProto.TriggerSmartContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.TriggerSmartContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.TriggerSmartContract.displayName = "TronWebProto.TriggerSmartContract"), TronWebProto.ClearABIContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.ClearABIContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.ClearABIContract.displayName = "TronWebProto.ClearABIContract"), TronWebProto.UpdateSettingContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.UpdateSettingContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.UpdateSettingContract.displayName = "TronWebProto.UpdateSettingContract"), TronWebProto.UpdateEnergyLimitContract = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.UpdateEnergyLimitContract, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.UpdateEnergyLimitContract.displayName = "TronWebProto.UpdateEnergyLimitContract"), TronWebProto.SmartContractDataWrapper = function(e3) {
          n2.Message.initialize(this, e3, 0, -1, null, null);
        }, o.inherits(TronWebProto.SmartContractDataWrapper, n2.Message), o.DEBUG && !COMPILED && (TronWebProto.SmartContractDataWrapper.displayName = "TronWebProto.SmartContractDataWrapper"), n2.Message.GENERATE_TO_OBJECT && (TronWebProto.SmartContract.prototype.toObject = function(e3) {
          return TronWebProto.SmartContract.toObject(e3, this);
        }, TronWebProto.SmartContract.toObject = function(e3, t3) {
          var r4, o2 = { originAddress: t3.getOriginAddress_asB64(), contractAddress: t3.getContractAddress_asB64(), abi: (r4 = t3.getAbi()) && TronWebProto.SmartContract.ABI.toObject(e3, r4), bytecode: t3.getBytecode_asB64(), callValue: n2.Message.getFieldWithDefault(t3, 5, 0), consumeUserResourcePercent: n2.Message.getFieldWithDefault(t3, 6, 0), name: n2.Message.getFieldWithDefault(t3, 7, ""), originEnergyLimit: n2.Message.getFieldWithDefault(t3, 8, 0), codeHash: t3.getCodeHash_asB64(), trxHash: t3.getTrxHash_asB64(), version: n2.Message.getFieldWithDefault(t3, 11, 0) };
          return e3 && (o2.$jspbMessageInstance = t3), o2;
        }), TronWebProto.SmartContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.SmartContract();
          return TronWebProto.SmartContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.SmartContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOriginAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setContractAddress(r4);
              break;
            case 3:
              r4 = new TronWebProto.SmartContract.ABI(), t3.readMessage(r4, TronWebProto.SmartContract.ABI.deserializeBinaryFromReader), e3.setAbi(r4);
              break;
            case 4:
              r4 = t3.readBytes(), e3.setBytecode(r4);
              break;
            case 5:
              r4 = t3.readInt64(), e3.setCallValue(r4);
              break;
            case 6:
              r4 = t3.readInt64(), e3.setConsumeUserResourcePercent(r4);
              break;
            case 7:
              r4 = t3.readString(), e3.setName(r4);
              break;
            case 8:
              r4 = t3.readInt64(), e3.setOriginEnergyLimit(r4);
              break;
            case 9:
              r4 = t3.readBytes(), e3.setCodeHash(r4);
              break;
            case 10:
              r4 = t3.readBytes(), e3.setTrxHash(r4);
              break;
            case 11:
              r4 = t3.readInt32(), e3.setVersion(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.SmartContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.SmartContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.SmartContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOriginAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getContractAddress_asU8()).length > 0 && t3.writeBytes(2, r4), null != (r4 = e3.getAbi()) && t3.writeMessage(3, r4, TronWebProto.SmartContract.ABI.serializeBinaryToWriter), (r4 = e3.getBytecode_asU8()).length > 0 && t3.writeBytes(4, r4), 0 !== (r4 = e3.getCallValue()) && t3.writeInt64(5, r4), 0 !== (r4 = e3.getConsumeUserResourcePercent()) && t3.writeInt64(6, r4), (r4 = e3.getName()).length > 0 && t3.writeString(7, r4), 0 !== (r4 = e3.getOriginEnergyLimit()) && t3.writeInt64(8, r4), (r4 = e3.getCodeHash_asU8()).length > 0 && t3.writeBytes(9, r4), (r4 = e3.getTrxHash_asU8()).length > 0 && t3.writeBytes(10, r4), 0 !== (r4 = e3.getVersion()) && t3.writeInt32(11, r4);
        }, TronWebProto.SmartContract.ABI.repeatedFields_ = [1], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.SmartContract.ABI.prototype.toObject = function(e3) {
          return TronWebProto.SmartContract.ABI.toObject(e3, this);
        }, TronWebProto.SmartContract.ABI.toObject = function(e3, t3) {
          var r4 = { entrysList: n2.Message.toObjectList(t3.getEntrysList(), TronWebProto.SmartContract.ABI.Entry.toObject, e3) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.SmartContract.ABI.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.SmartContract.ABI();
          return TronWebProto.SmartContract.ABI.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.SmartContract.ABI.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) if (1 === t3.getFieldNumber()) {
            var r4 = new TronWebProto.SmartContract.ABI.Entry();
            t3.readMessage(r4, TronWebProto.SmartContract.ABI.Entry.deserializeBinaryFromReader), e3.addEntrys(r4);
          } else t3.skipField();
          return e3;
        }, TronWebProto.SmartContract.ABI.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.SmartContract.ABI.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.SmartContract.ABI.serializeBinaryToWriter = function(e3, t3) {
          var r4;
          (r4 = e3.getEntrysList()).length > 0 && t3.writeRepeatedMessage(1, r4, TronWebProto.SmartContract.ABI.Entry.serializeBinaryToWriter);
        }, TronWebProto.SmartContract.ABI.Entry.repeatedFields_ = [4, 5], n2.Message.GENERATE_TO_OBJECT && (TronWebProto.SmartContract.ABI.Entry.prototype.toObject = function(e3) {
          return TronWebProto.SmartContract.ABI.Entry.toObject(e3, this);
        }, TronWebProto.SmartContract.ABI.Entry.toObject = function(e3, t3) {
          var r4 = { anonymous: n2.Message.getBooleanFieldWithDefault(t3, 1, false), constant: n2.Message.getBooleanFieldWithDefault(t3, 2, false), name: n2.Message.getFieldWithDefault(t3, 3, ""), inputsList: n2.Message.toObjectList(t3.getInputsList(), TronWebProto.SmartContract.ABI.Entry.Param.toObject, e3), outputsList: n2.Message.toObjectList(t3.getOutputsList(), TronWebProto.SmartContract.ABI.Entry.Param.toObject, e3), type: n2.Message.getFieldWithDefault(t3, 6, 0), payable: n2.Message.getBooleanFieldWithDefault(t3, 7, false), statemutability: n2.Message.getFieldWithDefault(t3, 8, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.SmartContract.ABI.Entry.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.SmartContract.ABI.Entry();
          return TronWebProto.SmartContract.ABI.Entry.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.SmartContract.ABI.Entry.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBool();
              e3.setAnonymous(r4);
              break;
            case 2:
              r4 = t3.readBool(), e3.setConstant(r4);
              break;
            case 3:
              r4 = t3.readString(), e3.setName(r4);
              break;
            case 4:
              r4 = new TronWebProto.SmartContract.ABI.Entry.Param(), t3.readMessage(r4, TronWebProto.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader), e3.addInputs(r4);
              break;
            case 5:
              r4 = new TronWebProto.SmartContract.ABI.Entry.Param(), t3.readMessage(r4, TronWebProto.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader), e3.addOutputs(r4);
              break;
            case 6:
              r4 = t3.readEnum(), e3.setType(r4);
              break;
            case 7:
              r4 = t3.readBool(), e3.setPayable(r4);
              break;
            case 8:
              r4 = t3.readEnum(), e3.setStatemutability(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.SmartContract.ABI.Entry.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.SmartContract.ABI.Entry.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.SmartContract.ABI.Entry.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getAnonymous()) && t3.writeBool(1, r4), (r4 = e3.getConstant()) && t3.writeBool(2, r4), (r4 = e3.getName()).length > 0 && t3.writeString(3, r4), (r4 = e3.getInputsList()).length > 0 && t3.writeRepeatedMessage(4, r4, TronWebProto.SmartContract.ABI.Entry.Param.serializeBinaryToWriter), (r4 = e3.getOutputsList()).length > 0 && t3.writeRepeatedMessage(5, r4, TronWebProto.SmartContract.ABI.Entry.Param.serializeBinaryToWriter), 0 !== (r4 = e3.getType()) && t3.writeEnum(6, r4), (r4 = e3.getPayable()) && t3.writeBool(7, r4), 0 !== (r4 = e3.getStatemutability()) && t3.writeEnum(8, r4);
        }, TronWebProto.SmartContract.ABI.Entry.EntryType = { UNKNOWNENTRYTYPE: 0, CONSTRUCTOR: 1, FUNCTION: 2, EVENT: 3, FALLBACK: 4, RECEIVE: 5, ERROR: 6 }, TronWebProto.SmartContract.ABI.Entry.StateMutabilityType = { UNKNOWNMUTABILITYTYPE: 0, PURE: 1, VIEW: 2, NONPAYABLE: 3, PAYABLE: 4 }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.SmartContract.ABI.Entry.Param.prototype.toObject = function(e3) {
          return TronWebProto.SmartContract.ABI.Entry.Param.toObject(e3, this);
        }, TronWebProto.SmartContract.ABI.Entry.Param.toObject = function(e3, t3) {
          var r4 = { indexed: n2.Message.getBooleanFieldWithDefault(t3, 1, false), name: n2.Message.getFieldWithDefault(t3, 2, ""), type: n2.Message.getFieldWithDefault(t3, 3, "") };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.SmartContract.ABI.Entry.Param.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.SmartContract.ABI.Entry.Param();
          return TronWebProto.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.SmartContract.ABI.Entry.Param.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBool();
              e3.setIndexed(r4);
              break;
            case 2:
              r4 = t3.readString(), e3.setName(r4);
              break;
            case 3:
              r4 = t3.readString(), e3.setType(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.SmartContract.ABI.Entry.Param.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.SmartContract.ABI.Entry.Param.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.SmartContract.ABI.Entry.Param.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getIndexed()) && t3.writeBool(1, r4), (r4 = e3.getName()).length > 0 && t3.writeString(2, r4), (r4 = e3.getType()).length > 0 && t3.writeString(3, r4);
        }, TronWebProto.SmartContract.ABI.Entry.Param.prototype.getIndexed = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 1, false);
        }, TronWebProto.SmartContract.ABI.Entry.Param.prototype.setIndexed = function(e3) {
          return n2.Message.setProto3BooleanField(this, 1, e3);
        }, TronWebProto.SmartContract.ABI.Entry.Param.prototype.getName = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.SmartContract.ABI.Entry.Param.prototype.setName = function(e3) {
          return n2.Message.setProto3StringField(this, 2, e3);
        }, TronWebProto.SmartContract.ABI.Entry.Param.prototype.getType = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.SmartContract.ABI.Entry.Param.prototype.setType = function(e3) {
          return n2.Message.setProto3StringField(this, 3, e3);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.getAnonymous = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 1, false);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.setAnonymous = function(e3) {
          return n2.Message.setProto3BooleanField(this, 1, e3);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.getConstant = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 2, false);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.setConstant = function(e3) {
          return n2.Message.setProto3BooleanField(this, 2, e3);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.getName = function() {
          return n2.Message.getFieldWithDefault(this, 3, "");
        }, TronWebProto.SmartContract.ABI.Entry.prototype.setName = function(e3) {
          return n2.Message.setProto3StringField(this, 3, e3);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.getInputsList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.SmartContract.ABI.Entry.Param, 4);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.setInputsList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 4, e3);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.addInputs = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 4, e3, TronWebProto.SmartContract.ABI.Entry.Param, t3);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.clearInputsList = function() {
          return this.setInputsList([]);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.getOutputsList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.SmartContract.ABI.Entry.Param, 5);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.setOutputsList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 5, e3);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.addOutputs = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 5, e3, TronWebProto.SmartContract.ABI.Entry.Param, t3);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.clearOutputsList = function() {
          return this.setOutputsList([]);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.getType = function() {
          return n2.Message.getFieldWithDefault(this, 6, 0);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.setType = function(e3) {
          return n2.Message.setProto3EnumField(this, 6, e3);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.getPayable = function() {
          return n2.Message.getBooleanFieldWithDefault(this, 7, false);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.setPayable = function(e3) {
          return n2.Message.setProto3BooleanField(this, 7, e3);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.getStatemutability = function() {
          return n2.Message.getFieldWithDefault(this, 8, 0);
        }, TronWebProto.SmartContract.ABI.Entry.prototype.setStatemutability = function(e3) {
          return n2.Message.setProto3EnumField(this, 8, e3);
        }, TronWebProto.SmartContract.ABI.prototype.getEntrysList = function() {
          return n2.Message.getRepeatedWrapperField(this, TronWebProto.SmartContract.ABI.Entry, 1);
        }, TronWebProto.SmartContract.ABI.prototype.setEntrysList = function(e3) {
          return n2.Message.setRepeatedWrapperField(this, 1, e3);
        }, TronWebProto.SmartContract.ABI.prototype.addEntrys = function(e3, t3) {
          return n2.Message.addToRepeatedWrapperField(this, 1, e3, TronWebProto.SmartContract.ABI.Entry, t3);
        }, TronWebProto.SmartContract.ABI.prototype.clearEntrysList = function() {
          return this.setEntrysList([]);
        }, TronWebProto.SmartContract.prototype.getOriginAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.SmartContract.prototype.getOriginAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOriginAddress());
        }, TronWebProto.SmartContract.prototype.getOriginAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOriginAddress());
        }, TronWebProto.SmartContract.prototype.setOriginAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.SmartContract.prototype.getContractAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.SmartContract.prototype.getContractAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getContractAddress());
        }, TronWebProto.SmartContract.prototype.getContractAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getContractAddress());
        }, TronWebProto.SmartContract.prototype.setContractAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.SmartContract.prototype.getAbi = function() {
          return n2.Message.getWrapperField(this, TronWebProto.SmartContract.ABI, 3);
        }, TronWebProto.SmartContract.prototype.setAbi = function(e3) {
          return n2.Message.setWrapperField(this, 3, e3);
        }, TronWebProto.SmartContract.prototype.clearAbi = function() {
          return this.setAbi(void 0);
        }, TronWebProto.SmartContract.prototype.hasAbi = function() {
          return null != n2.Message.getField(this, 3);
        }, TronWebProto.SmartContract.prototype.getBytecode = function() {
          return n2.Message.getFieldWithDefault(this, 4, "");
        }, TronWebProto.SmartContract.prototype.getBytecode_asB64 = function() {
          return n2.Message.bytesAsB64(this.getBytecode());
        }, TronWebProto.SmartContract.prototype.getBytecode_asU8 = function() {
          return n2.Message.bytesAsU8(this.getBytecode());
        }, TronWebProto.SmartContract.prototype.setBytecode = function(e3) {
          return n2.Message.setProto3BytesField(this, 4, e3);
        }, TronWebProto.SmartContract.prototype.getCallValue = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.SmartContract.prototype.setCallValue = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, TronWebProto.SmartContract.prototype.getConsumeUserResourcePercent = function() {
          return n2.Message.getFieldWithDefault(this, 6, 0);
        }, TronWebProto.SmartContract.prototype.setConsumeUserResourcePercent = function(e3) {
          return n2.Message.setProto3IntField(this, 6, e3);
        }, TronWebProto.SmartContract.prototype.getName = function() {
          return n2.Message.getFieldWithDefault(this, 7, "");
        }, TronWebProto.SmartContract.prototype.setName = function(e3) {
          return n2.Message.setProto3StringField(this, 7, e3);
        }, TronWebProto.SmartContract.prototype.getOriginEnergyLimit = function() {
          return n2.Message.getFieldWithDefault(this, 8, 0);
        }, TronWebProto.SmartContract.prototype.setOriginEnergyLimit = function(e3) {
          return n2.Message.setProto3IntField(this, 8, e3);
        }, TronWebProto.SmartContract.prototype.getCodeHash = function() {
          return n2.Message.getFieldWithDefault(this, 9, "");
        }, TronWebProto.SmartContract.prototype.getCodeHash_asB64 = function() {
          return n2.Message.bytesAsB64(this.getCodeHash());
        }, TronWebProto.SmartContract.prototype.getCodeHash_asU8 = function() {
          return n2.Message.bytesAsU8(this.getCodeHash());
        }, TronWebProto.SmartContract.prototype.setCodeHash = function(e3) {
          return n2.Message.setProto3BytesField(this, 9, e3);
        }, TronWebProto.SmartContract.prototype.getTrxHash = function() {
          return n2.Message.getFieldWithDefault(this, 10, "");
        }, TronWebProto.SmartContract.prototype.getTrxHash_asB64 = function() {
          return n2.Message.bytesAsB64(this.getTrxHash());
        }, TronWebProto.SmartContract.prototype.getTrxHash_asU8 = function() {
          return n2.Message.bytesAsU8(this.getTrxHash());
        }, TronWebProto.SmartContract.prototype.setTrxHash = function(e3) {
          return n2.Message.setProto3BytesField(this, 10, e3);
        }, TronWebProto.SmartContract.prototype.getVersion = function() {
          return n2.Message.getFieldWithDefault(this, 11, 0);
        }, TronWebProto.SmartContract.prototype.setVersion = function(e3) {
          return n2.Message.setProto3IntField(this, 11, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.ContractState.prototype.toObject = function(e3) {
          return TronWebProto.ContractState.toObject(e3, this);
        }, TronWebProto.ContractState.toObject = function(e3, t3) {
          var r4 = { energyUsage: n2.Message.getFieldWithDefault(t3, 1, 0), energyFactor: n2.Message.getFieldWithDefault(t3, 2, 0), updateCycle: n2.Message.getFieldWithDefault(t3, 3, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.ContractState.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.ContractState();
          return TronWebProto.ContractState.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.ContractState.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readInt64();
              e3.setEnergyUsage(r4);
              break;
            case 2:
              r4 = t3.readInt64(), e3.setEnergyFactor(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setUpdateCycle(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.ContractState.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.ContractState.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.ContractState.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          0 !== (r4 = e3.getEnergyUsage()) && t3.writeInt64(1, r4), 0 !== (r4 = e3.getEnergyFactor()) && t3.writeInt64(2, r4), 0 !== (r4 = e3.getUpdateCycle()) && t3.writeInt64(3, r4);
        }, TronWebProto.ContractState.prototype.getEnergyUsage = function() {
          return n2.Message.getFieldWithDefault(this, 1, 0);
        }, TronWebProto.ContractState.prototype.setEnergyUsage = function(e3) {
          return n2.Message.setProto3IntField(this, 1, e3);
        }, TronWebProto.ContractState.prototype.getEnergyFactor = function() {
          return n2.Message.getFieldWithDefault(this, 2, 0);
        }, TronWebProto.ContractState.prototype.setEnergyFactor = function(e3) {
          return n2.Message.setProto3IntField(this, 2, e3);
        }, TronWebProto.ContractState.prototype.getUpdateCycle = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.ContractState.prototype.setUpdateCycle = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.CreateSmartContract.prototype.toObject = function(e3) {
          return TronWebProto.CreateSmartContract.toObject(e3, this);
        }, TronWebProto.CreateSmartContract.toObject = function(e3, t3) {
          var r4, o2 = { ownerAddress: t3.getOwnerAddress_asB64(), newContract: (r4 = t3.getNewContract()) && TronWebProto.SmartContract.toObject(e3, r4), callTokenValue: n2.Message.getFieldWithDefault(t3, 3, 0), tokenId: n2.Message.getFieldWithDefault(t3, 4, 0) };
          return e3 && (o2.$jspbMessageInstance = t3), o2;
        }), TronWebProto.CreateSmartContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.CreateSmartContract();
          return TronWebProto.CreateSmartContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.CreateSmartContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = new TronWebProto.SmartContract(), t3.readMessage(r4, TronWebProto.SmartContract.deserializeBinaryFromReader), e3.setNewContract(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setCallTokenValue(r4);
              break;
            case 4:
              r4 = t3.readInt64(), e3.setTokenId(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.CreateSmartContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.CreateSmartContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.CreateSmartContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), null != (r4 = e3.getNewContract()) && t3.writeMessage(2, r4, TronWebProto.SmartContract.serializeBinaryToWriter), 0 !== (r4 = e3.getCallTokenValue()) && t3.writeInt64(3, r4), 0 !== (r4 = e3.getTokenId()) && t3.writeInt64(4, r4);
        }, TronWebProto.CreateSmartContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.CreateSmartContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.CreateSmartContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.CreateSmartContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.CreateSmartContract.prototype.getNewContract = function() {
          return n2.Message.getWrapperField(this, TronWebProto.SmartContract, 2);
        }, TronWebProto.CreateSmartContract.prototype.setNewContract = function(e3) {
          return n2.Message.setWrapperField(this, 2, e3);
        }, TronWebProto.CreateSmartContract.prototype.clearNewContract = function() {
          return this.setNewContract(void 0);
        }, TronWebProto.CreateSmartContract.prototype.hasNewContract = function() {
          return null != n2.Message.getField(this, 2);
        }, TronWebProto.CreateSmartContract.prototype.getCallTokenValue = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.CreateSmartContract.prototype.setCallTokenValue = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.CreateSmartContract.prototype.getTokenId = function() {
          return n2.Message.getFieldWithDefault(this, 4, 0);
        }, TronWebProto.CreateSmartContract.prototype.setTokenId = function(e3) {
          return n2.Message.setProto3IntField(this, 4, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.TriggerSmartContract.prototype.toObject = function(e3) {
          return TronWebProto.TriggerSmartContract.toObject(e3, this);
        }, TronWebProto.TriggerSmartContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), contractAddress: t3.getContractAddress_asB64(), callValue: n2.Message.getFieldWithDefault(t3, 3, 0), data: t3.getData_asB64(), callTokenValue: n2.Message.getFieldWithDefault(t3, 5, 0), tokenId: n2.Message.getFieldWithDefault(t3, 6, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.TriggerSmartContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.TriggerSmartContract();
          return TronWebProto.TriggerSmartContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.TriggerSmartContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setContractAddress(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setCallValue(r4);
              break;
            case 4:
              r4 = t3.readBytes(), e3.setData(r4);
              break;
            case 5:
              r4 = t3.readInt64(), e3.setCallTokenValue(r4);
              break;
            case 6:
              r4 = t3.readInt64(), e3.setTokenId(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.TriggerSmartContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.TriggerSmartContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.TriggerSmartContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getContractAddress_asU8()).length > 0 && t3.writeBytes(2, r4), 0 !== (r4 = e3.getCallValue()) && t3.writeInt64(3, r4), (r4 = e3.getData_asU8()).length > 0 && t3.writeBytes(4, r4), 0 !== (r4 = e3.getCallTokenValue()) && t3.writeInt64(5, r4), 0 !== (r4 = e3.getTokenId()) && t3.writeInt64(6, r4);
        }, TronWebProto.TriggerSmartContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.TriggerSmartContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.TriggerSmartContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.TriggerSmartContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.TriggerSmartContract.prototype.getContractAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.TriggerSmartContract.prototype.getContractAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getContractAddress());
        }, TronWebProto.TriggerSmartContract.prototype.getContractAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getContractAddress());
        }, TronWebProto.TriggerSmartContract.prototype.setContractAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.TriggerSmartContract.prototype.getCallValue = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.TriggerSmartContract.prototype.setCallValue = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, TronWebProto.TriggerSmartContract.prototype.getData = function() {
          return n2.Message.getFieldWithDefault(this, 4, "");
        }, TronWebProto.TriggerSmartContract.prototype.getData_asB64 = function() {
          return n2.Message.bytesAsB64(this.getData());
        }, TronWebProto.TriggerSmartContract.prototype.getData_asU8 = function() {
          return n2.Message.bytesAsU8(this.getData());
        }, TronWebProto.TriggerSmartContract.prototype.setData = function(e3) {
          return n2.Message.setProto3BytesField(this, 4, e3);
        }, TronWebProto.TriggerSmartContract.prototype.getCallTokenValue = function() {
          return n2.Message.getFieldWithDefault(this, 5, 0);
        }, TronWebProto.TriggerSmartContract.prototype.setCallTokenValue = function(e3) {
          return n2.Message.setProto3IntField(this, 5, e3);
        }, TronWebProto.TriggerSmartContract.prototype.getTokenId = function() {
          return n2.Message.getFieldWithDefault(this, 6, 0);
        }, TronWebProto.TriggerSmartContract.prototype.setTokenId = function(e3) {
          return n2.Message.setProto3IntField(this, 6, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.ClearABIContract.prototype.toObject = function(e3) {
          return TronWebProto.ClearABIContract.toObject(e3, this);
        }, TronWebProto.ClearABIContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), contractAddress: t3.getContractAddress_asB64() };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.ClearABIContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.ClearABIContract();
          return TronWebProto.ClearABIContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.ClearABIContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setContractAddress(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.ClearABIContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.ClearABIContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.ClearABIContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getContractAddress_asU8()).length > 0 && t3.writeBytes(2, r4);
        }, TronWebProto.ClearABIContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.ClearABIContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.ClearABIContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.ClearABIContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.ClearABIContract.prototype.getContractAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.ClearABIContract.prototype.getContractAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getContractAddress());
        }, TronWebProto.ClearABIContract.prototype.getContractAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getContractAddress());
        }, TronWebProto.ClearABIContract.prototype.setContractAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.UpdateSettingContract.prototype.toObject = function(e3) {
          return TronWebProto.UpdateSettingContract.toObject(e3, this);
        }, TronWebProto.UpdateSettingContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), contractAddress: t3.getContractAddress_asB64(), consumeUserResourcePercent: n2.Message.getFieldWithDefault(t3, 3, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.UpdateSettingContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.UpdateSettingContract();
          return TronWebProto.UpdateSettingContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.UpdateSettingContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setContractAddress(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setConsumeUserResourcePercent(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.UpdateSettingContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.UpdateSettingContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.UpdateSettingContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getContractAddress_asU8()).length > 0 && t3.writeBytes(2, r4), 0 !== (r4 = e3.getConsumeUserResourcePercent()) && t3.writeInt64(3, r4);
        }, TronWebProto.UpdateSettingContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.UpdateSettingContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.UpdateSettingContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.UpdateSettingContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.UpdateSettingContract.prototype.getContractAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.UpdateSettingContract.prototype.getContractAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getContractAddress());
        }, TronWebProto.UpdateSettingContract.prototype.getContractAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getContractAddress());
        }, TronWebProto.UpdateSettingContract.prototype.setContractAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.UpdateSettingContract.prototype.getConsumeUserResourcePercent = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.UpdateSettingContract.prototype.setConsumeUserResourcePercent = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.UpdateEnergyLimitContract.prototype.toObject = function(e3) {
          return TronWebProto.UpdateEnergyLimitContract.toObject(e3, this);
        }, TronWebProto.UpdateEnergyLimitContract.toObject = function(e3, t3) {
          var r4 = { ownerAddress: t3.getOwnerAddress_asB64(), contractAddress: t3.getContractAddress_asB64(), originEnergyLimit: n2.Message.getFieldWithDefault(t3, 3, 0) };
          return e3 && (r4.$jspbMessageInstance = t3), r4;
        }), TronWebProto.UpdateEnergyLimitContract.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.UpdateEnergyLimitContract();
          return TronWebProto.UpdateEnergyLimitContract.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.UpdateEnergyLimitContract.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = t3.readBytes();
              e3.setOwnerAddress(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setContractAddress(r4);
              break;
            case 3:
              r4 = t3.readInt64(), e3.setOriginEnergyLimit(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.UpdateEnergyLimitContract.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.UpdateEnergyLimitContract.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.UpdateEnergyLimitContract.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          (r4 = e3.getOwnerAddress_asU8()).length > 0 && t3.writeBytes(1, r4), (r4 = e3.getContractAddress_asU8()).length > 0 && t3.writeBytes(2, r4), 0 !== (r4 = e3.getOriginEnergyLimit()) && t3.writeInt64(3, r4);
        }, TronWebProto.UpdateEnergyLimitContract.prototype.getOwnerAddress = function() {
          return n2.Message.getFieldWithDefault(this, 1, "");
        }, TronWebProto.UpdateEnergyLimitContract.prototype.getOwnerAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getOwnerAddress());
        }, TronWebProto.UpdateEnergyLimitContract.prototype.getOwnerAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getOwnerAddress());
        }, TronWebProto.UpdateEnergyLimitContract.prototype.setOwnerAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 1, e3);
        }, TronWebProto.UpdateEnergyLimitContract.prototype.getContractAddress = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.UpdateEnergyLimitContract.prototype.getContractAddress_asB64 = function() {
          return n2.Message.bytesAsB64(this.getContractAddress());
        }, TronWebProto.UpdateEnergyLimitContract.prototype.getContractAddress_asU8 = function() {
          return n2.Message.bytesAsU8(this.getContractAddress());
        }, TronWebProto.UpdateEnergyLimitContract.prototype.setContractAddress = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.UpdateEnergyLimitContract.prototype.getOriginEnergyLimit = function() {
          return n2.Message.getFieldWithDefault(this, 3, 0);
        }, TronWebProto.UpdateEnergyLimitContract.prototype.setOriginEnergyLimit = function(e3) {
          return n2.Message.setProto3IntField(this, 3, e3);
        }, n2.Message.GENERATE_TO_OBJECT && (TronWebProto.SmartContractDataWrapper.prototype.toObject = function(e3) {
          return TronWebProto.SmartContractDataWrapper.toObject(e3, this);
        }, TronWebProto.SmartContractDataWrapper.toObject = function(e3, t3) {
          var r4, n3 = { smartContract: (r4 = t3.getSmartContract()) && TronWebProto.SmartContract.toObject(e3, r4), runtimecode: t3.getRuntimecode_asB64(), contractState: (r4 = t3.getContractState()) && TronWebProto.ContractState.toObject(e3, r4) };
          return e3 && (n3.$jspbMessageInstance = t3), n3;
        }), TronWebProto.SmartContractDataWrapper.deserializeBinary = function(e3) {
          var t3 = new n2.BinaryReader(e3), r4 = new TronWebProto.SmartContractDataWrapper();
          return TronWebProto.SmartContractDataWrapper.deserializeBinaryFromReader(r4, t3);
        }, TronWebProto.SmartContractDataWrapper.deserializeBinaryFromReader = function(e3, t3) {
          for (; t3.nextField() && !t3.isEndGroup(); ) switch (t3.getFieldNumber()) {
            case 1:
              var r4 = new TronWebProto.SmartContract();
              t3.readMessage(r4, TronWebProto.SmartContract.deserializeBinaryFromReader), e3.setSmartContract(r4);
              break;
            case 2:
              r4 = t3.readBytes(), e3.setRuntimecode(r4);
              break;
            case 3:
              r4 = new TronWebProto.ContractState(), t3.readMessage(r4, TronWebProto.ContractState.deserializeBinaryFromReader), e3.setContractState(r4);
              break;
            default:
              t3.skipField();
          }
          return e3;
        }, TronWebProto.SmartContractDataWrapper.prototype.serializeBinary = function() {
          var e3 = new n2.BinaryWriter();
          return TronWebProto.SmartContractDataWrapper.serializeBinaryToWriter(this, e3), e3.getResultBuffer();
        }, TronWebProto.SmartContractDataWrapper.serializeBinaryToWriter = function(e3, t3) {
          var r4 = void 0;
          null != (r4 = e3.getSmartContract()) && t3.writeMessage(1, r4, TronWebProto.SmartContract.serializeBinaryToWriter), (r4 = e3.getRuntimecode_asU8()).length > 0 && t3.writeBytes(2, r4), null != (r4 = e3.getContractState()) && t3.writeMessage(3, r4, TronWebProto.ContractState.serializeBinaryToWriter);
        }, TronWebProto.SmartContractDataWrapper.prototype.getSmartContract = function() {
          return n2.Message.getWrapperField(this, TronWebProto.SmartContract, 1);
        }, TronWebProto.SmartContractDataWrapper.prototype.setSmartContract = function(e3) {
          return n2.Message.setWrapperField(this, 1, e3);
        }, TronWebProto.SmartContractDataWrapper.prototype.clearSmartContract = function() {
          return this.setSmartContract(void 0);
        }, TronWebProto.SmartContractDataWrapper.prototype.hasSmartContract = function() {
          return null != n2.Message.getField(this, 1);
        }, TronWebProto.SmartContractDataWrapper.prototype.getRuntimecode = function() {
          return n2.Message.getFieldWithDefault(this, 2, "");
        }, TronWebProto.SmartContractDataWrapper.prototype.getRuntimecode_asB64 = function() {
          return n2.Message.bytesAsB64(this.getRuntimecode());
        }, TronWebProto.SmartContractDataWrapper.prototype.getRuntimecode_asU8 = function() {
          return n2.Message.bytesAsU8(this.getRuntimecode());
        }, TronWebProto.SmartContractDataWrapper.prototype.setRuntimecode = function(e3) {
          return n2.Message.setProto3BytesField(this, 2, e3);
        }, TronWebProto.SmartContractDataWrapper.prototype.getContractState = function() {
          return n2.Message.getWrapperField(this, TronWebProto.ContractState, 3);
        }, TronWebProto.SmartContractDataWrapper.prototype.setContractState = function(e3) {
          return n2.Message.setWrapperField(this, 3, e3);
        }, TronWebProto.SmartContractDataWrapper.prototype.clearContractState = function() {
          return this.setContractState(void 0);
        }, TronWebProto.SmartContractDataWrapper.prototype.hasContractState = function() {
          return null != n2.Message.getField(this, 3);
        }, o.object.extend(t2, TronWebProto);
      }, 962: (e2) => {
        "use strict";
        e2.exports = require_any_pb();
      } }, t = {};
      function r2(n2) {
        var o = t[n2];
        if (void 0 !== o) return o.exports;
        var a = t[n2] = { exports: {} };
        return e[n2](a, a.exports, r2), a.exports;
      }
      r2.n = (e2) => {
        var t2 = e2 && e2.__esModule ? () => e2.default : () => e2;
        return r2.d(t2, { a: t2 }), t2;
      }, r2.d = (e2, t2) => {
        for (var n2 in t2) r2.o(t2, n2) && !r2.o(e2, n2) && Object.defineProperty(e2, n2, { enumerable: true, get: t2[n2] });
      }, r2.o = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2), r2.r = (e2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e2, "__esModule", { value: true });
      };
      var n = {};
      (() => {
        "use strict";
        r2.d(n, { default: () => Qp });
        var e2 = {};
        r2.r(e2), r2.d(e2, { base64DecodeFromString: () => U, base64EncodeToString: () => x, byte2hexStr: () => S, byteArray2hexStr: () => D, bytesToString: () => N, hextoString: () => L });
        var t2 = {};
        r2.r(t2), r2.d(t2, { arrayEquals: () => $, base64DecodeFromString: () => U, base64EncodeToString: () => x, bin2String: () => H, byte2hexStr: () => S, byteArray2hexStr: () => D, bytesToString: () => N, getStringType: () => te, hexChar2byte: () => K, hexStr2byteArray: () => Y, hextoString: () => L, isHexChar: () => Q, isNumber: () => ee, strToDate: () => q, stringToBytes: () => Z });
        var o = {};
        r2.r(o), r2.d(o, { decode58: () => se, encode58: () => ie });
        var a = {};
        r2.r(a), r2.d(a, { AbiCoder: () => Ao, FormatTypes: () => Uc, Interface: () => Oc, Mnemonic: () => rr, Signature: () => dt, SigningKey: () => Tr, Wordlist: () => Ut, arrayify: () => Dc, concat: () => Se, ethersHDNodeWallet: () => gs, ethersWallet: () => Ws, id: () => St, isValidMnemonic: () => xc, joinSignature: () => Lc, keccak256: () => kt, recoverAddress: () => mr, sha256: () => vt, splitSignature: () => Nc, toUtf8Bytes: () => wt, toUtf8String: () => It, wordlists: () => du });
        var i = {};
        r2.r(i), r2.d(i, { ECKeySign: () => wl, SHA256: () => Il, _signTypedData: () => yl, arrayToBase64String: () => gl, computeAddress: () => vl, decode58Check: () => Al, decodeBase58Address: () => dl, ecRecover: () => fl, genPriKey: () => Tl, getAddressFromPriKey: () => ml, getAddressFromPriKeyBase64String: () => Cl, getBase58CheckAddress: () => ll, getBase58CheckAddressFromPriKeyBase64String: () => Wl, getHexStrAddressFromPriKeyBase64String: () => Bl, getPubKeyFromPriKey: () => Fl, getRowBytesFromTransactionBase64: () => bl, isAddressValid: () => Pl, passwordToAddress: () => Ml, pkToAddress: () => El, signBytes: () => hl, signTransaction: () => pl });
        var s = {};
        r2.r(s), r2.d(s, { generateAccount: () => Ol, generateAccountWithMnemonic: () => Sl, generateRandom: () => kl });
        var u = {};
        r2.r(u), r2.d(u, { decodeParams: () => xl, decodeParamsV2ByABI: () => jl, encodeParams: () => Jl, encodeParamsV2ByABI: () => Gl });
        var c = {};
        r2.r(c), r2.d(c, { TRON_MESSAGE_PREFIX: () => Vl, hashMessage: () => Xl, signMessage: () => Hl, verifyMessage: () => $l });
        var l = {};
        r2.r(l), r2.d(l, { txCheck: () => Kd, txCheckWithArgs: () => Qd, txJsonToPb: () => Xd, txJsonToPbWithArgs: () => Hd, txPbToRawDataHex: () => Zd, txPbToTxID: () => Yd });
        const d = require_asyncToGenerator();
        var p = r2.n(d);
        const f = require_typeof();
        var g = r2.n(f);
        const h = require_classCallCheck();
        var y = r2.n(h);
        const b = require_createClass();
        var T = r2.n(b);
        const v = require_assertThisInitialized();
        var m = r2.n(v);
        const A = require_inherits();
        var P = r2.n(A);
        const W = require_possibleConstructorReturn();
        var B = r2.n(W);
        const C = require_getPrototypeOf();
        var F = r2.n(C);
        const w = require_defineProperty();
        var I = r2.n(w);
        const M = require_regenerator2();
        var E = r2.n(M);
        const R = require_axios();
        var O = r2.n(R);
        function k() {
          var e3 = this;
          this._keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", this.encode = function(t3) {
            for (var r3, n2, o2, a2, i2, s2, u2, c2 = "", l2 = 0; l2 < t3.length; ) a2 = (r3 = t3.charCodeAt(l2++)) >> 2, i2 = (3 & r3) << 4 | (n2 = t3.charCodeAt(l2++)) >> 4, s2 = (15 & n2) << 2 | (o2 = t3.charCodeAt(l2++)) >> 6, u2 = 63 & o2, isNaN(n2) ? s2 = u2 = 64 : isNaN(o2) && (u2 = 64), c2 = c2 + e3._keyStr.charAt(a2) + e3._keyStr.charAt(i2) + e3._keyStr.charAt(s2) + e3._keyStr.charAt(u2);
            return c2;
          }, this.encodeIgnoreUtf8 = function(t3) {
            for (var r3, n2, o2, a2, i2, s2, u2, c2 = "", l2 = 0; l2 < t3.length; ) a2 = (r3 = t3[l2++]) >> 2, i2 = (3 & r3) << 4 | (n2 = t3[l2++]) >> 4, s2 = (15 & n2) << 2 | (o2 = t3[l2++]) >> 6, u2 = 63 & o2, isNaN(n2) ? s2 = u2 = 64 : isNaN(o2) && (u2 = 64), c2 = c2 + e3._keyStr.charAt(a2) + e3._keyStr.charAt(i2) + e3._keyStr.charAt(s2) + e3._keyStr.charAt(u2);
            return c2;
          }, this.decode = function(t3) {
            var r3, n2, o2, a2, i2, s2, u2 = "", c2 = 0;
            for (t3 = t3.replace(/[^A-Za-z0-9\+\/\=]/g, ""); c2 < t3.length; ) r3 = e3._keyStr.indexOf(t3.charAt(c2++)) << 2 | (a2 = e3._keyStr.indexOf(t3.charAt(c2++))) >> 4, n2 = (15 & a2) << 4 | (i2 = e3._keyStr.indexOf(t3.charAt(c2++))) >> 2, o2 = (3 & i2) << 6 | (s2 = e3._keyStr.indexOf(t3.charAt(c2++))), u2 += String.fromCharCode(r3), 64 != i2 && (u2 += String.fromCharCode(n2)), 64 != s2 && (u2 += String.fromCharCode(o2));
            return e3._utf8_decode(u2);
          }, this.decodeToByteArray = function(t3) {
            var r3, n2, o2, a2, i2, s2, u2 = "", c2 = 0;
            for (t3 = t3.replace(/[^A-Za-z0-9\+\/\=]/g, ""); c2 < t3.length; ) r3 = e3._keyStr.indexOf(t3.charAt(c2++)) << 2 | (a2 = e3._keyStr.indexOf(t3.charAt(c2++))) >> 4, n2 = (15 & a2) << 4 | (i2 = e3._keyStr.indexOf(t3.charAt(c2++))) >> 2, o2 = (3 & i2) << 6 | (s2 = e3._keyStr.indexOf(t3.charAt(c2++))), u2 += String.fromCharCode(r3), 64 != i2 && (u2 += String.fromCharCode(n2)), 64 != s2 && (u2 += String.fromCharCode(o2));
            return e3._out2ByteArray(u2);
          }, this._out2ByteArray = function(e4) {
            for (var t3 = new Array(e4.length), r3 = 0, n2 = 0; r3 < e4.length; ) n2 = e4.charCodeAt(r3), t3[r3] = n2, r3++;
            return t3;
          }, this._utf8_encode = function(e4) {
            e4 = e4.replace(/\r\n/g, "\n");
            for (var t3 = "", r3 = 0; r3 < e4.length; r3++) {
              var n2 = e4.charCodeAt(r3);
              n2 < 128 ? t3 += String.fromCharCode(n2) : n2 > 127 && n2 < 2048 ? (t3 += String.fromCharCode(n2 >> 6 | 192), t3 += String.fromCharCode(63 & n2 | 128)) : (t3 += String.fromCharCode(n2 >> 12 | 224), t3 += String.fromCharCode(n2 >> 6 & 63 | 128), t3 += String.fromCharCode(63 & n2 | 128));
            }
            return t3;
          }, this._utf8_decode = function(e4) {
            for (var t3 = "", r3 = 0, n2 = 0, o2 = 0, a2 = 0; r3 < e4.length; ) (n2 = e4.charCodeAt(r3)) < 128 ? (t3 += String.fromCharCode(n2), r3++) : n2 > 191 && n2 < 224 ? (o2 = e4.charCodeAt(r3 + 1), t3 += String.fromCharCode((31 & n2) << 6 | 63 & o2), r3 += 2) : (o2 = e4.charCodeAt(r3 + 1), a2 = e4.charCodeAt(r3 + 2), t3 += String.fromCharCode((15 & n2) << 12 | (63 & o2) << 6 | 63 & a2), r3 += 3);
            return t3;
          };
        }
        function S(e3) {
          if ("number" != typeof e3) throw new Error("Input must be a number");
          if (e3 < 0 || e3 > 255) throw new Error("Input must be a byte");
          var t3 = "0123456789ABCDEF", r3 = "";
          return (r3 += t3.charAt(e3 >> 4)) + t3.charAt(15 & e3);
        }
        function N(e3) {
          if ("string" == typeof e3) return e3;
          for (var t3 = "", r3 = 0; r3 < e3.length; r3++) {
            var n2 = e3[r3].toString(2), o2 = n2.match(/^1+?(?=0)/);
            if (o2 && 8 === n2.length) {
              for (var a2 = o2[0].length, i2 = e3[r3].toString(2).slice(7 - a2), s2 = 1; s2 < a2; s2++) i2 += e3[s2 + r3].toString(2).slice(2);
              t3 += String.fromCharCode(parseInt(i2, 2)), r3 += a2 - 1;
            } else t3 += String.fromCharCode(e3[r3]);
          }
          return t3;
        }
        function L(e3) {
          for (var t3 = e3.replace(/^0x/, "").split(""), r3 = "", n2 = 0; n2 < t3.length / 2; n2++) {
            var o2 = "0x".concat(t3[2 * n2]).concat(t3[2 * n2 + 1]);
            r3 += String.fromCharCode(o2);
          }
          return r3;
        }
        function D(e3) {
          for (var t3 = "", r3 = 0; r3 < e3.length; r3++) t3 += S(e3[r3]);
          return t3;
        }
        function U(e3) {
          return new k().decodeToByteArray(e3);
        }
        function x(e3) {
          return new k().encodeIgnoreUtf8(e3);
        }
        const J = require_toConsumableArray();
        var _ = r2.n(J), z = 34, G = "41", j = 65, V = /^(41)/, X = "m/44'/195'/0'/0/0";
        function H(e3) {
          return N(e3);
        }
        function $(e3, t3, r3) {
          if (e3.length != t3.length) return false;
          var n2;
          for (n2 = 0; n2 < e3.length; n2++) if (r3) {
            if (e3[n2] != t3[n2]) return false;
          } else if (JSON.stringify(e3[n2]) != JSON.stringify(t3[n2])) return false;
          return true;
        }
        function Z(e3) {
          if ("string" != typeof e3) throw new Error("The passed string is not a string");
          var t3, r3, n2 = new Array();
          t3 = e3.length;
          for (var o2 = 0; o2 < t3; o2++) (r3 = e3.charCodeAt(o2)) >= 65536 && r3 <= 1114111 ? (n2.push(r3 >> 18 & 7 | 240), n2.push(r3 >> 12 & 63 | 128), n2.push(r3 >> 6 & 63 | 128), n2.push(63 & r3 | 128)) : r3 >= 2048 && r3 <= 65535 ? (n2.push(r3 >> 12 & 15 | 224), n2.push(r3 >> 6 & 63 | 128), n2.push(63 & r3 | 128)) : r3 >= 128 && r3 <= 2047 ? (n2.push(r3 >> 6 & 31 | 192), n2.push(63 & r3 | 128)) : n2.push(255 & r3);
          return n2;
        }
        function K(e3) {
          var t3;
          if (e3 >= "A" && e3 <= "F" ? t3 = e3.charCodeAt(0) - "A".charCodeAt(0) + 10 : e3 >= "a" && e3 <= "f" ? t3 = e3.charCodeAt(0) - "a".charCodeAt(0) + 10 : e3 >= "0" && e3 <= "9" && (t3 = e3.charCodeAt(0) - "0".charCodeAt(0)), "number" == typeof t3) return t3;
          throw new Error("The passed hex char is not a valid hex char");
        }
        function Q(e3) {
          return e3 >= "A" && e3 <= "F" || e3 >= "a" && e3 <= "f" || e3 >= "0" && e3 <= "9" ? 1 : 0;
        }
        function Y(e3) {
          var t3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          if ("string" != typeof e3) throw new Error("The passed string is not a string");
          var r3 = e3.length;
          t3 && r3 % 2 && (e3 = "0".concat(e3), r3++);
          for (var n2 = Array(), o2 = 0, a2 = 0, i2 = 0, s2 = 0; s2 < r3; s2++) {
            var u2 = e3.charAt(s2);
            if (!Q(u2)) throw new Error("The passed hex char is not a valid hex string");
            o2 <<= 4, o2 += K(u2), 0 == ++a2 % 2 && (n2[i2++] = o2, o2 = 0);
          }
          return n2;
        }
        function q(e3) {
          if (!/^\d{4}-\d{2}-\d{2}( \d{2}-\d{2}-\d{2}|)/.test(e3)) throw new Error("The passed date string is not valid");
          var t3 = e3.split(" "), r3 = t3[0].split("-"), n2 = parseInt(r3[0], 10), o2 = parseInt(r3[1], 10) - 1, a2 = parseInt(r3[2], 10);
          if (t3.length > 1) {
            var i2 = t3[1].split("-"), s2 = parseInt(i2[0], 10), u2 = parseInt(i2[1], 10), c2 = parseInt(i2[2], 10);
            return new Date(n2, o2, a2, s2, u2, c2);
          }
          return new Date(n2, o2, a2);
        }
        function ee(e3) {
          return e3 >= "0" && e3 <= "9" ? 1 : 0;
        }
        function te(e3) {
          if (null == e3) return -1;
          if ("string" != typeof e3) return -1;
          if (0 == e3.length || "" == e3) return -1;
          var t3 = 0;
          if (40 == e3.length) for (; t3 < 40 && Q(e3.charAt(t3)); t3++) ;
          if (40 == t3) return 1;
          for (t3 = 0; t3 < e3.length && ee(e3.charAt(t3)); t3++) ;
          if (t3 == e3.length) return 2;
          for (t3 = 0; t3 < e3.length; t3++) if (e3.charAt(t3) > " ") return 3;
          return -1;
        }
        for (var re = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", ne = {}, oe = 0; oe < re.length; oe++) ne[re.charAt(oe)] = oe;
        var ae = 58;
        function ie(e3) {
          if (0 === e3.length) return "";
          var t3, r3, n2 = [0];
          for (t3 = 0; t3 < e3.length; t3++) {
            for (r3 = 0; r3 < n2.length; r3++) n2[r3] <<= 8;
            n2[0] += e3[t3];
            var o2 = 0;
            for (r3 = 0; r3 < n2.length; ++r3) n2[r3] += o2, o2 = n2[r3] / ae | 0, n2[r3] %= ae;
            for (; o2; ) n2.push(o2 % ae), o2 = o2 / ae | 0;
          }
          for (t3 = 0; 0 === e3[t3] && t3 < e3.length - 1; t3++) n2.push(0);
          return n2.reverse().map(function(e4) {
            return re[e4];
          }).join("");
        }
        function se(e3) {
          if (0 === e3.length) return [];
          var t3, r3, n2 = [0];
          for (t3 = 0; t3 < e3.length; t3++) {
            var o2 = e3[t3];
            if (!(o2 in ne)) throw new Error("Non-base58 character");
            for (r3 = 0; r3 < n2.length; r3++) n2[r3] *= ae;
            n2[0] += ne[o2];
            var a2 = 0;
            for (r3 = 0; r3 < n2.length; ++r3) n2[r3] += a2, a2 = n2[r3] >> 8, n2[r3] &= 255;
            for (; a2; ) n2.push(255 & a2), a2 >>= 8;
          }
          for (t3 = 0; "1" === e3[t3] && t3 < e3.length - 1; t3++) n2.push(0);
          return n2.reverse();
        }
        const ue = require_classPrivateFieldSet();
        var ce = r2.n(ue);
        const le = require_classPrivateFieldGet();
        var de = r2.n(le), pe = "0x0000000000000000000000000000000000000000000000000000000000000000", fe = "6.13.5";
        function ge(e3, t3, r3) {
          for (var n2 = t3.split("|").map(function(e4) {
            return e4.trim();
          }), o2 = 0; o2 < n2.length; o2++) switch (t3) {
            case "any":
              return;
            case "bigint":
            case "boolean":
            case "number":
            case "string":
              if (f(e3) === t3) return;
          }
          var a2 = new Error("invalid value for type ".concat(t3));
          throw a2.code = "INVALID_ARGUMENT", a2.argument = "value.".concat(r3), a2.value = e3, a2;
        }
        function he(e3) {
          return ye.apply(this, arguments);
        }
        function ye() {
          return (ye = d(M.mark(function e3(t3) {
            var r3, n2;
            return M.wrap(function(e4) {
              for (; ; ) switch (e4.prev = e4.next) {
                case 0:
                  return r3 = Object.keys(t3), e4.next = 3, Promise.all(r3.map(function(e5) {
                    return Promise.resolve(t3[e5]);
                  }));
                case 3:
                  return n2 = e4.sent, e4.abrupt("return", n2.reduce(function(e5, t4, n3) {
                    return e5[r3[n3]] = t4, e5;
                  }, {}));
                case 5:
                case "end":
                  return e4.stop();
              }
            }, e3);
          }))).apply(this, arguments);
        }
        function be(e3, t3, r3) {
          for (var n2 in t3) {
            var o2 = t3[n2], a2 = r3 ? r3[n2] : null;
            a2 && ge(o2, a2, n2), Object.defineProperty(e3, n2, { enumerable: true, value: o2, writable: false });
          }
        }
        function Te(e3) {
          if (null == e3) return "null";
          if (Array.isArray(e3)) return "[ " + e3.map(Te).join(", ") + " ]";
          if (e3 instanceof Uint8Array) {
            for (var t3 = "0123456789abcdef", r3 = "0x", n2 = 0; n2 < e3.length; n2++) r3 += t3[e3[n2] >> 4], r3 += t3[15 & e3[n2]];
            return r3;
          }
          if ("object" === f(e3) && "function" == typeof e3.toJSON) return Te(e3.toJSON());
          switch (f(e3)) {
            case "boolean":
            case "symbol":
            case "number":
              return e3.toString();
            case "bigint":
              return BigInt(e3).toString();
            case "string":
              return JSON.stringify(e3);
            case "object":
              var o2 = Object.keys(e3);
              return o2.sort(), "{ " + o2.map(function(t4) {
                return "".concat(Te(t4), ": ").concat(Te(e3[t4]));
              }).join(", ") + " }";
          }
          return "[ COULD NOT SERIALIZE ]";
        }
        function ve(e3, t3) {
          return e3 && e3.code === t3;
        }
        function me(e3, t3, r3) {
          var n2, o2 = e3, a2 = [];
          if (r3) {
            if ("message" in r3 || "code" in r3 || "name" in r3) throw new Error("value will overwrite populated values: ".concat(Te(r3)));
            for (var i2 in r3) if ("shortMessage" !== i2) {
              var s2 = r3[i2];
              a2.push(i2 + "=" + Te(s2));
            }
          }
          switch (a2.push("code=".concat(t3)), a2.push("version=".concat(fe)), a2.length && (e3 += " (" + a2.join(", ") + ")"), t3) {
            case "INVALID_ARGUMENT":
              n2 = new TypeError(e3);
              break;
            case "NUMERIC_FAULT":
            case "BUFFER_OVERRUN":
              n2 = new RangeError(e3);
              break;
            default:
              n2 = new Error(e3);
          }
          return be(n2, { code: t3 }), r3 && Object.assign(n2, r3), null == n2.shortMessage && be(n2, { shortMessage: o2 }), n2;
        }
        function Ae(e3, t3, r3, n2) {
          if (!e3) throw me(t3, r3, n2);
        }
        function Pe(e3, t3, r3, n2) {
          Ae(e3, t3, "INVALID_ARGUMENT", { argument: r3, value: n2 });
        }
        function We(e3, t3, r3) {
          null == r3 && (r3 = ""), r3 && (r3 = ": " + r3), Ae(e3 >= t3, "missing argument" + r3, "MISSING_ARGUMENT", { count: e3, expectedCount: t3 }), Ae(e3 <= t3, "too many arguments" + r3, "UNEXPECTED_ARGUMENT", { count: e3, expectedCount: t3 });
        }
        var Be = ["NFD", "NFC", "NFKD", "NFKC"].reduce(function(e3, t3) {
          try {
            if ("test" !== "test".normalize(t3)) throw new Error("bad");
            if ("NFD" === t3 && String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) throw new Error("broken");
            e3.push(t3);
          } catch (e4) {
          }
          return e3;
        }, []);
        function Ce(e3) {
          Ae(Be.indexOf(e3) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", { operation: "String.prototype.normalize", info: { form: e3 } });
        }
        function Fe(e3, t3, r3) {
          if (null == r3 && (r3 = ""), e3 !== t3) {
            var n2 = r3, o2 = "new";
            r3 && (n2 += ".", o2 += " " + r3), Ae(false, "private constructor; use ".concat(n2, "from* methods"), "UNSUPPORTED_OPERATION", { operation: o2 });
          }
        }
        function we(e3, t3, r3) {
          if (e3 instanceof Uint8Array) return r3 ? new Uint8Array(e3) : e3;
          if ("string" == typeof e3 && e3.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
            for (var n2 = new Uint8Array((e3.length - 2) / 2), o2 = 2, a2 = 0; a2 < n2.length; a2++) n2[a2] = parseInt(e3.substring(o2, o2 + 2), 16), o2 += 2;
            return n2;
          }
          Pe(false, "invalid BytesLike value", t3 || "value", e3);
        }
        function Ie(e3, t3) {
          return we(e3, t3, false);
        }
        function Me(e3, t3) {
          return we(e3, t3, true);
        }
        function Ee(e3, t3) {
          return !("string" != typeof e3 || !e3.match(/^0x[0-9A-Fa-f]*$/) || "number" == typeof t3 && e3.length !== 2 + 2 * t3 || true === t3 && e3.length % 2 != 0);
        }
        function Re(e3) {
          return Ee(e3, true) || e3 instanceof Uint8Array;
        }
        var Oe = "0123456789abcdef";
        function ke(e3) {
          for (var t3 = Ie(e3), r3 = "0x", n2 = 0; n2 < t3.length; n2++) {
            var o2 = t3[n2];
            r3 += Oe[(240 & o2) >> 4] + Oe[15 & o2];
          }
          return r3;
        }
        function Se(e3) {
          return "0x" + e3.map(function(e4) {
            return ke(e4).substring(2);
          }).join("");
        }
        function Ne(e3) {
          return Ee(e3, true) ? (e3.length - 2) / 2 : Ie(e3).length;
        }
        function Le(e3, t3, r3) {
          var n2 = Ie(e3);
          return null != r3 && r3 > n2.length && Ae(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", { buffer: n2, length: n2.length, offset: r3 }), ke(n2.slice(null == t3 ? 0 : t3, null == r3 ? n2.length : r3));
        }
        function De(e3, t3) {
          return function(e4, t4, r3) {
            var n2 = Ie(e4);
            Ae(t4 >= n2.length, "padding exceeds data length", "BUFFER_OVERRUN", { buffer: new Uint8Array(n2), length: t4, offset: t4 + 1 });
            var o2 = new Uint8Array(t4);
            return o2.fill(0), r3 ? o2.set(n2, t4 - n2.length) : o2.set(n2, 0), ke(o2);
          }(e3, t3, true);
        }
        function Ue(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n2 = Array(t3); r3 < t3; r3++) n2[r3] = e3[r3];
          return n2;
        }
        var xe = BigInt(0), Je = BigInt(1), _e = 9007199254740991;
        function ze(e3, t3) {
          var r3 = je(e3, "value"), n2 = BigInt(Ze(t3, "width")), o2 = Je << n2 - Je;
          return r3 < xe ? (Ae((r3 = -r3) <= o2, "too low", "NUMERIC_FAULT", { operation: "toTwos", fault: "overflow", value: e3 }), (~r3 & (Je << n2) - Je) + Je) : (Ae(r3 < o2, "too high", "NUMERIC_FAULT", { operation: "toTwos", fault: "overflow", value: e3 }), r3);
        }
        function Ge(e3, t3) {
          var r3 = Ve(e3, "value"), n2 = BigInt(Ze(t3, "bits"));
          return r3 & (Je << n2) - Je;
        }
        function je(e3, t3) {
          switch (f(e3)) {
            case "bigint":
              return e3;
            case "number":
              return Pe(Number.isInteger(e3), "underflow", t3 || "value", e3), Pe(e3 >= -_e && e3 <= _e, "overflow", t3 || "value", e3), BigInt(e3);
            case "string":
              try {
                if ("" === e3) throw new Error("empty string");
                return "-" === e3[0] && "-" !== e3[1] ? -BigInt(e3.substring(1)) : BigInt(e3);
              } catch (r3) {
                Pe(false, "invalid BigNumberish string: ".concat(r3.message), t3 || "value", e3);
              }
          }
          Pe(false, "invalid BigNumberish value", t3 || "value", e3);
        }
        function Ve(e3, t3) {
          var r3 = je(e3, t3);
          return Ae(r3 >= xe, "unsigned value cannot be negative", "NUMERIC_FAULT", { fault: "overflow", operation: "getUint", value: e3 }), r3;
        }
        var Xe, He = "0123456789abcdef";
        function $e(e3) {
          if (e3 instanceof Uint8Array) {
            var t3, r3 = "0x0", n2 = function(e4, t4) {
              var r4 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
              if (!r4) {
                if (Array.isArray(e4) || (r4 = function(e5, t5) {
                  if (e5) {
                    if ("string" == typeof e5) return Ue(e5, t5);
                    var r5 = {}.toString.call(e5).slice(8, -1);
                    return "Object" === r5 && e5.constructor && (r5 = e5.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(e5) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? Ue(e5, t5) : void 0;
                  }
                }(e4)) || t4 && e4 && "number" == typeof e4.length) {
                  r4 && (e4 = r4);
                  var n3 = 0, o3 = function() {
                  };
                  return { s: o3, n: function() {
                    return n3 >= e4.length ? { done: true } : { done: false, value: e4[n3++] };
                  }, e: function(e5) {
                    throw e5;
                  }, f: o3 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a2, i2 = true, s2 = false;
              return { s: function() {
                r4 = r4.call(e4);
              }, n: function() {
                var e5 = r4.next();
                return i2 = e5.done, e5;
              }, e: function(e5) {
                s2 = true, a2 = e5;
              }, f: function() {
                try {
                  i2 || null == r4.return || r4.return();
                } finally {
                  if (s2) throw a2;
                }
              } };
            }(e3);
            try {
              for (n2.s(); !(t3 = n2.n()).done; ) {
                var o2 = t3.value;
                r3 += He[o2 >> 4], r3 += He[15 & o2];
              }
            } catch (e4) {
              n2.e(e4);
            } finally {
              n2.f();
            }
            return BigInt(r3);
          }
          return je(e3);
        }
        function Ze(e3, t3) {
          switch (f(e3)) {
            case "bigint":
              return Pe(e3 >= -_e && e3 <= _e, "overflow", t3 || "value", e3), Number(e3);
            case "number":
              return Pe(Number.isInteger(e3), "underflow", t3 || "value", e3), Pe(e3 >= -_e && e3 <= _e, "overflow", t3 || "value", e3), e3;
            case "string":
              try {
                if ("" === e3) throw new Error("empty string");
                return Ze(BigInt(e3), t3);
              } catch (r3) {
                Pe(false, "invalid numeric string: ".concat(r3.message), t3 || "value", e3);
              }
          }
          Pe(false, "invalid numeric value", t3 || "value", e3);
        }
        function Ke(e3, t3) {
          var r3 = Ve(e3, "value").toString(16);
          if (null == t3) r3.length % 2 && (r3 = "0" + r3);
          else {
            var n2 = Ze(t3, "width");
            for (Ae(2 * n2 >= r3.length, "value exceeds width (".concat(n2, " bytes)"), "NUMERIC_FAULT", { operation: "toBeHex", fault: "overflow", value: e3 }); r3.length < 2 * n2; ) r3 = "0" + r3;
          }
          return "0x" + r3;
        }
        function Qe(e3) {
          var t3 = Ve(e3, "value");
          if (t3 === xe) return new Uint8Array([]);
          var r3 = t3.toString(16);
          r3.length % 2 && (r3 = "0" + r3);
          for (var n2 = new Uint8Array(r3.length / 2), o2 = 0; o2 < n2.length; o2++) {
            var a2 = 2 * o2;
            n2[o2] = parseInt(r3.substring(a2, a2 + 2), 16);
          }
          return n2;
        }
        function Ye(e3, t3, r3) {
          (function(e4, t4) {
            if (t4.has(e4)) throw new TypeError("Cannot initialize the same private elements twice on an object");
          })(e3, t3), t3.set(e3, r3);
        }
        var qe = BigInt(0), et = BigInt(1), tt = BigInt(2), rt = BigInt(27), nt = BigInt(28), ot = BigInt(35), at = {};
        function it(e3) {
          return De(Qe(e3), 32);
        }
        var st = /* @__PURE__ */ new WeakMap(), ut = /* @__PURE__ */ new WeakMap(), ct = /* @__PURE__ */ new WeakMap(), lt = /* @__PURE__ */ new WeakMap();
        Xe = Symbol.for("nodejs.util.inspect.custom");
        var dt = function() {
          function e3(t3, r3, n2, o2) {
            h(this, e3), Ye(this, st, { writable: true, value: void 0 }), Ye(this, ut, { writable: true, value: void 0 }), Ye(this, ct, { writable: true, value: void 0 }), Ye(this, lt, { writable: true, value: void 0 }), Fe(t3, at, "Signature"), ue(this, st, r3), ue(this, ut, n2), ue(this, ct, o2), ue(this, lt, null);
          }
          return b(e3, [{ key: "r", get: function() {
            return le(this, st);
          }, set: function(e4) {
            Pe(32 === Ne(e4), "invalid r", "value", e4), ue(this, st, ke(e4));
          } }, { key: "s", get: function() {
            return le(this, ut);
          }, set: function(e4) {
            Pe(32 === Ne(e4), "invalid s", "value", e4);
            var t3 = ke(e4);
            Pe(parseInt(t3.substring(0, 3)) < 8, "non-canonical s", "value", t3), ue(this, ut, t3);
          } }, { key: "v", get: function() {
            return le(this, ct);
          }, set: function(e4) {
            var t3 = Ze(e4, "value");
            Pe(27 === t3 || 28 === t3, "invalid v", "v", e4), ue(this, ct, t3);
          } }, { key: "networkV", get: function() {
            return le(this, lt);
          } }, { key: "legacyChainId", get: function() {
            var t3 = this.networkV;
            return null == t3 ? null : e3.getChainId(t3);
          } }, { key: "yParity", get: function() {
            return 27 === this.v ? 0 : 1;
          } }, { key: "yParityAndS", get: function() {
            var e4 = Ie(this.s);
            return this.yParity && (e4[0] |= 128), ke(e4);
          } }, { key: "compactSerialized", get: function() {
            return Se([this.r, this.yParityAndS]);
          } }, { key: "serialized", get: function() {
            return Se([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
          } }, { key: Xe, value: function() {
            return 'Signature { r: "'.concat(this.r, '", s: "').concat(this.s, '", yParity: ').concat(this.yParity, ", networkV: ").concat(this.networkV, " }");
          } }, { key: "clone", value: function() {
            var t3 = new e3(at, this.r, this.s, this.v);
            return this.networkV && ue(t3, lt, this.networkV), t3;
          } }, { key: "toJSON", value: function() {
            var e4 = this.networkV;
            return { _type: "signature", networkV: null != e4 ? e4.toString() : null, r: this.r, s: this.s, v: this.v };
          } }], [{ key: "getChainId", value: function(e4) {
            var t3 = je(e4, "v");
            return t3 == rt || t3 == nt ? qe : (Pe(t3 >= ot, "invalid EIP-155 v", "v", e4), (t3 - ot) / tt);
          } }, { key: "getChainIdV", value: function(e4, t3) {
            return je(e4) * tt + BigInt(35 + t3 - 27);
          } }, { key: "getNormalizedV", value: function(e4) {
            var t3 = je(e4);
            return t3 === qe || t3 === rt ? 27 : t3 === et || t3 === nt ? 28 : (Pe(t3 >= ot, "invalid v", "v", e4), t3 & et ? 27 : 28);
          } }, { key: "from", value: function(t3) {
            function r3(e4, r4) {
              Pe(e4, r4, "signature", t3);
            }
            if (null == t3) return new e3(at, pe, pe, 27);
            if ("string" == typeof t3) {
              var n2 = Ie(t3, "signature");
              if (64 === n2.length) {
                var o2 = ke(n2.slice(0, 32)), a2 = n2.slice(32, 64), i2 = 128 & a2[0] ? 28 : 27;
                return a2[0] &= 127, new e3(at, o2, ke(a2), i2);
              }
              if (65 === n2.length) {
                var s2 = ke(n2.slice(0, 32)), u2 = n2.slice(32, 64);
                r3(!(128 & u2[0]), "non-canonical s");
                var c2 = e3.getNormalizedV(n2[64]);
                return new e3(at, s2, ke(u2), c2);
              }
              r3(false, "invalid raw signature length");
            }
            if (t3 instanceof e3) return t3.clone();
            var l2 = t3.r;
            r3(null != l2, "missing r");
            var d2 = it(l2), p2 = function(e4, t4) {
              if (null != e4) return it(e4);
              if (null != t4) {
                r3(Ee(t4, 32), "invalid yParityAndS");
                var n3 = Ie(t4);
                return n3[0] &= 127, ke(n3);
              }
              r3(false, "missing s");
            }(t3.s, t3.yParityAndS);
            r3(!(128 & Ie(p2)[0]), "non-canonical s");
            var f2 = function(t4, n3, o3) {
              if (null != t4) {
                var a3 = je(t4);
                return { networkV: a3 >= ot ? a3 : void 0, v: e3.getNormalizedV(a3) };
              }
              if (null != n3) return r3(Ee(n3, 32), "invalid yParityAndS"), { v: 128 & Ie(n3)[0] ? 28 : 27 };
              if (null != o3) {
                switch (Ze(o3, "sig.yParity")) {
                  case 0:
                    return { v: 27 };
                  case 1:
                    return { v: 28 };
                }
                r3(false, "invalid yParity");
              }
              r3(false, "missing v");
            }(t3.v, t3.yParityAndS, t3.yParity), g2 = f2.networkV, h2 = f2.v, y2 = new e3(at, d2, p2, h2);
            return g2 && ue(y2, lt, g2), r3(null == t3.yParity || Ze(t3.yParity, "sig.yParity") === y2.yParity, "yParity mismatch"), r3(null == t3.yParityAndS || t3.yParityAndS === y2.yParityAndS, "yParityAndS mismatch"), y2;
          } }]), e3;
        }();
        const pt = require_crypto();
        var ft = function(e3) {
          return (0, pt.createHash)("sha256").update(e3).digest();
        }, gt = function(e3) {
          return (0, pt.createHash)("sha512").update(e3).digest();
        }, ht = ft, yt = gt, bt = false, Tt = false;
        function vt(e3) {
          var t3 = Ie(e3, "data");
          return ke(ht(t3));
        }
        function mt(e3) {
          var t3 = Ie(e3, "data");
          return ke(yt(t3));
        }
        vt._ = ft, vt.lock = function() {
          bt = true;
        }, vt.register = function(e3) {
          if (bt) throw new Error("sha256 is locked");
          ht = e3;
        }, Object.freeze(vt), mt._ = gt, mt.lock = function() {
          Tt = true;
        }, mt.register = function(e3) {
          if (Tt) throw new Error("sha512 is locked");
          yt = e3;
        }, Object.freeze(vt);
        var At = false, Pt = function(e3, t3, r3, n2, o2) {
          return (0, pt.pbkdf2Sync)(e3, t3, r3, n2, o2);
        }, Wt = Pt;
        function Bt(e3, t3, r3, n2, o2) {
          var a2 = Ie(e3, "password"), i2 = Ie(t3, "salt");
          return ke(Wt(a2, i2, r3, n2, o2));
        }
        function Ct(e3, t3, r3, n2, o2) {
          if ("BAD_PREFIX" === e3 || "UNEXPECTED_CONTINUE" === e3) {
            for (var a2 = 0, i2 = t3 + 1; i2 < r3.length && r3[i2] >> 6 == 2; i2++) a2++;
            return a2;
          }
          return "OVERRUN" === e3 ? r3.length - t3 - 1 : 0;
        }
        Bt._ = Pt, Bt.lock = function() {
          At = true;
        }, Bt.register = function(e3) {
          if (At) throw new Error("pbkdf2 is locked");
          Wt = e3;
        }, Object.freeze(Bt);
        var Ft = Object.freeze({ error: function(e3, t3, r3, n2, o2) {
          Pe(false, "invalid codepoint at offset ".concat(t3, "; ").concat(e3), "bytes", r3);
        }, ignore: Ct, replace: function(e3, t3, r3, n2, o2) {
          return "OVERLONG" === e3 ? (Pe("number" == typeof o2, "invalid bad code point for replacement", "badCodepoint", o2), n2.push(o2), 0) : (n2.push(65533), Ct(e3, t3, r3));
        } });
        function wt(e3, t3) {
          Pe("string" == typeof e3, "invalid string value", "str", e3), null != t3 && (Ce(t3), e3 = e3.normalize(t3));
          for (var r3 = [], n2 = 0; n2 < e3.length; n2++) {
            var o2 = e3.charCodeAt(n2);
            if (o2 < 128) r3.push(o2);
            else if (o2 < 2048) r3.push(o2 >> 6 | 192), r3.push(63 & o2 | 128);
            else if (55296 == (64512 & o2)) {
              n2++;
              var a2 = e3.charCodeAt(n2);
              Pe(n2 < e3.length && 56320 == (64512 & a2), "invalid surrogate pair", "str", e3);
              var i2 = 65536 + ((1023 & o2) << 10) + (1023 & a2);
              r3.push(i2 >> 18 | 240), r3.push(i2 >> 12 & 63 | 128), r3.push(i2 >> 6 & 63 | 128), r3.push(63 & i2 | 128);
            } else r3.push(o2 >> 12 | 224), r3.push(o2 >> 6 & 63 | 128), r3.push(63 & o2 | 128);
          }
          return new Uint8Array(r3);
        }
        function It(e3, t3) {
          return function(e4, t4) {
            null == t4 && (t4 = Ft.error);
            for (var r3 = Ie(e4, "bytes"), n2 = [], o2 = 0; o2 < r3.length; ) {
              var a2 = r3[o2++];
              if (a2 >> 7) {
                var i2 = null, s2 = null;
                if (192 == (224 & a2)) i2 = 1, s2 = 127;
                else if (224 == (240 & a2)) i2 = 2, s2 = 2047;
                else {
                  if (240 != (248 & a2)) {
                    o2 += t4(128 == (192 & a2) ? "UNEXPECTED_CONTINUE" : "BAD_PREFIX", o2 - 1, r3, n2);
                    continue;
                  }
                  i2 = 3, s2 = 65535;
                }
                if (o2 - 1 + i2 >= r3.length) o2 += t4("OVERRUN", o2 - 1, r3, n2);
                else {
                  for (var u2 = a2 & (1 << 8 - i2 - 1) - 1, c2 = 0; c2 < i2; c2++) {
                    var l2 = r3[o2];
                    if (128 != (192 & l2)) {
                      o2 += t4("MISSING_CONTINUE", o2, r3, n2), u2 = null;
                      break;
                    }
                    u2 = u2 << 6 | 63 & l2, o2++;
                  }
                  null !== u2 && (u2 > 1114111 ? o2 += t4("OUT_OF_RANGE", o2 - 1 - i2, r3, n2, u2) : u2 >= 55296 && u2 <= 57343 ? o2 += t4("UTF16_SURROGATE", o2 - 1 - i2, r3, n2, u2) : u2 <= s2 ? o2 += t4("OVERLONG", o2 - 1 - i2, r3, n2, u2) : n2.push(u2));
                }
              } else n2.push(a2);
            }
            return n2;
          }(e3, t3).map(function(e4) {
            return e4 <= 65535 ? String.fromCharCode(e4) : (e4 -= 65536, String.fromCharCode(55296 + (e4 >> 10 & 1023), 56320 + (1023 & e4)));
          }).join("");
        }
        const Mt = require_sha3();
        var Et = false, Rt = function(e3) {
          return (0, Mt.keccak_256)(e3);
        }, Ot = Rt;
        function kt(e3) {
          var t3 = Ie(e3, "data");
          return ke(Ot(t3));
        }
        function St(e3) {
          return kt(wt(e3));
        }
        kt._ = Rt, kt.lock = function() {
          Et = true;
        }, kt.register = function(e3) {
          if (Et) throw new TypeError("keccak256 is locked");
          Ot = e3;
        }, Object.freeze(kt);
        var Nt = /^[a-z]*$/i;
        function Lt(e3, t3) {
          var r3 = 97;
          return e3.reduce(function(e4, n2) {
            return n2 === t3 ? r3++ : n2.match(Nt) ? e4.push(String.fromCharCode(r3) + n2) : (r3 = 97, e4.push(n2)), e4;
          }, []);
        }
        function Dt(e3) {
          return Pe("0" === e3[0], "unsupported auwl data", "data", e3), function(e4, t3) {
            for (var r3 = 28; r3 >= 0; r3--) e4 = e4.split(" !#$%&'()*+,-./<=>?@[]^_`{|}~"[r3]).join(t3.substring(2 * r3, 2 * r3 + 2));
            var n2 = [], o2 = e4.replace(/(:|([0-9])|([A-Z][a-z]*))/g, function(e5, t4, r4, o3) {
              if (r4) for (var a2 = parseInt(r4); a2 >= 0; a2--) n2.push(";");
              else n2.push(t4.toLowerCase());
              return "";
            });
            if (o2) throw new Error("leftovers: ".concat(JSON.stringify(o2)));
            return Lt(Lt(n2, ";"), ":");
          }(e3.substring(59), e3.substring(1, 59));
        }
        var Ut = function() {
          function e3(t3) {
            h(this, e3), w(this, "locale", void 0), be(this, { locale: t3 });
          }
          return b(e3, [{ key: "split", value: function(e4) {
            return e4.toLowerCase().split(/\s+/g);
          } }, { key: "join", value: function(e4) {
            return e4.join(" ");
          } }]), e3;
        }();
        function xt() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (xt = function() {
            return !!e3;
          })();
        }
        function Jt(e3, t3, r3) {
          _t(e3, t3), t3.set(e3, r3);
        }
        function _t(e3, t3) {
          if (t3.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
        }
        function zt(e3, t3, r3) {
          return function(e4, t4, r4) {
            if ("function" == typeof e4 ? e4 === t4 : e4.has(t4)) return arguments.length < 3 ? t4 : r4;
            throw new TypeError("Private element is not present on this object");
          }(t3, e3), r3;
        }
        var Gt = /* @__PURE__ */ new WeakMap(), jt = /* @__PURE__ */ new WeakMap(), Vt = /* @__PURE__ */ new WeakMap(), Xt = /* @__PURE__ */ new WeakSet(), Ht = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = xt(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4, t4, r4) {
            var a2, i2, s2;
            return h(this, o2), a2 = n2.call(this, e4), _t(i2 = v(a2), s2 = Xt), s2.add(i2), Jt(v(a2), Gt, { writable: true, value: void 0 }), Jt(v(a2), jt, { writable: true, value: void 0 }), Jt(v(a2), Vt, { writable: true, value: void 0 }), ue(v(a2), Gt, t4), ue(v(a2), jt, r4), ue(v(a2), Vt, null), a2;
          }
          return b(o2, [{ key: "_data", get: function() {
            return le(this, Gt);
          } }, { key: "_decodeWords", value: function() {
            return Dt(le(this, Gt));
          } }, { key: "getWord", value: function(e4) {
            var t4 = zt(this, Xt, $t).call(this);
            return Pe(e4 >= 0 && e4 < t4.length, "invalid word index: ".concat(e4), "index", e4), t4[e4];
          } }, { key: "getWordIndex", value: function(e4) {
            return zt(this, Xt, $t).call(this).indexOf(e4);
          } }]), o2;
        }(Ut);
        function $t() {
          if (null == le(this, Vt)) {
            var e3 = this._decodeWords();
            if (St(e3.join("\n") + "\n") !== le(this, jt)) throw new Error("BIP39 Wordlist for ".concat(this.locale, " FAILED"));
            ue(this, Vt, e3);
          }
          return le(this, Vt);
        }
        function Zt() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Zt = function() {
            return !!e3;
          })();
        }
        var Kt = null, Qt = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Zt(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2() {
            return h(this, o2), n2.call(this, "en", "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO", "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60");
          }
          return b(o2, null, [{ key: "wordlist", value: function() {
            return null == Kt && (Kt = new o2()), Kt;
          } }]), o2;
        }(Ht);
        function Yt(e3) {
          return (1 << e3) - 1 << 8 - e3 & 255;
        }
        function qt(e3, t3) {
          Ce("NFKD"), null == t3 && (t3 = Qt.wordlist());
          var r3 = t3.split(e3);
          Pe(r3.length % 3 == 0 && r3.length >= 12 && r3.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
          for (var n2 = new Uint8Array(Math.ceil(11 * r3.length / 8)), o2 = 0, a2 = 0; a2 < r3.length; a2++) {
            var i2 = t3.getWordIndex(r3[a2].normalize("NFKD"));
            Pe(i2 >= 0, "invalid mnemonic word at index ".concat(a2), "mnemonic", "[ REDACTED ]");
            for (var s2 = 0; s2 < 11; s2++) i2 & 1 << 10 - s2 && (n2[o2 >> 3] |= 1 << 7 - o2 % 8), o2++;
          }
          var u2 = 32 * r3.length / 3, c2 = Yt(r3.length / 3);
          return Pe((Ie(vt(n2.slice(0, u2 / 8)))[0] & c2) == (n2[n2.length - 1] & c2), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]"), ke(n2.slice(0, u2 / 8));
        }
        function er(e3, t3) {
          Pe(e3.length % 4 == 0 && e3.length >= 16 && e3.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]"), null == t3 && (t3 = Qt.wordlist());
          for (var r3 = [0], n2 = 11, o2 = 0; o2 < e3.length; o2++) n2 > 8 ? (r3[r3.length - 1] <<= 8, r3[r3.length - 1] |= e3[o2], n2 -= 8) : (r3[r3.length - 1] <<= n2, r3[r3.length - 1] |= e3[o2] >> 8 - n2, r3.push(e3[o2] & (1 << 8 - n2) - 1 & 255), n2 += 3);
          var a2 = e3.length / 4, i2 = parseInt(vt(e3).substring(2, 4), 16) & Yt(a2);
          return r3[r3.length - 1] <<= a2, r3[r3.length - 1] |= i2 >> 8 - a2, t3.join(r3.map(function(e4) {
            return t3.getWord(e4);
          }));
        }
        var tr = {}, rr = function() {
          function e3(t3, r3, n2, o2, a2) {
            h(this, e3), w(this, "phrase", void 0), w(this, "password", void 0), w(this, "wordlist", void 0), w(this, "entropy", void 0), null == o2 && (o2 = ""), null == a2 && (a2 = Qt.wordlist()), Fe(t3, tr, "Mnemonic"), be(this, { phrase: n2, password: o2, wordlist: a2, entropy: r3 });
          }
          return b(e3, [{ key: "computeSeed", value: function() {
            var e4 = wt("mnemonic" + this.password, "NFKD");
            return Bt(wt(this.phrase, "NFKD"), e4, 2048, 64, "sha512");
          } }], [{ key: "fromPhrase", value: function(t3, r3, n2) {
            var o2 = qt(t3, n2);
            return t3 = er(Ie(o2), n2), new e3(tr, o2, t3, r3, n2);
          } }, { key: "fromEntropy", value: function(t3, r3, n2) {
            var o2 = Ie(t3, "entropy"), a2 = er(o2, n2);
            return new e3(tr, ke(o2), a2, r3, n2);
          } }, { key: "entropyToPhrase", value: function(e4, t3) {
            return er(Ie(e4, "entropy"), t3);
          } }, { key: "phraseToEntropy", value: function(e4, t3) {
            return qt(e4, t3);
          } }, { key: "isValidMnemonic", value: function(e4, t3) {
            try {
              return qt(e4, t3), true;
            } catch (e5) {
            }
            return false;
          } }]), e3;
        }(), nr = false, or = function(e3, t3, r3) {
          return (0, pt.createHmac)(e3, t3).update(r3).digest();
        }, ar = or;
        function ir(e3, t3, r3) {
          var n2 = Ie(t3, "key"), o2 = Ie(r3, "data");
          return ke(ar(e3, n2, o2));
        }
        ir._ = or, ir.lock = function() {
          nr = true;
        }, ir.register = function(e3) {
          if (nr) throw new Error("computeHmac is locked");
          ar = e3;
        }, Object.freeze(ir);
        var sr = BigInt(0), ur = BigInt(36);
        function cr(e3) {
          for (var t3 = (e3 = e3.toLowerCase()).substring(2).split(""), r3 = new Uint8Array(40), n2 = 0; n2 < 40; n2++) r3[n2] = t3[n2].charCodeAt(0);
          for (var o2 = Ie(kt(r3)), a2 = 0; a2 < 40; a2 += 2) o2[a2 >> 1] >> 4 >= 8 && (t3[a2] = t3[a2].toUpperCase()), (15 & o2[a2 >> 1]) >= 8 && (t3[a2 + 1] = t3[a2 + 1].toUpperCase());
          return "0x" + t3.join("");
        }
        for (var lr = {}, dr = 0; dr < 10; dr++) lr[String(dr)] = String(dr);
        for (var pr = 0; pr < 26; pr++) lr[String.fromCharCode(65 + pr)] = String(10 + pr);
        var fr = 15;
        var gr = function() {
          for (var e3 = {}, t3 = 0; t3 < 36; t3++) e3["0123456789abcdefghijklmnopqrstuvwxyz"[t3]] = BigInt(t3);
          return e3;
        }();
        function hr(e3) {
          if (Pe("string" == typeof e3, "invalid address", "address", e3), e3.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            e3.startsWith("0x") || (e3 = "0x" + e3);
            var t3 = cr(e3);
            return Pe(!e3.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || t3 === e3, "bad address checksum", "address", e3), t3;
          }
          if (e3.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            Pe(e3.substring(2, 4) === function(e4) {
              for (var t4 = (e4 = (e4 = e4.toUpperCase()).substring(4) + e4.substring(0, 2) + "00").split("").map(function(e5) {
                return lr[e5];
              }).join(""); t4.length >= fr; ) {
                var r4 = t4.substring(0, fr);
                t4 = parseInt(r4, 10) % 97 + t4.substring(r4.length);
              }
              for (var n2 = String(98 - parseInt(t4, 10) % 97); n2.length < 2; ) n2 = "0" + n2;
              return n2;
            }(e3), "bad icap checksum", "address", e3);
            for (var r3 = function(e4) {
              e4 = e4.toLowerCase();
              for (var t4 = sr, r4 = 0; r4 < e4.length; r4++) t4 = t4 * ur + gr[e4[r4]];
              return t4;
            }(e3.substring(4)).toString(16); r3.length < 40; ) r3 = "0" + r3;
            return cr("0x" + r3);
          }
          Pe(false, "invalid address", "address", e3);
        }
        const yr = require_secp256k1();
        var br = /* @__PURE__ */ new WeakMap(), Tr = function() {
          function e3(t3) {
            var r3, n2, o2;
            h(this, e3), o2 = { writable: true, value: void 0 }, function(e4, t4) {
              if (t4.has(e4)) throw new TypeError("Cannot initialize the same private elements twice on an object");
            }(r3 = this, n2 = br), n2.set(r3, o2), Pe(32 === Ne(t3), "invalid private key", "privateKey", "[REDACTED]"), ue(this, br, ke(t3));
          }
          return b(e3, [{ key: "privateKey", get: function() {
            return le(this, br);
          } }, { key: "publicKey", get: function() {
            return e3.computePublicKey(le(this, br));
          } }, { key: "compressedPublicKey", get: function() {
            return e3.computePublicKey(le(this, br), true);
          } }, { key: "sign", value: function(e4) {
            Pe(32 === Ne(e4), "invalid digest length", "digest", e4);
            var t3 = yr.secp256k1.sign(Me(e4), Me(le(this, br)), { lowS: true });
            return dt.from({ r: Ke(t3.r, 32), s: Ke(t3.s, 32), v: t3.recovery ? 28 : 27 });
          } }, { key: "computeSharedSecret", value: function(t3) {
            var r3 = e3.computePublicKey(t3);
            return ke(yr.secp256k1.getSharedSecret(Me(le(this, br)), Ie(r3), false));
          } }], [{ key: "computePublicKey", value: function(e4, t3) {
            var r3 = Ie(e4, "key");
            if (32 === r3.length) return ke(yr.secp256k1.getPublicKey(r3, !!t3));
            if (64 === r3.length) {
              var n2 = new Uint8Array(65);
              n2[0] = 4, n2.set(r3, 1), r3 = n2;
            }
            return ke(yr.secp256k1.ProjectivePoint.fromHex(r3).toRawBytes(t3));
          } }, { key: "recoverPublicKey", value: function(e4, t3) {
            Pe(32 === Ne(e4), "invalid digest length", "digest", e4);
            var r3 = dt.from(t3), n2 = yr.secp256k1.Signature.fromCompact(Me(Se([r3.r, r3.s]))), o2 = (n2 = n2.addRecoveryBit(r3.yParity)).recoverPublicKey(Me(e4));
            return Pe(null != o2, "invalid signautre for digest", "signature", t3), "0x" + o2.toHex(false);
          } }, { key: "addPoints", value: function(t3, r3, n2) {
            var o2 = yr.secp256k1.ProjectivePoint.fromHex(e3.computePublicKey(t3).substring(2)), a2 = yr.secp256k1.ProjectivePoint.fromHex(e3.computePublicKey(r3).substring(2));
            return "0x" + o2.add(a2).toHex(!!n2);
          } }]), e3;
        }();
        function vr(e3) {
          return hr(kt("0x" + ("string" == typeof e3 ? Tr.computePublicKey(e3, false) : e3.publicKey).substring(4)).substring(26));
        }
        function mr(e3, t3) {
          return vr(Tr.recoverPublicKey(e3, t3));
        }
        const Ar = require_wrapNativeSuper();
        function Pr(e3, t3) {
          Fr(e3, t3), t3.add(e3);
        }
        function Wr(e3, t3, r3) {
          return function(e4, t4, r4) {
            if ("function" == typeof e4 ? e4 === t4 : e4.has(t4)) return arguments.length < 3 ? t4 : r4;
            throw new TypeError("Private element is not present on this object");
          }(t3, e3), r3;
        }
        function Br() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Br = function() {
            return !!e3;
          })();
        }
        function Cr(e3, t3, r3) {
          Fr(e3, t3), t3.set(e3, r3);
        }
        function Fr(e3, t3) {
          if (t3.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
        }
        var wr = 32, Ir = new Uint8Array(wr), Mr = ["then"], Er = {}, Rr = /* @__PURE__ */ new WeakMap();
        function Or(e3) {
          return Rr.get(e3);
        }
        function kr(e3, t3) {
          Rr.set(e3, t3);
        }
        function Sr(e3, t3) {
          var r3 = new Error("deferred error during ABI decoding triggered accessing ".concat(e3));
          throw r3.error = t3, r3;
        }
        function Nr(e3, t3, r3) {
          return e3.indexOf(null) >= 0 ? t3.map(function(e4, t4) {
            return e4 instanceof Dr ? Nr(Or(e4), e4, r3) : e4;
          }) : e3.reduce(function(e4, n2, o2) {
            var a2 = t3.getValue(n2);
            return n2 in e4 || (r3 && a2 instanceof Dr && (a2 = Nr(Or(a2), a2, r3)), e4[n2] = a2), e4;
          }, {});
        }
        var Lr = /* @__PURE__ */ new WeakMap(), Dr = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Br(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2() {
            var e4;
            h(this, o2);
            for (var t4 = arguments.length, r4 = new Array(t4), a2 = 0; a2 < t4; a2++) r4[a2] = arguments[a2];
            var i2 = r4[0], s2 = r4[1], u2 = (r4[2] || []).slice(), c2 = true;
            i2 !== Er && (s2 = r4, u2 = [], c2 = false), e4 = n2.call(this, s2.length), Cr(v(e4), Lr, { writable: true, value: void 0 }), s2.forEach(function(t5, r5) {
              e4[r5] = t5;
            });
            var l2 = u2.reduce(function(e5, t5) {
              return "string" == typeof t5 && e5.set(t5, (e5.get(t5) || 0) + 1), e5;
            }, /* @__PURE__ */ new Map());
            if (kr(v(e4), Object.freeze(s2.map(function(e5, t5) {
              var r5 = u2[t5];
              return null != r5 && 1 === l2.get(r5) ? r5 : null;
            }))), ue(v(e4), Lr, []), null == le(v(e4), Lr) && le(v(e4), Lr), !c2) return W(e4);
            Object.freeze(v(e4));
            var d2 = new Proxy(v(e4), { get: function(t5, r5, n3) {
              if ("string" == typeof r5) {
                if (r5.match(/^[0-9]+$/)) {
                  var o3 = Ze(r5, "%index");
                  if (o3 < 0 || o3 >= e4.length) throw new RangeError("out of result range");
                  var a3 = t5[o3];
                  return a3 instanceof Error && Sr("index ".concat(o3), a3), a3;
                }
                if (Mr.indexOf(r5) >= 0) return Reflect.get(t5, r5, n3);
                var i3 = t5[r5];
                if (i3 instanceof Function) return function() {
                  for (var e5 = arguments.length, r6 = new Array(e5), o4 = 0; o4 < e5; o4++) r6[o4] = arguments[o4];
                  return i3.apply(this === n3 ? t5 : this, r6);
                };
                if (!(r5 in t5)) return t5.getValue.apply(v(e4) === n3 ? t5 : v(e4), [r5]);
              }
              return Reflect.get(t5, r5, n3);
            } });
            return kr(d2, Or(v(e4))), W(e4, d2);
          }
          return b(o2, [{ key: "toArray", value: function(e4) {
            var t4 = [];
            return this.forEach(function(r4, n3) {
              r4 instanceof Error && Sr("index ".concat(n3), r4), e4 && r4 instanceof o2 && (r4 = r4.toArray(e4)), t4.push(r4);
            }), t4;
          } }, { key: "toObject", value: function(e4) {
            var t4 = this, r4 = Or(this);
            return r4.reduce(function(n3, o3, a2) {
              return Ae(null != o3, "value at index ".concat(a2, " unnamed"), "UNSUPPORTED_OPERATION", { operation: "toObject()" }), Nr(r4, t4, e4);
            }, {});
          } }, { key: "slice", value: function(e4, t4) {
            null == e4 && (e4 = 0), e4 < 0 && (e4 += this.length) < 0 && (e4 = 0), null == t4 && (t4 = this.length), t4 < 0 && (t4 += this.length) < 0 && (t4 = 0), t4 > this.length && (t4 = this.length);
            for (var r4 = Or(this), n3 = [], a2 = [], i2 = e4; i2 < t4; i2++) n3.push(this[i2]), a2.push(r4[i2]);
            return new o2(Er, n3, a2);
          } }, { key: "filter", value: function(e4, t4) {
            for (var r4 = Or(this), n3 = [], a2 = [], i2 = 0; i2 < this.length; i2++) {
              var s2 = this[i2];
              s2 instanceof Error && Sr("index ".concat(i2), s2), e4.call(t4, s2, i2, this) && (n3.push(s2), a2.push(r4[i2]));
            }
            return new o2(Er, n3, a2);
          } }, { key: "map", value: function(e4, t4) {
            for (var r4 = [], n3 = 0; n3 < this.length; n3++) {
              var o3 = this[n3];
              o3 instanceof Error && Sr("index ".concat(n3), o3), r4.push(e4.call(t4, o3, n3, this));
            }
            return r4;
          } }, { key: "getValue", value: function(e4) {
            var t4 = Or(this).indexOf(e4);
            if (-1 !== t4) {
              var r4 = this[t4];
              return r4 instanceof Error && Sr("property ".concat(JSON.stringify(e4)), r4.error), r4;
            }
          } }], [{ key: "fromItems", value: function(e4, t4) {
            return new o2(Er, e4, t4);
          } }]), o2;
        }(Ar(Array));
        function Ur(e3) {
          var t3 = Qe(e3);
          return Ae(t3.length <= wr, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: t3, length: wr, offset: t3.length }), t3.length !== wr && (t3 = Me(Se([Ir.slice(t3.length % wr), t3]))), t3;
        }
        var xr = function() {
          function e3(t3, r3, n2, o2) {
            h(this, e3), w(this, "name", void 0), w(this, "type", void 0), w(this, "localName", void 0), w(this, "dynamic", void 0), be(this, { name: t3, type: r3, localName: n2, dynamic: o2 }, { name: "string", type: "string", localName: "string", dynamic: "boolean" });
          }
          return b(e3, [{ key: "_throwError", value: function(e4, t3) {
            Pe(false, e4, this.localName, t3);
          } }]), e3;
        }(), Jr = /* @__PURE__ */ new WeakMap(), _r = /* @__PURE__ */ new WeakMap(), zr = /* @__PURE__ */ new WeakSet(), Gr = function() {
          function e3() {
            h(this, e3), Pr(this, zr), Cr(this, Jr, { writable: true, value: void 0 }), Cr(this, _r, { writable: true, value: void 0 }), ue(this, Jr, []), ue(this, _r, 0);
          }
          return b(e3, [{ key: "data", get: function() {
            return Se(le(this, Jr));
          } }, { key: "length", get: function() {
            return le(this, _r);
          } }, { key: "appendWriter", value: function(e4) {
            return Wr(this, zr, jr).call(this, Me(e4.data));
          } }, { key: "writeBytes", value: function(e4) {
            var t3 = Me(e4), r3 = t3.length % wr;
            return r3 && (t3 = Me(Se([t3, Ir.slice(r3)]))), Wr(this, zr, jr).call(this, t3);
          } }, { key: "writeValue", value: function(e4) {
            return Wr(this, zr, jr).call(this, Ur(e4));
          } }, { key: "writeUpdatableValue", value: function() {
            var e4 = this, t3 = le(this, Jr).length;
            return le(this, Jr).push(Ir), ue(this, _r, le(this, _r) + wr), function(r3) {
              le(e4, Jr)[t3] = Ur(r3);
            };
          } }]), e3;
        }();
        function jr(e3) {
          return le(this, Jr).push(e3), ue(this, _r, le(this, _r) + e3.length), e3.length;
        }
        var Vr = /* @__PURE__ */ new WeakMap(), Xr = /* @__PURE__ */ new WeakMap(), Hr = /* @__PURE__ */ new WeakMap(), $r = /* @__PURE__ */ new WeakMap(), Zr = /* @__PURE__ */ new WeakMap(), Kr = /* @__PURE__ */ new WeakSet(), Qr = /* @__PURE__ */ new WeakSet(), Yr = function() {
          function e3(t3, r3, n2) {
            h(this, e3), Pr(this, Qr), Pr(this, Kr), w(this, "allowLoose", void 0), Cr(this, Vr, { writable: true, value: void 0 }), Cr(this, Xr, { writable: true, value: void 0 }), Cr(this, Hr, { writable: true, value: void 0 }), Cr(this, $r, { writable: true, value: void 0 }), Cr(this, Zr, { writable: true, value: void 0 }), be(this, { allowLoose: !!r3 }), ue(this, Vr, Me(t3)), ue(this, Hr, 0), ue(this, $r, null), ue(this, Zr, null != n2 ? n2 : 1024), ue(this, Xr, 0);
          }
          return b(e3, [{ key: "data", get: function() {
            return ke(le(this, Vr));
          } }, { key: "dataLength", get: function() {
            return le(this, Vr).length;
          } }, { key: "consumed", get: function() {
            return le(this, Xr);
          } }, { key: "bytes", get: function() {
            return new Uint8Array(le(this, Vr));
          } }, { key: "subReader", value: function(t3) {
            var r3 = new e3(le(this, Vr).slice(le(this, Xr) + t3), this.allowLoose, le(this, Zr));
            return ue(r3, $r, this), r3;
          } }, { key: "readBytes", value: function(e4, t3) {
            var r3 = Wr(this, Qr, en).call(this, 0, e4, !!t3);
            return Wr(this, Kr, qr).call(this, e4), ue(this, Xr, le(this, Xr) + r3.length), r3.slice(0, e4);
          } }, { key: "readValue", value: function() {
            return $e(this.readBytes(wr));
          } }, { key: "readIndex", value: function() {
            return Ze($e(this.readBytes(wr)));
          } }]), e3;
        }();
        function qr(e3) {
          var t3;
          if (le(this, $r)) return Wr(t3 = le(this, $r), Kr, qr).call(t3, e3);
          ue(this, Hr, le(this, Hr) + e3), Ae(le(this, Zr) < 1 || le(this, Hr) <= le(this, Zr) * this.dataLength, "compressed ABI data exceeds inflation ratio of ".concat(le(this, Zr), " ( see: https://github.com/ethers-io/ethers.js/issues/4537 )"), "BUFFER_OVERRUN", { buffer: Me(le(this, Vr)), offset: le(this, Xr), length: e3, info: { bytesRead: le(this, Hr), dataLength: this.dataLength } });
        }
        function en(e3, t3, r3) {
          var n2 = Math.ceil(t3 / wr) * wr;
          return le(this, Xr) + n2 > le(this, Vr).length && (this.allowLoose && r3 && le(this, Xr) + t3 <= le(this, Vr).length ? n2 = t3 : Ae(false, "data out-of-bounds", "BUFFER_OVERRUN", { buffer: Me(le(this, Vr)), length: le(this, Vr).length, offset: le(this, Xr) + n2 })), le(this, Vr).slice(le(this, Xr), le(this, Xr) + n2);
        }
        var tn = {};
        function rn(e3, t3) {
          var r3 = false;
          return t3 < 0 && (r3 = true, t3 *= -1), new sn(tn, "".concat(r3 ? "" : "u", "int").concat(t3), e3, { signed: r3, width: t3 });
        }
        function nn(e3, t3) {
          return new sn(tn, "bytes".concat(t3 || ""), e3, { size: t3 });
        }
        var on = Symbol.for("_ethers_typed"), an = /* @__PURE__ */ new WeakMap(), sn = function() {
          function e3(t3, r3, n2, o2) {
            var a2, i2, s2;
            h(this, e3), w(this, "type", void 0), w(this, "value", void 0), s2 = { writable: true, value: void 0 }, function(e4, t4) {
              if (t4.has(e4)) throw new TypeError("Cannot initialize the same private elements twice on an object");
            }(a2 = this, i2 = an), i2.set(a2, s2), w(this, "_typedSymbol", void 0), null == o2 && (o2 = null), Fe(tn, t3, "Typed"), be(this, { _typedSymbol: on, type: r3, value: n2 }), ue(this, an, o2), this.format();
          }
          return b(e3, [{ key: "format", value: function() {
            if ("array" === this.type) throw new Error("");
            if ("dynamicArray" === this.type) throw new Error("");
            return "tuple" === this.type ? "tuple(".concat(this.value.map(function(e4) {
              return e4.format();
            }).join(","), ")") : this.type;
          } }, { key: "defaultValue", value: function() {
            return 0;
          } }, { key: "minValue", value: function() {
            return 0;
          } }, { key: "maxValue", value: function() {
            return 0;
          } }, { key: "isBigInt", value: function() {
            return !!this.type.match(/^u?int[0-9]+$/);
          } }, { key: "isData", value: function() {
            return this.type.startsWith("bytes");
          } }, { key: "isString", value: function() {
            return "string" === this.type;
          } }, { key: "tupleName", get: function() {
            if ("tuple" !== this.type) throw TypeError("not a tuple");
            return le(this, an);
          } }, { key: "arrayLength", get: function() {
            if ("array" !== this.type) throw TypeError("not an array");
            return true === le(this, an) ? -1 : false === le(this, an) ? this.value.length : null;
          } }], [{ key: "from", value: function(t3, r3) {
            return new e3(tn, t3, r3);
          } }, { key: "uint8", value: function(e4) {
            return rn(e4, 8);
          } }, { key: "uint16", value: function(e4) {
            return rn(e4, 16);
          } }, { key: "uint24", value: function(e4) {
            return rn(e4, 24);
          } }, { key: "uint32", value: function(e4) {
            return rn(e4, 32);
          } }, { key: "uint40", value: function(e4) {
            return rn(e4, 40);
          } }, { key: "uint48", value: function(e4) {
            return rn(e4, 48);
          } }, { key: "uint56", value: function(e4) {
            return rn(e4, 56);
          } }, { key: "uint64", value: function(e4) {
            return rn(e4, 64);
          } }, { key: "uint72", value: function(e4) {
            return rn(e4, 72);
          } }, { key: "uint80", value: function(e4) {
            return rn(e4, 80);
          } }, { key: "uint88", value: function(e4) {
            return rn(e4, 88);
          } }, { key: "uint96", value: function(e4) {
            return rn(e4, 96);
          } }, { key: "uint104", value: function(e4) {
            return rn(e4, 104);
          } }, { key: "uint112", value: function(e4) {
            return rn(e4, 112);
          } }, { key: "uint120", value: function(e4) {
            return rn(e4, 120);
          } }, { key: "uint128", value: function(e4) {
            return rn(e4, 128);
          } }, { key: "uint136", value: function(e4) {
            return rn(e4, 136);
          } }, { key: "uint144", value: function(e4) {
            return rn(e4, 144);
          } }, { key: "uint152", value: function(e4) {
            return rn(e4, 152);
          } }, { key: "uint160", value: function(e4) {
            return rn(e4, 160);
          } }, { key: "uint168", value: function(e4) {
            return rn(e4, 168);
          } }, { key: "uint176", value: function(e4) {
            return rn(e4, 176);
          } }, { key: "uint184", value: function(e4) {
            return rn(e4, 184);
          } }, { key: "uint192", value: function(e4) {
            return rn(e4, 192);
          } }, { key: "uint200", value: function(e4) {
            return rn(e4, 200);
          } }, { key: "uint208", value: function(e4) {
            return rn(e4, 208);
          } }, { key: "uint216", value: function(e4) {
            return rn(e4, 216);
          } }, { key: "uint224", value: function(e4) {
            return rn(e4, 224);
          } }, { key: "uint232", value: function(e4) {
            return rn(e4, 232);
          } }, { key: "uint240", value: function(e4) {
            return rn(e4, 240);
          } }, { key: "uint248", value: function(e4) {
            return rn(e4, 248);
          } }, { key: "uint256", value: function(e4) {
            return rn(e4, 256);
          } }, { key: "uint", value: function(e4) {
            return rn(e4, 256);
          } }, { key: "int8", value: function(e4) {
            return rn(e4, -8);
          } }, { key: "int16", value: function(e4) {
            return rn(e4, -16);
          } }, { key: "int24", value: function(e4) {
            return rn(e4, -24);
          } }, { key: "int32", value: function(e4) {
            return rn(e4, -32);
          } }, { key: "int40", value: function(e4) {
            return rn(e4, -40);
          } }, { key: "int48", value: function(e4) {
            return rn(e4, -48);
          } }, { key: "int56", value: function(e4) {
            return rn(e4, -56);
          } }, { key: "int64", value: function(e4) {
            return rn(e4, -64);
          } }, { key: "int72", value: function(e4) {
            return rn(e4, -72);
          } }, { key: "int80", value: function(e4) {
            return rn(e4, -80);
          } }, { key: "int88", value: function(e4) {
            return rn(e4, -88);
          } }, { key: "int96", value: function(e4) {
            return rn(e4, -96);
          } }, { key: "int104", value: function(e4) {
            return rn(e4, -104);
          } }, { key: "int112", value: function(e4) {
            return rn(e4, -112);
          } }, { key: "int120", value: function(e4) {
            return rn(e4, -120);
          } }, { key: "int128", value: function(e4) {
            return rn(e4, -128);
          } }, { key: "int136", value: function(e4) {
            return rn(e4, -136);
          } }, { key: "int144", value: function(e4) {
            return rn(e4, -144);
          } }, { key: "int152", value: function(e4) {
            return rn(e4, -152);
          } }, { key: "int160", value: function(e4) {
            return rn(e4, -160);
          } }, { key: "int168", value: function(e4) {
            return rn(e4, -168);
          } }, { key: "int176", value: function(e4) {
            return rn(e4, -176);
          } }, { key: "int184", value: function(e4) {
            return rn(e4, -184);
          } }, { key: "int192", value: function(e4) {
            return rn(e4, -192);
          } }, { key: "int200", value: function(e4) {
            return rn(e4, -200);
          } }, { key: "int208", value: function(e4) {
            return rn(e4, -208);
          } }, { key: "int216", value: function(e4) {
            return rn(e4, -216);
          } }, { key: "int224", value: function(e4) {
            return rn(e4, -224);
          } }, { key: "int232", value: function(e4) {
            return rn(e4, -232);
          } }, { key: "int240", value: function(e4) {
            return rn(e4, -240);
          } }, { key: "int248", value: function(e4) {
            return rn(e4, -248);
          } }, { key: "int256", value: function(e4) {
            return rn(e4, -256);
          } }, { key: "int", value: function(e4) {
            return rn(e4, -256);
          } }, { key: "bytes1", value: function(e4) {
            return nn(e4, 1);
          } }, { key: "bytes2", value: function(e4) {
            return nn(e4, 2);
          } }, { key: "bytes3", value: function(e4) {
            return nn(e4, 3);
          } }, { key: "bytes4", value: function(e4) {
            return nn(e4, 4);
          } }, { key: "bytes5", value: function(e4) {
            return nn(e4, 5);
          } }, { key: "bytes6", value: function(e4) {
            return nn(e4, 6);
          } }, { key: "bytes7", value: function(e4) {
            return nn(e4, 7);
          } }, { key: "bytes8", value: function(e4) {
            return nn(e4, 8);
          } }, { key: "bytes9", value: function(e4) {
            return nn(e4, 9);
          } }, { key: "bytes10", value: function(e4) {
            return nn(e4, 10);
          } }, { key: "bytes11", value: function(e4) {
            return nn(e4, 11);
          } }, { key: "bytes12", value: function(e4) {
            return nn(e4, 12);
          } }, { key: "bytes13", value: function(e4) {
            return nn(e4, 13);
          } }, { key: "bytes14", value: function(e4) {
            return nn(e4, 14);
          } }, { key: "bytes15", value: function(e4) {
            return nn(e4, 15);
          } }, { key: "bytes16", value: function(e4) {
            return nn(e4, 16);
          } }, { key: "bytes17", value: function(e4) {
            return nn(e4, 17);
          } }, { key: "bytes18", value: function(e4) {
            return nn(e4, 18);
          } }, { key: "bytes19", value: function(e4) {
            return nn(e4, 19);
          } }, { key: "bytes20", value: function(e4) {
            return nn(e4, 20);
          } }, { key: "bytes21", value: function(e4) {
            return nn(e4, 21);
          } }, { key: "bytes22", value: function(e4) {
            return nn(e4, 22);
          } }, { key: "bytes23", value: function(e4) {
            return nn(e4, 23);
          } }, { key: "bytes24", value: function(e4) {
            return nn(e4, 24);
          } }, { key: "bytes25", value: function(e4) {
            return nn(e4, 25);
          } }, { key: "bytes26", value: function(e4) {
            return nn(e4, 26);
          } }, { key: "bytes27", value: function(e4) {
            return nn(e4, 27);
          } }, { key: "bytes28", value: function(e4) {
            return nn(e4, 28);
          } }, { key: "bytes29", value: function(e4) {
            return nn(e4, 29);
          } }, { key: "bytes30", value: function(e4) {
            return nn(e4, 30);
          } }, { key: "bytes31", value: function(e4) {
            return nn(e4, 31);
          } }, { key: "bytes32", value: function(e4) {
            return nn(e4, 32);
          } }, { key: "address", value: function(t3) {
            return new e3(tn, "address", t3);
          } }, { key: "bool", value: function(t3) {
            return new e3(tn, "bool", !!t3);
          } }, { key: "bytes", value: function(t3) {
            return new e3(tn, "bytes", t3);
          } }, { key: "string", value: function(t3) {
            return new e3(tn, "string", t3);
          } }, { key: "array", value: function(e4, t3) {
            throw new Error("not implemented yet");
          } }, { key: "tuple", value: function(e4, t3) {
            throw new Error("not implemented yet");
          } }, { key: "overrides", value: function(t3) {
            return new e3(tn, "overrides", Object.assign({}, t3));
          } }, { key: "isTyped", value: function(e4) {
            return e4 && "object" === f(e4) && "_typedSymbol" in e4 && e4._typedSymbol === on;
          } }, { key: "dereference", value: function(t3, r3) {
            if (e3.isTyped(t3)) {
              if (t3.type !== r3) throw new Error("invalid type: expecetd ".concat(r3, ", got ").concat(t3.type));
              return t3.value;
            }
            return t3;
          } }]), e3;
        }();
        function un() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (un = function() {
            return !!e3;
          })();
        }
        var cn = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = un(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4) {
            return h(this, o2), n2.call(this, "address", "address", e4, false);
          }
          return b(o2, [{ key: "defaultValue", value: function() {
            return "0x0000000000000000000000000000000000000000";
          } }, { key: "encode", value: function(e4, t4) {
            var r4 = sn.dereference(t4, "string");
            try {
              r4 = hr(r4);
            } catch (e5) {
              return this._throwError(e5.message, t4);
            }
            return e4.writeValue(r4);
          } }, { key: "decode", value: function(e4) {
            return hr(Ke(e4.readValue(), 20));
          } }]), o2;
        }(xr);
        function ln() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (ln = function() {
            return !!e3;
          })();
        }
        var dn = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = ln(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4) {
            var t4;
            return h(this, o2), t4 = n2.call(this, e4.name, e4.type, "_", e4.dynamic), w(v(t4), "coder", void 0), t4.coder = e4, t4;
          }
          return b(o2, [{ key: "defaultValue", value: function() {
            return this.coder.defaultValue();
          } }, { key: "encode", value: function(e4, t4) {
            return this.coder.encode(e4, t4);
          } }, { key: "decode", value: function(e4) {
            return this.coder.decode(e4);
          } }]), o2;
        }(xr);
        function pn() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (pn = function() {
            return !!e3;
          })();
        }
        function fn(e3, t3, r3) {
          var n2 = [];
          if (Array.isArray(r3)) n2 = r3;
          else if (r3 && "object" === f(r3)) {
            var o2 = {};
            n2 = t3.map(function(e4) {
              var t4 = e4.localName;
              return Ae(t4, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder: e4 }, value: r3 }), Ae(!o2[t4], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder: e4 }, value: r3 }), o2[t4] = true, r3[t4];
            });
          } else Pe(false, "invalid tuple value", "tuple", r3);
          Pe(t3.length === n2.length, "types/value length mismatch", "tuple", r3);
          var a2 = new Gr(), i2 = new Gr(), s2 = [];
          return t3.forEach(function(e4, t4) {
            var r4 = n2[t4];
            if (e4.dynamic) {
              var o3 = i2.length;
              e4.encode(i2, r4);
              var u2 = a2.writeUpdatableValue();
              s2.push(function(e5) {
                u2(e5 + o3);
              });
            } else e4.encode(a2, r4);
          }), s2.forEach(function(e4) {
            e4(a2.length);
          }), e3.appendWriter(a2) + e3.appendWriter(i2);
        }
        function gn(e3, t3) {
          var r3 = [], n2 = [], o2 = e3.subReader(0);
          return t3.forEach(function(t4) {
            var a2 = null;
            if (t4.dynamic) {
              var i2 = e3.readIndex(), s2 = o2.subReader(i2);
              try {
                a2 = t4.decode(s2);
              } catch (e4) {
                if (ve(e4, "BUFFER_OVERRUN")) throw e4;
                (a2 = e4).baseType = t4.name, a2.name = t4.localName, a2.type = t4.type;
              }
            } else try {
              a2 = t4.decode(e3);
            } catch (e4) {
              if (ve(e4, "BUFFER_OVERRUN")) throw e4;
              (a2 = e4).baseType = t4.name, a2.name = t4.localName, a2.type = t4.type;
            }
            if (null == a2) throw new Error("investigate");
            r3.push(a2), n2.push(t4.localName || null);
          }), Dr.fromItems(r3, n2);
        }
        var hn = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = pn(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4, t4, r4) {
            var a2;
            h(this, o2);
            var i2 = e4.type + "[" + (t4 >= 0 ? t4 : "") + "]", s2 = -1 === t4 || e4.dynamic;
            return a2 = n2.call(this, "array", i2, r4, s2), w(v(a2), "coder", void 0), w(v(a2), "length", void 0), be(v(a2), { coder: e4, length: t4 }), a2;
          }
          return b(o2, [{ key: "defaultValue", value: function() {
            for (var e4 = this.coder.defaultValue(), t4 = [], r4 = 0; r4 < this.length; r4++) t4.push(e4);
            return t4;
          } }, { key: "encode", value: function(e4, t4) {
            var r4 = sn.dereference(t4, "array");
            Array.isArray(r4) || this._throwError("expected array value", r4);
            var n3 = this.length;
            -1 === n3 && (n3 = r4.length, e4.writeValue(r4.length)), We(r4.length, n3, "coder array" + (this.localName ? " " + this.localName : ""));
            for (var o3 = [], a2 = 0; a2 < r4.length; a2++) o3.push(this.coder);
            return fn(e4, o3, r4);
          } }, { key: "decode", value: function(e4) {
            var t4 = this.length;
            -1 === t4 && Ae((t4 = e4.readIndex()) * wr <= e4.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: e4.bytes, offset: t4 * wr, length: e4.dataLength });
            for (var r4 = [], n3 = 0; n3 < t4; n3++) r4.push(new dn(this.coder));
            return gn(e4, r4);
          } }]), o2;
        }(xr);
        function yn() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (yn = function() {
            return !!e3;
          })();
        }
        var bn = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = yn(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4) {
            return h(this, o2), n2.call(this, "bool", "bool", e4, false);
          }
          return b(o2, [{ key: "defaultValue", value: function() {
            return false;
          } }, { key: "encode", value: function(e4, t4) {
            var r4 = sn.dereference(t4, "bool");
            return e4.writeValue(r4 ? 1 : 0);
          } }, { key: "decode", value: function(e4) {
            return !!e4.readValue();
          } }]), o2;
        }(xr);
        const Tn = require_get();
        function vn(e3) {
          var t3 = mn();
          return function() {
            var r3, n2 = C(e3);
            if (t3) {
              var o2 = C(this).constructor;
              r3 = Reflect.construct(n2, arguments, o2);
            } else r3 = n2.apply(this, arguments);
            return W(this, r3);
          };
        }
        function mn() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (mn = function() {
            return !!e3;
          })();
        }
        var An = function(e3) {
          A(r3, e3);
          var t3 = vn(r3);
          function r3(e4, n2) {
            return h(this, r3), t3.call(this, e4, e4, n2, true);
          }
          return b(r3, [{ key: "defaultValue", value: function() {
            return "0x";
          } }, { key: "encode", value: function(e4, t4) {
            return t4 = Me(t4), e4.writeValue(t4.length) + e4.writeBytes(t4);
          } }, { key: "decode", value: function(e4) {
            return e4.readBytes(e4.readIndex(), true);
          } }]), r3;
        }(xr), Pn = function(e3) {
          A(r3, e3);
          var t3 = vn(r3);
          function r3(e4) {
            return h(this, r3), t3.call(this, "bytes", e4);
          }
          return b(r3, [{ key: "decode", value: function(e4) {
            return ke(Tn(C(r3.prototype), "decode", this).call(this, e4));
          } }]), r3;
        }(An);
        function Wn() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Wn = function() {
            return !!e3;
          })();
        }
        var Bn = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Wn(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4, t4) {
            var r4;
            h(this, o2);
            var a2 = "bytes" + String(e4);
            return r4 = n2.call(this, a2, a2, t4, false), w(v(r4), "size", void 0), be(v(r4), { size: e4 }, { size: "number" }), r4;
          }
          return b(o2, [{ key: "defaultValue", value: function() {
            return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + 2 * this.size);
          } }, { key: "encode", value: function(e4, t4) {
            var r4 = Me(sn.dereference(t4, this.type));
            return r4.length !== this.size && this._throwError("incorrect data length", t4), e4.writeBytes(r4);
          } }, { key: "decode", value: function(e4) {
            return ke(e4.readBytes(this.size));
          } }]), o2;
        }(xr);
        function Cn() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Cn = function() {
            return !!e3;
          })();
        }
        var Fn = new Uint8Array([]), wn = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Cn(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4) {
            return h(this, o2), n2.call(this, "null", "", e4, false);
          }
          return b(o2, [{ key: "defaultValue", value: function() {
            return null;
          } }, { key: "encode", value: function(e4, t4) {
            return null != t4 && this._throwError("not null", t4), e4.writeBytes(Fn);
          } }, { key: "decode", value: function(e4) {
            return e4.readBytes(0), null;
          } }]), o2;
        }(xr);
        function In() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (In = function() {
            return !!e3;
          })();
        }
        var Mn = BigInt(0), En = BigInt(1), Rn = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), On = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = In(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4, t4, r4) {
            var a2;
            h(this, o2);
            var i2 = (t4 ? "int" : "uint") + 8 * e4;
            return a2 = n2.call(this, i2, i2, r4, false), w(v(a2), "size", void 0), w(v(a2), "signed", void 0), be(v(a2), { size: e4, signed: t4 }, { size: "number", signed: "boolean" }), a2;
          }
          return b(o2, [{ key: "defaultValue", value: function() {
            return 0;
          } }, { key: "encode", value: function(e4, t4) {
            var r4 = je(sn.dereference(t4, this.type)), n3 = Ge(Rn, 256);
            if (this.signed) {
              var o3 = Ge(n3, 8 * this.size - 1);
              (r4 > o3 || r4 < -(o3 + En)) && this._throwError("value out-of-bounds", t4), r4 = ze(r4, 256);
            } else (r4 < Mn || r4 > Ge(n3, 8 * this.size)) && this._throwError("value out-of-bounds", t4);
            return e4.writeValue(r4);
          } }, { key: "decode", value: function(e4) {
            var t4 = Ge(e4.readValue(), 8 * this.size);
            return this.signed && (t4 = function(e5, t5) {
              var r4 = Ve(e5, "value"), n3 = BigInt(Ze(t5, "width"));
              return Ae(r4 >> n3 === xe, "overflow", "NUMERIC_FAULT", { operation: "fromTwos", fault: "overflow", value: e5 }), r4 >> n3 - Je ? -((~r4 & (Je << n3) - Je) + Je) : r4;
            }(t4, 8 * this.size)), t4;
          } }]), o2;
        }(xr);
        function kn() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (kn = function() {
            return !!e3;
          })();
        }
        var Sn = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = kn(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4) {
            return h(this, o2), n2.call(this, "string", e4);
          }
          return b(o2, [{ key: "defaultValue", value: function() {
            return "";
          } }, { key: "encode", value: function(e4, t4) {
            return Tn(C(o2.prototype), "encode", this).call(this, e4, wt(sn.dereference(t4, "string")));
          } }, { key: "decode", value: function(e4) {
            return It(Tn(C(o2.prototype), "decode", this).call(this, e4));
          } }]), o2;
        }(An);
        function Nn() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Nn = function() {
            return !!e3;
          })();
        }
        var Ln = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Nn(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4, t4) {
            var r4;
            h(this, o2);
            var a2 = false, i2 = [];
            e4.forEach(function(e5) {
              e5.dynamic && (a2 = true), i2.push(e5.type);
            });
            var s2 = "tuple(" + i2.join(",") + ")";
            return r4 = n2.call(this, "tuple", s2, t4, a2), w(v(r4), "coders", void 0), be(v(r4), { coders: Object.freeze(e4.slice()) }), r4;
          }
          return b(o2, [{ key: "defaultValue", value: function() {
            var e4 = [];
            this.coders.forEach(function(t5) {
              e4.push(t5.defaultValue());
            });
            var t4 = this.coders.reduce(function(e5, t5) {
              var r4 = t5.localName;
              return r4 && (e5[r4] || (e5[r4] = 0), e5[r4]++), e5;
            }, {});
            return this.coders.forEach(function(r4, n3) {
              var o3 = r4.localName;
              o3 && 1 === t4[o3] && ("length" === o3 && (o3 = "_length"), null == e4[o3] && (e4[o3] = e4[n3]));
            }), Object.freeze(e4);
          } }, { key: "encode", value: function(e4, t4) {
            var r4 = sn.dereference(t4, "tuple");
            return fn(e4, this.coders, r4);
          } }, { key: "decode", value: function(e4) {
            return gn(e4, this.coders);
          } }]), o2;
        }(xr);
        function Dn(e3, t3) {
          xn(e3, t3), t3.add(e3);
        }
        function Un(e3, t3, r3) {
          xn(e3, t3), t3.set(e3, r3);
        }
        function xn(e3, t3) {
          if (t3.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
        }
        function Jn(e3, t3, r3) {
          return function(e4, t4, r4) {
            if ("function" == typeof e4 ? e4 === t4 : e4.has(t4)) return arguments.length < 3 ? t4 : r4;
            throw new TypeError("Private element is not present on this object");
          }(t3, e3), r3;
        }
        function _n(e3) {
          var t3 = /* @__PURE__ */ new Set();
          return e3.forEach(function(e4) {
            return t3.add(e4);
          }), Object.freeze(t3);
        }
        _n("external public payable override".split(" "));
        var zn = "constant external internal payable private public pure view override", Gn = (_n(zn.split(" ")), "constructor error event fallback function receive struct"), jn = (_n(Gn.split(" ")), "calldata memory storage payable indexed"), Vn = _n(jn.split(" ")), Xn = _n([Gn, jn, "tuple returns", zn].join(" ").split(" ")), Hn = { "(": "OPEN_PAREN", ")": "CLOSE_PAREN", "[": "OPEN_BRACKET", "]": "CLOSE_BRACKET", ",": "COMMA", "@": "AT" }, $n = new RegExp("^(\\s*)"), Zn = new RegExp("^([0-9]+)"), Kn = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"), Qn = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"), Yn = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$"), qn = /* @__PURE__ */ new WeakMap(), eo = /* @__PURE__ */ new WeakMap(), to = /* @__PURE__ */ new WeakSet(), ro = function() {
          function e3(t3) {
            h(this, e3), Dn(this, to), Un(this, qn, { writable: true, value: void 0 }), Un(this, eo, { writable: true, value: void 0 }), ue(this, qn, 0), ue(this, eo, t3.slice());
          }
          return b(e3, [{ key: "offset", get: function() {
            return le(this, qn);
          } }, { key: "length", get: function() {
            return le(this, eo).length - le(this, qn);
          } }, { key: "clone", value: function() {
            return new e3(le(this, eo));
          } }, { key: "reset", value: function() {
            ue(this, qn, 0);
          } }, { key: "popKeyword", value: function(e4) {
            var t3 = this.peek();
            if ("KEYWORD" !== t3.type || !e4.has(t3.text)) throw new Error("expected keyword ".concat(t3.text));
            return this.pop().text;
          } }, { key: "popType", value: function(e4) {
            if (this.peek().type !== e4) {
              var t3 = this.peek();
              throw new Error("expected ".concat(e4, "; got ").concat(t3.type, " ").concat(JSON.stringify(t3.text)));
            }
            return this.pop().text;
          } }, { key: "popParen", value: function() {
            var e4 = this.peek();
            if ("OPEN_PAREN" !== e4.type) throw new Error("bad start");
            var t3 = Jn(this, to, no).call(this, le(this, qn) + 1, e4.match + 1);
            return ue(this, qn, e4.match + 1), t3;
          } }, { key: "popParams", value: function() {
            var e4 = this.peek();
            if ("OPEN_PAREN" !== e4.type) throw new Error("bad start");
            for (var t3 = []; le(this, qn) < e4.match - 1; ) {
              var r3 = this.peek().linkNext;
              t3.push(Jn(this, to, no).call(this, le(this, qn) + 1, r3)), ue(this, qn, r3);
            }
            return ue(this, qn, e4.match + 1), t3;
          } }, { key: "peek", value: function() {
            if (le(this, qn) >= le(this, eo).length) throw new Error("out-of-bounds");
            return le(this, eo)[le(this, qn)];
          } }, { key: "peekKeyword", value: function(e4) {
            var t3 = this.peekType("KEYWORD");
            return null != t3 && e4.has(t3) ? t3 : null;
          } }, { key: "peekType", value: function(e4) {
            if (0 === this.length) return null;
            var t3 = this.peek();
            return t3.type === e4 ? t3.text : null;
          } }, { key: "pop", value: function() {
            var e4, t3 = this.peek();
            return ue(this, qn, (e4 = le(this, qn), ++e4)), t3;
          } }, { key: "toString", value: function() {
            for (var e4 = [], t3 = le(this, qn); t3 < le(this, eo).length; t3++) {
              var r3 = le(this, eo)[t3];
              e4.push("".concat(r3.type, ":").concat(r3.text));
            }
            return "<TokenString ".concat(e4.join(" "), ">");
          } }]), e3;
        }();
        function no() {
          var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          return new ro(le(this, eo).slice(e3, t3).map(function(t4) {
            return Object.freeze(Object.assign({}, t4, { match: t4.match - e3, linkBack: t4.linkBack - e3, linkNext: t4.linkNext - e3 }));
          }));
        }
        function oo(e3, t3) {
          for (var r3 = /* @__PURE__ */ new Set(); ; ) {
            var n2 = e3.peekType("KEYWORD");
            if (null == n2 || t3 && !t3.has(n2)) break;
            if (e3.pop(), r3.has(n2)) throw new Error("duplicate keywords: ".concat(JSON.stringify(n2)));
            r3.add(n2);
          }
          return Object.freeze(r3);
        }
        var ao = new RegExp(/^(.*)\[([0-9]*)\]$/);
        function io(e3) {
          var t3 = e3.match(Yn);
          if (Pe(t3, "invalid type", "type", e3), "uint" === e3) return "uint256";
          if ("int" === e3) return "int256";
          if (t3[2]) {
            var r3 = parseInt(t3[2]);
            Pe(0 !== r3 && r3 <= 32, "invalid bytes length", "type", e3);
          } else if (t3[3]) {
            var n2 = parseInt(t3[3]);
            Pe(0 !== n2 && n2 <= 256 && n2 % 8 == 0, "invalid numeric width", "type", e3);
          }
          return e3;
        }
        var so = {}, uo = Symbol.for("_ethers_internal"), co = "_ParamTypeInternal", lo = /* @__PURE__ */ new WeakSet(), po = function() {
          function e3(t4, r3, n2, o2, a2, i2, s2, u2) {
            if (h(this, e3), Dn(this, lo), w(this, "name", void 0), w(this, "type", void 0), w(this, "baseType", void 0), w(this, "indexed", void 0), w(this, "components", void 0), w(this, "arrayLength", void 0), w(this, "arrayChildren", void 0), Fe(t4, so, "ParamType"), Object.defineProperty(this, uo, { value: co }), i2 && (i2 = Object.freeze(i2.slice())), "array" === o2) {
              if (null == s2 || null == u2) throw new Error("");
            } else if (null != s2 || null != u2) throw new Error("");
            if ("tuple" === o2) {
              if (null == i2) throw new Error("");
            } else if (null != i2) throw new Error("");
            be(this, { name: r3, type: n2, baseType: o2, indexed: a2, components: i2, arrayLength: s2, arrayChildren: u2 });
          }
          var t3;
          return b(e3, [{ key: "format", value: function(e4) {
            if (null == e4 && (e4 = "sighash"), "json" === e4) {
              var t4 = this.name || "";
              if (this.isArray()) {
                var r3 = JSON.parse(this.arrayChildren.format("json"));
                return r3.name = t4, r3.type += "[".concat(this.arrayLength < 0 ? "" : String(this.arrayLength), "]"), JSON.stringify(r3);
              }
              var n2 = { type: "tuple" === this.baseType ? "tuple" : this.type, name: t4 };
              return "boolean" == typeof this.indexed && (n2.indexed = this.indexed), this.isTuple() && (n2.components = this.components.map(function(t5) {
                return JSON.parse(t5.format(e4));
              })), JSON.stringify(n2);
            }
            var o2 = "";
            return this.isArray() ? (o2 += this.arrayChildren.format(e4), o2 += "[".concat(this.arrayLength < 0 ? "" : String(this.arrayLength), "]")) : this.isTuple() ? o2 += "(" + this.components.map(function(t5) {
              return t5.format(e4);
            }).join("full" === e4 ? ", " : ",") + ")" : o2 += this.type, "sighash" !== e4 && (true === this.indexed && (o2 += " indexed"), "full" === e4 && this.name && (o2 += " " + this.name)), o2;
          } }, { key: "isArray", value: function() {
            return "array" === this.baseType;
          } }, { key: "isTuple", value: function() {
            return "tuple" === this.baseType;
          } }, { key: "isIndexable", value: function() {
            return null != this.indexed;
          } }, { key: "walk", value: function(e4, t4) {
            if (this.isArray()) {
              if (!Array.isArray(e4)) throw new Error("invalid array value");
              if (-1 !== this.arrayLength && e4.length !== this.arrayLength) throw new Error("array is wrong length");
              var r3 = this;
              return e4.map(function(e5) {
                return r3.arrayChildren.walk(e5, t4);
              });
            }
            if (this.isTuple()) {
              if (!Array.isArray(e4)) throw new Error("invalid tuple value");
              if (e4.length !== this.components.length) throw new Error("array is wrong length");
              var n2 = this;
              return e4.map(function(e5, r4) {
                return n2.components[r4].walk(e5, t4);
              });
            }
            return t4(this.type, e4);
          } }, { key: "walkAsync", value: (t3 = d(M.mark(function e4(t4, r3) {
            var n2, o2;
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (n2 = [], o2 = [t4], Jn(this, lo, fo).call(this, n2, t4, r3, function(e6) {
                    o2[0] = e6;
                  }), !n2.length) {
                    e5.next = 6;
                    break;
                  }
                  return e5.next = 6, Promise.all(n2);
                case 6:
                  return e5.abrupt("return", o2[0]);
                case 7:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, r3) {
            return t3.apply(this, arguments);
          }) }], [{ key: "from", value: function(t4, r3) {
            if (e3.isParamType(t4)) return t4;
            if ("string" == typeof t4) try {
              return e3.from(function(e4) {
                for (var t5 = [], r4 = function(t6) {
                  var r5 = a3 < e4.length ? JSON.stringify(e4[a3]) : "$EOI";
                  throw new Error("invalid token ".concat(r5, " at ").concat(a3, ": ").concat(t6));
                }, n3 = [], o3 = [], a3 = 0; a3 < e4.length; ) {
                  var i3 = e4.substring(a3), s3 = i3.match($n);
                  s3 && (a3 += s3[1].length, i3 = e4.substring(a3));
                  var u3 = { depth: n3.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset: a3, value: -1 };
                  t5.push(u3);
                  var c3 = Hn[i3[0]] || "";
                  if (c3) {
                    if (u3.type = c3, u3.text = i3[0], a3++, "OPEN_PAREN" === c3) n3.push(t5.length - 1), o3.push(t5.length - 1);
                    else if ("CLOSE_PAREN" == c3) 0 === n3.length && r4("no matching open bracket"), u3.match = n3.pop(), t5[u3.match].match = t5.length - 1, u3.depth--, u3.linkBack = o3.pop(), t5[u3.linkBack].linkNext = t5.length - 1;
                    else if ("COMMA" === c3) u3.linkBack = o3.pop(), t5[u3.linkBack].linkNext = t5.length - 1, o3.push(t5.length - 1);
                    else if ("OPEN_BRACKET" === c3) u3.type = "BRACKET";
                    else if ("CLOSE_BRACKET" === c3) {
                      var l3 = t5.pop().text;
                      if (t5.length > 0 && "NUMBER" === t5[t5.length - 1].type) {
                        var d3 = t5.pop().text;
                        l3 = d3 + l3, t5[t5.length - 1].value = Ze(d3);
                      }
                      if (0 === t5.length || "BRACKET" !== t5[t5.length - 1].type) throw new Error("missing opening bracket");
                      t5[t5.length - 1].text += l3;
                    }
                  } else if (s3 = i3.match(Kn)) {
                    if (u3.text = s3[1], a3 += u3.text.length, Xn.has(u3.text)) {
                      u3.type = "KEYWORD";
                      continue;
                    }
                    if (u3.text.match(Yn)) {
                      u3.type = "TYPE";
                      continue;
                    }
                    u3.type = "ID";
                  } else {
                    if (!(s3 = i3.match(Zn))) throw new Error("unexpected token ".concat(JSON.stringify(i3[0]), " at position ").concat(a3));
                    u3.text = s3[1], u3.type = "NUMBER", a3 += u3.text.length;
                  }
                }
                return new ro(t5.map(function(e5) {
                  return Object.freeze(e5);
                }));
              }(t4), r3);
            } catch (e4) {
              Pe(false, "invalid param type", "obj", t4);
            }
            else if (t4 instanceof ro) {
              var n2 = "", o2 = "", a2 = null;
              oo(t4, _n(["tuple"])).has("tuple") || t4.peekType("OPEN_PAREN") ? (o2 = "tuple", a2 = t4.popParams().map(function(t5) {
                return e3.from(t5);
              }), n2 = "tuple(".concat(a2.map(function(e4) {
                return e4.format();
              }).join(","), ")")) : o2 = n2 = io(t4.popType("TYPE"));
              for (var i2 = null, s2 = null; t4.length && t4.peekType("BRACKET"); ) {
                var u2 = t4.pop();
                i2 = new e3(so, "", n2, o2, null, a2, s2, i2), s2 = u2.value, n2 += u2.text, o2 = "array", a2 = null;
              }
              var c2 = null;
              if (oo(t4, Vn).has("indexed")) {
                if (!r3) throw new Error("");
                c2 = true;
              }
              var l2 = t4.peekType("ID") ? t4.pop().text : "";
              if (t4.length) throw new Error("leftover tokens");
              return new e3(so, l2, n2, o2, c2, a2, s2, i2);
            }
            var d2 = t4.name;
            Pe(!d2 || "string" == typeof d2 && d2.match(Qn), "invalid name", "obj.name", d2);
            var p2 = t4.indexed;
            null != p2 && (Pe(r3, "parameter cannot be indexed", "obj.indexed", t4.indexed), p2 = !!p2);
            var f2 = t4.type, g2 = f2.match(ao);
            if (g2) {
              var h2 = parseInt(g2[2] || "-1"), y2 = e3.from({ type: g2[1], components: t4.components });
              return new e3(so, d2 || "", f2, "array", p2, null, h2, y2);
            }
            if ("tuple" === f2 || f2.startsWith("tuple(") || f2.startsWith("(")) {
              var b2 = null != t4.components ? t4.components.map(function(t5) {
                return e3.from(t5);
              }) : null;
              return new e3(so, d2 || "", f2, "tuple", p2, b2, null, null);
            }
            return f2 = io(t4.type), new e3(so, d2 || "", f2, f2, p2, null, null, null);
          } }, { key: "isParamType", value: function(e4) {
            return e4 && e4[uo] === co;
          } }]), e3;
        }();
        function fo(e3, t3, r3, n2) {
          if (this.isArray()) {
            if (!Array.isArray(t3)) throw new Error("invalid array value");
            if (-1 !== this.arrayLength && t3.length !== this.arrayLength) throw new Error("array is wrong length");
            var o2 = this.arrayChildren, a2 = t3.slice();
            return a2.forEach(function(t4, n3) {
              Jn(o2, lo, fo).call(o2, e3, t4, r3, function(e4) {
                a2[n3] = e4;
              });
            }), void n2(a2);
          }
          if (this.isTuple()) {
            var i2, s2 = this.components;
            if (Array.isArray(t3)) i2 = t3.slice();
            else {
              if (null == t3 || "object" !== f(t3)) throw new Error("invalid tuple value");
              i2 = s2.map(function(e4) {
                if (!e4.name) throw new Error("cannot use object value with unnamed components");
                if (!(e4.name in t3)) throw new Error("missing value for component ".concat(e4.name));
                return t3[e4.name];
              });
            }
            if (i2.length !== this.components.length) throw new Error("array is wrong length");
            return i2.forEach(function(t4, n3) {
              var o3;
              Jn(o3 = s2[n3], lo, fo).call(o3, e3, t4, r3, function(e4) {
                i2[n3] = e4;
              });
            }), void n2(i2);
          }
          var u2 = r3(this.type, t3);
          u2.then ? e3.push(d(M.mark(function e4() {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.t0 = n2, e5.next = 3, u2;
                case 3:
                  e5.t1 = e5.sent, (0, e5.t0)(e5.t1);
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4);
          }))()) : n2(u2);
        }
        function go(e3, t3, r3) {
          return function(e4, t4, r4) {
            if ("function" == typeof e4 ? e4 === t4 : e4.has(t4)) return arguments.length < 3 ? t4 : r4;
            throw new TypeError("Private element is not present on this object");
          }(t3, e3), r3;
        }
        var ho = /* @__PURE__ */ new Map();
        ho.set(0, "GENERIC_PANIC"), ho.set(1, "ASSERT_FALSE"), ho.set(17, "OVERFLOW"), ho.set(18, "DIVIDE_BY_ZERO"), ho.set(33, "ENUM_RANGE_ERROR"), ho.set(34, "BAD_STORAGE_DATA"), ho.set(49, "STACK_UNDERFLOW"), ho.set(50, "ARRAY_RANGE_ERROR"), ho.set(65, "OUT_OF_MEMORY"), ho.set(81, "UNINITIALIZED_FUNCTION_CALL");
        var yo = new RegExp(/^bytes([0-9]*)$/), bo = new RegExp(/^(u?int)([0-9]*)$/), To = null, vo = 1024, mo = /* @__PURE__ */ new WeakSet(), Ao = function() {
          function e3() {
            var t3, r3;
            h(this, e3), function(e4, t4) {
              if (t4.has(e4)) throw new TypeError("Cannot initialize the same private elements twice on an object");
            }(t3 = this, r3 = mo), r3.add(t3);
          }
          return b(e3, [{ key: "getDefaultValue", value: function(e4) {
            var t3 = this, r3 = e4.map(function(e5) {
              return go(t3, mo, Po).call(t3, po.from(e5));
            });
            return new Ln(r3, "_").defaultValue();
          } }, { key: "encode", value: function(e4, t3) {
            var r3 = this;
            We(t3.length, e4.length, "types/values length mismatch");
            var n2 = e4.map(function(e5) {
              return go(r3, mo, Po).call(r3, po.from(e5));
            }), o2 = new Ln(n2, "_"), a2 = new Gr();
            return o2.encode(a2, t3), a2.data;
          } }, { key: "decode", value: function(e4, t3, r3) {
            var n2 = this, o2 = e4.map(function(e5) {
              return go(n2, mo, Po).call(n2, po.from(e5));
            });
            return new Ln(o2, "_").decode(new Yr(t3, r3, vo));
          } }], [{ key: "_setDefaultMaxInflation", value: function(e4) {
            Pe("number" == typeof e4 && Number.isInteger(e4), "invalid defaultMaxInflation factor", "value", e4), vo = e4;
          } }, { key: "defaultAbiCoder", value: function() {
            return null == To && (To = new e3()), To;
          } }, { key: "getBuiltinCallException", value: function(t3, r3, n2) {
            return function(e4, t4, r4, n3) {
              var o2 = "missing revert data", a2 = null, i2 = null;
              if (r4) {
                o2 = "execution reverted";
                var s2 = Ie(r4);
                if (r4 = ke(r4), 0 === s2.length) o2 += " (no data present; likely require(false) occurred", a2 = "require(false)";
                else if (s2.length % 32 != 4) o2 += " (could not decode reason; invalid data length)";
                else if ("0x08c379a0" === ke(s2.slice(0, 4))) try {
                  i2 = { signature: "Error(string)", name: "Error", args: [a2 = n3.decode(["string"], s2.slice(4))[0]] }, o2 += ": ".concat(JSON.stringify(a2));
                } catch (e5) {
                  o2 += " (could not decode reason; invalid string data)";
                }
                else if ("0x4e487b71" === ke(s2.slice(0, 4))) try {
                  var u2 = Number(n3.decode(["uint256"], s2.slice(4))[0]);
                  i2 = { signature: "Panic(uint256)", name: "Panic", args: [u2] }, a2 = "Panic due to ".concat(ho.get(u2) || "UNKNOWN", "(").concat(u2, ")"), o2 += ": ".concat(a2);
                } catch (e5) {
                  o2 += " (could not decode panic code)";
                }
                else o2 += " (unknown custom error)";
              }
              var c2 = { to: t4.to ? hr(t4.to) : null, data: t4.data || "0x" };
              return t4.from && (c2.from = hr(t4.from)), me(o2, "CALL_EXCEPTION", { action: e4, data: r4, reason: a2, transaction: c2, invocation: null, revert: i2 });
            }(t3, r3, n2, e3.defaultAbiCoder());
          } }]), e3;
        }();
        function Po(e3) {
          var t3 = this;
          if (e3.isArray()) return new hn(go(this, mo, Po).call(this, e3.arrayChildren), e3.arrayLength, e3.name);
          if (e3.isTuple()) return new Ln(e3.components.map(function(e4) {
            return go(t3, mo, Po).call(t3, e4);
          }), e3.name);
          switch (e3.baseType) {
            case "address":
              return new cn(e3.name);
            case "bool":
              return new bn(e3.name);
            case "string":
              return new Sn(e3.name);
            case "bytes":
              return new Pn(e3.name);
            case "":
              return new wn(e3.name);
          }
          var r3 = e3.type.match(bo);
          if (r3) {
            var n2 = parseInt(r3[2] || "256");
            return Pe(0 !== n2 && n2 <= 256 && n2 % 8 == 0, "invalid " + r3[1] + " bit length", "param", e3), new On(n2 / 8, "int" === r3[1], e3.name);
          }
          if (r3 = e3.type.match(yo)) {
            var o2 = parseInt(r3[1]);
            return Pe(0 !== o2 && o2 <= 32, "invalid bytes length", "param", e3), new Bn(o2, e3.name);
          }
          Pe(false, "invalid type", "type", e3.type);
        }
        function Wo(e3, t3) {
          return Bo.apply(this, arguments);
        }
        function Bo() {
          return (Bo = d(M.mark(function e3(t3, r3) {
            var n2;
            return M.wrap(function(e4) {
              for (; ; ) switch (e4.prev = e4.next) {
                case 0:
                  return e4.next = 2, r3;
                case 2:
                  return null != (n2 = e4.sent) && "0x0000000000000000000000000000000000000000" !== n2 || (Ae("string" != typeof t3, "unconfigured name", "UNCONFIGURED_NAME", { value: t3 }), Pe(false, "invalid AddressLike value; did not resolve to a value address", "target", t3)), e4.abrupt("return", hr(n2));
                case 5:
                case "end":
                  return e4.stop();
              }
            }, e3);
          }))).apply(this, arguments);
        }
        function Co(e3, t3) {
          return "string" == typeof e3 ? e3.match(/^0x[0-9a-f]{40}$/i) ? hr(e3) : (Ae(null != t3, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" }), Wo(e3, t3.resolveName(e3))) : (r3 = e3) && "function" == typeof r3.getAddress ? Wo(e3, e3.getAddress()) : e3 && "function" == typeof e3.then ? Wo(e3, e3) : void Pe(false, "unsupported addressable value", "target", e3);
          var r3;
        }
        const Fo = require_slicedToArray();
        var wo = r2.n(Fo);
        function Io(e3, t3) {
          var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
          if (!r3) {
            if (Array.isArray(e3) || (r3 = function(e4, t4) {
              if (e4) {
                if ("string" == typeof e4) return Mo(e4, t4);
                var r4 = {}.toString.call(e4).slice(8, -1);
                return "Object" === r4 && e4.constructor && (r4 = e4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? Mo(e4, t4) : void 0;
              }
            }(e3)) || t3 && e3 && "number" == typeof e3.length) {
              r3 && (e3 = r3);
              var n2 = 0, o2 = function() {
              };
              return { s: o2, n: function() {
                return n2 >= e3.length ? { done: true } : { done: false, value: e3[n2++] };
              }, e: function(e4) {
                throw e4;
              }, f: o2 };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var a2, i2 = true, s2 = false;
          return { s: function() {
            r3 = r3.call(e3);
          }, n: function() {
            var e4 = r3.next();
            return i2 = e4.done, e4;
          }, e: function(e4) {
            s2 = true, a2 = e4;
          }, f: function() {
            try {
              i2 || null == r3.return || r3.return();
            } finally {
              if (s2) throw a2;
            }
          } };
        }
        function Mo(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n2 = Array(t3); r3 < t3; r3++) n2[r3] = e3[r3];
          return n2;
        }
        function Eo(e3, t3, r3) {
          Ro(e3, t3), t3.set(e3, r3);
        }
        function Ro(e3, t3) {
          if (t3.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
        }
        var Oo = new Uint8Array(32);
        Oo.fill(0);
        var ko = BigInt(-1), So = BigInt(0), No = BigInt(1), Lo = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), Do = Ke(No, 32), Uo = Ke(So, 32), xo = { name: "string", version: "string", chainId: "uint256", verifyingContract: "address", salt: "bytes32" }, Jo = ["name", "version", "chainId", "verifyingContract", "salt"];
        function _o(e3) {
          return function(t3) {
            return Pe("string" == typeof t3, "invalid domain value for ".concat(JSON.stringify(e3)), "domain.".concat(e3), t3), t3;
          };
        }
        var zo = { name: _o("name"), version: _o("version"), chainId: function(e3) {
          var t3 = je(e3, "domain.chainId");
          return Pe(t3 >= 0, "invalid chain ID", "domain.chainId", e3), Number.isSafeInteger(t3) ? Number(t3) : function(e4) {
            for (var t4 = ke(Re(e4) ? e4 : Qe(e4)).substring(2); t4.startsWith("0"); ) t4 = t4.substring(1);
            return "" === t4 && (t4 = "0"), "0x" + t4;
          }(t3);
        }, verifyingContract: function(e3) {
          try {
            return hr(e3).toLowerCase();
          } catch (e4) {
          }
          Pe(false, 'invalid domain value "verifyingContract"', "domain.verifyingContract", e3);
        }, salt: function(e3) {
          var t3 = Ie(e3, "domain.salt");
          return Pe(32 === t3.length, 'invalid domain value "salt"', "domain.salt", e3), ke(t3);
        } };
        function Go(e3) {
          var t3 = e3.match(/^(u?)int(\d+)$/);
          if (t3) {
            var r3 = "" === t3[1], n2 = parseInt(t3[2]);
            Pe(n2 % 8 == 0 && 0 !== n2 && n2 <= 256 && t3[2] === String(n2), "invalid numeric width", "type", e3);
            var o2 = Ge(Lo, r3 ? n2 - 1 : n2), a2 = r3 ? (o2 + No) * ko : So;
            return function(t4) {
              var n3 = je(t4, "value");
              return Pe(n3 >= a2 && n3 <= o2, "value out-of-bounds for ".concat(e3), "value", n3), Ke(r3 ? ze(n3, 256) : n3, 32);
            };
          }
          var i2 = e3.match(/^bytes(\d+)$/);
          if (i2) {
            var s2 = parseInt(i2[1]);
            return Pe(0 !== s2 && s2 <= 32 && i2[1] === String(s2), "invalid bytes width", "type", e3), function(t4) {
              return Pe(Ie(t4).length === s2, "invalid length for ".concat(e3), "value", t4), function(e4) {
                var t5 = Ie(e4), r4 = t5.length % 32;
                return r4 ? Se([t5, Oo.slice(r4)]) : ke(t5);
              }(t4);
            };
          }
          switch (e3) {
            case "address":
              return function(e4) {
                return De(hr(e4), 32);
              };
            case "bool":
              return function(e4) {
                return e4 ? Do : Uo;
              };
            case "bytes":
              return function(e4) {
                return kt(e4);
              };
            case "string":
              return function(e4) {
                return St(e4);
              };
          }
          return null;
        }
        function jo(e3, t3) {
          return "".concat(e3, "(").concat(t3.map(function(e4) {
            var t4 = e4.name;
            return e4.type + " " + t4;
          }).join(","), ")");
        }
        function Vo(e3) {
          var t3 = e3.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
          return t3 ? { base: t3[1], index: t3[2] + t3[4], array: { base: t3[1], prefix: t3[1] + t3[2], count: t3[5] ? parseInt(t3[5]) : -1 } } : { base: e3 };
        }
        var Xo = /* @__PURE__ */ new WeakMap(), Ho = /* @__PURE__ */ new WeakMap(), $o = /* @__PURE__ */ new WeakMap(), Zo = /* @__PURE__ */ new WeakSet(), Ko = function() {
          function e3(t4) {
            var r3;
            h(this, e3), Ro(this, r3 = Zo), r3.add(this), w(this, "primaryType", void 0), Eo(this, Xo, { writable: true, value: void 0 }), Eo(this, Ho, { writable: true, value: void 0 }), Eo(this, $o, { writable: true, value: void 0 }), ue(this, Ho, /* @__PURE__ */ new Map()), ue(this, $o, /* @__PURE__ */ new Map());
            var n2 = /* @__PURE__ */ new Map(), o2 = /* @__PURE__ */ new Map(), a2 = /* @__PURE__ */ new Map(), i2 = {};
            for (var s2 in Object.keys(t4).forEach(function(e4) {
              i2[e4] = t4[e4].map(function(e5) {
                var r4 = e5.name, n3 = Vo(e5.type), o3 = n3.base, a3 = n3.index;
                return "int" !== o3 || t4.int || (o3 = "int256"), "uint" !== o3 || t4.uint || (o3 = "uint256"), { name: r4, type: o3 + (a3 || "") };
              }), n2.set(e4, /* @__PURE__ */ new Set()), o2.set(e4, []), a2.set(e4, /* @__PURE__ */ new Set());
            }), ue(this, Xo, JSON.stringify(i2)), i2) {
              var u2, c2 = /* @__PURE__ */ new Set(), l2 = Io(i2[s2]);
              try {
                for (l2.s(); !(u2 = l2.n()).done; ) {
                  var d2 = u2.value;
                  Pe(!c2.has(d2.name), "duplicate variable name ".concat(JSON.stringify(d2.name), " in ").concat(JSON.stringify(s2)), "types", t4), c2.add(d2.name);
                  var p2 = Vo(d2.type).base;
                  Pe(p2 !== s2, "circular type reference to ".concat(JSON.stringify(p2)), "types", t4), Go(p2) || (Pe(o2.has(p2), "unknown type ".concat(JSON.stringify(p2)), "types", t4), o2.get(p2).push(s2), n2.get(s2).add(p2));
                }
              } catch (e4) {
                l2.e(e4);
              } finally {
                l2.f();
              }
            }
            var f2 = Array.from(o2.keys()).filter(function(e4) {
              return 0 === o2.get(e4).length;
            });
            Pe(0 !== f2.length, "missing primary type", "types", t4), Pe(1 === f2.length, "ambiguous primary types or unused types: ".concat(f2.map(function(e4) {
              return JSON.stringify(e4);
            }).join(", ")), "types", t4), be(this, { primaryType: f2[0] }), function e4(r4, i3) {
              Pe(!i3.has(r4), "circular type reference to ".concat(JSON.stringify(r4)), "types", t4), i3.add(r4);
              var s3, u3 = Io(n2.get(r4));
              try {
                for (u3.s(); !(s3 = u3.n()).done; ) {
                  var c3 = s3.value;
                  if (o2.has(c3)) {
                    e4(c3, i3);
                    var l3, d3 = Io(i3);
                    try {
                      for (d3.s(); !(l3 = d3.n()).done; ) {
                        var p3 = l3.value;
                        a2.get(p3).add(c3);
                      }
                    } catch (e5) {
                      d3.e(e5);
                    } finally {
                      d3.f();
                    }
                  }
                }
              } catch (e5) {
                u3.e(e5);
              } finally {
                u3.f();
              }
              i3.delete(r4);
            }(this.primaryType, /* @__PURE__ */ new Set());
            var g2, y2 = Io(a2);
            try {
              for (y2.s(); !(g2 = y2.n()).done; ) {
                var b2 = Fo(g2.value, 2), T2 = b2[0], v2 = b2[1], m2 = Array.from(v2);
                m2.sort(), le(this, Ho).set(T2, jo(T2, i2[T2]) + m2.map(function(e4) {
                  return jo(e4, i2[e4]);
                }).join(""));
              }
            } catch (e4) {
              y2.e(e4);
            } finally {
              y2.f();
            }
          }
          var t3;
          return b(e3, [{ key: "types", get: function() {
            return JSON.parse(le(this, Xo));
          } }, { key: "getEncoder", value: function(e4) {
            var t4, r3, n2, o2 = le(this, $o).get(e4);
            return o2 || (o2 = (t4 = this, r3 = Zo, n2 = Qo, function(e5, t5, r4) {
              if ("function" == typeof e5 ? e5 === t5 : e5.has(t5)) return arguments.length < 3 ? t5 : r4;
              throw new TypeError("Private element is not present on this object");
            }(r3, t4), n2).call(this, e4), le(this, $o).set(e4, o2)), o2;
          } }, { key: "encodeType", value: function(e4) {
            var t4 = le(this, Ho).get(e4);
            return Pe(t4, "unknown type: ".concat(JSON.stringify(e4)), "name", e4), t4;
          } }, { key: "encodeData", value: function(e4, t4) {
            return this.getEncoder(e4)(t4);
          } }, { key: "hashStruct", value: function(e4, t4) {
            return kt(this.encodeData(e4, t4));
          } }, { key: "encode", value: function(e4) {
            return this.encodeData(this.primaryType, e4);
          } }, { key: "hash", value: function(e4) {
            return this.hashStruct(this.primaryType, e4);
          } }, { key: "_visit", value: function(e4, t4, r3) {
            var n2 = this;
            if (Go(e4)) return r3(e4, t4);
            var o2 = Vo(e4).array;
            if (o2) return Pe(-1 === o2.count || o2.count === t4.length, "array length mismatch; expected length ".concat(o2.count), "value", t4), t4.map(function(e5) {
              return n2._visit(o2.prefix, e5, r3);
            });
            var a2 = this.types[e4];
            if (a2) return a2.reduce(function(e5, o3) {
              var a3 = o3.name, i2 = o3.type;
              return e5[a3] = n2._visit(i2, t4[a3], r3), e5;
            }, {});
            Pe(false, "unknown type: ".concat(e4), "type", e4);
          } }, { key: "visit", value: function(e4, t4) {
            return this._visit(this.primaryType, e4, t4);
          } }], [{ key: "from", value: function(t4) {
            return new e3(t4);
          } }, { key: "getPrimaryType", value: function(t4) {
            return e3.from(t4).primaryType;
          } }, { key: "hashStruct", value: function(t4, r3, n2) {
            return e3.from(r3).hashStruct(t4, n2);
          } }, { key: "hashDomain", value: function(t4) {
            var r3 = [];
            for (var n2 in t4) if (null != t4[n2]) {
              var o2 = xo[n2];
              Pe(o2, "invalid typed-data domain key: ".concat(JSON.stringify(n2)), "domain", t4), r3.push({ name: n2, type: o2 });
            }
            return r3.sort(function(e4, t5) {
              return Jo.indexOf(e4.name) - Jo.indexOf(t5.name);
            }), e3.hashStruct("EIP712Domain", { EIP712Domain: r3 }, t4);
          } }, { key: "encode", value: function(t4, r3, n2) {
            return Se(["0x1901", e3.hashDomain(t4), e3.from(r3).hash(n2)]);
          } }, { key: "hash", value: function(t4, r3, n2) {
            return kt(e3.encode(t4, r3, n2));
          } }, { key: "resolveNames", value: (t3 = d(M.mark(function t4(r3, n2, o2, a2) {
            var i2, s2, u2, c2;
            return M.wrap(function(t5) {
              for (; ; ) switch (t5.prev = t5.next) {
                case 0:
                  for (i2 in r3 = Object.assign({}, r3)) null == r3[i2] && delete r3[i2];
                  s2 = {}, r3.verifyingContract && !Ee(r3.verifyingContract, 20) && (s2[r3.verifyingContract] = "0x"), (u2 = e3.from(n2)).visit(o2, function(e4, t6) {
                    return "address" !== e4 || Ee(t6, 20) || (s2[t6] = "0x"), t6;
                  }), t5.t0 = M.keys(s2);
                case 7:
                  if ((t5.t1 = t5.t0()).done) {
                    t5.next = 14;
                    break;
                  }
                  return c2 = t5.t1.value, t5.next = 11, a2(c2);
                case 11:
                  s2[c2] = t5.sent, t5.next = 7;
                  break;
                case 14:
                  return r3.verifyingContract && s2[r3.verifyingContract] && (r3.verifyingContract = s2[r3.verifyingContract]), o2 = u2.visit(o2, function(e4, t6) {
                    return "address" === e4 && s2[t6] ? s2[t6] : t6;
                  }), t5.abrupt("return", { domain: r3, value: o2 });
                case 17:
                case "end":
                  return t5.stop();
              }
            }, t4);
          })), function(e4, r3, n2, o2) {
            return t3.apply(this, arguments);
          }) }, { key: "getPayload", value: function(t4, r3, n2) {
            e3.hashDomain(t4);
            var o2 = {}, a2 = [];
            Jo.forEach(function(e4) {
              var r4 = t4[e4];
              null != r4 && (o2[e4] = zo[e4](r4), a2.push({ name: e4, type: xo[e4] }));
            });
            var i2 = e3.from(r3);
            r3 = i2.types;
            var s2 = Object.assign({}, r3);
            return Pe(null == s2.EIP712Domain, "types must not contain EIP712Domain type", "types.EIP712Domain", r3), s2.EIP712Domain = a2, i2.encode(n2), { types: s2, domain: o2, primaryType: i2.primaryType, message: i2.visit(n2, function(e4, t5) {
              if (e4.match(/^bytes(\d*)/)) return ke(Ie(t5));
              if (e4.match(/^u?int/)) return je(t5).toString();
              switch (e4) {
                case "address":
                  return t5.toLowerCase();
                case "bool":
                  return !!t5;
                case "string":
                  return Pe("string" == typeof t5, "invalid string", "value", t5), t5;
              }
              Pe(false, "unsupported type", "type", e4);
            }) };
          } }]), e3;
        }();
        function Qo(e3) {
          var t3 = this, r3 = Go(e3);
          if (r3) return r3;
          var n2 = Vo(e3).array;
          if (n2) {
            var o2 = n2.prefix, a2 = this.getEncoder(o2);
            return function(e4) {
              Pe(-1 === n2.count || n2.count === e4.length, "array length mismatch; expected length ".concat(n2.count), "value", e4);
              var r4 = e4.map(a2);
              return le(t3, Ho).has(o2) && (r4 = r4.map(kt)), kt(Se(r4));
            };
          }
          var i2 = this.types[e3];
          if (i2) {
            var s2 = St(le(this, Ho).get(e3));
            return function(e4) {
              var r4 = i2.map(function(r5) {
                var n3 = r5.name, o3 = r5.type, a3 = t3.getEncoder(o3)(e4[n3]);
                return le(t3, Ho).has(o3) ? kt(a3) : a3;
              });
              return r4.unshift(s2), Se(r4);
            };
          }
          Pe(false, "unknown type: ".concat(e3), "type", e3);
        }
        function Yo(e3, t3) {
          return { address: hr(e3), storageKeys: t3.map(function(e4, t4) {
            return Pe(Ee(e4, 32), "invalid slot", "storageKeys[".concat(t4, "]"), e4), e4.toLowerCase();
          }) };
        }
        function qo(e3) {
          if (Array.isArray(e3)) return e3.map(function(t4, r3) {
            return Array.isArray(t4) ? (Pe(2 === t4.length, "invalid slot set", "value[".concat(r3, "]"), t4), Yo(t4[0], t4[1])) : (Pe(null != t4 && "object" === f(t4), "invalid address-slot set", "value", e3), Yo(t4.address, t4.storageKeys));
          });
          Pe(null != e3 && "object" === f(e3), "invalid access list", "value", e3);
          var t3 = Object.keys(e3).map(function(t4) {
            var r3 = e3[t4].reduce(function(e4, t5) {
              return e4[t5] = true, e4;
            }, {});
            return Yo(t4, Object.keys(r3).sort());
          });
          return t3.sort(function(e4, t4) {
            return e4.address.localeCompare(t4.address);
          }), t3;
        }
        function ea(e3, t3) {
          var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
          if (!r3) {
            if (Array.isArray(e3) || (r3 = function(e4, t4) {
              if (e4) {
                if ("string" == typeof e4) return ta(e4, t4);
                var r4 = {}.toString.call(e4).slice(8, -1);
                return "Object" === r4 && e4.constructor && (r4 = e4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? ta(e4, t4) : void 0;
              }
            }(e3)) || t3 && e3 && "number" == typeof e3.length) {
              r3 && (e3 = r3);
              var n2 = 0, o2 = function() {
              };
              return { s: o2, n: function() {
                return n2 >= e3.length ? { done: true } : { done: false, value: e3[n2++] };
              }, e: function(e4) {
                throw e4;
              }, f: o2 };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var a2, i2 = true, s2 = false;
          return { s: function() {
            r3 = r3.call(e3);
          }, n: function() {
            var e4 = r3.next();
            return i2 = e4.done, e4;
          }, e: function(e4) {
            s2 = true, a2 = e4;
          }, f: function() {
            try {
              i2 || null == r3.return || r3.return();
            } finally {
              if (s2) throw a2;
            }
          } };
        }
        function ta(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n2 = Array(t3); r3 < t3; r3++) n2[r3] = e3[r3];
          return n2;
        }
        function ra(e3) {
          var t3 = {};
          e3.to && (t3.to = e3.to), e3.from && (t3.from = e3.from), e3.data && (t3.data = ke(e3.data));
          var r3, n2 = ea("chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/));
          try {
            for (n2.s(); !(r3 = n2.n()).done; ) {
              var o2 = r3.value;
              o2 in e3 && null != e3[o2] && (t3[o2] = je(e3[o2], "request.".concat(o2)));
            }
          } catch (e4) {
            n2.e(e4);
          } finally {
            n2.f();
          }
          var a2, i2 = ea("type,nonce".split(/,/));
          try {
            for (i2.s(); !(a2 = i2.n()).done; ) {
              var s2 = a2.value;
              s2 in e3 && null != e3[s2] && (t3[s2] = Ze(e3[s2], "request.".concat(s2)));
            }
          } catch (e4) {
            i2.e(e4);
          } finally {
            i2.f();
          }
          return e3.accessList && (t3.accessList = qo(e3.accessList)), "blockTag" in e3 && (t3.blockTag = e3.blockTag), "enableCcipRead" in e3 && (t3.enableCcipRead = !!e3.enableCcipRead), "customData" in e3 && (t3.customData = e3.customData), "blobVersionedHashes" in e3 && e3.blobVersionedHashes && (t3.blobVersionedHashes = e3.blobVersionedHashes.slice()), "kzg" in e3 && (t3.kzg = e3.kzg), "blobs" in e3 && e3.blobs && (t3.blobs = e3.blobs.map(function(e4) {
            return Re(e4) ? ke(e4) : Object.assign({}, e4);
          })), t3;
        }
        BigInt(0), Symbol.iterator, Symbol.iterator;
        var na = "0x0000000000000000000000000000000000000000";
        function oa(e3) {
          for (var t3 = e3.toString(16); t3.length < 2; ) t3 = "0" + t3;
          return "0x" + t3;
        }
        function aa(e3, t3, r3) {
          for (var n2 = 0, o2 = 0; o2 < r3; o2++) n2 = 256 * n2 + e3[t3 + o2];
          return n2;
        }
        function ia(e3, t3, r3, n2) {
          for (var o2 = []; r3 < t3 + 1 + n2; ) {
            var a2 = sa(e3, r3);
            o2.push(a2.result), Ae((r3 += a2.consumed) <= t3 + 1 + n2, "child data too short", "BUFFER_OVERRUN", { buffer: e3, length: n2, offset: t3 });
          }
          return { consumed: 1 + n2, result: o2 };
        }
        function sa(e3, t3) {
          Ae(0 !== e3.length, "data too short", "BUFFER_OVERRUN", { buffer: e3, length: 0, offset: 1 });
          var r3 = function(t4) {
            Ae(t4 <= e3.length, "data short segment too short", "BUFFER_OVERRUN", { buffer: e3, length: e3.length, offset: t4 });
          };
          if (e3[t3] >= 248) {
            var n2 = e3[t3] - 247;
            r3(t3 + 1 + n2);
            var o2 = aa(e3, t3 + 1, n2);
            return r3(t3 + 1 + n2 + o2), ia(e3, t3, t3 + 1 + n2, n2 + o2);
          }
          if (e3[t3] >= 192) {
            var a2 = e3[t3] - 192;
            return r3(t3 + 1 + a2), ia(e3, t3, t3 + 1, a2);
          }
          if (e3[t3] >= 184) {
            var i2 = e3[t3] - 183;
            r3(t3 + 1 + i2);
            var s2 = aa(e3, t3 + 1, i2);
            return r3(t3 + 1 + i2 + s2), { consumed: 1 + i2 + s2, result: ke(e3.slice(t3 + 1 + i2, t3 + 1 + i2 + s2)) };
          }
          if (e3[t3] >= 128) {
            var u2 = e3[t3] - 128;
            return r3(t3 + 1 + u2), { consumed: 1 + u2, result: ke(e3.slice(t3 + 1, t3 + 1 + u2)) };
          }
          return { consumed: 1, result: oa(e3[t3]) };
        }
        function ua(e3) {
          var t3 = Ie(e3, "data"), r3 = sa(t3, 0);
          return Pe(r3.consumed === t3.length, "unexpected junk after rlp payload", "data", e3), r3.result;
        }
        function ca(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n2 = Array(t3); r3 < t3; r3++) n2[r3] = e3[r3];
          return n2;
        }
        function la(e3) {
          for (var t3 = []; e3; ) t3.unshift(255 & e3), e3 >>= 8;
          return t3;
        }
        function da(e3) {
          if (Array.isArray(e3)) {
            var t3 = [];
            if (e3.forEach(function(e4) {
              t3 = t3.concat(da(e4));
            }), t3.length <= 55) return t3.unshift(192 + t3.length), t3;
            var r3 = la(t3.length);
            return r3.unshift(247 + r3.length), r3.concat(t3);
          }
          var n2 = Array.prototype.slice.call(Ie(e3, "object"));
          if (1 === n2.length && n2[0] <= 127) return n2;
          if (n2.length <= 55) return n2.unshift(128 + n2.length), n2;
          var o2 = la(n2.length);
          return o2.unshift(183 + o2.length), o2.concat(n2);
        }
        var pa = "0123456789abcdef";
        function fa(e3) {
          var t3, r3 = "0x", n2 = function(e4, t4) {
            var r4 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
            if (!r4) {
              if (Array.isArray(e4) || (r4 = function(e5, t5) {
                if (e5) {
                  if ("string" == typeof e5) return ca(e5, t5);
                  var r5 = {}.toString.call(e5).slice(8, -1);
                  return "Object" === r5 && e5.constructor && (r5 = e5.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(e5) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? ca(e5, t5) : void 0;
                }
              }(e4)) || t4 && e4 && "number" == typeof e4.length) {
                r4 && (e4 = r4);
                var n3 = 0, o3 = function() {
                };
                return { s: o3, n: function() {
                  return n3 >= e4.length ? { done: true } : { done: false, value: e4[n3++] };
                }, e: function(e5) {
                  throw e5;
                }, f: o3 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a2, i2 = true, s2 = false;
            return { s: function() {
              r4 = r4.call(e4);
            }, n: function() {
              var e5 = r4.next();
              return i2 = e5.done, e5;
            }, e: function(e5) {
              s2 = true, a2 = e5;
            }, f: function() {
              try {
                i2 || null == r4.return || r4.return();
              } finally {
                if (s2) throw a2;
              }
            } };
          }(da(e3));
          try {
            for (n2.s(); !(t3 = n2.n()).done; ) {
              var o2 = t3.value;
              r3 += pa[o2 >> 4], r3 += pa[15 & o2];
            }
          } catch (e4) {
            n2.e(e4);
          } finally {
            n2.f();
          }
          return r3;
        }
        function ga(e3, t3, r3) {
          ha(e3, t3), t3.set(e3, r3);
        }
        function ha(e3, t3) {
          if (t3.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
        }
        function ya(e3, t3, r3) {
          return function(e4, t4, r4) {
            if ("function" == typeof e4 ? e4 === t4 : e4.has(t4)) return arguments.length < 3 ? t4 : r4;
            throw new TypeError("Private element is not present on this object");
          }(t3, e3), r3;
        }
        var ba = BigInt(0), Ta = BigInt(2), va = BigInt(27), ma = BigInt(28), Aa = BigInt(35), Pa = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), Wa = 131072;
        function Ba(e3, t3) {
          for (var r3 = e3.toString(16); r3.length < 2; ) r3 = "0" + r3;
          return "0x" + (r3 + vt(t3).substring(4));
        }
        function Ca(e3) {
          return "0x" === e3 ? null : hr(e3);
        }
        function Fa(e3, t3) {
          try {
            return qo(e3);
          } catch (r3) {
            Pe(false, r3.message, t3, e3);
          }
        }
        function wa(e3, t3) {
          return "0x" === e3 ? 0 : Ze(e3, t3);
        }
        function Ia(e3, t3) {
          if ("0x" === e3) return ba;
          var r3 = je(e3, t3);
          return Pe(r3 <= Pa, "value exceeds uint size", t3, r3), r3;
        }
        function Ma(e3, t3) {
          var r3 = je(e3, "value"), n2 = Qe(r3);
          return Pe(n2.length <= 32, "value too large", "tx.".concat(t3), r3), n2;
        }
        function Ea(e3) {
          return qo(e3).map(function(e4) {
            return [e4.address, e4.storageKeys];
          });
        }
        function Ra(e3, t3) {
          Pe(Array.isArray(e3), "invalid ".concat(t3), "value", e3);
          for (var r3 = 0; r3 < e3.length; r3++) Pe(Ee(e3[r3], 32), "invalid ${ param } hash", "value[".concat(r3, "]"), e3[r3]);
          return e3;
        }
        function Oa(e3, t3) {
          var r3;
          try {
            if (0 !== (r3 = wa(t3[0], "yParity")) && 1 !== r3) throw new Error("bad yParity");
          } catch (e4) {
            Pe(false, "invalid yParity", "yParity", t3[0]);
          }
          var n2 = De(t3[1], 32), o2 = De(t3[2], 32), a2 = dt.from({ r: n2, s: o2, yParity: r3 });
          e3.signature = a2;
        }
        var ka = /* @__PURE__ */ new WeakMap(), Sa = /* @__PURE__ */ new WeakMap(), Na = /* @__PURE__ */ new WeakMap(), La = /* @__PURE__ */ new WeakMap(), Da = /* @__PURE__ */ new WeakMap(), Ua = /* @__PURE__ */ new WeakMap(), xa = /* @__PURE__ */ new WeakMap(), Ja = /* @__PURE__ */ new WeakMap(), _a = /* @__PURE__ */ new WeakMap(), za = /* @__PURE__ */ new WeakMap(), Ga = /* @__PURE__ */ new WeakMap(), ja = /* @__PURE__ */ new WeakMap(), Va = /* @__PURE__ */ new WeakMap(), Xa = /* @__PURE__ */ new WeakMap(), Ha = /* @__PURE__ */ new WeakMap(), $a = /* @__PURE__ */ new WeakMap(), Za = /* @__PURE__ */ new WeakSet(), Ka = function() {
          function e3() {
            var t3;
            h(this, e3), ha(this, t3 = Za), t3.add(this), ga(this, ka, { writable: true, value: void 0 }), ga(this, Sa, { writable: true, value: void 0 }), ga(this, Na, { writable: true, value: void 0 }), ga(this, La, { writable: true, value: void 0 }), ga(this, Da, { writable: true, value: void 0 }), ga(this, Ua, { writable: true, value: void 0 }), ga(this, xa, { writable: true, value: void 0 }), ga(this, Ja, { writable: true, value: void 0 }), ga(this, _a, { writable: true, value: void 0 }), ga(this, za, { writable: true, value: void 0 }), ga(this, Ga, { writable: true, value: void 0 }), ga(this, ja, { writable: true, value: void 0 }), ga(this, Va, { writable: true, value: void 0 }), ga(this, Xa, { writable: true, value: void 0 }), ga(this, Ha, { writable: true, value: void 0 }), ga(this, $a, { writable: true, value: void 0 }), ue(this, ka, null), ue(this, Sa, null), ue(this, La, 0), ue(this, Da, ba), ue(this, Ua, null), ue(this, xa, null), ue(this, Ja, null), ue(this, Na, "0x"), ue(this, _a, ba), ue(this, za, ba), ue(this, Ga, null), ue(this, ja, null), ue(this, Va, null), ue(this, Xa, null), ue(this, $a, null), ue(this, Ha, null);
          }
          return b(e3, [{ key: "type", get: function() {
            return le(this, ka);
          }, set: function(e4) {
            switch (e4) {
              case null:
                ue(this, ka, null);
                break;
              case 0:
              case "legacy":
                ue(this, ka, 0);
                break;
              case 1:
              case "berlin":
              case "eip-2930":
                ue(this, ka, 1);
                break;
              case 2:
              case "london":
              case "eip-1559":
                ue(this, ka, 2);
                break;
              case 3:
              case "cancun":
              case "eip-4844":
                ue(this, ka, 3);
                break;
              default:
                Pe(false, "unsupported transaction type", "type", e4);
            }
          } }, { key: "typeName", get: function() {
            switch (this.type) {
              case 0:
                return "legacy";
              case 1:
                return "eip-2930";
              case 2:
                return "eip-1559";
              case 3:
                return "eip-4844";
            }
            return null;
          } }, { key: "to", get: function() {
            var e4 = le(this, Sa);
            return null == e4 && 3 === this.type ? na : e4;
          }, set: function(e4) {
            ue(this, Sa, null == e4 ? null : hr(e4));
          } }, { key: "nonce", get: function() {
            return le(this, La);
          }, set: function(e4) {
            ue(this, La, Ze(e4, "value"));
          } }, { key: "gasLimit", get: function() {
            return le(this, Da);
          }, set: function(e4) {
            ue(this, Da, je(e4));
          } }, { key: "gasPrice", get: function() {
            var e4 = le(this, Ua);
            return null != e4 || 0 !== this.type && 1 !== this.type ? e4 : ba;
          }, set: function(e4) {
            ue(this, Ua, null == e4 ? null : je(e4, "gasPrice"));
          } }, { key: "maxPriorityFeePerGas", get: function() {
            var e4 = le(this, xa);
            return null == e4 ? 2 === this.type || 3 === this.type ? ba : null : e4;
          }, set: function(e4) {
            ue(this, xa, null == e4 ? null : je(e4, "maxPriorityFeePerGas"));
          } }, { key: "maxFeePerGas", get: function() {
            var e4 = le(this, Ja);
            return null == e4 ? 2 === this.type || 3 === this.type ? ba : null : e4;
          }, set: function(e4) {
            ue(this, Ja, null == e4 ? null : je(e4, "maxFeePerGas"));
          } }, { key: "data", get: function() {
            return le(this, Na);
          }, set: function(e4) {
            ue(this, Na, ke(e4));
          } }, { key: "value", get: function() {
            return le(this, _a);
          }, set: function(e4) {
            ue(this, _a, je(e4, "value"));
          } }, { key: "chainId", get: function() {
            return le(this, za);
          }, set: function(e4) {
            ue(this, za, je(e4));
          } }, { key: "signature", get: function() {
            return le(this, Ga) || null;
          }, set: function(e4) {
            ue(this, Ga, null == e4 ? null : dt.from(e4));
          } }, { key: "accessList", get: function() {
            var e4 = le(this, ja) || null;
            return null == e4 ? 1 === this.type || 2 === this.type || 3 === this.type ? [] : null : e4;
          }, set: function(e4) {
            ue(this, ja, null == e4 ? null : qo(e4));
          } }, { key: "maxFeePerBlobGas", get: function() {
            var e4 = le(this, Va);
            return null == e4 && 3 === this.type ? ba : e4;
          }, set: function(e4) {
            ue(this, Va, null == e4 ? null : je(e4, "maxFeePerBlobGas"));
          } }, { key: "blobVersionedHashes", get: function() {
            var e4 = le(this, Xa);
            return null == e4 && 3 === this.type ? [] : e4;
          }, set: function(e4) {
            if (null != e4) {
              Pe(Array.isArray(e4), "blobVersionedHashes must be an Array", "value", e4), e4 = e4.slice();
              for (var t3 = 0; t3 < e4.length; t3++) Pe(Ee(e4[t3], 32), "invalid blobVersionedHash", "value[".concat(t3, "]"), e4[t3]);
            }
            ue(this, Xa, e4);
          } }, { key: "blobs", get: function() {
            return null == le(this, $a) ? null : le(this, $a).map(function(e4) {
              return Object.assign({}, e4);
            });
          }, set: function(e4) {
            if (null != e4) {
              for (var t3 = [], r3 = [], n2 = 0; n2 < e4.length; n2++) {
                var o2 = e4[n2];
                if (Re(o2)) {
                  Ae(le(this, Ha), "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", { operation: "set blobs()" });
                  var a2 = Ie(o2);
                  if (Pe(a2.length <= Wa, "blob is too large", "blobs[".concat(n2, "]"), o2), a2.length !== Wa) {
                    var i2 = new Uint8Array(Wa);
                    i2.set(a2), a2 = i2;
                  }
                  var s2 = le(this, Ha).blobToKzgCommitment(a2), u2 = ke(le(this, Ha).computeBlobKzgProof(a2, s2));
                  t3.push({ data: ke(a2), commitment: ke(s2), proof: u2 }), r3.push(Ba(1, s2));
                } else {
                  var c2 = ke(o2.commitment);
                  t3.push({ data: ke(o2.data), commitment: c2, proof: ke(o2.proof) }), r3.push(Ba(1, c2));
                }
              }
              ue(this, $a, t3), ue(this, Xa, r3);
            } else ue(this, $a, null);
          } }, { key: "kzg", get: function() {
            return le(this, Ha);
          }, set: function(e4) {
            ue(this, Ha, e4);
          } }, { key: "hash", get: function() {
            return null == this.signature ? null : kt(ya(this, Za, Qa).call(this, true, false));
          } }, { key: "unsignedHash", get: function() {
            return kt(this.unsignedSerialized);
          } }, { key: "from", get: function() {
            return null == this.signature ? null : mr(this.unsignedHash, this.signature);
          } }, { key: "fromPublicKey", get: function() {
            return null == this.signature ? null : Tr.recoverPublicKey(this.unsignedHash, this.signature);
          } }, { key: "isSigned", value: function() {
            return null != this.signature;
          } }, { key: "serialized", get: function() {
            return ya(this, Za, Qa).call(this, true, true);
          } }, { key: "unsignedSerialized", get: function() {
            return ya(this, Za, Qa).call(this, false, false);
          } }, { key: "inferType", value: function() {
            var e4 = this.inferTypes();
            return e4.indexOf(2) >= 0 ? 2 : e4.pop();
          } }, { key: "inferTypes", value: function() {
            var e4 = null != this.gasPrice, t3 = null != this.maxFeePerGas || null != this.maxPriorityFeePerGas, r3 = null != this.accessList, n2 = null != le(this, Va) || le(this, Xa);
            null != this.maxFeePerGas && null != this.maxPriorityFeePerGas && Ae(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this }), Ae(!t3 || 0 !== this.type && 1 !== this.type, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this }), Ae(0 !== this.type || !r3, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
            var o2 = [];
            return null != this.type ? o2.push(this.type) : t3 ? o2.push(2) : e4 ? (o2.push(1), r3 || o2.push(0)) : r3 ? (o2.push(1), o2.push(2)) : (n2 && this.to || (o2.push(0), o2.push(1), o2.push(2)), o2.push(3)), o2.sort(), o2;
          } }, { key: "isLegacy", value: function() {
            return 0 === this.type;
          } }, { key: "isBerlin", value: function() {
            return 1 === this.type;
          } }, { key: "isLondon", value: function() {
            return 2 === this.type;
          } }, { key: "isCancun", value: function() {
            return 3 === this.type;
          } }, { key: "clone", value: function() {
            return e3.from(this);
          } }, { key: "toJSON", value: function() {
            var e4 = function(e5) {
              return null == e5 ? null : e5.toString();
            };
            return { type: this.type, to: this.to, data: this.data, nonce: this.nonce, gasLimit: e4(this.gasLimit), gasPrice: e4(this.gasPrice), maxPriorityFeePerGas: e4(this.maxPriorityFeePerGas), maxFeePerGas: e4(this.maxFeePerGas), value: e4(this.value), chainId: e4(this.chainId), sig: this.signature ? this.signature.toJSON() : null, accessList: this.accessList };
          } }], [{ key: "from", value: function(t3) {
            if (null == t3) return new e3();
            if ("string" == typeof t3) {
              var r3 = Ie(t3);
              if (r3[0] >= 127) return e3.from(function(e4) {
                var t4 = ua(e4);
                Pe(Array.isArray(t4) && (9 === t4.length || 6 === t4.length), "invalid field count for legacy transaction", "data", e4);
                var r4 = { type: 0, nonce: wa(t4[0], "nonce"), gasPrice: Ia(t4[1], "gasPrice"), gasLimit: Ia(t4[2], "gasLimit"), to: Ca(t4[3]), value: Ia(t4[4], "value"), data: ke(t4[5]), chainId: ba };
                if (6 === t4.length) return r4;
                var n3 = Ia(t4[6], "v"), o2 = Ia(t4[7], "r"), a2 = Ia(t4[8], "s");
                if (o2 === ba && a2 === ba) r4.chainId = n3;
                else {
                  var i2 = (n3 - Aa) / Ta;
                  i2 < ba && (i2 = ba), r4.chainId = i2, Pe(i2 !== ba || n3 === va || n3 === ma, "non-canonical legacy v", "v", t4[6]), r4.signature = dt.from({ r: De(t4[7], 32), s: De(t4[8], 32), v: n3 });
                }
                return r4;
              }(r3));
              switch (r3[0]) {
                case 1:
                  return e3.from(function(e4) {
                    var t4 = ua(Ie(e4).slice(1));
                    Pe(Array.isArray(t4) && (8 === t4.length || 11 === t4.length), "invalid field count for transaction type: 1", "data", ke(e4));
                    var r4 = { type: 1, chainId: Ia(t4[0], "chainId"), nonce: wa(t4[1], "nonce"), gasPrice: Ia(t4[2], "gasPrice"), gasLimit: Ia(t4[3], "gasLimit"), to: Ca(t4[4]), value: Ia(t4[5], "value"), data: ke(t4[6]), accessList: Fa(t4[7], "accessList") };
                    return 8 === t4.length || Oa(r4, t4.slice(8)), r4;
                  }(r3));
                case 2:
                  return e3.from(function(e4) {
                    var t4 = ua(Ie(e4).slice(1));
                    Pe(Array.isArray(t4) && (9 === t4.length || 12 === t4.length), "invalid field count for transaction type: 2", "data", ke(e4));
                    var r4 = { type: 2, chainId: Ia(t4[0], "chainId"), nonce: wa(t4[1], "nonce"), maxPriorityFeePerGas: Ia(t4[2], "maxPriorityFeePerGas"), maxFeePerGas: Ia(t4[3], "maxFeePerGas"), gasPrice: null, gasLimit: Ia(t4[4], "gasLimit"), to: Ca(t4[5]), value: Ia(t4[6], "value"), data: ke(t4[7]), accessList: Fa(t4[8], "accessList") };
                    return 9 === t4.length || Oa(r4, t4.slice(9)), r4;
                  }(r3));
                case 3:
                  return e3.from(function(e4) {
                    var t4 = ua(Ie(e4).slice(1)), r4 = "3", n3 = null;
                    if (4 === t4.length && Array.isArray(t4[0])) {
                      r4 = "3 (network format)";
                      var o2 = t4[1], a2 = t4[2], i2 = t4[3];
                      Pe(Array.isArray(o2), "invalid network format: blobs not an array", "fields[1]", o2), Pe(Array.isArray(a2), "invalid network format: commitments not an array", "fields[2]", a2), Pe(Array.isArray(i2), "invalid network format: proofs not an array", "fields[3]", i2), Pe(o2.length === a2.length, "invalid network format: blobs/commitments length mismatch", "fields", t4), Pe(o2.length === i2.length, "invalid network format: blobs/proofs length mismatch", "fields", t4), n3 = [];
                      for (var s2 = 0; s2 < t4[1].length; s2++) n3.push({ data: o2[s2], commitment: a2[s2], proof: i2[s2] });
                      t4 = t4[0];
                    }
                    Pe(Array.isArray(t4) && (11 === t4.length || 14 === t4.length), "invalid field count for transaction type: ".concat(r4), "data", ke(e4));
                    var u2 = { type: 3, chainId: Ia(t4[0], "chainId"), nonce: wa(t4[1], "nonce"), maxPriorityFeePerGas: Ia(t4[2], "maxPriorityFeePerGas"), maxFeePerGas: Ia(t4[3], "maxFeePerGas"), gasPrice: null, gasLimit: Ia(t4[4], "gasLimit"), to: Ca(t4[5]), value: Ia(t4[6], "value"), data: ke(t4[7]), accessList: Fa(t4[8], "accessList"), maxFeePerBlobGas: Ia(t4[9], "maxFeePerBlobGas"), blobVersionedHashes: t4[10] };
                    n3 && (u2.blobs = n3), Pe(null != u2.to, "invalid address for transaction type: ".concat(r4), "data", e4), Pe(Array.isArray(u2.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", e4);
                    for (var c2 = 0; c2 < u2.blobVersionedHashes.length; c2++) Pe(Ee(u2.blobVersionedHashes[c2], 32), "invalid blobVersionedHash at index ".concat(c2, ": must be length 32"), "data", e4);
                    return 11 === t4.length || Oa(u2, t4.slice(11)), u2;
                  }(r3));
              }
              Ae(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
            }
            var n2 = new e3();
            return null != t3.type && (n2.type = t3.type), null != t3.to && (n2.to = t3.to), null != t3.nonce && (n2.nonce = t3.nonce), null != t3.gasLimit && (n2.gasLimit = t3.gasLimit), null != t3.gasPrice && (n2.gasPrice = t3.gasPrice), null != t3.maxPriorityFeePerGas && (n2.maxPriorityFeePerGas = t3.maxPriorityFeePerGas), null != t3.maxFeePerGas && (n2.maxFeePerGas = t3.maxFeePerGas), null != t3.maxFeePerBlobGas && (n2.maxFeePerBlobGas = t3.maxFeePerBlobGas), null != t3.data && (n2.data = t3.data), null != t3.value && (n2.value = t3.value), null != t3.chainId && (n2.chainId = t3.chainId), null != t3.signature && (n2.signature = dt.from(t3.signature)), null != t3.accessList && (n2.accessList = t3.accessList), null != t3.blobVersionedHashes && (n2.blobVersionedHashes = t3.blobVersionedHashes), null != t3.kzg && (n2.kzg = t3.kzg), null != t3.blobs && (n2.blobs = t3.blobs), null != t3.hash && (Pe(n2.isSigned(), "unsigned transaction cannot define '.hash'", "tx", t3), Pe(n2.hash === t3.hash, "hash mismatch", "tx", t3)), null != t3.from && (Pe(n2.isSigned(), "unsigned transaction cannot define '.from'", "tx", t3), Pe(n2.from.toLowerCase() === (t3.from || "").toLowerCase(), "from mismatch", "tx", t3)), n2;
          } }]), e3;
        }();
        function Qa(e3, t3) {
          Ae(!e3 || null != this.signature, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
          var r3 = e3 ? this.signature : null;
          switch (this.inferType()) {
            case 0:
              return function(e4, t4) {
                var r4 = [Ma(e4.nonce, "nonce"), Ma(e4.gasPrice || 0, "gasPrice"), Ma(e4.gasLimit, "gasLimit"), e4.to || "0x", Ma(e4.value, "value"), e4.data], n2 = ba;
                if (e4.chainId != ba) n2 = je(e4.chainId, "tx.chainId"), Pe(!t4 || null == t4.networkV || t4.legacyChainId === n2, "tx.chainId/sig.v mismatch", "sig", t4);
                else if (e4.signature) {
                  var o2 = e4.signature.legacyChainId;
                  null != o2 && (n2 = o2);
                }
                if (!t4) return n2 !== ba && (r4.push(Qe(n2)), r4.push("0x"), r4.push("0x")), fa(r4);
                var a2 = BigInt(27 + t4.yParity);
                return n2 !== ba ? a2 = dt.getChainIdV(n2, t4.v) : BigInt(t4.v) !== a2 && Pe(false, "tx.chainId/sig.v mismatch", "sig", t4), r4.push(Qe(a2)), r4.push(Qe(t4.r)), r4.push(Qe(t4.s)), fa(r4);
              }(this, r3);
            case 1:
              return function(e4, t4) {
                var r4 = [Ma(e4.chainId, "chainId"), Ma(e4.nonce, "nonce"), Ma(e4.gasPrice || 0, "gasPrice"), Ma(e4.gasLimit, "gasLimit"), e4.to || "0x", Ma(e4.value, "value"), e4.data, Ea(e4.accessList || [])];
                return t4 && (r4.push(Ma(t4.yParity, "recoveryParam")), r4.push(Qe(t4.r)), r4.push(Qe(t4.s))), Se(["0x01", fa(r4)]);
              }(this, r3);
            case 2:
              return function(e4, t4) {
                var r4 = [Ma(e4.chainId, "chainId"), Ma(e4.nonce, "nonce"), Ma(e4.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"), Ma(e4.maxFeePerGas || 0, "maxFeePerGas"), Ma(e4.gasLimit, "gasLimit"), e4.to || "0x", Ma(e4.value, "value"), e4.data, Ea(e4.accessList || [])];
                return t4 && (r4.push(Ma(t4.yParity, "yParity")), r4.push(Qe(t4.r)), r4.push(Qe(t4.s))), Se(["0x02", fa(r4)]);
              }(this, r3);
            case 3:
              return function(e4, t4, r4) {
                var n2 = [Ma(e4.chainId, "chainId"), Ma(e4.nonce, "nonce"), Ma(e4.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"), Ma(e4.maxFeePerGas || 0, "maxFeePerGas"), Ma(e4.gasLimit, "gasLimit"), e4.to || na, Ma(e4.value, "value"), e4.data, Ea(e4.accessList || []), Ma(e4.maxFeePerBlobGas || 0, "maxFeePerBlobGas"), Ra(e4.blobVersionedHashes || [], "blobVersionedHashes")];
                return t4 && (n2.push(Ma(t4.yParity, "yParity")), n2.push(Qe(t4.r)), n2.push(Qe(t4.s)), r4) ? Se(["0x03", fa([n2, r4.map(function(e5) {
                  return e5.data;
                }), r4.map(function(e5) {
                  return e5.commitment;
                }), r4.map(function(e5) {
                  return e5.proof;
                })])]) : Se(["0x03", fa(n2)]);
              }(this, r3, t3 ? this.blobs : null);
          }
          Ae(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
        }
        function Ya() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Ya = function() {
            return !!e3;
          })();
        }
        function qa(e3, t3, r3) {
          return function(e4, t4, r4) {
            if ("function" == typeof e4 ? e4 === t4 : e4.has(t4)) return arguments.length < 3 ? t4 : r4;
            throw new TypeError("Private element is not present on this object");
          }(t3, e3), r3;
        }
        function ei(e3, t3) {
          if (e3.provider) return e3.provider;
          Ae(false, "missing provider", "UNSUPPORTED_OPERATION", { operation: t3 });
        }
        function ti(e3, t3) {
          return ri.apply(this, arguments);
        }
        function ri() {
          return (ri = d(M.mark(function e3(t3, r3) {
            var n2, o2;
            return M.wrap(function(e4) {
              for (; ; ) switch (e4.prev = e4.next) {
                case 0:
                  return null != (n2 = ra(r3)).to && (n2.to = Co(n2.to, t3)), null != n2.from ? (o2 = n2.from, n2.from = Promise.all([t3.getAddress(), Co(o2, t3)]).then(function(e5) {
                    var t4 = Fo(e5, 2), r4 = t4[0], n3 = t4[1];
                    return Pe(r4.toLowerCase() === n3.toLowerCase(), "transaction from mismatch", "tx.from", n3), r4;
                  })) : n2.from = t3.getAddress(), e4.next = 5, he(n2);
                case 5:
                  return e4.abrupt("return", e4.sent);
                case 6:
                case "end":
                  return e4.stop();
              }
            }, e3);
          }))).apply(this, arguments);
        }
        var ni = function() {
          function e3(t4) {
            h(this, e3), w(this, "provider", void 0), be(this, { provider: t4 || null });
          }
          var t3, r3, n2, o2, a2, i2, s2;
          return b(e3, [{ key: "getNonce", value: (s2 = d(M.mark(function e4(t4) {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.t0 = ei(this, "getTransactionCount"), e5.next = 3, this.getAddress();
                case 3:
                  return e5.t1 = e5.sent, e5.t2 = t4, e5.abrupt("return", e5.t0.getTransactionCount.call(e5.t0, e5.t1, e5.t2));
                case 6:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return s2.apply(this, arguments);
          }) }, { key: "populateCall", value: (i2 = d(M.mark(function e4(t4) {
            var r4;
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.next = 2, ti(this, t4);
                case 2:
                  return r4 = e5.sent, e5.abrupt("return", r4);
                case 4:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return i2.apply(this, arguments);
          }) }, { key: "populateTransaction", value: (a2 = d(M.mark(function e4(t4) {
            var r4, n3, o3, a3, i3, s3, u2;
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return r4 = ei(this, "populateTransaction"), e5.next = 3, ti(this, t4);
                case 3:
                  if (null != (n3 = e5.sent).nonce) {
                    e5.next = 8;
                    break;
                  }
                  return e5.next = 7, this.getNonce("pending");
                case 7:
                  n3.nonce = e5.sent;
                case 8:
                  if (null != n3.gasLimit) {
                    e5.next = 12;
                    break;
                  }
                  return e5.next = 11, this.estimateGas(n3);
                case 11:
                  n3.gasLimit = e5.sent;
                case 12:
                  return e5.next = 14, this.provider.getNetwork();
                case 14:
                  if (o3 = e5.sent, null != n3.chainId ? Pe(je(n3.chainId) === o3.chainId, "transaction chainId mismatch", "tx.chainId", t4.chainId) : n3.chainId = o3.chainId, a3 = null != n3.maxFeePerGas || null != n3.maxPriorityFeePerGas, null == n3.gasPrice || 2 !== n3.type && !a3 ? 0 !== n3.type && 1 !== n3.type || !a3 || Pe(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", t4) : Pe(false, "eip-1559 transaction do not support gasPrice", "tx", t4), 2 !== n3.type && null != n3.type || null == n3.maxFeePerGas || null == n3.maxPriorityFeePerGas) {
                    e5.next = 22;
                    break;
                  }
                  n3.type = 2, e5.next = 34;
                  break;
                case 22:
                  if (0 !== n3.type && 1 !== n3.type) {
                    e5.next = 30;
                    break;
                  }
                  return e5.next = 25, r4.getFeeData();
                case 25:
                  Ae(null != (i3 = e5.sent).gasPrice, "network does not support gasPrice", "UNSUPPORTED_OPERATION", { operation: "getGasPrice" }), null == n3.gasPrice && (n3.gasPrice = i3.gasPrice), e5.next = 34;
                  break;
                case 30:
                  return e5.next = 32, r4.getFeeData();
                case 32:
                  s3 = e5.sent, null == n3.type ? null != s3.maxFeePerGas && null != s3.maxPriorityFeePerGas ? (n3.type = 2, null != n3.gasPrice ? (u2 = n3.gasPrice, delete n3.gasPrice, n3.maxFeePerGas = u2, n3.maxPriorityFeePerGas = u2) : (null == n3.maxFeePerGas && (n3.maxFeePerGas = s3.maxFeePerGas), null == n3.maxPriorityFeePerGas && (n3.maxPriorityFeePerGas = s3.maxPriorityFeePerGas))) : null != s3.gasPrice ? (Ae(!a3, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", { operation: "populateTransaction" }), null == n3.gasPrice && (n3.gasPrice = s3.gasPrice), n3.type = 0) : Ae(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", { operation: "signer.getFeeData" }) : 2 !== n3.type && 3 !== n3.type || (null == n3.maxFeePerGas && (n3.maxFeePerGas = s3.maxFeePerGas), null == n3.maxPriorityFeePerGas && (n3.maxPriorityFeePerGas = s3.maxPriorityFeePerGas));
                case 34:
                  return e5.next = 36, he(n3);
                case 36:
                  return e5.abrupt("return", e5.sent);
                case 37:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return a2.apply(this, arguments);
          }) }, { key: "estimateGas", value: (o2 = d(M.mark(function e4(t4) {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.t0 = ei(this, "estimateGas"), e5.next = 3, this.populateCall(t4);
                case 3:
                  return e5.t1 = e5.sent, e5.abrupt("return", e5.t0.estimateGas.call(e5.t0, e5.t1));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return o2.apply(this, arguments);
          }) }, { key: "call", value: (n2 = d(M.mark(function e4(t4) {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.t0 = ei(this, "call"), e5.next = 3, this.populateCall(t4);
                case 3:
                  return e5.t1 = e5.sent, e5.abrupt("return", e5.t0.call.call(e5.t0, e5.t1));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return n2.apply(this, arguments);
          }) }, { key: "resolveName", value: (r3 = d(M.mark(function e4(t4) {
            var r4;
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return r4 = ei(this, "resolveName"), e5.next = 3, r4.resolveName(t4);
                case 3:
                  return e5.abrupt("return", e5.sent);
                case 4:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return r3.apply(this, arguments);
          }) }, { key: "sendTransaction", value: (t3 = d(M.mark(function e4(t4) {
            var r4, n3, o3;
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return r4 = ei(this, "sendTransaction"), e5.next = 3, this.populateTransaction(t4);
                case 3:
                  return delete (n3 = e5.sent).from, o3 = Ka.from(n3), e5.t0 = r4, e5.next = 9, this.signTransaction(o3);
                case 9:
                  return e5.t1 = e5.sent, e5.next = 12, e5.t0.broadcastTransaction.call(e5.t0, e5.t1);
                case 12:
                  return e5.abrupt("return", e5.sent);
                case 13:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return t3.apply(this, arguments);
          }) }]), e3;
        }(), oi = /* @__PURE__ */ new WeakSet(), ai = function(e3) {
          A(s2, e3);
          var t3, r3, n2, o2, a2, i2 = (t3 = s2, r3 = Ya(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function s2(e4, t4) {
            var r4, n3, o3;
            return h(this, s2), r4 = i2.call(this, t4), function(e5, t5) {
              if (t5.has(e5)) throw new TypeError("Cannot initialize the same private elements twice on an object");
            }(n3 = v(r4), o3 = oi), o3.add(n3), w(v(r4), "address", void 0), be(v(r4), { address: e4 }), r4;
          }
          return b(s2, [{ key: "getAddress", value: (a2 = d(M.mark(function e4() {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.abrupt("return", this.address);
                case 1:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return a2.apply(this, arguments);
          }) }, { key: "connect", value: function(e4) {
            return new s2(this.address, e4);
          } }, { key: "signTransaction", value: (o2 = d(M.mark(function e4(t4) {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  qa(this, oi, ii).call(this, "transactions", "signTransaction");
                case 1:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return o2.apply(this, arguments);
          }) }, { key: "signMessage", value: (n2 = d(M.mark(function e4(t4) {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  qa(this, oi, ii).call(this, "messages", "signMessage");
                case 1:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return n2.apply(this, arguments);
          }) }, { key: "signTypedData", value: function() {
            var e4 = d(M.mark(function e5(t4, r4, n3) {
              return M.wrap(function(e6) {
                for (; ; ) switch (e6.prev = e6.next) {
                  case 0:
                    qa(this, oi, ii).call(this, "typed-data", "signTypedData");
                  case 1:
                  case "end":
                    return e6.stop();
                }
              }, e5, this);
            }));
            return function(t4, r4, n3) {
              return e4.apply(this, arguments);
            };
          }() }]), s2;
        }(ni);
        function ii(e3, t3) {
          Ae(false, "VoidSigner cannot sign ".concat(e3), "UNSUPPORTED_OPERATION", { operation: t3 });
        }
        function si() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (si = function() {
            return !!e3;
          })();
        }
        var ui = /* @__PURE__ */ new WeakMap(), ci = function(e3) {
          A(s2, e3);
          var t3, r3, n2, o2, a2, i2 = (t3 = s2, r3 = si(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function s2(e4, t4) {
            var r4;
            h(this, s2), r4 = i2.call(this, t4), w(v(r4), "address", void 0), function(e5, t5, r5) {
              (function(e6, t6) {
                if (t6.has(e6)) throw new TypeError("Cannot initialize the same private elements twice on an object");
              })(e5, t5), t5.set(e5, r5);
            }(v(r4), ui, { writable: true, value: void 0 }), Pe(e4 && "function" == typeof e4.sign, "invalid private key", "privateKey", "[ REDACTED ]"), ue(v(r4), ui, e4);
            var n3 = vr(r4.signingKey.publicKey);
            return be(v(r4), { address: n3 }), r4;
          }
          return b(s2, [{ key: "signingKey", get: function() {
            return le(this, ui);
          } }, { key: "privateKey", get: function() {
            return this.signingKey.privateKey;
          } }, { key: "getAddress", value: (a2 = d(M.mark(function e4() {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.abrupt("return", this.address);
                case 1:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return a2.apply(this, arguments);
          }) }, { key: "connect", value: function(e4) {
            return new s2(le(this, ui), e4);
          } }, { key: "signTransaction", value: (o2 = d(M.mark(function e4(t4) {
            var r4, n3, o3, a3;
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return t4 = ra(t4), e5.next = 3, he({ to: t4.to ? Co(t4.to, this.provider) : void 0, from: t4.from ? Co(t4.from, this.provider) : void 0 });
                case 3:
                  return r4 = e5.sent, n3 = r4.to, o3 = r4.from, null != n3 && (t4.to = n3), null != o3 && (t4.from = o3), null != t4.from && (Pe(hr(t4.from) === this.address, "transaction from address mismatch", "tx.from", t4.from), delete t4.from), (a3 = Ka.from(t4)).signature = this.signingKey.sign(a3.unsignedHash), e5.abrupt("return", a3.serialized);
                case 12:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return o2.apply(this, arguments);
          }) }, { key: "signMessage", value: (n2 = d(M.mark(function e4(t4) {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.abrupt("return", this.signMessageSync(t4));
                case 1:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return n2.apply(this, arguments);
          }) }, { key: "signMessageSync", value: function(e4) {
            return this.signingKey.sign(function(e5) {
              return "string" == typeof e5 && (e5 = wt(e5)), kt(Se([wt("Ethereum Signed Message:\n"), wt(String(e5.length)), e5]));
            }(e4)).serialized;
          } }, { key: "signTypedData", value: function() {
            var e4 = d(M.mark(function e5(t4, r4, n3) {
              var o3, a3 = this;
              return M.wrap(function(e6) {
                for (; ; ) switch (e6.prev = e6.next) {
                  case 0:
                    return e6.next = 2, Ko.resolveNames(t4, r4, n3, function() {
                      var e7 = d(M.mark(function e8(t5) {
                        var r5;
                        return M.wrap(function(e9) {
                          for (; ; ) switch (e9.prev = e9.next) {
                            case 0:
                              return Ae(null != a3.provider, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName", info: { name: t5 } }), e9.next = 3, a3.provider.resolveName(t5);
                            case 3:
                              return Ae(null != (r5 = e9.sent), "unconfigured ENS name", "UNCONFIGURED_NAME", { value: t5 }), e9.abrupt("return", r5);
                            case 6:
                            case "end":
                              return e9.stop();
                          }
                        }, e8);
                      }));
                      return function(t5) {
                        return e7.apply(this, arguments);
                      };
                    }());
                  case 2:
                    return o3 = e6.sent, e6.abrupt("return", this.signingKey.sign(Ko.hash(o3.domain, r4, o3.value)).serialized);
                  case 4:
                  case "end":
                    return e6.stop();
                }
              }, e5, this);
            }));
            return function(t4, r4, n3) {
              return e4.apply(this, arguments);
            };
          }() }]), s2;
        }(ni);
        const li = require_ripemd160();
        var di = false, pi = function(e3) {
          return (0, li.ripemd160)(e3);
        }, fi = pi;
        function gi(e3) {
          var t3 = Ie(e3, "data");
          return ke(fi(t3));
        }
        gi._ = pi, gi.lock = function() {
          di = true;
        }, gi.register = function(e3) {
          if (di) throw new TypeError("ripemd160 is locked");
          fi = e3;
        }, Object.freeze(gi);
        var hi = false, yi = function(e3) {
          return new Uint8Array((0, pt.randomBytes)(e3));
        }, bi = yi;
        function Ti(e3) {
          return bi(e3);
        }
        Ti._ = yi, Ti.lock = function() {
          hi = true;
        }, Ti.register = function(e3) {
          if (hi) throw new Error("randomBytes is locked");
          bi = e3;
        }, Object.freeze(Ti);
        var vi = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", mi = null;
        function Ai(e3) {
          if (null == mi) {
            mi = {};
            for (var t3 = 0; t3 < 58; t3++) mi[vi[t3]] = BigInt(t3);
          }
          var r3 = mi[e3];
          return Pe(null != r3, "invalid base58 value", "letter", e3), r3;
        }
        var Pi = BigInt(0), Wi = BigInt(58);
        const Bi = require_lib(), Ci = require_scrypt();
        var Fi = false, wi = false, Ii = function() {
          var e3 = d(M.mark(function e4(t3, r3, n2, o2, a2, i2, s2) {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.next = 2, (0, Ci.scryptAsync)(t3, r3, { N: n2, r: o2, p: a2, dkLen: i2, onProgress: s2 });
                case 2:
                  return e5.abrupt("return", e5.sent);
                case 3:
                case "end":
                  return e5.stop();
              }
            }, e4);
          }));
          return function(t3, r3, n2, o2, a2, i2, s2) {
            return e3.apply(this, arguments);
          };
        }(), Mi = function(e3, t3, r3, n2, o2, a2) {
          return (0, Ci.scrypt)(e3, t3, { N: r3, r: n2, p: o2, dkLen: a2 });
        }, Ei = Ii, Ri = Mi;
        function Oi(e3, t3, r3, n2, o2, a2, i2) {
          return ki.apply(this, arguments);
        }
        function ki() {
          return ki = d(M.mark(function e3(t3, r3, n2, o2, a2, i2, s2) {
            var u2, c2;
            return M.wrap(function(e4) {
              for (; ; ) switch (e4.prev = e4.next) {
                case 0:
                  return u2 = Ie(t3, "passwd"), c2 = Ie(r3, "salt"), e4.t0 = ke, e4.next = 5, Ei(u2, c2, n2, o2, a2, i2, s2);
                case 5:
                  return e4.t1 = e4.sent, e4.abrupt("return", (0, e4.t0)(e4.t1));
                case 7:
                case "end":
                  return e4.stop();
              }
            }, e3);
          })), ki.apply(this, arguments);
        }
        function Si(e3, t3, r3, n2, o2, a2) {
          var i2 = Ie(e3, "passwd"), s2 = Ie(t3, "salt");
          return ke(Ri(i2, s2, r3, n2, o2, a2));
        }
        function Ni(e3) {
          var t3 = Ie(e3, "randomBytes");
          t3[6] = 15 & t3[6] | 64, t3[8] = 63 & t3[8] | 128;
          var r3 = ke(t3);
          return [r3.substring(2, 10), r3.substring(10, 14), r3.substring(14, 18), r3.substring(18, 22), r3.substring(22, 34)].join("-");
        }
        function Li(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n2 = Array(t3); r3 < t3; r3++) n2[r3] = e3[r3];
          return n2;
        }
        function Di(e3) {
          return "string" != typeof e3 || e3.startsWith("0x") || (e3 = "0x" + e3), Me(e3);
        }
        function Ui(e3, t3) {
          for (e3 = String(e3); e3.length < t3; ) e3 = "0" + e3;
          return e3;
        }
        function xi(e3) {
          return "string" == typeof e3 ? wt(e3, "NFKC") : Me(e3);
        }
        function Ji(e3, t3) {
          var r3 = t3.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
          Pe(null != r3, "invalid path", "path", t3);
          var n2, o2 = r3[1], a2 = r3[3], i2 = "!" === r3[4], s2 = e3, u2 = function(e4, t4) {
            var r4 = "undefined" != typeof Symbol && e4[Symbol.iterator] || e4["@@iterator"];
            if (!r4) {
              if (Array.isArray(e4) || (r4 = function(e5, t5) {
                if (e5) {
                  if ("string" == typeof e5) return Li(e5, t5);
                  var r5 = {}.toString.call(e5).slice(8, -1);
                  return "Object" === r5 && e5.constructor && (r5 = e5.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(e5) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? Li(e5, t5) : void 0;
                }
              }(e4)) || t4 && e4 && "number" == typeof e4.length) {
                r4 && (e4 = r4);
                var n3 = 0, o3 = function() {
                };
                return { s: o3, n: function() {
                  return n3 >= e4.length ? { done: true } : { done: false, value: e4[n3++] };
                }, e: function(e5) {
                  throw e5;
                }, f: o3 };
              }
              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }
            var a3, i3 = true, s3 = false;
            return { s: function() {
              r4 = r4.call(e4);
            }, n: function() {
              var e5 = r4.next();
              return i3 = e5.done, e5;
            }, e: function(e5) {
              s3 = true, a3 = e5;
            }, f: function() {
              try {
                i3 || null == r4.return || r4.return();
              } finally {
                if (s3) throw a3;
              }
            } };
          }(o2.toLowerCase().split("."));
          try {
            for (u2.s(); !(n2 = u2.n()).done; ) {
              var c2 = n2.value;
              if (Array.isArray(s2)) {
                if (!c2.match(/^[0-9]+$/)) break;
                s2 = s2[parseInt(c2)];
              } else if ("object" === f(s2)) {
                var l2 = null;
                for (var d2 in s2) if (d2.toLowerCase() === c2) {
                  l2 = s2[d2];
                  break;
                }
                s2 = l2;
              } else s2 = null;
              if (null == s2) break;
            }
          } catch (e4) {
            u2.e(e4);
          } finally {
            u2.f();
          }
          if (Pe(!i2 || null != s2, "missing required value", "path", o2), a2 && null != s2) {
            if ("int" === a2) {
              if ("string" == typeof s2 && s2.match(/^-?[0-9]+$/)) return parseInt(s2);
              if (Number.isSafeInteger(s2)) return s2;
            }
            if ("number" === a2 && "string" == typeof s2 && s2.match(/^-?[0-9.]*$/)) return parseFloat(s2);
            if ("data" === a2 && "string" == typeof s2) return Di(s2);
            if ("array" === a2 && Array.isArray(s2)) return s2;
            if (a2 === f(s2)) return s2;
            Pe(false, "wrong type found for ".concat(a2, " "), "path", o2);
          }
          return s2;
        }
        Oi._ = Ii, Oi.lock = function() {
          wi = true;
        }, Oi.register = function(e3) {
          if (wi) throw new Error("scrypt is locked");
          Ei = e3;
        }, Object.freeze(Oi), Si._ = Mi, Si.lock = function() {
          Fi = true;
        }, Si.register = function(e3) {
          if (Fi) throw new Error("scryptSync is locked");
          Ri = e3;
        }, Object.freeze(Si);
        var _i = "m/44'/60'/0'/0/0";
        function zi(e3) {
          try {
            var t3 = JSON.parse(e3);
            if (3 === (null != t3.version ? parseInt(t3.version) : 0)) return true;
          } catch (e4) {
          }
          return false;
        }
        function Gi(e3, t3) {
          var r3 = Ie(t3), n2 = Ji(e3, "crypto.ciphertext:data!");
          Pe(ke(kt(Se([r3.slice(16, 32), n2]))).substring(2) === Ji(e3, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
          var o2 = function(e4, t4, r4) {
            if ("aes-128-ctr" === Ji(e4, "crypto.cipher:string")) {
              var n3 = Ji(e4, "crypto.cipherparams.iv:data!");
              return ke(new Bi.CTR(t4, n3).decrypt(r4));
            }
            Ae(false, "unsupported cipher", "UNSUPPORTED_OPERATION", { operation: "decrypt" });
          }(e3, r3.slice(0, 16), n2), a2 = vr(o2);
          if (e3.address) {
            var i2 = e3.address.toLowerCase();
            i2.startsWith("0x") || (i2 = "0x" + i2), Pe(hr(i2) === a2, "keystore address/privateKey mismatch", "address", e3.address);
          }
          var s2 = { address: a2, privateKey: o2 };
          if ("0.1" === Ji(e3, "x-ethers.version:string")) {
            var u2 = r3.slice(32, 64), c2 = Ji(e3, "x-ethers.mnemonicCiphertext:data!"), l2 = Ji(e3, "x-ethers.mnemonicCounter:data!"), d2 = new Bi.CTR(u2, l2);
            s2.mnemonic = { path: Ji(e3, "x-ethers.path:string") || _i, locale: Ji(e3, "x-ethers.locale:string") || "en", entropy: ke(Ie(d2.decrypt(c2))) };
          }
          return s2;
        }
        function ji(e3) {
          var t3 = Ji(e3, "crypto.kdf:string");
          if (t3 && "string" == typeof t3) {
            if ("scrypt" === t3.toLowerCase()) {
              var r3 = Ji(e3, "crypto.kdfparams.salt:data!"), n2 = Ji(e3, "crypto.kdfparams.n:int!"), o2 = Ji(e3, "crypto.kdfparams.r:int!"), a2 = Ji(e3, "crypto.kdfparams.p:int!");
              Pe(n2 > 0 && !(n2 & n2 - 1), "invalid kdf.N", "kdf.N", n2), Pe(o2 > 0 && a2 > 0, "invalid kdf", "kdf", t3);
              var i2 = Ji(e3, "crypto.kdfparams.dklen:int!");
              return Pe(32 === i2, "invalid kdf.dklen", "kdf.dflen", i2), { name: "scrypt", salt: r3, N: n2, r: o2, p: a2, dkLen: 64 };
            }
            if ("pbkdf2" === t3.toLowerCase()) {
              var s2 = Ji(e3, "crypto.kdfparams.salt:data!"), u2 = Ji(e3, "crypto.kdfparams.prf:string!"), c2 = u2.split("-").pop();
              Pe("sha256" === c2 || "sha512" === c2, "invalid kdf.pdf", "kdf.pdf", u2);
              var l2 = Ji(e3, "crypto.kdfparams.c:int!"), d2 = Ji(e3, "crypto.kdfparams.dklen:int!");
              return Pe(32 === d2, "invalid kdf.dklen", "kdf.dklen", d2), { name: "pbkdf2", salt: s2, count: l2, dkLen: d2, algorithm: c2 };
            }
          }
          Pe(false, "unsupported key-derivation function", "kdf", t3);
        }
        function Vi(e3) {
          return new Promise(function(t3) {
            setTimeout(function() {
              t3();
            }, e3);
          });
        }
        function Xi(e3, t3, r3) {
          return Hi.apply(this, arguments);
        }
        function Hi() {
          return Hi = d(M.mark(function e3(t3, r3, n2) {
            var o2, a2, i2, s2, u2, c2, l2, d2, p2, f2, g2, h2, y2, b2;
            return M.wrap(function(e4) {
              for (; ; ) switch (e4.prev = e4.next) {
                case 0:
                  if (o2 = JSON.parse(t3), a2 = xi(r3), "pbkdf2" !== (i2 = ji(o2)).name) {
                    e4.next = 15;
                    break;
                  }
                  if (!n2) {
                    e4.next = 8;
                    break;
                  }
                  return n2(0), e4.next = 8, Vi(0);
                case 8:
                  if (s2 = i2.salt, u2 = i2.count, c2 = i2.dkLen, l2 = i2.algorithm, d2 = Bt(a2, s2, u2, c2, l2), !n2) {
                    e4.next = 14;
                    break;
                  }
                  return n2(1), e4.next = 14, Vi(0);
                case 14:
                  return e4.abrupt("return", Gi(o2, d2));
                case 15:
                  return Ae("scrypt" === i2.name, "cannot be reached", "UNKNOWN_ERROR", { params: i2 }), p2 = i2.salt, f2 = i2.N, g2 = i2.r, h2 = i2.p, y2 = i2.dkLen, e4.next = 19, Oi(a2, p2, f2, g2, h2, y2, n2);
                case 19:
                  return b2 = e4.sent, e4.abrupt("return", Gi(o2, b2));
                case 21:
                case "end":
                  return e4.stop();
              }
            }, e3);
          })), Hi.apply(this, arguments);
        }
        function $i(e3) {
          var t3 = null != e3.salt ? Ie(e3.salt, "options.salt") : Ti(32), r3 = 1 << 17, n2 = 8, o2 = 1;
          return e3.scrypt && (e3.scrypt.N && (r3 = e3.scrypt.N), e3.scrypt.r && (n2 = e3.scrypt.r), e3.scrypt.p && (o2 = e3.scrypt.p)), Pe("number" == typeof r3 && r3 > 0 && Number.isSafeInteger(r3) && (BigInt(r3) & BigInt(r3 - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", r3), Pe("number" == typeof n2 && n2 > 0 && Number.isSafeInteger(n2), "invalid scrypt r parameter", "options.r", n2), Pe("number" == typeof o2 && o2 > 0 && Number.isSafeInteger(o2), "invalid scrypt p parameter", "options.p", o2), { name: "scrypt", dkLen: 32, salt: t3, N: r3, r: n2, p: o2 };
        }
        function Zi(e3, t3, r3, n2) {
          var o2 = Ie(r3.privateKey, "privateKey"), a2 = null != n2.iv ? Ie(n2.iv, "options.iv") : Ti(16);
          Pe(16 === a2.length, "invalid options.iv length", "options.iv", n2.iv);
          var i2 = null != n2.uuid ? Ie(n2.uuid, "options.uuid") : Ti(16);
          Pe(16 === i2.length, "invalid options.uuid length", "options.uuid", n2.iv);
          var s2 = e3.slice(0, 16), u2 = e3.slice(16, 32), c2 = Ie(new Bi.CTR(s2, a2).encrypt(o2)), l2 = kt(Se([u2, c2])), d2 = { address: r3.address.substring(2).toLowerCase(), id: Ni(i2), version: 3, Crypto: { cipher: "aes-128-ctr", cipherparams: { iv: ke(a2).substring(2) }, ciphertext: ke(c2).substring(2), kdf: "scrypt", kdfparams: { salt: ke(t3.salt).substring(2), n: t3.N, dklen: 32, p: t3.p, r: t3.r }, mac: l2.substring(2) } };
          if (r3.mnemonic) {
            var p2 = null != n2.client ? n2.client : "ethers/".concat(fe), f2 = r3.mnemonic.path || _i, g2 = r3.mnemonic.locale || "en", h2 = e3.slice(32, 64), y2 = Ie(r3.mnemonic.entropy, "account.mnemonic.entropy"), b2 = Ti(16), T2 = Ie(new Bi.CTR(h2, b2).encrypt(y2)), v2 = /* @__PURE__ */ new Date(), m2 = "UTC--" + v2.getUTCFullYear() + "-" + Ui(v2.getUTCMonth() + 1, 2) + "-" + Ui(v2.getUTCDate(), 2) + "T" + Ui(v2.getUTCHours(), 2) + "-" + Ui(v2.getUTCMinutes(), 2) + "-" + Ui(v2.getUTCSeconds(), 2) + ".0Z--" + d2.address;
            d2["x-ethers"] = { client: p2, gethFilename: m2, path: f2, locale: g2, mnemonicCounter: ke(b2).substring(2), mnemonicCiphertext: ke(T2).substring(2), version: "0.1" };
          }
          return JSON.stringify(d2);
        }
        function Ki(e3, t3, r3) {
          null == r3 && (r3 = {});
          var n2 = xi(t3), o2 = $i(r3);
          return Zi(Ie(Si(n2, o2.salt, o2.N, o2.r, o2.p, 64)), o2, e3, r3);
        }
        function Qi(e3, t3, r3) {
          return Yi.apply(this, arguments);
        }
        function Yi() {
          return (Yi = d(M.mark(function e3(t3, r3, n2) {
            var o2, a2, i2;
            return M.wrap(function(e4) {
              for (; ; ) switch (e4.prev = e4.next) {
                case 0:
                  return null == n2 && (n2 = {}), o2 = xi(r3), a2 = $i(n2), e4.next = 5, Oi(o2, a2.salt, a2.N, a2.r, a2.p, 64, n2.progressCallback);
                case 5:
                  return i2 = e4.sent, e4.abrupt("return", Zi(Ie(i2), a2, t3, n2));
                case 7:
                case "end":
                  return e4.stop();
              }
            }, e3);
          }))).apply(this, arguments);
        }
        function qi(e3) {
          var t3 = es();
          return function() {
            var r3, n2 = C(e3);
            if (t3) {
              var o2 = C(this).constructor;
              r3 = Reflect.construct(n2, arguments, o2);
            } else r3 = n2.apply(this, arguments);
            return W(this, r3);
          };
        }
        function es() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (es = function() {
            return !!e3;
          })();
        }
        function ts(e3, t3, r3) {
          return ns(t3, e3), r3;
        }
        function rs(e3, t3, r3) {
          return ns(t3, e3), r3;
        }
        function ns(e3, t3, r3) {
          if ("function" == typeof e3 ? e3 === t3 : e3.has(t3)) return arguments.length < 3 ? t3 : r3;
          throw new TypeError("Private element is not present on this object");
        }
        var os = "m/44'/60'/0'/0/0", as = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]), is = 2147483648, ss = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
        function us(e3, t3) {
          for (var r3 = ""; e3; ) r3 = "0123456789abcdef"[e3 % 16] + r3, e3 = Math.trunc(e3 / 16);
          for (; r3.length < 2 * t3; ) r3 = "0" + r3;
          return "0x" + r3;
        }
        function cs(e3) {
          var t3 = Ie(e3);
          return function(e4) {
            for (var t4 = Ie(e4), r3 = $e(t4), n2 = ""; r3; ) n2 = vi[Number(r3 % Wi)] + n2, r3 /= Wi;
            for (var o2 = 0; o2 < t4.length && !t4[o2]; o2++) n2 = vi[0] + n2;
            return n2;
          }(Se([t3, Le(vt(vt(t3)), 0, 4)]));
        }
        var ls = {};
        function ds(e3, t3, r3, n2) {
          var o2 = new Uint8Array(37);
          e3 & is ? (Ae(null != n2, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", { operation: "deriveChild" }), o2.set(Ie(n2), 1)) : o2.set(Ie(r3));
          for (var a2 = 24; a2 >= 0; a2 -= 8) o2[33 + (a2 >> 3)] = e3 >> 24 - a2 & 255;
          var i2 = Ie(ir("sha512", t3, o2));
          return { IL: i2.slice(0, 32), IR: i2.slice(32) };
        }
        function ps(e3, t3) {
          var r3 = t3.split("/");
          Pe(r3.length > 0, "invalid path", "path", t3), "m" === r3[0] && (Pe(0 === e3.depth, 'cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth '.concat(e3.depth), "path", t3), r3.shift());
          for (var n2 = e3, o2 = 0; o2 < r3.length; o2++) {
            var a2 = r3[o2];
            if (a2.match(/^[0-9]+'$/)) {
              var i2 = parseInt(a2.substring(0, a2.length - 1));
              Pe(i2 < is, "invalid path index", "path[".concat(o2, "]"), a2), n2 = n2.deriveChild(is + i2);
            } else if (a2.match(/^[0-9]+$/)) {
              var s2 = parseInt(a2);
              Pe(s2 < is, "invalid path index", "path[".concat(o2, "]"), a2), n2 = n2.deriveChild(s2);
            } else Pe(false, "invalid path component", "path[".concat(o2, "]"), a2);
          }
          return n2;
        }
        var fs = /* @__PURE__ */ new WeakSet(), gs = function(e3) {
          A(n2, e3);
          var t3, r3 = qi(n2);
          function n2(e4, t4, o2, a2, i2, s2, u2, c2, l2) {
            var d2, p2, f2;
            h(this, n2), d2 = r3.call(this, t4, l2), function(e5, t5) {
              if (t5.has(e5)) throw new TypeError("Cannot initialize the same private elements twice on an object");
            }(p2 = v(d2), f2 = fs), f2.add(p2), w(v(d2), "publicKey", void 0), w(v(d2), "fingerprint", void 0), w(v(d2), "parentFingerprint", void 0), w(v(d2), "mnemonic", void 0), w(v(d2), "chainCode", void 0), w(v(d2), "path", void 0), w(v(d2), "index", void 0), w(v(d2), "depth", void 0), Fe(e4, ls, "HDNodeWallet"), be(v(d2), { publicKey: t4.compressedPublicKey });
            var g2 = Le(gi(vt(d2.publicKey)), 0, 4);
            return be(v(d2), { parentFingerprint: o2, fingerprint: g2, chainCode: a2, path: i2, index: s2, depth: u2 }), be(v(d2), { mnemonic: c2 }), d2;
          }
          return b(n2, [{ key: "connect", value: function(e4) {
            return new n2(ls, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, e4);
          } }, { key: "encrypt", value: (t3 = d(M.mark(function e4(t4, r4) {
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.next = 2, Qi(rs(this, fs, hs).call(this), t4, { progressCallback: r4 });
                case 2:
                  return e5.abrupt("return", e5.sent);
                case 3:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, r4) {
            return t3.apply(this, arguments);
          }) }, { key: "encryptSync", value: function(e4) {
            return Ki(rs(this, fs, hs).call(this), e4);
          } }, { key: "extendedKey", get: function() {
            return Ae(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" }), cs(Se(["0x0488ADE4", us(this.depth, 1), this.parentFingerprint, us(this.index, 4), this.chainCode, Se(["0x00", this.privateKey])]));
          } }, { key: "hasPath", value: function() {
            return null != this.path;
          } }, { key: "neuter", value: function() {
            return new bs(ls, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
          } }, { key: "deriveChild", value: function(e4) {
            var t4 = Ze(e4, "index");
            Pe(t4 <= 4294967295, "invalid index", "index", t4);
            var r4 = this.path;
            r4 && (r4 += "/" + (2147483647 & t4), t4 & is && (r4 += "'"));
            var o2 = ds(t4, this.chainCode, this.publicKey, this.privateKey), a2 = o2.IR, i2 = o2.IL, s2 = new Tr(Ke(($e(i2) + BigInt(this.privateKey)) % ss, 32));
            return new n2(ls, s2, this.fingerprint, ke(a2), r4, t4, this.depth + 1, this.mnemonic, this.provider);
          } }, { key: "derivePath", value: function(e4) {
            return ps(this, e4);
          } }], [{ key: "fromExtendedKey", value: function(e4) {
            var t4 = Qe(function(e5) {
              for (var t5 = Pi, r5 = 0; r5 < e5.length; r5++) t5 *= Wi, t5 += Ai(e5[r5]);
              return t5;
            }(e4));
            Pe(82 === t4.length || cs(t4.slice(0, 78)) === e4, "invalid extended key", "extendedKey", "[ REDACTED ]");
            var r4 = t4[4], o2 = ke(t4.slice(5, 9)), a2 = parseInt(ke(t4.slice(9, 13)).substring(2), 16), i2 = ke(t4.slice(13, 45)), s2 = t4.slice(45, 78);
            switch (ke(t4.slice(0, 4))) {
              case "0x0488b21e":
              case "0x043587cf":
                var u2 = ke(s2);
                return new bs(ls, vr(u2), u2, o2, i2, null, a2, r4, null);
              case "0x0488ade4":
              case "0x04358394 ":
                if (0 !== s2[0]) break;
                return new n2(ls, new Tr(s2.slice(1)), o2, i2, null, a2, r4, null, null);
            }
            Pe(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
          } }, { key: "createRandom", value: function(e4, t4, r4) {
            null == e4 && (e4 = ""), null == t4 && (t4 = os), null == r4 && (r4 = Qt.wordlist());
            var o2 = rr.fromEntropy(Ti(16), e4, r4);
            return ts(n2, n2, ys).call(n2, o2.computeSeed(), o2).derivePath(t4);
          } }, { key: "fromMnemonic", value: function(e4, t4) {
            return t4 || (t4 = os), ts(n2, n2, ys).call(n2, e4.computeSeed(), e4).derivePath(t4);
          } }, { key: "fromPhrase", value: function(e4, t4, r4, o2) {
            null == t4 && (t4 = ""), null == r4 && (r4 = os), null == o2 && (o2 = Qt.wordlist());
            var a2 = rr.fromPhrase(e4, t4, o2);
            return ts(n2, n2, ys).call(n2, a2.computeSeed(), a2).derivePath(r4);
          } }, { key: "fromSeed", value: function(e4) {
            return ts(n2, n2, ys).call(n2, e4, null);
          } }]), n2;
        }(ci);
        function hs() {
          var e3 = { address: this.address, privateKey: this.privateKey }, t3 = this.mnemonic;
          return this.path && t3 && "en" === t3.wordlist.locale && "" === t3.password && (e3.mnemonic = { path: this.path, locale: "en", entropy: t3.entropy }), e3;
        }
        function ys(e3, t3) {
          Pe(Re(e3), "invalid seed", "seed", "[REDACTED]");
          var r3 = Ie(e3, "seed");
          Pe(r3.length >= 16 && r3.length <= 64, "invalid seed", "seed", "[REDACTED]");
          var n2 = Ie(ir("sha512", as, r3)), o2 = new Tr(ke(n2.slice(0, 32)));
          return new gs(ls, o2, "0x00000000", ke(n2.slice(32)), "m", 0, 0, t3, null);
        }
        var bs = function(e3) {
          A(r3, e3);
          var t3 = qi(r3);
          function r3(e4, n2, o2, a2, i2, s2, u2, c2, l2) {
            var d2;
            h(this, r3), d2 = t3.call(this, n2, l2), w(v(d2), "publicKey", void 0), w(v(d2), "fingerprint", void 0), w(v(d2), "parentFingerprint", void 0), w(v(d2), "chainCode", void 0), w(v(d2), "path", void 0), w(v(d2), "index", void 0), w(v(d2), "depth", void 0), Fe(e4, ls, "HDNodeVoidWallet"), be(v(d2), { publicKey: o2 });
            var p2 = Le(gi(vt(o2)), 0, 4);
            return be(v(d2), { publicKey: o2, fingerprint: p2, parentFingerprint: a2, chainCode: i2, path: s2, index: u2, depth: c2 }), d2;
          }
          return b(r3, [{ key: "connect", value: function(e4) {
            return new r3(ls, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, e4);
          } }, { key: "extendedKey", get: function() {
            return Ae(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" }), cs(Se(["0x0488B21E", us(this.depth, 1), this.parentFingerprint, us(this.index, 4), this.chainCode, this.publicKey]));
          } }, { key: "hasPath", value: function() {
            return null != this.path;
          } }, { key: "deriveChild", value: function(e4) {
            var t4 = Ze(e4, "index");
            Pe(t4 <= 4294967295, "invalid index", "index", t4);
            var n2 = this.path;
            n2 && (n2 += "/" + (2147483647 & t4), t4 & is && (n2 += "'"));
            var o2 = ds(t4, this.chainCode, this.publicKey, null), a2 = o2.IR, i2 = o2.IL, s2 = Tr.addPoints(i2, this.publicKey, true), u2 = vr(s2);
            return new r3(ls, u2, s2, this.fingerprint, ke(a2), n2, t4, this.depth + 1, this.provider);
          } }, { key: "derivePath", value: function(e4) {
            return ps(this, e4);
          } }]), r3;
        }(ai);
        function Ts(e3) {
          try {
            if (JSON.parse(e3).encseed) return true;
          } catch (e4) {
          }
          return false;
        }
        function vs(e3, t3) {
          var r3 = JSON.parse(e3), n2 = xi(t3), o2 = hr(Ji(r3, "ethaddr:string!")), a2 = Di(Ji(r3, "encseed:string!"));
          Pe(a2 && a2.length % 16 == 0, "invalid encseed", "json", e3);
          for (var i2 = Ie(Bt(n2, n2, 2e3, 32, "sha256")).slice(0, 16), s2 = a2.slice(0, 16), u2 = a2.slice(16), c2 = new Bi.CBC(i2, s2), l2 = (0, Bi.pkcs7Strip)(Ie(c2.decrypt(u2))), d2 = "", p2 = 0; p2 < l2.length; p2++) d2 += String.fromCharCode(l2[p2]);
          return { address: o2, privateKey: St(d2) };
        }
        function ms() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (ms = function() {
            return !!e3;
          })();
        }
        function As(e3, t3, r3) {
          return function(e4, t4, r4) {
            if ("function" == typeof e4 ? e4 === t4 : e4.has(t4)) return arguments.length < 3 ? t4 : r4;
            throw new TypeError("Private element is not present on this object");
          }(t3, e3), r3;
        }
        function Ps(e3) {
          return new Promise(function(t3) {
            setTimeout(function() {
              t3();
            }, e3);
          });
        }
        var Ws = function(e3) {
          A(i2, e3);
          var t3, r3, n2, o2, a2 = (t3 = i2, r3 = ms(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function i2(e4, t4) {
            h(this, i2), "string" != typeof e4 || e4.startsWith("0x") || (e4 = "0x" + e4);
            var r4 = "string" == typeof e4 ? new Tr(e4) : e4;
            return a2.call(this, r4, t4);
          }
          return b(i2, [{ key: "connect", value: function(e4) {
            return new i2(this.signingKey, e4);
          } }, { key: "encrypt", value: (o2 = d(M.mark(function e4(t4, r4) {
            var n3;
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return n3 = { address: this.address, privateKey: this.privateKey }, e5.next = 3, Qi(n3, t4, { progressCallback: r4 });
                case 3:
                  return e5.abrupt("return", e5.sent);
                case 4:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4) {
            return o2.apply(this, arguments);
          }) }, { key: "encryptSync", value: function(e4) {
            return Ki({ address: this.address, privateKey: this.privateKey }, e4);
          } }], [{ key: "fromEncryptedJson", value: (n2 = d(M.mark(function e4(t4, r4, n3) {
            var o3;
            return M.wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (o3 = null, !zi(t4)) {
                    e5.next = 7;
                    break;
                  }
                  return e5.next = 4, Xi(t4, r4, n3);
                case 4:
                  o3 = e5.sent, e5.next = 17;
                  break;
                case 7:
                  if (!Ts(t4)) {
                    e5.next = 17;
                    break;
                  }
                  if (!n3) {
                    e5.next = 12;
                    break;
                  }
                  return n3(0), e5.next = 12, Ps(0);
                case 12:
                  if (o3 = vs(t4, r4), !n3) {
                    e5.next = 17;
                    break;
                  }
                  return n3(1), e5.next = 17, Ps(0);
                case 17:
                  return e5.abrupt("return", As(i2, i2, Bs).call(i2, o3));
                case 18:
                case "end":
                  return e5.stop();
              }
            }, e4);
          })), function(e4, t4, r4) {
            return n2.apply(this, arguments);
          }) }, { key: "fromEncryptedJsonSync", value: function(e4, t4) {
            var r4 = null;
            return zi(e4) ? r4 = function(e5, t5) {
              var r5 = JSON.parse(e5), n3 = xi(t5), o3 = ji(r5);
              return "pbkdf2" === o3.name ? Gi(r5, Bt(n3, o3.salt, o3.count, o3.dkLen, o3.algorithm)) : (Ae("scrypt" === o3.name, "cannot be reached", "UNKNOWN_ERROR", { params: o3 }), Gi(r5, Si(n3, o3.salt, o3.N, o3.r, o3.p, o3.dkLen)));
            }(e4, t4) : Ts(e4) ? r4 = vs(e4, t4) : Pe(false, "invalid JSON wallet", "json", "[ REDACTED ]"), As(i2, i2, Bs).call(i2, r4);
          } }, { key: "createRandom", value: function(e4) {
            var t4 = gs.createRandom();
            return e4 ? t4.connect(e4) : t4;
          } }, { key: "fromPhrase", value: function(e4, t4) {
            var r4 = gs.fromPhrase(e4);
            return t4 ? r4.connect(t4) : r4;
          } }]), i2;
        }(ci);
        function Bs(e3) {
          if (Pe(e3, "invalid JSON wallet", "json", "[ REDACTED ]"), "mnemonic" in e3 && e3.mnemonic && "en" === e3.mnemonic.locale) {
            var t3 = rr.fromEntropy(e3.mnemonic.entropy), r3 = gs.fromMnemonic(t3, e3.mnemonic.path);
            if (r3.address === e3.address && r3.privateKey === e3.privateKey) return r3;
            console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
          }
          var n2 = new Ws(e3.privateKey);
          return Pe(n2.address === e3.address, "address/privateKey mismatch", "json", "[ REDACTED ]"), n2;
        }
        function Cs() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Cs = function() {
            return !!e3;
          })();
        }
        var Fs = null, ws = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Cs(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2() {
            return h(this, o2), n2.call(this, "cz", "0itatkastcenaovo$taouleraeki&chor*teci%enbalodaeladet'!Chn=0Di#%E%^1Resa2Rese3CeT'#0EjKohol0Pu)%0A&sDul#Ekdo)Ke)Ti#Ul|3}aOgan%0FaltI$@tPi,%TmaTronom0LasL{i#Ol0Tobus4Yl:B#}<CilCul#D!_Ge)GrHnoKterieLa^L{#LkonLon-LvanLzaMbusNkom!R[rR{RmanRokoRvaTer#TohVl&Zal#Zili#Zu#3D&RanSe^StieTonZin#ZmocZ)k3CyklD]Ft-KinyLan%Og,fO]gTvaZon2AhobytAt*/E/aEdu+EskIk!Iz&Ok|Oud Ud2B-BrDl.D~H!(JkotJ|K<ysLe$R>R'?TaUb_U/!U^U+Ur!Xer2A^v#Ambo,An#AtrEp)Ike)KoLohOnzOskevUn{#Usin#Z^Zy2Bl.Bn|})D _D#D'aF{Jar(Kv?LdokLvaN^NkrRzaTikVolZola3D+tL.T'#0Ukot:PartRev&3DrDu+J/JnLaLerLkemLn?N.Nn(N'#NtrumNz<StopisT#2AlupaAp`]Ar aA)E/t!EmieI/otIrurgL`Le[Lub M_Mu,ObotO/olOd[O+,Om=Op Oro[OvRapotRl RtRupTiv(Ud.Utn!V!Vil#V(Y[Y$!Yt 0Bu+Gare)H_&HlaNkotRkusSter&Ta%TrusZin>Z(2O&2KolivUv!4It_N(0Dn(Ke)KrPot0Ak~AlIkRkot2Kli$a:L-oRe[T_Tum1E,1B!a}'#Cib_Fic Fla%KlKr{Mokr!PreseRbyS#T-tiv3Kob,zKt|O^P]mSkSp+jV`]Vo/2AhaOuhoUhopis1Es0BroByt-C@t}ut DnesH+dHo^H,JemJn?Kl`KolaKt<Kum@tLarLevaL.MaM.ntMluv M'Nut P`PisPln PosudPr'odPu$ Raz R(RtSahSl'St!-SudSy)TazT-Tk~Uf!Utn!Voz%Z`uZn!Z<%2Aho)AkAm!ikAv>AzeDolObn(OgerieOzdSn(T Z(2B@}'noD-HaH'#S SnoT(0Oj?Or>2Nam :9O]gOnomie0EktronIpsa0AilIseO%P!ie2Izo^O/aOpejOs2EjEn%K<)Kymo0Ike)0F<ie0Olu%1Eku%KurzePed?P]zeP<tT,kt:C#Jf#Kul)N!ikN)zieRmacieV< Zo+3De,%J{onN#3Al#Gu,ntLozofLtrNan%N)Xa%0Ord1An_IrtOtila2NdSf<T[lT#Ton2Ak%Es#On)2KarNk%3Zi#:LejeRant3N{i#O]g3Lot.2Azu,Ejt2LemLfi$aTi#2AfAmofonAnu+EpIlOgOtes#2Ma:D?DrLaL@#N[NopisRfaRpu&V,n3Bk(J#lJnoJtmanK)rLmaM!omR>R&S]Zky3St<ik2Ad'#AsivkyAvaEd!EnO^v>OhOup(T!Ub.U/o)0AtO)Yz0IsOjivoOut0Bl.Boj}DinyDl!Dno)D|Jn(KejLin#L#LubMo+N [No,%RalR^RizontRkoRliv>RmonRn.RoskopR$voSpo^St.T'(U[UfUp!Us#V<2Ad[An?Av(Az^Bo+kD.D]D(N-Ob#Oma^OtOu^Oz@St#Ub(Yz!2B@(B~D[KotMrS aSto)0Ozd2Bn(D,ntGie&M&Sterik:2Yl#3Ned2O&0Uze0Un a0F-%Fla%KasoOva%Sp-%Tern{Vali^Ve$<Zer%3Onie:Blko})Ho^Kmi+K(L'>N)rRmarkRoSanSnoT#V<Zyk3Din>D+Dn!_HlanKotL@L oMn(NomP?S{erV Zd>Zero3NakNdyNo/Sk,Sto)Trn?Zva3En|1Gurt5R):Bar{B_Bin{}&D{Did]HanJakJu)KaoKtusLam aLhotyLibrLn(Me,MkolivM&Ni[lNoeNt<Pal.P_aP olaP#P+Po)PrPu$aPy[,Ram_Rot#RtonSaTa]gTed,U%UzaVa+cZaj#Ze)Ziv(2EkolivEsi0Dlub@MpRami#3No2A%kAdivoAmApotAsi#AunEcEn[Ep!Es~IdImaIs&Ob*kO#nOpaOubUb'&Us!Uzk(0EnIt!Otr0IhaOt0Al?Ber>B#BlihaBylaC*rH=J@>KosKtejlLapsLe^LizeLoMandoMe)MikMn!aMo,MpasMun aN!N%ptNd?N>NfeseNgresN.NkursN)ktNzervaPan>PieP~Pr'#Rb_R-t<Rmid]RoptevRpusRu&RytoRz{S!>St#T_T+)T*lUk!Up_&Us-Uz]VbojZaZ<oh2Ab?A/Aj.Al|AsopisAv!aEd EjcarEs[Eve)Ik{ItikIzeKav>Me+cMivoOcanOkOni#Op OupaOv#T-Uh`]Up?Ut(Vin#Y/+Yp)Y$alYt2Dlan#FrJn(KlaLaj^Li/L#Lom{Ltu,NaPodivuRtRz<Til0Al aAsin#E$<2No]gS_.Ta,T?T#T'>V`]:B,d<})nDn(IkKom>M_aMpaN'#S?SoStu,Tin#V.3B#CkdyD@Dn?D'#Dv.G@^GieG,%H%Hk(H~KtvarNo/odNtil#P@#Pid]T`]T>TmoTokruhVhartV a%Vobok3B,}ot#DojedDsk(H'.Jav>L-M{#NieN#No+umStop`T.T|5Bi$aDivodGi#GopedKal aK{Mc|P!aPu/RdSosTrU^lUhU#Usk!V>3Tiv(1Cer&CiferMpSkSt,%0I%2RaRi#S.:DamD]Gi$rHagonJ{-J _J< aKakK'?Kr_aL[L.L|Lv?Min#Nd+NkoRn(SakrSkotSopu$T?Tri#Tur aZan>ZivoZl Zur#2Lo[0}anikD a%D'.LasaL*nNtol#TlaTo^TrZe,3G,%H~Hu+K.KrofonL@>Lim{rL(Mi#Nc'&Ni[rNom{Nul(S#StrX|2Ad(HaH'.OkS!Uv 1I/Ohem0BilCn(D_#Dl [HylaKroL-ulaM@t#Nar/aNoklN$rumNt|NzunSazSkytStTiva%T<#Ty#U/aUdr(Zai#Z-Zol2Am<Av@>KevTvolaZ{Zut(0T _1DrcF]nL!MieN?S{Ta%ZeumZi#nt3Sliv>0Da:B*r!}yt!Da%Dbyt-DhozDobroDpisHlasHn!Hodi+H,d Iv aJedn*Ji$oJm=K]n Kon>Krm LevoMaz!Mluv Nom{rOkoOpakO$roP`!PevnoPln P~Pos+dPr(oRod RubyRy/]S` S-!S+poSt!TolikV@-Vr/Vzd<yZv!3Be}!CkyDa+koDb!DuhGa%H{Ho^J@JprveKlidLib(Mil(MocO/o)On#PokojR(RvSmyslS*l`Tv<UronV.Zvyk+3Co)JakKamKdyKlKte,kTro5C+hHav?M.%RaR-S _Sn(UzeVinyVo)Zd,5DaD+G{T Tn(Trie3Mfa:0AlArv AvaDivEcEhn!Ejm=Ez aHajo[Iln?Jasn J-tK]p La$L-Li[LohaLu^NosOh! Oj-OutRaz>R&Ru[RysSahSluhaS)r!UvVazVin VodVyk+Yv!_Z<0AsElEn Hl` Ho)H,&It~0BojByt}odCiz Ebr!Esl!Evzd!EzvaH`%Hod J{JinudKazK*p LivLu#Ml#Oln(P`PisPl=P<Pu$ Pyk!Raz#S*d StupSunTokTudVahaVe)Vol!V,%tZ&k1I&Sajd1LasNiskoRa^Roz Ryz-2ApEn?Li#NoOuzl OvyRasaResRs-RuhUpantUr#Us 0Ejn.Iz|0AkE+)Ez L`.L*v!LuvaYl0Ehdy1Ak|As-E,%I%Il(Is|O,Oz?RavduRoti1B al}e$rGieL?LojT_0A^}~I#IvoLavaLep Ln L' N'aO[Ol Pa+cT@T,haTu^Ty/Voj 0Epl IskOpRh!Rl(RokRubyV<1A~ArEsLivn O%1Id1Do[:}!_Ci@tD*/H<-KtLan^L>LivoLu[Mf+tMls-N@#Ni#N&N|N$voNtof+Pri#Rke)RodieR)Ru#Ry[Se#Siv aSt_#T@tTro&V*kZnehtZ*r-3C#DagogJs-K]LotonNal)Ndr-NzeRiskopRoStr(Tar^T?Tro+jVn.Xeso3Ani$aHaJav?K+KnikL.Ln(Lul#Nze)Pe)S!_Sto+Tev&Vn?V'ar2A%n)Ak!Am@Ane)A$i#At Avid]AzE/Em@oEn)EsEtivoEv_Iv!N NoO/aOd.Om[OutUkYn2Bav Byt}odC Ctiv>D!D%n Deps!Dh+dDiv Dkl`Dman DnikDo[Dpo,D,zD$!aDvodDzimEzieHan#Hnut#H'<HromaHybIn)Ji$#Jm=Kaz K+sKojKrokKu)KynLedneLib-Lk~LohaLynomMaluMi~Ml#MocM$aMys+tNe/!N<#Nur(P`!P_Pis-Pla/Pros Ps!PudR`%R%RodRu/aRyvS` SedSilaSkokSlan>S*d SpoluS)vaSud-SypTahT#nT+skTom-T,vaTupaTvo,U#zUtoUzdroVahaVidlaVlakVozVr/V$!VykVzde/Zd,vZem-Zn!-Z<Zv!2Ac|Ah<yAkti#A+sAot>Ap<-AseAv^IncipKnoObud O%ntoOdejOfeseOh,Oj-tO]m Omi+Onik!Op`OrokOs[OtonOut-OvazS#v#St@Udk(UtV-Voh<y0An>OvodTruh0Actvo0Ber)}DlKav>Kl.Kr+LtMpaNcP@SaSin#St.T|Ty#3Rami^SkT_::C-}otDia%Dn?DonFtGbyKe)K'.M@oMp*/NdeRa/R aS'&StrTo+$Zan%Zid]3Ag|Ak%CeptDakt<Fer@tF+xJnokKlamaK<dKrutKt<Pu)%VizeVmaVolverZerva3Sk|Ziko5Boti#Dokm@H'#K+KokoMan{oP'odPu/aRejsSolStl.Tmi$rTopedTun^Ub@#U/oUpU,V.Vn?Zb<Z/odZd!Zezn!Zhod%Zin#ZjezdZ#zZ]haZmarZp`Zru/ZsahZtokZumZvod5Bri#}`]Kav?Kopis3BaBol'}l(D]P`]T.Z(:Di$aH!KoM>Mizd!Mo)N #Rdin#San#T_ Z[Z@?0Or0H|1B,n#CeseD`]Dim@tD]Hn!Jm=Ke,K)Kun^KvojeM@oNoRvisS` Sho,SkokSl!St,SuvSyp!T[T.Tk!T~Trv!VerZ&m2O^R~0FonLn?R#Rot-RupTua%1AfandrAliskoAnz@AutEptikIcaL`[L@?LoLuzO[O#nOroRip)RzUp.V(Vr&0Abi#Adid]An.A$Avn(Ed|Ep>EvaEz.IbI&Izn?OnOup-OvoU/UhaUn%Up#Za0A,gdE)&Il$voL*vaOgR`RkRt#Ut-Ysl0AdAhaOb0Bo)}aD'#KolP#TvaUbojUc Ud%UhlasUl`Um,kUp,vaUsedUtokUvis{0Al'&As _IsLavOd-Oj@>OluOnz<Orn(Ou$aR/aU$ 1An^AzD%NaN>Ovn!P@StUb1An?Ar(aAti#Av[EhnoEz#OdolaO+kOpaOrnoOup!Ra/ResRh~RomRu&Ud&Upn?VolYk0Bj-tBtropy}arD(KnoNd!N=Rik!aR'.0AhAl$voEtrAt[Az-Is+It-Obo^Odid]Or#Rab2Kav#KotN-N'>P!Pk(R'(S_T(:B+t#Bu+H*nJemnoJfunJgaJ Jn(Kti#Mh+MponNc|N>NkerPe)V@.Z!_3}ni#HdyKut.LefonMno)Nd@%Ni$aN<P])P&PrveRapieRmos#Xtil3}oSkopisTu+k1Ad+cAn.0Ap#Esk!UkotUpa0El1A+)Pin#PolRzoUhaU+c2Ad?Akt<AmpAsaAverzaEf E$Ez<Hav.Hl.O/uOj?Os#Ou[P%P _Pk(Ub>U/l Uhl?UsV!2DyH~H(Nd,Ri$aR&jZemsko0ArohOr[Rd(Rz2GrKev:0Oh(OzeR!R*s-RusYt'&0HoTiv(0Iv 3R` 1Edn!I$ M=0Az!_Lidn Lon Otv Roj 0I%I)Ov 0Yv`]0Av If<maIk~1Ad~L!n Ly~Out!Rav 1AnAz 0Ed~Il|Mrt N`n N=Oud Tl!Tr~0Ah|K!Lum O~Op@>R*s 1Al Oln Oz'#3D,v ElEn.L.N!:GonL/aL*nNaN^lNil#RanRhanyR|1ElkuHod0Ova0DroGe)%J%Lbl*dL{rhL _LmocLry[Nk'Ran^RzeS_#SkrzeSn?SpoduS)Ter.Ver#3B,%}rDeoh,D.D+LaN?S{Tal aZeZ #0Ezd0L`Us0Aj#AkAs>EvoHk(IvN'#Oup!1Uc|Uk0DaDiv(Doz&kD$voJ@skyJ&JskoLantL[L LnoSk'#Zid]Z'&0Ravo1Ab>A%tAhA)Ba}o+kH!StvaTu+0Ad T*p Tup0Ip4Bav Br!}|D!D,Fot H+d!H~Hod H,d Hub Jasn J{Jm=K]p Kon!L-!Maz!Mez Miz{Mys+tNe/!Nik!Nut P`!Pl! P,v Pu$ Raz R'n!Rv!Sl' SokoS)v Su~Syp!Tas Tes!Tr! Vi~Vol!Vrh_Zdob Zn!0AduBud }op D<Du/Dy/!E$upH+demKazLyk!NikOr-P*,TahT-::993Lofon::Br!Byd+t}|DarmoDus F*k!Hlt Hod H,^Hy~J!>J{Ji$ K+p!K*p Lep Mez Mot!Mys+tNe/!Nik!Pl! Poj Ps!Raz S)v Su~Taj Temn Tk~Ujm=Val Ve+tVin Vol!Vrt!Zvon 0Av RusuUd|Yt-1A+#ArmaAtn(IvoOb RojVihYm`]0L@.ManM.Pt!Z`uZdola2At Lt~Lubo#Ot' Ru[0MaMn?0Emn 0Lam!Oum!R!#Umav#0AtoEh#O[OmO$Ozvyk0Ap|ArAt-IjeIz{Ocn Odr!Rzl.Ut|0AkAl(Am@!Ovu0B,z Tav Ub-Ufa+0Lod Omal RavaR( Rud#Rvu1A^An C`]N (NoOv&Y/l Zav(1I/aR! 0B'.Br0Ed~EnkuEs_aOnR!Uk'odYk", "0x25f44555f4af25b51a711136e1c7d6e50ce9f8917d39d6b1f076b2bb4d2fac1a");
          }
          return b(o2, null, [{ key: "wordlist", value: function() {
            return null == Fs && (Fs = new o2()), Fs;
          } }]), o2;
        }(Ht);
        function Is() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Is = function() {
            return !!e3;
          })();
        }
        var Ms = /* @__PURE__ */ new WeakMap(), Es = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Is(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4, t4, r4, a2) {
            var i2;
            return h(this, o2), i2 = n2.call(this, e4, t4, a2), function(e5, t5, r5) {
              (function(e6, t6) {
                if (t6.has(e6)) throw new TypeError("Cannot initialize the same private elements twice on an object");
              })(e5, t5), t5.set(e5, r5);
            }(v(i2), Ms, { writable: true, value: void 0 }), ue(v(i2), Ms, r4), i2;
          }
          return b(o2, [{ key: "_accent", get: function() {
            return le(this, Ms);
          } }, { key: "_decodeWords", value: function() {
            return function(e4, t4) {
              var r4 = Dt(e4).join(",");
              return t4.split(/,/g).forEach(function(e5) {
                var n3 = e5.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
                Pe(null !== n3, "internal error parsing accents", "accents", t4);
                var o3 = 0, a2 = function(e6, t5) {
                  for (var r5 = (1 << e6) - 1, n4 = [], o4 = 0, a3 = 0, i3 = 0, s3 = 0; s3 < t5.length; s3++) for (o4 = o4 << 6 | ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".indexOf(t5[s3]), a3 += 6; a3 >= e6; ) {
                    var u2 = o4 >> a3 - e6;
                    o4 &= (1 << a3 - e6) - 1, a3 -= e6, 0 === u2 ? i3 += r5 : (n4.push(u2 + i3), i3 = 0);
                  }
                  return n4;
                }(parseInt(n3[3]), n3[4]), i2 = parseInt(n3[2]), s2 = new RegExp("([".concat(n3[1], "])"), "g");
                r4 = r4.replace(s2, function(e6, t5) {
                  return 0 == --a2[o3] && (t5 = String.fromCharCode(t5.charCodeAt(0), i2), o3++), t5;
                });
              }), r4.split(",");
            }(this._data, this._accent);
          } }]), o2;
        }(Ht);
        function Rs() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Rs = function() {
            return !!e3;
          })();
        }
        var Os = null, ks = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Rs(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2() {
            return h(this, o2), n2.call(this, "es", "0arertoiotadonoaRteirroenaNonaLsolocoiliaralaorrenadaChoN$n0A>Dom,EjaI!#Oga&O'Or#RazoR*Ue=U<0Ab Adem@Ce<C~Ei)ElgaEn#Ept I&L  NeOg!O<TivoToTrizTu Ud*U!&Us 0Ic#Mit*Opt Or'Ua`Ul#0Reo0Ect Ic~In Irm 0IlIt On@Os#Ot Reg R$UaU&U?aUja0OgoOr+0ReSl 0Ed_zE'Us)1Ac[nAmb_ArmaBaBumCaldeDeaEg_Ej Er%E%F?!GaGo&nIa&I,#Iv$MaMejaMib T TezaTivoToTu[Um'Z 0AbleAn)Apo]ArgoAs B Bi#E'IgoIs%dOrP oPl$0|oC@'C]D D,Em@Gu=Il=ImoIsOt T,aTiguoTojoUalUl Unc$Ad*EjoO1Ag A[#Eti#IoLic O&Or)OyoR,d!Rob Ues%U+1A&A`ArBit+BolBus#|ivoCoD!D?]DuoEaI&IesM.i-esOmaPaP.Reg=RozRugaTeTis%0AA&Al#C,<Egur EoE<rI,#I=Ist*NoOmb+P!oT?]T+Tu#Um*Un#0AjoAqueArEn#EoI>Le%OmoRa!RozUn0DazD$GeLaM,#S,)T^0AlAnceA+EEl]`E`EstruzI.I<2ErU{U'0Af[nArO)Uc Uf_Ul:BaB^|eH@IleJ Lanz/c.LdeMbuN>Nd-oRb(>RnizR+Scu]S#nSu[Tal]T!@T*Tu%UlZ 3BeBid/=S SoSt@3|oEnNgo2An>OqueUsa2ABi`BoCaCi`DaDegaIn//!oLsaMb-{dNi#N}saiRdeRr SqueTeTinVe{Zal2AvoAzoEchaEveIl=In>IsaOcaOmaOnceO)UjaUs>U#2CeoCleE'EyFan{F.HoIt_L#Rbuj(l(+Sc TacaZ.:Bal=BezaBi`B[CaoDav!D,aErFeI{ImanJaJ.LLam Lc$L&Li{dLleLm/^LvoMaMb$Mel=Mi'Mp}c!Nd?Nel-gu+Nic-#N-.ObaOsPazPi%nPo)Pt Puch((b.RcelRe%Rg(i'RneRpe%R+R%SaS>S!oSpaS#rT^ceT_U{lUsaZo3Bol]D!D+Ld/eb_Lo<Lu]M,#Niz-t+Rc(&Rez(oRr R)zaSpedT+2AcalAle>AmpuAnc]ApaAr]I>Is)IvoOqueOzaUle%Up 0Cl.EgoE=EnEr#F[G +M->NeN%P_sR>Rue]SneTaU{d2Am^AnA+AseAveI,)ImaInica2B_Cc~|i'Ci`CoDigoDoF_G!He)JinJoL/ch/eg$Lg Lin/l LmoLum`Mba)M!Mi{Mo&Mpr-deNej}g-oc!Nsej}t PaPi(az.Rba%RchoR&nR.(r!S!SmosS%2AneoAt!E Ec!Ei&EmaIaIm,Ip%IsisOmoOnicaOque%U&Uz2Ad+Ar#At+BoBr*| aEl=En#Er{Es%EvaId Lebr/p/#Mb_Mpl*N-e%O%P.Pul( R$<R<RvaTis:M-z(R&T?3B!B?Ca{C*DoF,saFin*J LfinLga&Li#M^-<N%lP^)RechoR+%Sayu'SeoSf?eSnu&Sti'Sv$TalleT,!U{3AAb=AdemaAman)A`Ar$BujoCt En)E%EzFic?G'Lem/u*N!oRec#Rig*S>Se'Sf[zVaVi'5BleCeL^Ming}N Ra&Rm*R<SSis2Ag.Oga2|aDaE=E'LceOQueR Rez(o:0A'R$0H OUa&r0AdIc~Ific$I#rUc 1Ec#Icaz3EEmp=1Efan)Eg*Em,#Ev IpseI)Ix*Og$Ud*0Bu&It*Oc~Pa)Pe'PleoP_sa0A'C go|ufeC@EmigoE+Fa&F!moGa'Igm/aceOrmeRe&SayoS, T!oTr VaseV$1Oca0Uipo0Izo0Ca]C,aCol Crib*Cu&Enc@F!aFu!zoPa{PejoP@PosaPumaQuiT TeTi=Tufa0ApaEr'Ic-@1Ad*Alu En#It 1Ac#Am,Ce<CusaEn#Ig*Il$Ist*I#P!#Plic P.!T_mo:BricaBu]|a{C?C#rE`J/d/=L<Lt MaM?@Mo<Ra.Rmaci(olRsaSeTigaU`V^X3Br!o|/izORi(ozRt?Rv^Stin3AbleAnzaArB[Cc~|aDeoEb_ElE[Es%Gu[J JoL/e)L@lLt+NNc-g*Ni#Rma2A>Au%EchaOrO%U*UjoU^2B@CaGa%G.L$Lle#N&Rm(+Rtun(z SaTo2Aca<Ag?AnjaAseAudeE*E'EsaIoI#U%2EgoEn)ErzaGaM Nc~Nd(g.R@S?TbolTu+:Ce]FasI%JoL/!i/=Mb- Nch}g-<RajeRzaSoli`St ToV?an3Me=M*NN!}$N)Ran$R,)Rm,S#3Gan)M`s$R Ro2Aci OboOr@2LLfoLo<LpeM(&R?([TaTeoZ 2A{Afi>A'AsaAtisAveIe%Il=IpeIsI#O<rUaUe<UmoUpo2An)ApoArd@Er[IaI'I.I<It [Sa'St :B!B?Bl C!|aD/l Mac(i`ZZa`3B?]B[|oLa&L$Mbr(*Rma'RoeRv*3E=Er+Ga&Gi,eJoM'S#r@5Ci>G Gu!aJaMb_Ng}^Nr((mig('St?Yo5E>ElgaEr%E<EvoI{IrMa'Me&M?deM}d*RacanR#:1O'0EalIomaO=2Lesi/uUal4EgalUs~0Ag,AnIt P P!$P.!Pul<0CapazDiceEr)FielF^meG,$Ic$M,<MuneNa#Sec#S%n)T!esTimoTu*Ut?Vi!'3AIsOn@0L/o):BaliB.M.RabeRdinR[U]Zmin3FeRinga3Ne)5R`d(obaV,Ya5ErgaEvesEzGa&rGoGue)Ic$N>Ngl-$Nt Pit!R S#V,?Zg :7Lo5A]:B$C$C[DoD+nG #GrimaGu`I>M!Mi`Mp --ch-gos%NzaPizRgoRvaStimaTaTexT*U_lV Zo3AlCc~|eC#rErG~Gumb_Ja'Ngu-#NaOnOp &S~TalT[VeY,{3B!%dB+C^D!Di EnzoGaG!oMaMi)M.Mp$NceN&Ne-go)N}t!`Qui&SoS%T!aT$T+2AgaAmaAn#AveEg En Ev Or Ov!Uv@2BoC~CoCu[GicaG+MbrizM}jaTe5|aC*G J}-esPaSt+ToZ:Ce%|oD!aD_Du+Est+F@G@GoIzL{dLe%Ll/oMaMboMutN>N&Nej Ng-iquiNj N}<N%Na`PaQuin(R>Re(f?Rg,Ri&RmolR+nR)sRzoSaSc aSivoT T!@TizTrizXimoY^Z^ca3|aDal]D$Du]J?]J^L,/.M^i-^NsajeN)NuRca&R,gueRi#SS.TaT!To&T+Zc]3E&ElEmb+G/Lag+Lit Ll.M}-!}im}u#OpeR SaS!@S?SmoTadTo5|?aC~DaDe=HoJ LdeL!Li'M,#Mi- c-ed-j-#NoRad(d!Re'R*R+Rs(%lScaStr TivoV!V?Zo5|oD EbleE]Er)Est[G_J!L/e%L%N&Nec(alRoScu=SeoSgoSicaS=:C C~D IpeRanj(izRr SalTalTivoTu[lUseaValVeVi{d3C$Ct G Goc$G+OnRv$ToUt+V V!a3|oDoEb]E#NezNoTi&Vel5Bleza|eMin(i(m()TaTic@Va#Ve]V$5BeCaCleoD?=DoE[EveEzLoM!oTr@:Sis0E<IspoJe#R(!oS!v T,!V$0AA<Ea'H,%HoIoReTavoTub_Ul#Up Urr*0I IoIsea0S)0EnsaEr%Ic$Rec!0Ro1DoR0O1AEa{Fa#IvoLaMoOrVi&0Bligo0DaZa1A>C~E[In On!T TicaUes#1Ac~A&rAlBi%CaD,EjaGa'G@Gul=I,)Ig,Il]OQues%Uga0Ad@Cu+Ez'OT[0O'Ro1EjaU=1I&Ige'0En)0O':C#D_El]Gi`GoIsJ oLabr/>Le%Li&Lm/om/p NNalNi>Nt!-ue=PaPelP?]Que)R Rcel(edR*RoRpa&RqueR[foR)S SeoS~SoS%TaT$Tr@UsaU%VoYa<3A#nCa&C!a|oDalD*G IneL L{'Le/ig+LlejoLoLuc--s N.OnOrPi'Que'R(ch(d!Rez(f?Ri>Rl(mi<R+Rs.aSaScaSimoS%`Ta=T+leoZZu`3C |.EEd[Er`EzaJam/ Lo#Mi,%N}#rNz-aOjoP(a%S Sci`SoS%T.Zca2AcaAnA%AyaAzaEi#E'OmoUmaU[l2B_CoD!D$EmaEs@E%L,Lici/=LvoMa{Me=MoMp-!Rc~R%lSa{Se!SibleS)T,c@T+Zo2A&E>zEgun%Em$EnsaE<Ev$ImoIncipeIs~Iv OaOb Oce<Oduc#OezaOfe<rOg[maOleOmesaOn#Op$OximoUeba2Bli>|!oD^Eb=Er%Es#Lg/*Lm.LpoL<M-#NalNoPaP?(e:99Ed EjaEm Er!E<Ie#ImicaInceIt :Ba'B@BoC~DicalIzMaMp-ch}goPazPi&P#SgoSpaToYoZaZ.3Acc~Ali{dBa'Bo)Ca!Ce%|azoCog!C_oC#Cur<DD.&Duc*FlejoF^maF[nFug$Ga=G*G]G_<H,I'IrJ/a#LevoLieveLle'LojM Med$M}>rNd*N%P #Pet*Po<Pt?SSca)Si`Spe#S#Sum,T*oT^'T[#Un*VesVis%YZ 3CoEgoEn{EsgoFaGi&G^Nc.N.OQuezaSaTmoToZo5BleCeCi D DeoD?]ErJizoJoM!oMp!NN>N{PaP!oSaScaSt+T 5BiB^DoE{G*I&In/e%LoMboM^Ptu[TaTi`:Ba&B!B$BleC GazG[&L/&L!oL*Lm.L.Ls/#LudLv Mb-c~Ndi-e Ng_Ni{dN}#PoQueRdin()nSt_TanU`Xof.3Cc~CoC_#C%DGu*IsL=LvaMa`M?l-d-<rNalN^P  P@Qui(RieRm.Rv*S,%S~TaT,%V!oXoX#3D[Es%E)G=G'Lab/b L,c$L]Mbo=M$R,aS)maT$Tu 5B_C$D$LLap/{&Le{dLi&Lt Luc~Mbr-de}i&No+NrisaPaPl P^)R&Rp_s()oS)nTa'5AveB*Ce<D^Eg[E=E'Er)Fr*Je#L%nM P! Pl*P.!P_moRR>Re'Rg*S#T?:Ba>BiqueB]BuCoC#JoL L>L,#Ll/.Ma'Mb^Ng}quePaPe)P@P.Qu?l(deRe(if(je%RotR+R%TuajeU+ZaZ.3At+|oC]CnicaJa&J!Ji&L/efo'MaM^Mp=NazNd!N!NisN<Ori(api(>Rmi'Rnur(+rSisSo+StigoT!aX#Z3B$Bu+nEmpoEn{Er[E<G_J!/deMb_Mi&M}%OPi>PoR(.TanT!eTu=Za5Al]B?=C Ci'DoG/&M N}#P PeQueRaxR!oRm,%RneoRoRpe&R_R<RtugaSS>S!Xi>2AbajoAc#rA!Afi>AgoAjeAmoAnceA#AumaAz EbolEguaEin%EnEp EsIbuIgoIpaIs)IunfoOfeoOmpaOn>OpaO)OzoU>Ue'Ufa2B!@BoEr#MbaM^NelNic(bin(ismoR'T^:0Ic 9C!a0B[l0I{dIrIv!<OT A3Ba'BeG,)Na0ArU $0IlOp@1A:CaC$Cu`G GoI`J?l/eLi&LleL^Lvu]Mp*oR(i R.So3Ci'C#rHicu=In)JezL/!oLozN-c!Nd-e'Ng N*N%NusRRa'RboRdeRed(j(<Rt!3AAjeBr C$CtimaDaDeoDr$EjoErnesG^LLl-ag_N}e&OlinRalRgoRtudS^Sp!aS%Tami`U&VazV!oV*Vo5LcanLum,Lv!RazT ToZ5E=Lg :::C!Te3GuaM('So9DoGaGur:F*}jaPa#Rza93N(+5MoR&", "aeiou7695@@BZWWavwUJkO@Y-Kn))YEGq#E@O)cI@#ZkMHv$e*))M!!)D**$GW!oKm*Acoh^k&It-pi^SYW)$^n!G)bO!Wkzam(jS#X)Og*^l^RW!bQ#QygBKXfzE))hti!Qm)Cng%%c)mJiI*HJWbmYniCLwNdYyY%WKO^bnT$PuGOr!IvHu&G(GKbtBuhiW&!eO@XMeoYQeCa#!MrTJCq!OW&CHG(WCcW%%)$rfrIegu$)w!G)JGmWWw)MnD%SXXWIT^LWAZuVWB^W)eTL^x&$WGHW(nKWEMA)#$F$x$Waekqs,n7715)W*HM-$WAcCiu(a))VCZ)GG%(*CWWdW%$D!UCO$M", "0xf74fb7092aeacdfbf8959557de22098da512207fb9f109cb526994938cf40300");
          }
          return b(o2, null, [{ key: "wordlist", value: function() {
            return null == Os && (Os = new o2()), Os;
          } }]), o2;
        }(Es);
        function Ss() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Ss = function() {
            return !!e3;
          })();
        }
        var Ns = null, Ls = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Ss(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2() {
            return h(this, o2), n2.call(this, "fr", "0erreleontiteurinueiriet cegeanseali medenel q)eniluxaus ch0Ais}And$Diqu E`#Ol*Ord Ou%rOy RasifReuv Ri,Rog RuptS_-SoluS'@UsifYss=0A@m+AjouAr+nCab]Cep,Clam Cola@Cro~eCu}ErbeHatHe,Idu]I Omp&Qu *R$y?Te'TifT)l0Ep&EquatHesifJec%fJug Mett!M* Op,Or Ouc*Res<RoitUl&V be0R R$ef0Fai!Fec,Fi~eF!{Fub]0Ac Enc I#I,Raf Reab#Ru?1D Gu`#L>Mab#S/-0Ou,Us,1Arm Chim+Er&Geb!G)I_ I?ntLeg Lia.Lou Lum O'd*PagaTes<Veo#0A&'BiguB!Enag Ertu?Id$Ir=Orc O'Ovib#Phib+P#'Us/t0Aly<Apho!Ar~+Atom+C+nE/%rG#Gois<Gu#{Im=Nex N$-N)lOd(Om=+Ony?Orm=T_[Tido&X+{1Ai}Eri%fL/*Olog+Pa!`Pe]Por,Puy 0UariumUeduc0Bit!Bus&De'Doi<G_tLequ(Matu!Me?ntMoi!Mu!P_,Ra~ Riv Ro}S_icT +lTic#0PectPh=&P* S|tS v*S+t&Soc>S' TicotT!Tu-0El>O?RiumRo-Ta^T_%fT* Trap 0Ba(eB .Da-Dib#G' Ro!Tom[Tru~e0A]Anc Ari-En*Er<Eug#Ia&'I@I$I}O(eOu R`1I=Io?:D.Fou Ga.G)t&Igna@L/c Lc$Le(eLisa.Mb(Ncai!Nda.Nl+)Nn>eNqu>Rb>R`R$R^Rra.Ss(S%$Ta`#Te|T,+Udr>Vard 3Let&L>Lo&Nefi-R-|Rg Rl(eRmudaSa-Sog[Ta`Ur!3B $Cyc#Du#JouL/L(g)LlardNai!Olog+Ops+OtypeScuitS$Sto'iTu?Zar!2AfardAg)An~*Ess/tInd OndOqu Ous$2BardB(eI!I}Li@Nb$Nd*Nhe'Nif>NusRdu!R[T&Uc#Ue{Ug+Ul$Uqu(Ur<Usso#U%^Xe'2An~eAs>AveEbisE~eEuva.Ico]Iga@Ill/tIo~eI^O~u!Od Onz Ous<Oye'U?Us^Ut=Uy/t2Ff#Iss$L#%nRe|R(S% T( To*Vab#Vet&:B/$B(eChet&De|D!Fe(eIllouIss$Lcu]Lep(Lib!Lm Lomn+Lvai!Mara@M aMi$Mpag[N=Net$N$N%[NularPab#Por=Pri-Psu#P,Pu~eRab(eRb$eRes}RibouRna.Rot&R!|Rt$Sca@S>S^Ssu!U}U%$V=>V [Viar3D`#Intu!Les&Llu#Ndr>Ns' Ntr=Rc#Rebr=Ri<Rn Rve|S}2Agr(Ai<A#'Amb!An-Apit!Arb$As<'At$Auss$Av* Emi<En`#Equ>Er~ Ev=I_Iff!Ign$Im eIotLoru!OcolatOis*O<O)t&Ro?U&0Ga!Gog[M_,NemaNtr Rcu]R R^T [Toy_Tr$V`2A*$A?'Aqu As<Av>I_tIgn ImatIva.O~eOna.Opor&2B=tBraCas<Co% D Dif>Ff!Gn Hesi$Iff Inc L eLibriLl(eLma,L$elMbatMed+Mm/@MpactNc tNdui!Nf>N.]Nno,Ns$[NtactNvexePa(P+Ra`Rbe|Rda.Rni~eRpusR!ctR&.Smi^Stu?T$U@Upu!Ura.U&|Uvr*Yo&2AbeA(&Ava&Ay$Eatu!Edi,E?{Eu}Evet&Ib]I Ist=I,eOi!Oqu Ota#Uci=UelYp,2Bi^E`l*Il]eIs(eIv!Lm( L%v Mu]Pi@Ra%fR<'3Anu!C#L(d!Ni^:Ign M>Ng N<'Uph(3Batt!Bi,Bord Brid But/tC= Cemb!Ch* Cid Clar Cor Cri!Cup]Da#Duc%fEs<F_sifFi]Fray Gag Givr Glu%rGraf Jeun Li-Log M/d Me' Mol*Ni~ Nou N&l#Nud PartP_}Pha}Plac Po}R/g Rob Sast!S-n&S tSign Sobe*Ss( Str>Ta~ Tes,To' T!s<V/c V_*V( Vo*3Ab#Alog)Am/tC,Ff  G  Git=G[Lu M/~eM(u Oxy@Rec%fRig Scu,Spo}Ssip St/-V %rVi}5Ci#C&'G?IgtMa(eMici#Mp,Na&'Nj$Nn Pam(eRto*Ru!Sa.Se'Ss>Ta%$U/>Ub#U-'U,Y_2Ag$Ap Es}Ibb]Oitu!2P +P#xeRab#Rc*3Nas%e:0Lou*0Ar,HarpeHel#La* Lip<Lo!Lu<O#Onom+Or-Ou,Ra}Rem Riva(RouU?U!u`0If>Uqu 1Fac Fec%fFig+FortFray Fusi$0Ali}Ar 2Ec,1Abor Arg*Ectr$Eg/tEph/tEveIgib#I%s?O.Ucid Ud 0B=]Bell*Bry$Er|@Issi$M_ O%$Ouvo*P e'Ploy Por,Pri<Ulsi$0Cadr Ch eClaveCo~eDigu Dos}DroitDui!Erg+F/-F m Fou*Gag G(Glob Ig?Jamb JeuLev NemiNuye{Ri~*Roba.Seig[Tas}T_d!T>To' Trav Um  Vah*Viab#Voy Zy?0L+n0Aiss*Arg[At/tAu#Ic +I@m+I Ilog)I[Iso@ItapheO^ReuveRouv Uis/t0U !Uipe0Ig Osi$Re'Up%$0C=>Pad$Pe-P+g#Po*PritQuiv Say S_-S+uSor Ti?TomacTra@0Ag eA]An~eA%^E(d!Endo*Er[lH/olHi^Hn+Ir Off Oi#Onn/tO'd*R/.RoitU@0Phor+0Alu Asi$Enta`I@n-I,Olu%fOqu 1ActAg  Auc Cel]Cit/tClusifCu<Ecu,Emp#Erc H= Hor,I.n-I]Is,O%^Ped>Plor Po}Prim QuisT_sifTrai!Ul,:B#Bu#{Cet&Ci#Ctu!Ibl*Lai<Me{M`#R-'RfeluR(eRou~eSc( T=Tig)Uc$U%fVe'Vori3Bri#C$d D  L(M?M'Ndo*Od=Rm Ro-Rve'S%v=U`#Ut!Vr>3AscoCe]C%fDe#Gu!Latu!Leta.L>eL#ulLm LouLtr N/c N*O#R?Ssu!X 2A* Am?As^At&'E|E~eE'Exi$Oc$O!Uctu Ui@Uvi=2L+Nd +Ngib#Nta(eRc Rg $Rmu]Rtu[Ssi#Ud!Ug eU`]Ulu!Urmi2Agi#Ai<An~*App Aye'Ega&E( El$Em*E[s+E!Iab#Ic%$Iss$Ivo#OidOma.Ont=Ot,Uit2Gi%fI&Re'R+{R%fSi$T':Gn Lax+L +Mbad R/%rRd+nRn*Rrig)Zel#Z$3AntLa%[Lu#Ndar?N =N+NouN%lOlog+O?t!R/iumR?St)lY}3B>C]RafeV!2A-AiveIs}ObeOi!Or+{2Lfe'M?Nf]R.R`#Udr$Uff!UlotUp`#Urm/dUt&2Ad)lAffi%A(eAndApp(AtuitAv*EnatIffu!Il]Imp Ogn Ond Ot&OupeUg U% Uy e2EpardErr>I@Im|veIta!Sta%f3Mnas&Rostat:Bitu@Cho*L&Me|NgarN[t$RicotRm$+Rp$Sard3LiumMato?RbeRiss$Rm(eR$Si,U!{3B n BouLar/tStoi!V 5MardMma.Mo.[N['Nor N&{R@Riz$Rlo.Rm$eRrib#U#{Us<5BlotI#{Ma(Mb#Mi@Mo'R]3Dro?lG+[M[Pno<:2Yl#2Nor U/e4Lici&Lusi$0A.Bib I,M_<Mobi#Muab#PactP i=Plor Po}Prim Pu,0Carn C_d+Ci@ntCl( Colo!Dex Di-Duc%fEditEp%eExactF(iFlig Form Fusi$G  H= Hib Jec,Ju!No-ntOcu]Ond Scri!Sec&Sig[Soli&Sp* S%nctSul,TactT_<Ti?Trig)Tui%fU%#Vasi$V_,Vi,Voqu 3Oni^Rad>ReelRi,0O]2Oi!Res<:GuarIll*MbeNv>Rd(Ug U[Velot3Tab#T$UdiU[s<9Ind!N~ Ng]Ue'UissifUrn=Vi=Y|Ye{5Bi]Ge?ntNiorP$Ris&S%-Te{V_i#:Yak7M$oOs^:BelBi=Bo' C  Cto<Gu[I[Is}I% Mbe|Mel#MpeN-'Nga.N,[P(R.'R?Ur>VaboVo*3Ctu!G=G Gu?SsiveTt!V>Xi^Zard3As<B  B!C_-Cor[E.Ev!Gatu!Go,G)M Mi&M$a@Mpi@Neai!NgotOn-|Qui@S>eS,ThiumTi.Ttor=V!'5Gi^Inta(Is*MbricT +U UrdUt!UveY=5B+Ci@Cra%fE'Gub!Is/tM>eNai!NdiR$T,X){:Ch(eGas(G_taGi^Ig!Ill$In%_Ir+Is$Jor Lax Lefi-Lhe'Li-L#t&MmouthNda,Niab#Nqu/tN&|N)lRath$Rb!R~/dRdiRi%?R^'Rr$R&]Scot&SsifT +lT>eTra^Udi!Ussa@UveXim=3Ch/tC$nuDa`#Dec(Di,Du<Il#'L/.Lod+Mb!Moi!Nac N Nh*Ns$.NtorRc!diRi&R#Ssag Su!T=Teo!Tho@T>Ub#3Au]CrobeEt&Gn$Gr L+uLli$Mi^N-N =Nim=Nor Nu&Rac#Roi,Ssi#X&5Bi#D [El#{Ndi=Ni&'Nna+Not$eNst!Ntag[Nu?ntQ)'R-|Rsu!R% Te'TifU~eUf#Ul(Uss$Ut$Uv/t5L%p#Ni%$Ra`#Re[Rmu!Sc#SeumSic+nTa%$T T)l3Ria@R%l#S,eThi^:Ge'PpeRquoisRr Ta%$Ti$Tu!Ufra.U%^Vi!3Bu#{CtarFas&Ga%$Glig Goc>I.Rve{Ttoy Ur$eUtr$Veu3CheCkelTra&Ve|5B#CifCt'[Ir-'I<t&Ma@Mb!{Mm Rma%fTab#Tif>Toi!Urr*Uve|Va&'Vemb!Vi-5A.Anc I!Isib#M oP%=Q)Tri%f:0E*Jec%fLig Sc'S v Stac#T_*T' 0Casi$Cup E/Tob!Troy Tup]Ulai!0E'Or/t1F_}Fic>Fr*0Ive1Se|S`l$2Fac%fIv>0Bra.Ett!0Ct){Du]E!{Iri^1A#A^Er Ini$PortunPrim T Ti^1A.{An.Bi&D$n E`#G/eG)`Ifi-Ne?ntQ)T+0C`]Mo<Satu!0Ar+0Rag/Rs$T`Trag Vra.0A%$1Y@Y.[1O[:Isib#La-Lma!sLo'@Lp Na~eNdaNgol(Niqu N[|NoramaNt=$PayeP>Po,PyrusRadoxeR-l#Res<Rfum R]Ro#Rra(R<m Rtag Ru!Rv_*Ssi$S&^T [lT+n-Tr$V`l$Voi}Y Ysa.3Ig[Int!La.Lic/L#Lou<Lu~eNdu#Netr Nib#NsifN'+Pi&PlumRdrixRfor Rio@Rmu,Rp#xeRs`R&S Ta#TitTr*Up#2Ara$Ob+O^Ot$Ra<Ysi^0AnoCt'=E-Er!Euv!Lo&N-|Pet&Qu Rog)Sc(eSt$Vo,XelZza2AcardAf$dAis*An A^Astr$A&|E' ExusIa.OmbOng U+Uma.2Chet&Es+E&In&Ir>Iss$Iv!Lai!Lic>L#nLyg$eMma@Mp>Nct)lNd  NeyR%^Si%$S<d Stu!Tag Te|Ti$U-Ula(Um$Urp!Uss(Uvo*2A*+A%^Ec+{Edi!EfixeElu@EnomE<n-E&x&Evo*Imi%fIn-Is$Iv Ob#?O-d Odi.Of$dOg!sO+Oje,Olog)O?n Op!Osp eO&g O)s<Ov beU@n-U[|0Y~o<1BlicC $I}LpeLsarNai<Ni%fPit!Rif>Zz#3Rami@:99AsarE!l#Es%$Ietu@It,O%_t:C(eC$,D+{G$d(I@'Is(L_%rLl$.Mas}Pi@Sa.Tis}Vag V(Y$n 3Ac%fAg*Ali}Anim Cevo*Ci,Clam Col,Cru,Cu]Cyc]Dig Dou,Fai!F#xeForm Fra(Fu.G=+nGi$Gla.Gul>I, Je,Jou La%fLev L+fMar^Me@Mi<M$,Mpl*Mu NardNfortNif]N$c Ntr NvoiPl>Por,Pri<P%#Qu(S veS(e{Soud!SpectS,SultatTabl*T_*Ticu#Tomb Trac Uni$Uss*V/~eViv!Vol&Vulsif3Ches<De|E'Gi@Go]Nc Pos,Sib#S^T)lV=V>e5Che{M/-Mp!N-Nd(Se|S>Ta%fTorTu#U.U`#U#|U%[Y|?5B/BisCheEl#G){In Is<|S S%^3Th?:B]Bo,B!Co~eFariGes<Is*La@LiveL$Lu MediNc%$Ngl>Rcas?Rd(eT' Ug!nuUm$U,Uva.V/tV$n 1AlpelAnda#E]atEnarioEpt!HemaI_-Ind O!Ru%nUlp,1An-Cab#Ch Cou C!,Da%fDui!Ig['Jo'Lec%fMa(eMb]M_-M(=Na&'Nsib#N&n-Par Q)n-Re(R.ntR+{Rru!RumRvi-Sa?V*Vra.Xtup#3D =Ec#Eg Ff]G#Gn=L_-LiciumMp#Nc eNist!Ph$RopSmi^Tu 1I 3Ci=C#DiumIg[{LdatLe`Litu@Lub#Mb!M?`Mno]N@N.'N[t&No!Rc>R%rS+T%<Uc+{Udu!Uff#U#v UpapeUr-U%r Uv_*0Ac+{A%=Eci=H eIr=3Ab#A%$ErnumImulusIpu]RictUd+{Upe'Ylis&0Bli?BstratB%lBv_*C-sC!FfixeGg  Ive'Lfa&P bePpl>Rfa-Rica&R?n Rpri<Rs|tRv+Spect3LlabeMbo#Metr+Nap<NtaxeS&?:BacBl>C%#Il]L_tLism/L$n Mbo'Mi}Ngib#PisQu( Rd RifR%[S<TamiToua.UpeU!|X 3Mo(Mpo!lNa`#Nd!Ne'N*Nsi$Rm( R[Rrib#T(eX&2E?Eor+Erap+Orax0BiaE@Mi@Reli!Ro*SsuT/eT!Tub 5Bogg/L /tMa&Ni^N[|P$y?R~eRd!Rna@Rp`#R!ntR<Rt)TemU~ Urna.Us}X(e2Ac%$AficAgi^Ah*A(An~ Ava`Ef#Emp EsorEu`Ia.Ibun=Ico,Ilog+IompheIp]It' Ivi=Omb$eOncOpic=Oupe|2I#LipeMul&N[lRb(eTe'Toy Y|3Mp/Ph$Pi^R/:0Ues^9Ti?Tras$1Ani?If>I$I^Itai!Iv s3AniumBa(Tic/t0A.I[UelU!0I#Op+:Car?Cc(Gab$dG)Ill/tInc!Is<|Lab#Li<Ll$LveMpi!N`#Pe'R>Se{Ss=S&3C&'Det&Get=Hicu#InardLo-Nd!diN  Ng Ni?{Ntou<Rdu!R(Rn*RrouR}RtuSt$T /Tus&X/tX 3AducAn@Ctoi!D/.DeoG[t&G)'La(Lla.Naig!Ol$P eRe?ntRtuo<RusSa.Se'Si$S^{S)lT=Tes<Tico#Tr(eVa-Vipa!5Ca%$Gu I#Is(Itu!La`#Lc/L%g Lu?Ra-R&xT Ulo*Ya.Yel#:G$:3N$:Cht:3B!NithS&9Olog+", "e7693&)U*o&)Ry^)*)W))))#X^))))@@)#Wf)m%)#!))AG)&IIAQIIIBIIHJNAgBIILIDJGo)))HIQIIIIA(IGgJHH(BIIxX#)Ou)@*IAAPIIIJHQJ)&QIQPYI(HYAQC%)!))QHJJ@)#)^f*^AXCJ))$%CP))%&m)u)@e^A#G#))W@!(IKK%!(I%))O@QA))@GG#e))))WHJIWh))my@IIBT^)!)HAYGETHI*))!QnUDG)))nBoKAC*HwyQh))$&)G&)UGO)G)))(BX#v**)%O,e7686)I))@)&)gdMP()))ud)p#L))I^FIHYdWG))D@DFV)QA)o%MyTh%*)Z)%)n(XANc^R)YS", "0x51deb7ae009149dc61a6bd18a918eb7ac78d2775726c68e598b92d002519b045");
          }
          return b(o2, null, [{ key: "wordlist", value: function() {
            return null == Ns && (Ns = new o2()), Ns;
          } }]), o2;
        }(Es);
        function Ds() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Ds = function() {
            return !!e3;
          })();
        }
        var Us = ["AQRASRAGBAGUAIRAHBAghAURAdBAdcAnoAMEAFBAFCBKFBQRBSFBCXBCDBCHBGFBEQBpBBpQBIkBHNBeOBgFBVCBhBBhNBmOBmRBiHBiFBUFBZDBvFBsXBkFBlcBjYBwDBMBBTBBTRBWBBWXXaQXaRXQWXSRXCFXYBXpHXOQXHRXhRXuRXmXXbRXlXXwDXTRXrCXWQXWGaBWaKcaYgasFadQalmaMBacAKaRKKBKKXKKjKQRKDRKCYKCRKIDKeVKHcKlXKjHKrYNAHNBWNaRNKcNIBNIONmXNsXNdXNnBNMBNRBNrXNWDNWMNFOQABQAHQBrQXBQXFQaRQKXQKDQKOQKFQNBQNDQQgQCXQCDQGBQGDQGdQYXQpBQpQQpHQLXQHuQgBQhBQhCQuFQmXQiDQUFQZDQsFQdRQkHQbRQlOQlmQPDQjDQwXQMBQMDQcFQTBQTHQrDDXQDNFDGBDGQDGRDpFDhFDmXDZXDbRDMYDRdDTRDrXSAhSBCSBrSGQSEQSHBSVRShYShkSyQSuFSiBSdcSoESocSlmSMBSFBSFKSFNSFdSFcCByCaRCKcCSBCSRCCrCGbCEHCYXCpBCpQCIBCIHCeNCgBCgFCVECVcCmkCmwCZXCZFCdRClOClmClFCjDCjdCnXCwBCwXCcRCFQCFjGXhGNhGDEGDMGCDGCHGIFGgBGVXGVEGVRGmXGsXGdYGoSGbRGnXGwXGwDGWRGFNGFLGFOGFdGFkEABEBDEBFEXOEaBEKSENBENDEYXEIgEIkEgBEgQEgHEhFEudEuFEiBEiHEiFEZDEvBEsXEsFEdXEdREkFEbBEbRElFEPCEfkEFNYAEYAhYBNYQdYDXYSRYCEYYoYgQYgRYuRYmCYZTYdBYbEYlXYjQYRbYWRpKXpQopQnpSFpCXpIBpISphNpdBpdRpbRpcZpFBpFNpFDpFopFrLADLBuLXQLXcLaFLCXLEhLpBLpFLHXLeVLhILdHLdRLoDLbRLrXIABIBQIBCIBsIBoIBMIBRIXaIaRIKYIKRINBINuICDIGBIIDIIkIgRIxFIyQIiHIdRIbYIbRIlHIwRIMYIcRIRVITRIFBIFNIFQOABOAFOBQOaFONBONMOQFOSFOCDOGBOEQOpBOLXOIBOIFOgQOgFOyQOycOmXOsXOdIOkHOMEOMkOWWHBNHXNHXWHNXHDuHDRHSuHSRHHoHhkHmRHdRHkQHlcHlRHwBHWcgAEgAggAkgBNgBQgBEgXOgYcgLXgHjgyQgiBgsFgdagMYgWSgFQgFEVBTVXEVKBVKNVKDVKYVKRVNBVNYVDBVDxVSBVSRVCjVGNVLXVIFVhBVhcVsXVdRVbRVlRhBYhKYhDYhGShxWhmNhdahdkhbRhjohMXhTRxAXxXSxKBxNBxEQxeNxeQxhXxsFxdbxlHxjcxFBxFNxFQxFOxFoyNYyYoybcyMYuBQuBRuBruDMuCouHBudQukkuoBulVuMXuFEmCYmCRmpRmeDmiMmjdmTFmFQiADiBOiaRiKRiNBiNRiSFiGkiGFiERipRiLFiIFihYibHijBijEiMXiWBiFBiFCUBQUXFUaRUNDUNcUNRUNFUDBUSHUCDUGBUGFUEqULNULoUIRUeEUeYUgBUhFUuRUiFUsXUdFUkHUbBUjSUjYUwXUMDUcHURdUTBUrBUrXUrQZAFZXZZaRZKFZNBZQFZCXZGBZYdZpBZLDZIFZHXZHNZeQZVRZVFZmXZiBZvFZdFZkFZbHZbFZwXZcCZcRZRBvBQvBGvBLvBWvCovMYsAFsBDsaRsKFsNFsDrsSHsSFsCXsCRsEBsEHsEfspBsLBsLDsIgsIRseGsbRsFBsFQsFSdNBdSRdCVdGHdYDdHcdVbdySduDdsXdlRdwXdWYdWcdWRkBMkXOkaRkNIkNFkSFkCFkYBkpRkeNkgBkhVkmXksFklVkMBkWDkFNoBNoaQoaFoNBoNXoNaoNEoSRoEroYXoYCoYbopRopFomXojkowXorFbBEbEIbdBbjYlaRlDElMXlFDjKjjSRjGBjYBjYkjpRjLXjIBjOFjeVjbRjwBnXQnSHnpFnLXnINnMBnTRwXBwXNwXYwNFwQFwSBwGFwLXwLDweNwgBwuHwjDwnXMBXMpFMIBMeNMTHcaQcNBcDHcSFcCXcpBcLXcLDcgFcuFcnXcwXccDcTQcrFTQErXNrCHrpFrgFrbFrTHrFcWNYWNbWEHWMXWTR", "ABGHABIJAEAVAYJQALZJAIaRAHNXAHdcAHbRAZJMAZJRAZTRAdVJAklmAbcNAjdRAMnRAMWYAWpRAWgRAFgBAFhBAFdcBNJBBNJDBQKBBQhcBQlmBDEJBYJkBYJTBpNBBpJFBIJBBIJDBIcABOKXBOEJBOVJBOiJBOZJBepBBeLXBeIFBegBBgGJBVJXBuocBiJRBUJQBlXVBlITBwNFBMYVBcqXBTlmBWNFBWiJBWnRBFGHBFwXXKGJXNJBXNZJXDTTXSHSXSVRXSlHXCJDXGQJXEhXXYQJXYbRXOfXXeNcXVJFXhQJXhEJXdTRXjdXXMhBXcQTXRGBXTEBXTnQXFCXXFOFXFgFaBaFaBNJaBCJaBpBaBwXaNJKaNJDaQIBaDpRaEPDaHMFamDJalEJaMZJaFaFaFNBaFQJaFLDaFVHKBCYKBEBKBHDKXaFKXGdKXEJKXpHKXIBKXZDKXwXKKwLKNacKNYJKNJoKNWcKDGdKDTRKChXKGaRKGhBKGbRKEBTKEaRKEPTKLMDKLWRKOHDKVJcKdBcKlIBKlOPKFSBKFEPKFpFNBNJNJBQNBGHNBEPNBHXNBgFNBVXNBZDNBsXNBwXNNaRNNJDNNJENNJkNDCJNDVDNGJRNJiDNZJNNsCJNJFNNFSBNFCXNFEPNFLXNFIFQJBFQCaRQJEQQLJDQLJFQIaRQOqXQHaFQHHQQVJXQVJDQhNJQmEIQZJFQsJXQJrFQWbRDJABDBYJDXNFDXCXDXLXDXZDDXsJDQqXDSJFDJCXDEPkDEqXDYmQDpSJDOCkDOGQDHEIDVJDDuDuDWEBDJFgSBNDSBSFSBGHSBIBSBTQSKVYSJQNSJQiSJCXSEqXSJYVSIiJSOMYSHAHSHaQSeCFSepQSegBSHdHSHrFShSJSJuHSJUFSkNRSrSrSWEBSFaHSJFQSFCXSFGDSFYXSFODSFgBSFVXSFhBSFxFSFkFSFbBSFMFCADdCJXBCXaFCXKFCXNFCXCXCXGBCXEJCXYBCXLDCXIBCXOPCXHXCXgBCXhBCXiBCXlDCXcHCJNBCJNFCDCJCDGBCDVXCDhBCDiDCDJdCCmNCpJFCIaRCOqXCHCHCHZJCViJCuCuCmddCJiFCdNBCdHhClEJCnUJCreSCWlgCWTRCFBFCFNBCFYBCFVFCFhFCFdSCFTBCFWDGBNBGBQFGJBCGBEqGBpBGBgQGNBEGNJYGNkOGNJRGDUFGJpQGHaBGJeNGJeEGVBlGVKjGiJDGvJHGsVJGkEBGMIJGWjNGFBFGFCXGFGBGFYXGFpBGFMFEASJEAWpEJNFECJVEIXSEIQJEOqXEOcFEeNcEHEJEHlFEJgFEhlmEmDJEmZJEiMBEUqXEoSREPBFEPXFEPKFEPSFEPEFEPpFEPLXEPIBEJPdEPcFEPTBEJnXEqlHEMpREFCXEFODEFcFYASJYJAFYBaBYBVXYXpFYDhBYCJBYJGFYYbRYeNcYJeVYiIJYZJcYvJgYvJRYJsXYsJFYMYMYreVpBNHpBEJpBwXpQxFpYEJpeNDpJeDpeSFpeCHpHUJpHbBpHcHpmUJpiiJpUJrpsJuplITpFaBpFQqpFGBpFEfpFYBpFpBpFLJpFIDpFgBpFVXpFyQpFuFpFlFpFjDpFnXpFwXpJFMpFTBLXCJLXEFLXhFLXUJLXbFLalmLNJBLSJQLCLCLGJBLLDJLHaFLeNFLeSHLeCXLepFLhaRLZsJLsJDLsJrLocaLlLlLMdbLFNBLFSBLFEHLFkFIBBFIBXFIBaQIBKXIBSFIBpHIBLXIBgBIBhBIBuHIBmXIBiFIBZXIBvFIBbFIBjQIBwXIBWFIKTRIQUJIDGFICjQIYSRIINXIJeCIVaRImEkIZJFIvJRIsJXIdCJIJoRIbBQIjYBIcqXITFVIreVIFKFIFSFIFCJIFGFIFLDIFIBIJFOIFgBIFVXIJFhIFxFIFmXIFdHIFbBIJFrIJFWOBGBOQfXOOKjOUqXOfXBOqXEOcqXORVJOFIBOFlDHBIOHXiFHNTRHCJXHIaRHHJDHHEJHVbRHZJYHbIBHRsJHRkDHWlmgBKFgBSBgBCDgBGHgBpBgBIBgBVJgBuBgBvFgKDTgQVXgDUJgGSJgOqXgmUMgZIJgTUJgWIEgFBFgFNBgFDJgFSFgFGBgFYXgJFOgFgQgFVXgFhBgFbHgJFWVJABVQKcVDgFVOfXVeDFVhaRVmGdViJYVMaRVFNHhBNDhBCXhBEqhBpFhBLXhNJBhSJRheVXhhKEhxlmhZIJhdBQhkIJhbMNhMUJhMZJxNJgxQUJxDEkxDdFxSJRxplmxeSBxeCXxeGFxeYXxepQxegBxWVcxFEQxFLXxFIBxFgBxFxDxFZtxFdcxFbBxFwXyDJXyDlcuASJuDJpuDIBuCpJuGSJuIJFueEFuZIJusJXudWEuoIBuWGJuFBcuFKEuFNFuFQFuFDJuFGJuFVJuFUtuFdHuFTBmBYJmNJYmQhkmLJDmLJomIdXmiJYmvJRmsJRmklmmMBymMuCmclmmcnQiJABiJBNiJBDiBSFiBCJiBEFiBYBiBpFiBLXiBTHiJNciDEfiCZJiECJiJEqiOkHiHKFieNDiHJQieQcieDHieSFieCXieGFieEFieIHiegFihUJixNoioNXiFaBiFKFiFNDiFEPiFYXitFOitFHiFgBiFVEiFmXiFitiFbBiFMFiFrFUCXQUIoQUIJcUHQJUeCEUHwXUUJDUUqXUdWcUcqXUrnQUFNDUFSHUFCFUFEfUFLXUtFOZBXOZXSBZXpFZXVXZEQJZEJkZpDJZOqXZeNHZeCDZUqXZFBQZFEHZFLXvBAFvBKFvBCXvBEPvBpHvBIDvBgFvBuHvQNJvFNFvFGBvFIBvJFcsXCDsXLXsXsXsXlFsXcHsQqXsJQFsEqXseIFsFEHsFjDdBxOdNpRdNJRdEJbdpJRdhZJdnSJdrjNdFNJdFQHdFhNkNJDkYaRkHNRkHSRkVbRkuMRkjSJkcqDoSJFoEiJoYZJoOfXohEBoMGQocqXbBAFbBXFbBaFbBNDbBGBbBLXbBTBbBWDbGJYbIJHbFQqbFpQlDgQlOrFlVJRjGEBjZJRnXvJnXbBnEfHnOPDngJRnxfXnUJWwXEJwNpJwDpBwEfXwrEBMDCJMDGHMDIJMLJDcQGDcQpHcqXccqNFcqCXcFCJRBSBRBGBRBEJRBpQTBNFTBQJTBpBTBVXTFABTFSBTFCFTFGBTFMDrXCJrXLDrDNJrEfHrFQJrFitWNjdWNTR", "AKLJMANOPFASNJIAEJWXAYJNRAIIbRAIcdaAeEfDAgidRAdjNYAMYEJAMIbRAFNJBAFpJFBBIJYBDZJFBSiJhBGdEBBEJfXBEJqXBEJWRBpaUJBLXrXBIYJMBOcfXBeEfFBestXBjNJRBcDJOBFEqXXNvJRXDMBhXCJNYXOAWpXONJWXHDEBXeIaRXhYJDXZJSJXMDJOXcASJXFVJXaBQqXaBZJFasXdQaFSJQaFEfXaFpJHaFOqXKBNSRKXvJBKQJhXKEJQJKEJGFKINJBKIJjNKgJNSKVElmKVhEBKiJGFKlBgJKjnUJKwsJYKMFIJKFNJDKFIJFKFOfXNJBSFNJBCXNBpJFNJBvQNJBMBNJLJXNJOqXNJeCXNJeGFNdsJCNbTKFNwXUJQNFEPQDiJcQDMSJQSFpBQGMQJQJeOcQyCJEQUJEBQJFBrQFEJqDXDJFDJXpBDJXIMDGiJhDIJGRDJeYcDHrDJDVXgFDkAWpDkIgRDjDEqDMvJRDJFNFDJFIBSKclmSJQOFSJQVHSJQjDSJGJBSJGJFSECJoSHEJqSJHTBSJVJDSViJYSZJNBSJsJDSFSJFSFEfXSJFLXCBUJVCJXSBCJXpBCXVJXCJXsXCJXdFCJNJHCLIJgCHiJFCVNJMChCJhCUHEJCsJTRCJdYcCoQJCCFEfXCFIJgCFUJxCFstFGJBaQGJBIDGQJqXGYJNRGJHKFGeQqDGHEJFGJeLXGHIiJGHdBlGUJEBGkIJTGFQPDGJFEqEAGegEJIJBEJVJXEhQJTEiJNcEJZJFEJoEqEjDEqEPDsXEPGJBEPOqXEPeQFEfDiDEJfEFEfepQEfMiJEqXNBEqDIDEqeSFEqVJXEMvJRYXNJDYXEJHYKVJcYYJEBYJeEcYJUqXYFpJFYFstXpAZJMpBSJFpNBNFpeQPDpHLJDpHIJFpHgJFpeitFpHZJFpJFADpFSJFpJFCJpFOqXpFitBpJFZJLXIJFLIJgRLVNJWLVHJMLwNpJLFGJBLFLJDLFOqXLJFUJIBDJXIBGJBIJBYQIJBIBIBOqXIBcqDIEGJFILNJTIIJEBIOiJhIJeNBIJeIBIhiJIIWoTRIJFAHIJFpBIJFuHIFUtFIJFTHOSBYJOEcqXOHEJqOvBpFOkVJrObBVJOncqDOcNJkHhNJRHuHJuHdMhBgBUqXgBsJXgONJBgHNJDgHHJQgJeitgHsJXgJyNagyDJBgZJDrgsVJQgkEJNgkjSJgJFAHgFCJDgFZtMVJXNFVXQfXVJXDJVXoQJVQVJQVDEfXVDvJHVEqNFVeQfXVHpJFVHxfXVVJSRVVmaRVlIJOhCXVJhHjYkhxCJVhWVUJhWiJcxBNJIxeEqDxfXBFxcFEPxFSJFxFYJXyBDQJydaUJyFOPDuYCJYuLvJRuHLJXuZJLDuFOPDuFZJHuFcqXmKHJdmCQJcmOsVJiJAGFitLCFieOfXiestXiZJMEikNJQirXzFiFQqXiFIJFiFZJFiFvtFUHpJFUteIcUteOcUVCJkUhdHcUbEJEUJqXQUMNJhURjYkUFitFZDGJHZJIxDZJVJXZJFDJZJFpQvBNJBvBSJFvJxBrseQqDsVFVJdFLJDkEJNBkmNJYkFLJDoQJOPoGsJRoEAHBoEJfFbBQqDbBZJHbFVJXlFIJBjYIrXjeitcjjCEBjWMNBwXQfXwXOaFwDsJXwCJTRwrCZJMDNJQcDDJFcqDOPRYiJFTBsJXTQIJBTFEfXTFLJDrXEJFrEJXMrFZJFWEJdEWYTlm", "ABCDEFACNJTRAMBDJdAcNJVXBLNJEBXSIdWRXErNJkXYDJMBXZJCJaXMNJaYKKVJKcKDEJqXKDcNJhKVJrNYKbgJVXKFVJSBNBYBwDNJeQfXNJeEqXNhGJWENJFiJRQlIJbEQJfXxDQqXcfXQFNDEJQFwXUJDYcnUJDJIBgQDIUJTRDJFEqDSJQSJFSJQIJFSOPeZtSJFZJHCJXQfXCTDEqFGJBSJFGJBOfXGJBcqXGJHNJDGJRLiJEJfXEqEJFEJPEFpBEJYJBZJFYBwXUJYiJMEBYJZJyTYTONJXpQMFXFpeGIDdpJFstXpJFcPDLBVSJRLHQJqXLJFZJFIJBNJDIJBUqXIBkFDJIJEJPTIYJGWRIJeQPDIJeEfHIJFsJXOqGDSFHXEJqXgJCsJCgGQJqXgdQYJEgFMFNBgJFcqDVJwXUJVJFZJchIgJCCxOEJqXxOwXUJyDJBVRuscisciJBiJBieUtqXiJFDJkiFsJXQUGEZJcUJFsJXZtXIrXZDZJDrZJFNJDZJFstXvJFQqXvJFCJEsJXQJqkhkNGBbDJdTRbYJMEBlDwXUJMEFiJFcfXNJDRcNJWMTBLJXC", "BraFUtHBFSJFdbNBLJXVJQoYJNEBSJBEJfHSJHwXUJCJdAZJMGjaFVJXEJPNJBlEJfFiJFpFbFEJqIJBVJCrIBdHiJhOPFChvJVJZJNJWxGFNIFLueIBQJqUHEJfUFstOZJDrlXEASJRlXVJXSFwVJNJWD", "QJEJNNJDQJEJIBSFQJEJxegBQJEJfHEPSJBmXEJFSJCDEJqXLXNJFQqXIcQsFNJFIFEJqXUJgFsJXIJBUJEJfHNFvJxEqXNJnXUJFQqD", "IJBEJqXZJ"], xs = null;
        function Js(e3) {
          return ke(wt(e3));
        }
        function _s(e3) {
          return It(new Uint8Array(e3));
        }
        function zs() {
          if (null !== xs) return xs;
          var e3 = [], t3 = {};
          function r3(e4) {
            for (var r4 = "", n3 = 0; n3 < e4.length; n3++) {
              var o3 = e4[n3], a3 = t3[o3];
              false !== a3 && (a3 && (o3 = a3), r4 += o3);
            }
            return r4;
          }
          t3[_s([227, 130, 154])] = false, t3[_s([227, 130, 153])] = false, t3[_s([227, 130, 133])] = _s([227, 130, 134]), t3[_s([227, 129, 163])] = _s([227, 129, 164]), t3[_s([227, 130, 131])] = _s([227, 130, 132]), t3[_s([227, 130, 135])] = _s([227, 130, 136]);
          for (var n2 = 3; n2 <= 9; n2++) for (var o2 = Us[n2 - 3], a2 = 0; a2 < o2.length; a2 += n2) {
            for (var i2 = [], s2 = 0; s2 < n2; s2++) {
              var u2 = "~~AzB~X~a~KN~Q~D~S~C~G~E~Y~p~L~I~O~eH~g~V~hxyumi~~U~~Z~~v~~s~~dkoblPjfnqwMcRTr~W~~~F~~~~~Jt".indexOf(o2[a2 + s2]);
              i2.push(227), i2.push(64 & u2 ? 130 : 129), i2.push(128 + (63 & u2));
            }
            e3.push(_s(i2));
          }
          if (e3.sort(function(e4, t4) {
            return (e4 = r3(e4)) < (t4 = r3(t4)) ? -1 : e4 > t4 ? 1 : 0;
          }), "0xe3818de38284e3818f" === Js(e3[442]) && "0xe3818de38283e3818f" === Js(e3[443])) {
            var c2 = e3[442];
            e3[442] = e3[443], e3[443] = c2;
          }
          if ("0xcb36b09e6baa935787fd762ce65e80b0c6a8dabdfbc3a7f86ac0e2c4fd111600" !== St(e3.join("\n") + "\n")) throw new Error("BIP39 Wordlist for ja (Japanese) FAILED");
          return xs = e3, e3;
        }
        var Gs = null, js = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Ds(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2() {
            return h(this, o2), n2.call(this, "ja");
          }
          return b(o2, [{ key: "getWord", value: function(e4) {
            var t4 = zs();
            return Pe(e4 >= 0 && e4 < t4.length, "invalid word index: ".concat(e4), "index", e4), t4[e4];
          } }, { key: "getWordIndex", value: function(e4) {
            return zs().indexOf(e4);
          } }, { key: "split", value: function(e4) {
            return e4.split(/(?:\u3000| )+/g);
          } }, { key: "join", value: function(e4) {
            return e4.join("　");
          } }], [{ key: "wordlist", value: function() {
            return null == Gs && (Gs = new o2()), Gs;
          } }]), o2;
        }(Ut);
        function Vs() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Vs = function() {
            return !!e3;
          })();
        }
        var Xs = ["OYAa", "ATAZoATBl3ATCTrATCl8ATDloATGg3ATHT8ATJT8ATJl3ATLlvATLn4ATMT8ATMX8ATMboATMgoAToLbAToMTATrHgATvHnAT3AnAT3JbAT3MTAT8DbAT8JTAT8LmAT8MYAT8MbAT#LnAUHT8AUHZvAUJXrAUJX8AULnrAXJnvAXLUoAXLgvAXMn6AXRg3AXrMbAX3JTAX3QbAYLn3AZLgvAZrSUAZvAcAZ8AaAZ8AbAZ8AnAZ8HnAZ8LgAZ8MYAZ8MgAZ8OnAaAboAaDTrAaFTrAaJTrAaJboAaLVoAaMXvAaOl8AaSeoAbAUoAbAg8AbAl4AbGnrAbMT8AbMXrAbMn4AbQb8AbSV8AbvRlAb8AUAb8AnAb8HgAb8JTAb8NTAb8RbAcGboAcLnvAcMT8AcMX8AcSToAcrAaAcrFnAc8AbAc8MgAfGgrAfHboAfJnvAfLV8AfLkoAfMT8AfMnoAfQb8AfScrAfSgrAgAZ8AgFl3AgGX8AgHZvAgHgrAgJXoAgJX8AgJboAgLZoAgLn4AgOX8AgoATAgoAnAgoCUAgoJgAgoLXAgoMYAgoSeAgrDUAgrJTAhrFnAhrLjAhrQgAjAgoAjJnrAkMX8AkOnoAlCTvAlCV8AlClvAlFg4AlFl6AlFn3AloSnAlrAXAlrAfAlrFUAlrFbAlrGgAlrOXAlvKnAlvMTAl3AbAl3MnAnATrAnAcrAnCZ3AnCl8AnDg8AnFboAnFl3AnHX4AnHbrAnHgrAnIl3AnJgvAnLXoAnLX4AnLbrAnLgrAnLhrAnMXoAnMgrAnOn3AnSbrAnSeoAnvLnAn3OnCTGgvCTSlvCTvAUCTvKnCTvNTCT3CZCT3GUCT3MTCT8HnCUCZrCULf8CULnvCU3HnCU3JUCY6NUCbDb8CbFZoCbLnrCboOTCboScCbrFnCbvLnCb8AgCb8HgCb$LnCkLfoClBn3CloDUDTHT8DTLl3DTSU8DTrAaDTrLXDTrLjDTrOYDTrOgDTvFXDTvFnDT3HUDT3LfDUCT9DUDT4DUFVoDUFV8DUFkoDUGgrDUJnrDULl8DUMT8DUMXrDUMX4DUMg8DUOUoDUOgvDUOg8DUSToDUSZ8DbDXoDbDgoDbGT8DbJn3DbLg3DbLn4DbMXrDbMg8DbOToDboJXGTClvGTDT8GTFZrGTLVoGTLlvGTLl3GTMg8GTOTvGTSlrGToCUGTrDgGTrJYGTrScGTtLnGTvAnGTvQgGUCZrGUDTvGUFZoGUHXrGULnvGUMT8GUoMgGXoLnGXrMXGXrMnGXvFnGYLnvGZOnvGZvOnGZ8LaGZ8LmGbAl3GbDYvGbDlrGbHX3GbJl4GbLV8GbLn3GbMn4GboJTGboRfGbvFUGb3GUGb4JnGgDX3GgFl$GgJlrGgLX6GgLZoGgLf8GgOXoGgrAgGgrJXGgrMYGgrScGgvATGgvOYGnAgoGnJgvGnLZoGnLg3GnLnrGnQn8GnSbrGnrMgHTClvHTDToHTFT3HTQT8HToJTHToJgHTrDUHTrMnHTvFYHTvRfHT8MnHT8SUHUAZ8HUBb4HUDTvHUoMYHXFl6HXJX6HXQlrHXrAUHXrMnHXrSbHXvFYHXvKXHX3LjHX3MeHYvQlHZrScHZvDbHbAcrHbFT3HbFl3HbJT8HbLTrHbMT8HbMXrHbMbrHbQb8HbSX3HboDbHboJTHbrFUHbrHgHbrJTHb8JTHb8MnHb8QgHgAlrHgDT3HgGgrHgHgrHgJTrHgJT8HgLX@HgLnrHgMT8HgMX8HgMboHgOnrHgQToHgRg3HgoHgHgrCbHgrFnHgrLVHgvAcHgvAfHnAloHnCTrHnCnvHnGTrHnGZ8HnGnvHnJT8HnLf8HnLkvHnMg8HnRTrITvFUITvFnJTAXrJTCV8JTFT3JTFT8JTFn4JTGgvJTHT8JTJT8JTJXvJTJl3JTJnvJTLX4JTLf8JTLhvJTMT8JTMXrJTMnrJTObrJTQT8JTSlvJT8DUJT8FkJT8MTJT8OXJT8OgJT8QUJT8RfJUHZoJXFT4JXFlrJXGZ8JXGnrJXLV8JXLgvJXMXoJXMX3JXNboJXPlvJXoJTJXoLkJXrAXJXrHUJXrJgJXvJTJXvOnJX4KnJYAl3JYJT8JYLhvJYQToJYrQXJY6NUJbAl3JbCZrJbDloJbGT8JbGgrJbJXvJbJboJbLf8JbLhrJbLl3JbMnvJbRg8JbSZ8JboDbJbrCZJbrSUJb3KnJb8LnJfRn8JgAXrJgCZrJgDTrJgGZrJgGZ8JgHToJgJT8JgJXoJgJgvJgLX4JgLZ3JgLZ8JgLn4JgMgrJgMn4JgOgvJgPX6JgRnvJgSToJgoCZJgoJbJgoMYJgrJXJgrJgJgrLjJg6MTJlCn3JlGgvJlJl8Jl4AnJl8FnJl8HgJnAToJnATrJnAbvJnDUoJnGnrJnJXrJnJXvJnLhvJnLnrJnLnvJnMToJnMT8JnMXvJnMX3JnMg8JnMlrJnMn4JnOX8JnST4JnSX3JnoAgJnoAnJnoJTJnoObJnrAbJnrAkJnrHnJnrJTJnrJYJnrOYJnrScJnvCUJnvFaJnvJgJnvJnJnvOYJnvQUJnvRUJn3FnJn3JTKnFl3KnLT6LTDlvLTMnoLTOn3LTRl3LTSb4LTSlrLToAnLToJgLTrAULTrAcLTrCULTrHgLTrMgLT3JnLULnrLUMX8LUoJgLVATrLVDTrLVLb8LVoJgLV8MgLV8RTLXDg3LXFlrLXrCnLXrLXLX3GTLX4GgLX4OYLZAXrLZAcrLZAgrLZAhrLZDXyLZDlrLZFbrLZFl3LZJX6LZJX8LZLc8LZLnrLZSU8LZoJTLZoJnLZrAgLZrAnLZrJYLZrLULZrMgLZrSkLZvAnLZvGULZvJeLZvOTLZ3FZLZ4JXLZ8STLZ8ScLaAT3LaAl3LaHT8LaJTrLaJT8LaJXrLaJgvLaJl4LaLVoLaMXrLaMXvLaMX8LbClvLbFToLbHlrLbJn4LbLZ3LbLhvLbMXrLbMnoLbvSULcLnrLc8HnLc8MTLdrMnLeAgoLeOgvLeOn3LfAl3LfLnvLfMl3LfOX8Lf8AnLf8JXLf8LXLgJTrLgJXrLgJl8LgMX8LgRZrLhCToLhrAbLhrFULhrJXLhvJYLjHTrLjHX4LjJX8LjLhrLjSX3LjSZ4LkFX4LkGZ8LkGgvLkJTrLkMXoLkSToLkSU8LkSZ8LkoOYLl3FfLl3MgLmAZrLmCbrLmGgrLmHboLmJnoLmJn3LmLfoLmLhrLmSToLnAX6LnAb6LnCZ3LnCb3LnDTvLnDb8LnFl3LnGnrLnHZvLnHgvLnITvLnJT8LnJX8LnJlvLnLf8LnLg6LnLhvLnLnoLnMXrLnMg8LnQlvLnSbrLnrAgLnrAnLnrDbLnrFkLnrJdLnrMULnrOYLnrSTLnvAnLnvDULnvHgLnvOYLnvOnLn3GgLn4DULn4JTLn4JnMTAZoMTAloMTDb8MTFT8MTJnoMTJnrMTLZrMTLhrMTLkvMTMX8MTRTrMToATMTrDnMTrOnMT3JnMT4MnMT8FUMT8FaMT8FlMT8GTMT8GbMT8GnMT8HnMT8JTMT8JbMT8OTMUCl8MUJTrMUJU8MUMX8MURTrMUSToMXAX6MXAb6MXCZoMXFXrMXHXrMXLgvMXOgoMXrAUMXrAnMXrHgMXrJYMXrJnMXrMTMXrMgMXrOYMXrSZMXrSgMXvDUMXvOTMX3JgMX3OTMX4JnMX8DbMX8FnMX8HbMX8HgMX8HnMX8LbMX8MnMX8OnMYAb8MYGboMYHTvMYHX4MYLTrMYLnvMYMToMYOgvMYRg3MYSTrMbAToMbAXrMbAl3MbAn8MbGZ8MbJT8MbJXrMbMXvMbMX8MbMnoMbrMUMb8AfMb8FbMb8FkMcJXoMeLnrMgFl3MgGTvMgGXoMgGgrMgGnrMgHT8MgHZrMgJnoMgLnrMgLnvMgMT8MgQUoMgrHnMgvAnMg8HgMg8JYMg8LfMloJnMl8ATMl8AXMl8JYMnAToMnAT4MnAZ8MnAl3MnAl4MnCl8MnHT8MnHg8MnJnoMnLZoMnLhrMnMXoMnMX3MnMnrMnOgvMnrFbMnrFfMnrFnMnrNTMnvJXNTMl8OTCT3OTFV8OTFn3OTHZvOTJXrOTOl3OT3ATOT3JUOT3LZOT3LeOT3MbOT8ATOT8AbOT8AgOT8MbOUCXvOUMX3OXHXvOXLl3OXrMUOXvDbOX6NUOX8JbOYFZoOYLbrOYLkoOYMg8OYSX3ObHTrObHT4ObJgrObLhrObMX3ObOX8Ob8FnOeAlrOeJT8OeJXrOeJnrOeLToOeMb8OgJXoOgLXoOgMnrOgOXrOgOloOgoAgOgoJbOgoMYOgoSTOg8AbOjLX4OjMnoOjSV8OnLVoOnrAgOn3DUPXQlrPXvFXPbvFTPdAT3PlFn3PnvFbQTLn4QToAgQToMTQULV8QURg8QUoJnQXCXvQbFbrQb8AaQb8AcQb8FbQb8MYQb8ScQeAlrQeLhrQjAn3QlFXoQloJgQloSnRTLnvRTrGURTrJTRUJZrRUoJlRUrQnRZrLmRZrMnRZrSnRZ8ATRZ8JbRZ8ScRbMT8RbST3RfGZrRfMX8RfMgrRfSZrRnAbrRnGT8RnvJgRnvLfRnvMTRn8AaSTClvSTJgrSTOXrSTRg3STRnvSToAcSToAfSToAnSToHnSToLjSToMTSTrAaSTrEUST3BYST8AgST8LmSUAZvSUAgrSUDT4SUDT8SUGgvSUJXoSUJXvSULTrSU8JTSU8LjSV8AnSV8JgSXFToSXLf8SYvAnSZrDUSZrMUSZrMnSZ8HgSZ8JTSZ8JgSZ8MYSZ8QUSaQUoSbCT3SbHToSbQYvSbSl4SboJnSbvFbSb8HbSb8JgSb8OTScGZrScHgrScJTvScMT8ScSToScoHbScrMTScvAnSeAZrSeAcrSeHboSeJUoSeLhrSeMT8SeMXrSe6JgSgHTrSkJnoSkLnvSk8CUSlFl3SlrSnSl8GnSmAboSmGT8SmJU8", "ATLnDlATrAZoATrJX4ATrMT8ATrMX4ATrRTrATvDl8ATvJUoATvMl8AT3AToAT3MX8AT8CT3AT8DT8AT8HZrAT8HgoAUAgFnAUCTFnAXoMX8AXrAT8AXrGgvAXrJXvAXrOgoAXvLl3AZvAgoAZvFbrAZvJXoAZvJl8AZvJn3AZvMX8AZvSbrAZ8FZoAZ8LZ8AZ8MU8AZ8OTvAZ8SV8AZ8SX3AbAgFZAboJnoAbvGboAb8ATrAb8AZoAb8AgrAb8Al4Ab8Db8Ab8JnoAb8LX4Ab8LZrAb8LhrAb8MT8Ab8OUoAb8Qb8Ab8ST8AcrAUoAcrAc8AcrCZ3AcrFT3AcrFZrAcrJl4AcrJn3AcrMX3AcrOTvAc8AZ8Ac8MT8AfAcJXAgoFn4AgoGgvAgoGnrAgoLc8AgoMXoAgrLnrAkrSZ8AlFXCTAloHboAlrHbrAlrLhrAlrLkoAl3CZrAl3LUoAl3LZrAnrAl4AnrMT8An3HT4BT3IToBX4MnvBb!Ln$CTGXMnCToLZ4CTrHT8CT3JTrCT3RZrCT#GTvCU6GgvCU8Db8CU8GZrCU8HT8CboLl3CbrGgrCbrMU8Cb8DT3Cb8GnrCb8LX4Cb8MT8Cb8ObrCgrGgvCgrKX4Cl8FZoDTrAbvDTrDboDTrGT6DTrJgrDTrMX3DTrRZrDTrRg8DTvAVvDTvFZoDT3DT8DT3Ln3DT4HZrDT4MT8DT8AlrDT8MT8DUAkGbDUDbJnDYLnQlDbDUOYDbMTAnDbMXSnDboAT3DboFn4DboLnvDj6JTrGTCgFTGTGgFnGTJTMnGTLnPlGToJT8GTrCT3GTrLVoGTrLnvGTrMX3GTrMboGTvKl3GZClFnGZrDT3GZ8DTrGZ8FZ8GZ8MXvGZ8On8GZ8ST3GbCnQXGbMbFnGboFboGboJg3GboMXoGb3JTvGb3JboGb3Mn6Gb3Qb8GgDXLjGgMnAUGgrDloGgrHX4GgrSToGgvAXrGgvAZvGgvFbrGgvLl3GgvMnvGnDnLXGnrATrGnrMboGnuLl3HTATMnHTAgCnHTCTCTHTrGTvHTrHTvHTrJX8HTrLl8HTrMT8HTrMgoHTrOTrHTuOn3HTvAZrHTvDTvHTvGboHTvJU8HTvLl3HTvMXrHTvQb4HT4GT6HT4JT8HT4Jb#HT8Al3HT8GZrHT8GgrHT8HX4HT8Jb8HT8JnoHT8LTrHT8LgvHT8SToHT8SV8HUoJUoHUoJX8HUoLnrHXrLZoHXvAl3HX3LnrHX4FkvHX4LhrHX4MXoHX4OnoHZrAZ8HZrDb8HZrGZ8HZrJnrHZvGZ8HZvLnvHZ8JnvHZ8LhrHbCXJlHbMTAnHboJl4HbpLl3HbrJX8HbrLnrHbrMnvHbvRYrHgoSTrHgrFV8HgrGZ8HgrJXoHgrRnvHgvBb!HgvGTrHgvHX4HgvHn!HgvLTrHgvSU8HnDnLbHnFbJbHnvDn8Hn6GgvHn!BTvJTCTLnJTQgFnJTrAnvJTrLX4JTrOUoJTvFn3JTvLnrJTvNToJT3AgoJT3Jn4JT3LhvJT3ObrJT8AcrJT8Al3JT8JT8JT8JnoJT8LX4JT8LnrJT8MX3JT8Rg3JT8Sc8JUoBTvJU8AToJU8GZ8JU8GgvJU8JTrJU8JXrJU8JnrJU8LnvJU8ScvJXHnJlJXrGgvJXrJU8JXrLhrJXrMT8JXrMXrJXrQUoJXvCTvJXvGZ8JXvGgrJXvQT8JX8Ab8JX8DT8JX8GZ8JX8HZvJX8LnrJX8MT8JX8MXoJX8MnvJX8ST3JYGnCTJbAkGbJbCTAnJbLTAcJboDT3JboLb6JbrAnvJbrCn3JbrDl8JbrGboJbrIZoJbrJnvJbrMnvJbrQb4Jb8RZrJeAbAnJgJnFbJgScAnJgrATrJgvHZ8JgvMn4JlJlFbJlLiQXJlLjOnJlRbOlJlvNXoJlvRl3Jl4AcrJl8AUoJl8MnrJnFnMlJnHgGbJnoDT8JnoFV8JnoGgvJnoIT8JnoQToJnoRg3JnrCZ3JnrGgrJnrHTvJnrLf8JnrOX8JnvAT3JnvFZoJnvGT8JnvJl4JnvMT8JnvMX8JnvOXrJnvPX6JnvSX3JnvSZrJn3MT8Jn3MX8Jn3RTrLTATKnLTJnLTLTMXKnLTRTQlLToGb8LTrAZ8LTrCZ8LTrDb8LTrHT8LT3PX6LT4FZoLT$CTvLT$GgrLUvHX3LVoATrLVoAgoLVoJboLVoMX3LVoRg3LV8CZ3LV8FZoLV8GTvLXrDXoLXrFbrLXvAgvLXvFlrLXvLl3LXvRn6LX4Mb8LX8GT8LYCXMnLYrMnrLZoSTvLZrAZvLZrAloLZrFToLZrJXvLZrJboLZrJl4LZrLnrLZrMT8LZrOgvLZrRnvLZrST4LZvMX8LZvSlvLZ8AgoLZ8CT3LZ8JT8LZ8LV8LZ8LZoLZ8Lg8LZ8SV8LZ8SbrLZ$HT8LZ$Mn4La6CTvLbFbMnLbRYFTLbSnFZLboJT8LbrAT9LbrGb3LbrQb8LcrJX8LcrMXrLerHTvLerJbrLerNboLgrDb8LgrGZ8LgrHTrLgrMXrLgrSU8LgvJTrLgvLl3Lg6Ll3LhrLnrLhrMT8LhvAl4LiLnQXLkoAgrLkoJT8LkoJn4LlrSU8Ll3FZoLl3HTrLl3JX8Ll3JnoLl3LToLmLeFbLnDUFbLnLVAnLnrATrLnrAZoLnrAb8LnrAlrLnrGgvLnrJU8LnrLZrLnrLhrLnrMb8LnrOXrLnrSZ8LnvAb4LnvDTrLnvDl8LnvHTrLnvHbrLnvJT8LnvJU8LnvJbrLnvLhvLnvMX8LnvMb8LnvNnoLnvSU8Ln3Al3Ln4FZoLn4GT6Ln4JgvLn4LhrLn4MT8Ln4SToMToCZrMToJX8MToLX4MToLf8MToRg3MTrEloMTvGb6MT3BTrMT3Lb6MT8AcrMT8AgrMT8GZrMT8JnoMT8LnrMT8MX3MUOUAnMXAbFnMXoAloMXoJX8MXoLf8MXoLl8MXrAb8MXrDTvMXrGT8MXrGgrMXrHTrMXrLf8MXrMU8MXrOXvMXrQb8MXvGT8MXvHTrMXvLVoMX3AX3MX3Jn3MX3LhrMX3MX3MX4AlrMX4OboMX8GTvMX8GZrMX8GgrMX8JT8MX8JX8MX8LhrMX8MT8MYDUFbMYMgDbMbGnFfMbvLX4MbvLl3Mb8Mb8Mb8ST4MgGXCnMg8ATrMg8AgoMg8CZrMg8DTrMg8DboMg8HTrMg8JgrMg8LT8MloJXoMl8AhrMl8JT8MnLgAUMnoJXrMnoLX4MnoLhrMnoMT8MnrAl4MnrDb8MnrOTvMnrOgvMnrQb8MnrSU8MnvGgrMnvHZ8Mn3MToMn4DTrMn4LTrMn4Mg8NnBXAnOTFTFnOToAToOTrGgvOTrJX8OT3JXoOT6MTrOT8GgrOT8HTpOT8MToOUoHT8OUoJT8OUoLn3OXrAgoOXrDg8OXrMT8OXvSToOX6CTvOX8CZrOX8OgrOb6HgvOb8AToOb8MT8OcvLZ8OgvAlrOgvHTvOgvJTrOgvJnrOgvLZrOgvLn4OgvMT8OgvRTrOg8AZoOg8DbvOnrOXoOnvJn4OnvLhvOnvRTrOn3GgoOn3JnvOn6JbvOn8OTrPTGYFTPbBnFnPbGnDnPgDYQTPlrAnvPlrETvPlrLnvPlrMXvPlvFX4QTMTAnQTrJU8QYCnJlQYJlQlQbGTQbQb8JnrQb8LZoQb8LnvQb8MT8Qb8Ml8Qb8ST4QloAl4QloHZvQloJX8QloMn8QnJZOlRTrAZvRTrDTrRTvJn4RTvLhvRT4Jb8RZrAZrRZ8AkrRZ8JU8RZ8LV8RZ8LnvRbJlQXRg3GboRg3MnvRg8AZ8Rg8JboRg8Jl4RnLTCbRnvFl3RnvQb8SToAl4SToCZrSToFZoSToHXrSToJU8SToJgvSToJl4SToLhrSToMX3STrAlvSTrCT9STrCgrSTrGgrSTrHXrSTrHboSTrJnoSTrNboSTvLnrST4AZoST8Ab8ST8JT8SUoJn3SU6HZ#SU6JTvSU8Db8SU8HboSU8LgrSV8JT8SZrAcrSZrAl3SZrJT8SZrJnvSZrMT8SZvLUoSZ4FZoSZ8JnoSZ8RZrScoLnrScoMT8ScoMX8ScrAT4ScrAZ8ScrLZ8ScrLkvScvDb8ScvLf8ScvNToSgrFZrShvKnrSloHUoSloLnrSlrMXoSl8HgrSmrJUoSn3BX6", "ATFlOn3ATLgrDYAT4MTAnAT8LTMnAYJnRTrAbGgJnrAbLV8LnAbvNTAnAeFbLg3AgOYMXoAlQbFboAnDboAfAnJgoJTBToDgAnBUJbAl3BboDUAnCTDlvLnCTFTrSnCYoQTLnDTwAbAnDUDTrSnDUHgHgrDX8LXFnDbJXAcrETvLTLnGTFTQbrGTMnGToGT3DUFbGUJlPX3GbQg8LnGboJbFnGb3GgAYGgAg8ScGgMbAXrGgvAbAnGnJTLnvGnvATFgHTDT6ATHTrDlJnHYLnMn8HZrSbJTHZ8LTFnHbFTJUoHgSeMT8HgrLjAnHgvAbAnHlFUrDlHnDgvAnHnHTFT3HnQTGnrJTAaMXvJTGbCn3JTOgrAnJXvAXMnJbMg8SnJbMnRg3Jb8LTMnJnAl3OnJnGYrQlJnJlQY3LTDlCn3LTJjLg3LTLgvFXLTMg3GTLV8HUOgLXFZLg3LXNXrMnLX8QXFnLX9AlMYLYLXPXrLZAbJU8LZDUJU8LZMXrSnLZ$AgFnLaPXrDULbFYrMnLbMn8LXLboJgJgLeFbLg3LgLZrSnLgOYAgoLhrRnJlLkCTrSnLkOnLhrLnFX%AYLnFZoJXLnHTvJbLnLloAbMTATLf8MTHgJn3MTMXrAXMT3MTFnMUITvFnMXFX%AYMXMXvFbMXrFTDbMYAcMX3MbLf8SnMb8JbFnMgMXrMTMgvAXFnMgvGgCmMnAloSnMnFnJTrOXvMXSnOX8HTMnObJT8ScObLZFl3ObMXCZoPTLgrQXPUFnoQXPU3RXJlPX3RkQXPbrJXQlPlrJbFnQUAhrDbQXGnCXvQYLnHlvQbLfLnvRTOgvJbRXJYrQlRYLnrQlRbLnrQlRlFT8JlRlFnrQXSTClCn3STHTrAnSTLZQlrSTMnGTrSToHgGbSTrGTDnSTvGXCnST3HgFbSU3HXAXSbAnJn3SbFT8LnScLfLnv", "AT3JgJX8AT8FZoSnAT8JgFV8AT8LhrDbAZ8JT8DbAb8GgLhrAb8SkLnvAe8MT8SnAlMYJXLVAl3GYDTvAl3LfLnvBUDTvLl3CTOn3HTrCT3DUGgrCU8MT8AbCbFTrJUoCgrDb8MTDTLV8JX8DTLnLXQlDT8LZrSnDUQb8FZ8DUST4JnvDb8ScOUoDj6GbJl4GTLfCYMlGToAXvFnGboAXvLnGgAcrJn3GgvFnSToGnLf8JnvGn#HTDToHTLnFXJlHTvATFToHTvHTDToHTvMTAgoHT3STClvHT4AlFl6HT8HTDToHUoDgJTrHUoScMX3HbRZrMXoHboJg8LTHgDb8JTrHgMToLf8HgvLnLnoHnHn3HT4Hn6MgvAnJTJU8ScvJT3AaQT8JT8HTrAnJXrRg8AnJbAloMXoJbrATFToJbvMnoSnJgDb6GgvJgDb8MXoJgSX3JU8JguATFToJlPYLnQlJlQkDnLbJlQlFYJlJl8Lf8OTJnCTFnLbJnLTHXMnJnLXGXCnJnoFfRg3JnrMYRg3Jn3HgFl3KT8Dg8LnLTRlFnPTLTvPbLbvLVoSbrCZLXMY6HT3LXNU7DlrLXNXDTATLX8DX8LnLZDb8JU8LZMnoLhrLZSToJU8LZrLaLnrLZvJn3SnLZ8LhrSnLaJnoMT8LbFlrHTvLbrFTLnrLbvATLlvLb6OTFn3LcLnJZOlLeAT6Mn4LeJT3ObrLg6LXFlrLhrJg8LnLhvDlPX4LhvLfLnvLj6JTFT3LnFbrMXoLnQluCTvLnrQXCY6LnvLfLnvLnvMgLnvLnvSeLf8MTMbrJn3MT3JgST3MT8AnATrMT8LULnrMUMToCZrMUScvLf8MXoDT8SnMX6ATFToMX8AXMT8MX8FkMT8MX8HTrDUMX8ScoSnMYJT6CTvMgAcrMXoMg8SToAfMlvAXLg3MnFl3AnvOT3AnFl3OUoATHT8OU3RnLXrOXrOXrSnObPbvFn6Og8HgrSnOg8OX8DbPTvAgoJgPU3RYLnrPXrDnJZrPb8CTGgvPlrLTDlvPlvFUJnoQUvFXrQlQeMnoAl3QlrQlrSnRTFTrJUoSTDlLiLXSTFg6HT3STJgoMn4STrFTJTrSTrLZFl3ST4FnMXoSUrDlHUoScvHTvSnSfLkvMXo", "AUoAcrMXoAZ8HboAg8AbOg6ATFgAg8AloMXoAl3AT8JTrAl8MX8MXoCT3SToJU8Cl8Db8MXoDT8HgrATrDboOT8MXoGTOTrATMnGT8LhrAZ8GnvFnGnQXHToGgvAcrHTvAXvLl3HbrAZoMXoHgBlFXLg3HgMnFXrSnHgrSb8JUoHn6HT8LgvITvATrJUoJUoLZrRnvJU8HT8Jb8JXvFX8QT8JXvLToJTrJYrQnGnQXJgrJnoATrJnoJU8ScvJnvMnvMXoLTCTLgrJXLTJlRTvQlLbRnJlQYvLbrMb8LnvLbvFn3RnoLdCVSTGZrLeSTvGXCnLg3MnoLn3MToLlrETvMT8SToAl3MbrDU6GTvMb8LX4LhrPlrLXGXCnSToLf8Rg3STrDb8LTrSTvLTHXMnSb3RYLnMnSgOg6ATFg", "HUDlGnrQXrJTrHgLnrAcJYMb8DULc8LTvFgGnCk3Mg8JbAnLX4QYvFYHnMXrRUoJnGnvFnRlvFTJlQnoSTrBXHXrLYSUJgLfoMT8Se8DTrHbDb", "AbDl8SToJU8An3RbAb8ST8DUSTrGnrAgoLbFU6Db8LTrMg8AaHT8Jb8ObDl8SToJU8Pb3RlvFYoJl"], Hs = null;
        function $s() {
          if (null != Hs) return Hs;
          var e3 = [];
          if (Xs.forEach(function(t3, r3) {
            r3 += 4;
            for (var n2 = 0; n2 < t3.length; n2 += r3) {
              for (var o2 = "", a2 = 0; a2 < r3; a2++) o2 += ((i2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*".indexOf(t3[n2 + a2])) >= 40 ? i2 = i2 + 168 - 40 : i2 >= 19 && (i2 = i2 + 97 - 19), It(new Uint8Array([225, 132 + (i2 >> 6), 128 + (63 & i2)])));
              e3.push(o2);
            }
            var i2;
          }), e3.sort(), "0xf9eddeace9c5d3da9c93cf7d3cd38f6a13ed3affb933259ae865714e8a3ae71a" !== St(e3.join("\n") + "\n")) throw new Error("BIP39 Wordlist for ko (Korean) FAILED");
          return Hs = e3, e3;
        }
        var Zs = null, Ks = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Vs(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2() {
            return h(this, o2), n2.call(this, "ko");
          }
          return b(o2, [{ key: "getWord", value: function(e4) {
            var t4 = $s();
            return Pe(e4 >= 0 && e4 < t4.length, "invalid word index: ".concat(e4), "index", e4), t4[e4];
          } }, { key: "getWordIndex", value: function(e4) {
            return $s().indexOf(e4);
          } }], [{ key: "wordlist", value: function() {
            return null == Zs && (Zs = new o2()), Zs;
          } }]), o2;
        }(Ut);
        function Qs() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Qs = function() {
            return !!e3;
          })();
        }
        var Ys = null, qs = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = Qs(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2() {
            return h(this, o2), n2.call(this, "it", "0torea noica!iosorolotaleratelanena%oiadoencotivomai t ca%a0A]Bagl'Bin#E.Is(Oli!Rasi_Rog#0Cade!C[$Cus#E <Hil,I@QuaReRil>Roba+U 0Ag'Deb{DomeEgu#Eri!IpeOtt&Ul&1Fabi,Fe|Fis(F-n Oris`O(R~$0AveEn.E_,Ganc'I!It&OnismoR>*Rume Uzzo4AbardaA Bat)Ber#BoBumeCeCol>E|<FaGeb-Ian.IbiIm[ Lag#Leg)Lie_Lo@/Lusi_Me$Oge$Pa}Pest!Ta,=Ter$T%c'T)veUn$Veo*Z&0Alga`Ani+A!=B{Br#EbaEr~E^s+I]Mas(M[daMir&Mon{O!P'Pli&U, 0A}r@Ag-feAlis+Arch?At-CaCel/Co-D&D!aEl*Ge*Gol&Gus I`Neg&Nid#NoNunc'OnimoT%ipoZi1At>Ertu-OdePari!Pe^ Pogg'P)@Pun Ri,1Ab~AchideAgos+Ald~Anc'Atu-AzzoBit)Chiv'D{Eni,G[ Gi<Gu IaMon?NeseRed#RingaRos S[>SoTef%eZil*0Ciu|Col EpsiEtt>Fal I$O/Pir#P)Sagg'SeSolu Sur@TaT[u T%eT-|0Av>EismoOm>O$TesaTiv&Tor$Tr{Tua,0Sil'Str?Tis+To$moTun$0Anz#E!V[i!Vi(Volge!3Io<O ZimoZur):Be,C}$Ci$CoDessaDi/+Gn#I+L]<L@Le=L/+Lza$Mbi$Ndi!RaondaRba)R}R{$RlumeRoc]Sil>S(Tos+Ttu U,VaVosa3C]FfaLg'LvaNdaNe_,Nig$Nzi=ReRli=Ta3Bi+CiDo<Fi@GaLanc?MboNo]*O*goPedePol&Rban.R-S]|Ses S$n$Son.SturiZzar)2An@At+2Ll{Nif>R@S]Tan>T^$Zzo*2Acc'AdipoA`An}Avu-E.l/Eve|EzzaIgl?Il/n.Ind&Oc]*O@Onzi=Ul*U$2Bbo<CaDi$Ffo<IoLboO$R*<R-s}S(/S+:De|Du]La`)L]*LesseLib)LmoLor?MbusaMe-+M%?Mmi$Mo/Mpa,NapaNde/NeNi$No|N^=PacePel*P{*Pogi)Ppe)P-Psu/RapaceR}ssaR@Ris`Rova=R!|R li=Sacc'S}+Ser`SoS(<S.l*Sua,Tas+Te=T-meU Vil*3Dibi,D-+Fa*Leb!Llul&NaNo<N.simoRam~Rc&R RumeRvel*So?SpoTo2E/Ia)Ic}Iede!Ime-I=IrurgoI+r-0AoClismoFr&G$Lind)O|*R}R)siTr>T+di$UffoVet+Vi,2Ass>In~O)2C]Dar@D%eE!n.G$meLl&Lm#Lo!Lpo(L^v#LzaMaMe+M`n@Mo@Mpu.rMu<Nci(Ndur!Nfer`Ngel&NiugeN<s(Nosce!NsumoN^nuoNveg$Per P'<Pp?Pr~poRazzaRda+R%#Rn%eRol/RpoR!@Rs?R.seSm>S+n.Ttu-V#2A.!Avat+E#Ede!Emo(Esci+E+Ice I=,IsiIt>OceO=}Os++Uc?,Us}2Ci!Cu*Gi$Ll#Po/R#!R(!R_Sci$S de:DoI$L`+Meri$Nie/N$(Nz&T#Van^Vve)3Bu|C[n'Ci(Cli$Col*C! D%#Fin{FormeG$Leg&Lfi$Lir'L+M[zaNot#Nt)Pos{Rapa+Riv&RogaScri|Ser Sider'Sume!Tersi_Vo 3Amet)Cemb!Ed)Fe(Ffu(Geri!Gi+,Luv'Nam>N=nziPin P*`Po*Rad&ReRo|RupoSag'Sc! Sf&Sge*Spos S+nzaSu`$ToVa$Vel Vide!Vor#5B*<C[.Ga=,G`LceM#M[~Min&N@*NoRmi!TeT !Vu Zzi=2AgoUi@2Bb'Bit&Ca,NaOmoPl%eRatu):0A$0Ces(CoLissiO$m?0E-I]/I,I r?Uc&2Emon?LiOismoReg'4Abor#Argi!Egan.Enc#E|Ev&F>I}MoSaU(0An#B,`Es(I)O^_Oz'<Pir>U*0Dem>Du)Erg?FasiO.}Tr&Zi`1A^.I*goI(d'O},Pu!0U#!0Ar'BaBo(EdeEmi+Ige!Met>OeOsi_Ran.0Ago$AmeAnimeAudi!CaEmp'Erc{Ib{Ig[.Is.!I OfagoOrt#O(Pan(P!s(S[zaSoTe(Tim&Ton?T)(Ult&0Il>N>Rus]To0ClideoRopa0A(Id[zaIt#Olu Viva:Bbr~Cc[daChi)L]Migl?Na,Nfa-NgoN+s`ReRfal/Ri$(R`]Sc?S (Sul*T%&ToVo*(3Bb!Co/DeG#LpaLt)Mmi=Nde!Nome$Rm[ R)R^,Ssu-S^_T+U@3AbaDuc?FaGur#LoNanzaNest-Ni!O!S},S>Ume2A]<Am[]EboEm`Ori@U[.Uo)2B>Cacc?Co(Der#Gl'La+Lc*!Lgo!Nd[.Net>N?N+=Rb{Rchet+Res+Rm~R='RoR.zzaRz&Sf#S(2A}s(A=Assi$A.l*Eccet+E=+Es]IgoOlli$OndeUga,Ut+2Ci/+Cs?Gg[.Lmi<L_Man.Me|Mo(NeNz'<O]RboRgo<Ro!SoTi,:Bb?$FfeLa.oLli=LoppoMbe)M`Ranz?RboRofa$Rzo<S@|Sol'Str>T Ud'ZeboZzel/3CoLa^=L(Mel*Mm#NeN{!N='No^poRgo2Epar@Iacc'Isa0Al*LdaNep)Oc&Oiel*Or$OveR#Ro<T++Udiz'Ur#Us 2Obu*U^<1Omo0BbaLfM{Mmo<Nf'N=Ver$2Aci,A@Af>AmmoAndeAtt&A_(Az?E}EggeIfo<Ig'InzaOt+Uppo2Adag$A'An Ard&FoId&::0Ern#0O=0Ent>Ill'O*RaR>Roge$2Ie<Na)Nor#4A!Le(Log>Lude!0Bal*Bevu Boc]Bu Ma<Mer(Mol#Pac]Pe PiegoPor P)n+0Al&Arc&At^_Can C[d'Chi$Cisi_Clu(Cont)C)c'CuboDagi<D?Do,Ed{Fat^Fil&Fli|Gagg'Geg$G,seGor@G)s(Nes]O@!Oltr&Ond#Sa$Se|SiemeSonn?Suli=Tas#Te)To=]Tu{Umidi!Vali@VeceV{1Erbo,Not>O.siP~1IdeLandaOn>Rig#Ror&0Ol#O poTer>Titu Tr%e0Al?Er&:::Bb)Birin C}Cer#Cri`Cu=D@veGoMpoNcet+N.r=R@(RgaRingeSt-T[zaTi$TtugaVag=Vo)3Ga,Gge)MboN.zzaNzaO<P!Si_Ss#S T.-,VaVig#3Be)DoEv{L/Matu-Mit&Mpi@Ne&NguaQui@RaR~S}TeTig'V!a5CandaDeG~Mb&Nd-Nge_QuaceR[zoToT.r?5CeCid#Ma}Mi$(NgoPoPpo*SingaS(T :Cab)Cchi=Ce)Cin#Da`G>Gl?G<.G)Iol~LafedeLg-@Lin.(Lsa$L Lumo!NaNc?N@r/Ngi&Nifes N=)Nov-NsardaN^deNubr'PpaR#=Rci!Ret+RmoRsup'Sche-Ssa?S^$Te-s(Tr>/T <Tu)Zur}3And)C}n>Ce=.DesimoDit&GaLassaLisLod?NingeNoN(/Rcur'R[daR*Schi$SeSse!S *Tal*To@T.!3Agol&CaCel'Che,C)boDol*E,Gl'!La$Li.MosaNe-,NiNo!Ri$R^l*Sce/SsivaS Sur&TezzaTig&T-T.n.4Emon>0Del*Dif~Du*Ga$G'LeLos(Nas.)N]Ndi=Ne+r'Ni,No $N(<Nt#Nvi(RaRde!Rs%#St)Tiv#TosegaT V[zaVim[ Zzo5C}CosaFfaGhe|G='La|Li<l*L^p*Mm?N Ove!Ra,SaS]*S~Te_,To:BabboF+Nomet)Rci(R%eRr#Sce!Str&Tu-,Ut~Vigl'3Bu*saC)siGa^_Goz'Mme$Ofi+Re|R_Ssu$Ttu$Ut-,VeV)t>3Cch?NfaTi@5Bi,Ci_DoMeMi=Rd>R`,RvegeseSt-$T&Tiz?Ttur$Vel/5C,oL/Me)O_Tri!Vo/Z?,:Si0Bedi!BligoElis]L'O*So, 0Cas'<Ch'Cid[.Cor!!Cult&RaUl#0Ier$Or&1Fer+Fri!Fusc#0Ge|GiNu$4AndeseFa|I#IvaOg-m`T!0Agg'Bel>B-EgaIss'<0Do(E!IceNi_)O!_,Ta1Er#In'<Pos 1A]*AfoDi<Ecchi$Ef%eFa$Gan>Igi<Izzon.MaMegg'Na^_O*g'R[@Ribi,T[s?T~Za+Zo0A!Cur&MosiPeda,Pi.SaSid&Ta]*Te0I.ReTago$TimoTob!1A,EstI$Ipa)Oc{UnqueVi&3Io:Cche|CeCif>Del/D)<EseGaGi=Lazzi=Les&Lli@LoLudeN@)N<l*O*O=zzoPr~Rabo/Rcel/Re!Rgo*RiRl#Ro/R^!Rv[zaRz?,Ssi_St%}Tac}To*g?TtumeVo<3Cc#Dal&Do=,Gg'Lo(N&Nd%eNi(/Nnu Nomb-Ns&N /PePi+Rbe<R]r(R@n#Rfor&Rgame=R'@Rmes(R$Rp,s(Rsua(Rtug'Rva(S#!Sis+SoS^fe)Ta*T^<Tu/n.Zzo3Ace!An+At^$Cci$CozzaEgaEt-Ffe)G?`Gol'G)LaLife)L*/Lo+Mpan.Ne+N=No*Ogg?OmboRamideRet>Ri.RolisiTo<Zz>2AceboAn&As`A+$E=r'2ChezzaDe)(DismoEs?Ggi&L[+Ligo$Ll%eLmoni.Lpet+L(Lt)=Lve!M%eMo@)N.Po*(Rfi@Ro(Rpo-R!R++SaSi^_Sses(Stul#Tass'Te!2AnzoAssiAt~Eclu(Ed~Efis(Egi#Elie_Eme!E$t&Epar#Es[zaE.s Eval(I`IncipeIv#Ob,`Ocu-Odur!OfumoOge|OlungaOmessaO$meOpos+O)gaO.(OvaUd[.Ug=Ur{0Iche1Bbl>D~Gil#G$LceL{Lsan.Nt&PazzoPil/Ro:99Ad)Al]saAsiE!/O+:C]l D@pp'D~,Dun#Ff~GazzoG'<G$Mar)MingoMoNdag'N l&P#Pi=Pp!(Satu-Schi#S[.Sseg=St!l*TaVvedu 3A,Cepi!Cin Clu+Cond{Cupe)Dd{Dime!Gal#Gist)Go/G!s(Laz'<M&Mo N=Pl~Prime!Put&SaSid[.Spon(S+u)TeTi=Tor~T^f~Voc#3Assun Badi!Bel,B!zzoCar~C]Ceve!C%l#Cor@C!du D>*Dur!Fas&F,s(For`Fug'G&Gett#Ghel*Lass#Lev#Ma<!MbalzoMed'Morch'Nasci+N})NforzoN$_Nom#Nsav{N c]Nunc?Nv[i!Par#Petu Pie$Port&P!saPuli!Sa+Sch'ServaSibi,SoSpe|S )Sult#S_l Tar@Teg$Tm>T)_Un'<VaVer(Vinci+Vol Zo`5BaBot>Bus Cc?CoDagg'De!D{!G{Ll'Mant>Mpe!Nz'Sol&SpoTan.Ton@Tu/Vesc'5BizzoBr~GaLli$Mi<Mo)(O*PeSs&St>:B#Bbi&Bot#Go`Las(Ldatu-Lgem`Liv&Lmo<Lo<Lt&Lu L_Pe!Pi@Por{Race$R}smoR S((Telli.Ti-Tol*Tur$Va=V'Zi#0Adigl'AlzoAnc#Ar-At.!Av&End&Irci&Locc#Occi#Rin&Ruffo<Uff&0Ab)(Ad[zaA/Ambi&Anda*Apo/Ar(A.n&Av#El En>Ett)HedaHie=IarpaI[zaInde!IppoI)ppoI_*Ler&Odel/Olp{Ompar Onfor Opri!Or+Os(<OzzeseRibaRoll&Ru^n'Uder?Ul !Uo/U)Us&0Ebit&Ogan&0C}tu-Con@Da$Gg'/G=l#G!g#Gu{Lci#Let^_L/Lvagg'Mafo)Mbr&MeMin#Mp!N(N^!Pol Qu[zaRa+Rb#Re$R'Rp[.R-gl'Rvi!S^=To/T^`=0Ace*Ald&Am#Arzo(At%#E-IdaIl#IngeOc#Oder&OgoOl^!Orz#Ra|Rutt#Ugg{Um&U(0Abel*Arb#Onfi&Orb'Rass#Uar@1Bi*C]meEr-G/G$!L[z'L/baMbo*Mpat>Mul#Nfon?Ngo*Nist)NoN.siNu(idePar'S`S ,Tu#2It+Ogatu-Ove$0Arr{Emor#En^ E-l@IlzoOnt&Ott#Uss#0Elli!Erv#O@0BbalzoBr'C]r(C?,Da,Ffi|G$Ld#L[<Li@L/zzoLoLubi,Lv[.Mat>M`NdaNe|Nnife)Pi!Ppe(P-Rge!Rpas(Rri(R(R.gg'R_l#Spi)S+T^,0AdaAl/Arge!A /Av[ Azzo/EcieEdi!Eg<!E/tu-E-nzaEs(!Ett-,Ezz#IaIgo*(Ill#I$(I-,L[di@Or^_O(RangaRec&Ron#RuzzoUn^$0Uil*0Ad%&O l#1Abi,Ac]AffaAgn&Amp#Ant'Arnu Ase-Atu E*EppaErzoI,|I`IrpeIva,Izzo(On#Or>RappoReg#Ridu*Rozz&Ru|Ucc&UfoUp[@0B[t)C](Do!Gger{GoL+$On&PerboPpor Rgel#R)g#Ssur)Tu-0Ag&EdeseEgl'El&Enu Ez?IluppoIs+Izze-Ol+Uot&:Bac]Bul#Cci&Citur$LeLis`$Mpo<Nni$RaRdi_Rg#RiffaRp&R+rugaS Tt>Ver=Vo/+Zza3CaCn>Lefo$Me-r'MpoMu N@<Ne)Ns'<N+]*O!`RmeR-zzoRze|SiSser#St#T)T ?3F&Gel/Mb)N P>Pog-foRagg'RoTan'To*Tuban.Z'Zzo<5Cc&L,r&L Mbo/MoNfoNsil/Paz'Po*g?PpaRbaRn&R)<R -S}$Ssi!S+tu-Ta$2Aboc]AcheaAfi/Aged?Alc'Amon Ans{Apa$Ar!As*]Att#AveEcc?Emol'Espo*Ibu Iche]Ifogl'Il*InceaIoIs.zzaItur#Ivel/OmbaO$OppoO|/Ov&Ucc#2Batu-Ff#Lipa$Mul Nis?Rb&Rchi$TaTe/:0Ic#0Cel*Ci(!0I!I^_1FaF%'0Ua,4IsseTim#0A$I,Orismo0Ci<|Ge!Ghe!seI]r$If%#I($I+r'Te0Vo0Upa1Aga$G[zaLo0AnzaA C{Ig$*U-'0Ensi,IlizzoOp?:Can.Ccin#Gabon@Gli#LangaLgoL>L,t+Lo)(Lut&L_/Mpa+Ng&N{(NoN+gg'Nve-Po!Ra$Rc#R?n.S}3Det+DovaDu Ge+,I]*Lc)Li=Llu LoceN#Ndemm?N RaceRba,Rgog=Rif~RoRru}Rt~,Sc~Ssil*S+,Te-$Tri=Tus 3Andan.B-n.C[daChingoCi=nzaDim&Gil?G< Go!LeL/$MiniNc{!O/Pe-Rgo/Ro*goRu,n S](S'<SpoSsu Su-TaTel*T^`VandaVi@Zi&5CeGaLa^,Le!LpeRagi<5L}$::::Mpog=N=Pp#T.-Vor-3Fi)Lan.LoNze)Rbi$3Be|N]R]<T 5L/T>5Cche)Fo*LuPpa", "0x5c1362d88fd4cf614a96f3234941d29f7d37c08c5292fde03bf62c2db6ff7620");
          }
          return b(o2, null, [{ key: "wordlist", value: function() {
            return null == Ys && (Ys = new o2()), Ys;
          } }]), o2;
        }(Ht);
        function eu() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (eu = function() {
            return !!e3;
          })();
        }
        var tu = null, ru = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = eu(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2() {
            return h(this, o2), n2.call(this, "pt", "0arad!ototealirertainrasoent hoandoaR#riareha!aroele'oronul0Aca%AixoAl A%rDuz'El]Er$IsmoO$ R<g(Revi Rig Rup$S*$Solu$Sur=Ut[0Ab#Alm Amp Anh A,Ei.El( En ErvoEss E$naHa.IdezImaI}#Irr Lam LiveOlhidaOmod Opl Ord Um~ Us?0Ap.EgaEnt_Ep$Equ Er-%EsivoEusI<%ItivoJetivoJun$M' Or Qu''UboV(,Vog#0R}ave0As.Er'EtivoIn?Iv` Li$Lu-%R}.0Ach Arr As&/Enci Iliz Io)It#O+R! Res%Rup U d Ul]2O`h Ud Us.1AmedaArmeAstr Av<caB(gueB*oCat+De@EcrimEgr@Er.FaceF*e%GumHeioI Ica%I- Inh Ivi Mof^Oc Pis%T( TitudeUc* Ug UnoUsivoVo0Aci A=rA[loAss BasBi-%EixaEniz I=Is$,Iz!eOl?On$ O_,Ost+P  Pli Pola0Ag+maAlis Arqu@A$m@DaimeElExoG~ Im JoOm&@Ot#Sio,T(i|Uid!eUnci Zol1Ag?Alp Anh#EgoEli=Ert^Es Eti%I$Lau,Lic^OioOn.Os)R-dizRov 0Uec(0AmeAn]A+C^D-%E@Ej Eni$Es)Gilo,GolaMaQuivoRai&Reba%Risc Rob>um S-&T(i&TigoVo[=0F&.Il#P' S?S* So&/Sun$Tr&0Ac#Adu+Al/A[f E End(Er_EuIng'Ir?IvoOl{oRac Revi=RizU&Um0Di$rM-.R>o+TismoT|@Tu 0Ali An%Ar@Ent&Es,I?Is Ul,1Ila1Ar E=Ei%Ulejo:B BosaC&]uCh `C@GagemI<oIl I}e)Ir_Ixis)J~ Le@LizaLsaN&Nd{aN/N'Nque%Ra$Rb#R}es>+c>~/Se#S)n%Ta)Te=rTidaTomTuc Unil]3B(IjoIr^IsebolLd!eLezaLgaLisc Ndi$Ng&aNz(RimbauRl*d>_Sou_XigaZ(_3CoCu=En&Foc&Furc G|naLhe%Mest[Mo$rOlog@OmboOsf(aPol Rr-$Scoi$Sne$SpoSsex$TolaZ _2Ind#OcoOque 2A$BagemC#CejoChec]Ico.L^LetimL]LoMb{oNdeNecoNi)Rb~h>d>e&R+c]V*oXe?2AncoAsaAvezaEuIgaIl/Inc OaOchu+Onze O$Uxo2C]DismoF LeRacoScaS$Z*a:B<aB`oBideBoBri$CauCet^C/r_CiqueDast_De#Fez&IaqueIp'aIxo%J#JuLafrioLc~ Ld{aLibr Lm<%Lo)M^Mbis)MisaMomilaMp<]Mufl Navi&Nc` Ne)NguruN/$Nive%NoaNs#N.Nu=Pac/P`aP* Po.Pric/Pt?PuzRacolRb}oRde&Rec>imb Rn{oRpe%R['>)zRv&/SacoScaSeb[S%loS~oT a)Tiv UleUs?U%l V&oV(na3BolaDil]G}]Lebr L~ Nou+N,N%ioRc Rr#R%'oRvejaTimV^2Aco)Al{aAm#Ap^ArmeAticeAveEfeEg^E'oEqueIco%If[In`oOc&/Ov(UmboU.Uva0CatrizCl}eD!eD['aEn%G<aM-$N$Nz><d>cui$Rurg@T 2A[zaE_Ic OneUbe2A=Ag'Ba@B($rBr C^El/Ent_E,Gum`oIb'IfaIo%L L{aLh(Lid'Lme@L}oLunaM<=Mb* M-.MitivaMov(MplexoMumNc]N=rNec.Nfu,Ng` Nhec(Njug Nsum'Nt+$Nvi%Op( P{oPi?PoQue%lRagemRdi&Rne)R}h>p|&R[ioR%joRuj>voSs-oS%laT}e%U_UveVilZ*]2A%+AvoEcheE=rEmeErEspoI^Im*&Io~oIseItic Os)UaUz{o2B<oEcaId#JoLat+Lm* Lp Ltu+Mpr'Nh#Pi=RativoRr&Rs R$Sp'S% T`o:MascoT 3Ba%rBi.BocheB~h C&queCim&CliveCo%C[.D&Dic#Duz'FesaFum G`oG+uGus.It#Ix La$rLeg#L*e L}gaM<daMit'Moli=Ntis)P-#Pil PoisP[ssaPur Riv>+m SafioSbo.Sc<,S-/Sfi#Sgas%Sigu&SlizeSmam SovaSpesaS)queSvi T&h T-$rT} Tri$UsaV(Vi=Vot#Z-a3Ag+maAle$Da)Fu,Gi.Lat#Lu-%M*u'Nast@Nh{oOceseRe$Sc[)Sf ceSp oSque%Ssip S)n%T?UrnoV(,Vi,rV~g Z(5Br?L|i=M?M*#NativoNz`>m-%Rs&SagemUr#U$r2EnagemIbleOg @2El EndeE$PloQues><%Vi=,:1Lod'O Olog@0Ific It&Uc#1Ei$Etiv 3E.1Ab| Eg(Ei$rEncoEv?Im* Ogi 0B goBol#Br~/Buti=EndaErg'Is,rPat@P-/P*#Polg P[goPurr Ul?0CaixeC-#Ch-%C}t_Deus Doss Faix Fei%FimGaj#G-/Glob Gom#G+x Gu@Jo La.Qu<$Raiz Rol#Rug SaioSe^S*oSop#T<$Te#Tid!eT|.Tr^T~/V(g Vi#Volv(XameX($Xof[Xu$1Id(me0Uip 0E$Gui=Ra)VaVil]0B<j B`$CamaColaCri)Cu)F*geFol F[g Fum#GrimaM&%P<$P`/PigaP}jaP[i)Pum Qu(daTacaT{aTic Tof#T[laTu=Vazi 0AnolIque)0F|i>opeu0Acu Ap| AsivoEntu&Id-%Olu'1Ag(oAl Am* A$Aus$Ces,Ci.Clam Ecu.EmploIb'Ig-%On( P<d'P`'P' Pl< Pos$P[s,P~s T(noT*$T+$:Bric B~o,Ce)Ci&DaDigaIxaL L)Mili Nd<goNf +N$cheRd#R`oR*h>of>p>tu+T@T|V|i)X*aZ-da3Ch#Ijo^I+n%L*oM**oNdaNoR>i#RrugemRv(S%j T&Ud&3ApoB_seC Ch{oGur#L{aL/LmeLtr RmezaSg^Ssu+TaV`aX?Xo2AcidezAm*goAn`aEch^O+Utu Uxo2C&C*/Foc GoGue%IceLg#Lhe$Rj Rmig>noR%ScoSsa2Aga)AldaAngoAscoA%rnoE'aEn%E.IezaI,Itu+On]Ustr U%'a2G'L<oLigemNd NgoNilR?Rio,Tebol:B i$B*e%DoIa$IolaIvo)LegaL/L*]Loc]Nh RagemRfoRg&oRimpoRoup>+faSodu$S$TaTil/Ve)Z`a3L#Le@LoM^M(Mi=N(o,NgivaNi&NomaN_Ologi>?Rm* S,S$r3Nas)Nc<aNg#Raf>*o2Aci&IcoseOb&Orio,2ElaIabaLfeLpe Rdu+Rje)R_S$,T{aV(n 2AcejoAdu&Afi%Al]AmpoAn^Atui$Ave$AxaEgoElh EveIloIs&/I.@Os,O%scoUd#Unhi=U)2AcheA+niAx*imEr[ I Inc/Is#LaLo,Ru:Bi.Rm}@S%V(3C.eRd Res@Si.3A$B(n D+.EnaNoPismoPnosePo%ca5JeLofo%MemNes$Nr#Rm}&Sped 5M|#:Te2E@O,2N|#RejaU<a4E,HaUdi=Um* Ustr 0AgemEd@$En,ErsivoIn-%It?Ort&Pac$Ped'Pl<%P|Pr-saPuneUniz 0Al?Ap$AtivoC-,Ch Cid'Clu'Col|Deci,D'e$Du$rEficazEr-%F<tilFes.F*i$Flam F|m&F+$rG('Ibi=Ici&ImigoJe.Oc-%O=_Ov?OxQuie$Scri$Se$Sist'Spe$rSt& S~$Tac$Tegr&Tim Toc#TrigaVa,rV(noVic$Voc 0Gur%2Ani<oOniz Re&Rit#0CaEn$Ol#Qu{o0Ali<o:N{oNg^N)R ac>dimR_SmimToV&iZida3Jum9An*]Elh^G?I>n&Rr Vem5BaDeuDocaIzLg?L/R#Ris)RoS)::B edaB|&C[C)n%Dril/G )GoaJeMb(M-.M* MpejoNchePid P,R<j>{>gu+S<]St_T(&Ti=V<daVou+Vr?X<%Z(3Ald!eB[G#G-d Gis)IgoIlo Itu+Mb[%MeNh?Ntil]OaSmaS%TivoT['oV VezaVi.3B(&Bi=D( G G{oMi.Mo{oMp?NdaNe N]gemQuidezS)gemSu+T|&V_XaX{a5C?Cu$rJis)MboNaNgeNt+RdeT#T(@Ucu+UsaUv 5ArCidezC_Ne)St[T?Va:CacoCe%Ch#CioD{aDr*]Gna)G[zaI|IsL<d_L]Lo%LucoMiloMo{oMu%N^Nc]Nda$NequimN/,Niv`aNobr NsaN%rNuse Pe#Qu* Rc?Resi>fimRgemR*/Rmi)Ro$RquiseR[coR%loRujoSco%Sm|+SsagemStig Tag&T(noT*&Tu.Xil 3D&]DidaDusaGaf}eIgaL<c@L/rMb_M|i&N*oNosNsagemNt&Rec(Rg~/S^Scl SmoSqui)St[T!eTeo_T+gemX(Xic<o3C_G&]Gr Lag[L- Lh M#N( N/caNist_N|@OloR<%RtiloStur 5Cid!eD(noD~ EdaErIn/I)Ldu+LezaL/L*e%LuscoN)n]Quec><goRcegoR=moR-aSaicoSque%S.daT`TimToTriz5DaI$La)Lh(L.Ndi&Ni=R&h>c/Sc~ SeuSic&:Ci}&D?JaMo_R*>r#Sc(TivaTu[zaV&]Veg Vio3Bl*aB~o,GativaGoci Gri$Rvo,TaUr&VascaVo{o3N N/TidezV` 5B[zaI%IvaMe M*&Rdes%R% T Tici TurnoV`oVil/Vo5Bl#DezM(&Pci&Tr'Vem:0Cec#Edec(JetivoRig#Scu_S%t+T(Tur 0Id-%Io,Orr(Ulis)Up#2Eg<%EnsivaEr-daIc*aUsc#0Iva4Ar@Eo,H Iv{a0B_Ele%Is,It'0D~#E_,Tem1Ci}&Er?On-%OrtunoOs$1ArBi.DemD*&F<a$GasmoG~/I-t&IgemIun=LaTo=xoV&/0Cil S^SoT-.0Imismo0S!@T}oTub_Vi=0El]Ul 1Id Ig- :Ca$Ci-%Co%Ctu D @Dr*/G GodeIn`Ir IsagemLav+Lest+Lhe)Li$Lm^Lpi.Nc^N`aNfle$NquecaN)n&PagaioP`^P'oRaf*>ci&Rd&RedeRtidaSmoSs#S%lTam T-%T* T_noUl^Us 3C~i D& Dest[D@t+D+G^I$r&IxeLeLic<oNcaNdur N{aN]scoNs?N%Rceb(Rfei$Rgun)Ri$Rmit'Rn>plexoRsi<>%nceRucaSc#SquisaS,aTisc 3AdaC#Ed!eGm-$Last+Lh#Lo.M-)Nc`NguimN]No%N.On{oPocaQue%R<h>esRue)Sc S$laT<gaVe%2An)Aque)At*aEbeuUmagemUvi&1Eu0DaE'aEtisaLeg^Lici Lu-%Lvil/M MbaNd( N.@P~o,R)Ssu'St&TeUp U,Vo 2A@Anc]A$AxeEceEd?Efei$Emi Ens Ep  Esil]E%x$Ev-'Ez Ima)IncesaIsmaIv#Oces,Odu$Ofe)Oibi=Oje$Ome%rOpag OsaO%$rOv?2Blic DimL Lm} Ls{aNh&N'PiloRezaX?:99Ad+Ant@Ar$AseEbr EdaEijoEn%Eri=Im}oInaIosque:B<^BiscoCh Ci} Di&I In]IoIvaJ^L#M&Ng(Nhu+P!u+P`PidezPosaQue%Rid!eS<%Scun/Sg Sp?S%'aSur Taz<aTo{a3AlezaAnim Av(Baix B`deBol C#C-%CheioCiboC|d Cru.Cu DeDim'D}daDuzidaEnvioF* Flet'Fog F[scoFugi G&@GimeG+In#I$rJei.LativoM?M-=M|,Nov#P oP`'Ple$Pol/P[saPudi Qu((S-]Sfri Sga.Sid'Solv(Spei$SsacaS)n%Sum'T&/T(T' Tom^T+.V` Vi,rVol)3Ac/CaGidezGo_,M NgueS^ScoS}/5B&oChe=D^DeioDov@E=rLe)M<oNc S#S{aS$TaT{oT*aT~ UcoUpaXo5B_Gi=Go,IvoMoPest[S,:B|Ci ColaCud'DioF'aGaGr^Ib_L^L{oLg#LivaLpic Lsic]L.Lv?Mb Mu+iN Nf}aNgueNid!ePa$Rd>g-$Rje)Tur Ud!eXof}eZ}&3C C~ DaD-$Di#Do,Du$rGm-$G[=Gun=IvaLe$LvagemM<&M-%N?N/rNsu&Nt#P #Rei>*g>+RvoTemb_T|3GiloLhue)Lic}eMetr@Mpat@M~ N&Nc(oNg~ NopseN$ni>-eRiTu#5B(<oB+C|_G_JaLdaLetr L%'oMbrioNa)Nd Neg Nh?NoP+noQue%Rr'R%ioSsegoTaqueT(r V#Z*/5Aviz BidaBm(,B,loBt+'Ca)Ces,CoDes%FixoG?G('Jei$Lfa$M'OrP(i|Plic Pos$Prim'Rd*>fis)Rp[s>[&Rt'Sp'oS%n$:B`aBle%Bu^C/G `aLh(LoLvezM</Mb|imMpaNg-%N$P Pioc>dioRef>j>+xaTuagemUr*oXativoXis)3Atr&C(Ci=Cl#Dio,IaIm Lef}eLh#Mp(oN-%N,rN.Rm&RnoRr-oSeSou+St#ToXtu+Xugo3A+G`aJoloMbr MidezNgi=N%'oRagemT~ 5Al]C]L( LiceM^Mil/N`Ntu+Pe%R>ci=RneioRqueRr!>$S.UcaUp{aX*a2Ab&/Acej Adu$rAfeg Aje$AmaAnc ApoAs{oAt?Av E*oEm(Epid EvoIagemIboIcicloId-%Ilog@Ind!eIploItur Iunf&Oc Ombe)OvaUnfoUque2B~ C<oDoLipaPiRboRm>quesaT` T|i&:7V 3Bigo0HaId!eIf|me3Olog@SoTigaUbu0A=InaUfru':C*aDi G o,I=,LaL-%Lid!eLo[sN)gemQu{oR<d>e)Rr(Sc~ Sil]S,u+Z Zio3A=D Ge.Ic~ L{oLhiceLu=Nce=rNdav&N( Nt[Rb&Rd!eRe?Rg}h>m`/RnizRs R%n%SpaSti=T|i&3Adu$AgemAj Atu+Br?D{aDr @ElaGaG-%Gi G| L ejoNcoNhe)NilOle)R!>tudeSi.S$Tr&V{oZ*/5A=rArG&L<%LeibolL)gemLumo,Nt!e5L$Vuz`a::D[zRope3QueRe.Rife3Ng ::Ng#Rp 3BuL?9Mb Olog@5Mbi=", "0x2219000926df7b50d8aa0a3d495826b988287df4657fbd100e6fe596c8f737ac");
          }
          return b(o2, null, [{ key: "wordlist", value: function() {
            return null == tu && (tu = new o2()), tu;
          } }]), o2;
        }(Ht);
        function nu() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (nu = function() {
            return !!e3;
          })();
        }
        var ou = "}aE#4A=Yv&co#4N#6G=cJ&SM#66|/Z#4t&kn~46#4K~4q%b9=IR#7l,mB#7W_X2*dl}Uo~7s}Uf&Iw#9c&cw~6O&H6&wx&IG%v5=IQ~8a&Pv#47$PR&50%Ko&QM&3l#5f,D9#4L|/H&tQ;v0~6n]nN<di,AM=W5%QO&ka&ua,hM^tm=zV=JA=wR&+X]7P&NB#4J#5L|/b[dA}tJ<Do&6m&u2[U1&Kb.HM&mC=w0&MW<rY,Hq#6M}QG,13&wP}Jp]Ow%ue&Kg<HP<D9~4k~9T&I2_c6$9T#9/[C5~7O~4a=cs&O7=KK=An&l9$6U$8A&uD&QI|/Y&bg}Ux&F2#6b}E2&JN&kW&kp=U/&bb=Xl<Cj}k+~5J#6L&5z&9i}b4&Fo,ho(X0_g3~4O$Fz&QE<HN=Ww]6/%GF-Vw=tj&/D&PN#9g=YO}cL&Of&PI~5I&Ip=vU=IW#9G;0o-wU}ss&QR<BT&R9=tk$PY_dh&Pq-yh]7T,nj.Xu=EP&76=cI&Fs*Xg}z7$Gb&+I=DF,AF=cA}rL#7j=Dz&3y<Aa$52=PQ}b0(iY$Fa}oL&xV#6U=ec=WZ,xh%RY<dp#9N&Fl&44=WH*A7=sh&TB&8P=07;u+&PK}uh}J5#72)V/=xC,AB$k0&f6;1E|+5=1B,3v]6n&wR%b+&xx]7f=Ol}fl;+D^wG]7E;nB;uh^Ir&l5=JL,nS=cf=g5;u6|/Q$Gc=MH%Hg#5d%M6^86=U+$Gz,l/,ir^5y&Ba&/F-IY&FI&be%IZ#77&PW_Nu$kE(Yf&NX]7Z,Jy&FJ(Xo&Nz#/d=y7&MX<Ag}Z+;nE]Dt(iG#4D=13&Pj~4c%v8&Zo%OL&/X#4W<HR&ie~6J_1O(Y2=y5=Ad*cv_eB#6k&PX:BU#7A;uk&Ft&Fx_dD=U2;vB=U5=4F}+O&GN.HH:9s=b0%NV(jO&IH=JT}Z9=VZ<Af,Kx^4m&uJ%c6,6r;9m#+L}cf%Kh&F3~4H=vP}bu,Hz|++,1w]nv}k6;uu$jw*Kl*WX&uM[x7&Fr[m7$NO&QN]hu=JN}nR^8g#/h(ps|KC;vd}xz=V0}p6&FD$G1#7K<bG_4p~8g&cf;u4=tl}+k%5/}fz;uw<cA=u1}gU}VM=LJ=eX&+L&Pr#4U}p2:nC,2K]7H:jF&9x}uX#9O=MB<fz~8X~5m&4D&kN&u5%E/(h7(ZF&VG<de(qM|/e-Wt=3x(a+,/R]f/&ND$Ro&nU}0g=KA%kH&NK$Ke<dS}cB&IX~5g$TN]6m=Uv,Is&Py=Ef%Kz#+/%bi&+A<F4$OG&4C&FL#9V<Zk=2I_eE&6c]nw&kq$HG}y+&A8$P3}OH=XP]70%IS(AJ_gH%GZ&tY&AZ=vb~6y&/r=VI=Wv<Zi=fl=xf&eL}c8}OL=MJ=g8$F7=YT}9u=0+^xC}JH&nL^N0~4T]K2,Cy%OC#6s;vG(AC^xe^cG&MF}Br#9P;wD-7h$O/&xA}Fn^PC]6i]7G&8V$Qs;vl(TB~73~4l<mW&6V=2y&uY&+3)aP}XF;LP&kx$wU=t7;uy<FN&lz)7E=Oo*Y+;wI}9q}le;J6&Ri&4t&Qr#8B=cb&vG=J5|Ql(h5<Yy~4+}QD,Lx=wn%K/&RK=dO&Pw,Q9=co%4u;9u}g0@6a^4I%b0=zo|/c&tX=dQ=OS#+b=yz_AB&wB&Pm=W9$HP_gR=62=AO=ti=hI,oA&jr&dH=tm&b6$P2(x8=zi;nG~7F;05]0n[Ix&3m}rg=Xp=cd&uz]7t;97=cN;vV<jf&FF&F1=6Q&Ik*Kk&P4,2z=fQ]7D&3u,H0=d/}Uw<ZN<7R}Kv;0f$H7,MD]7n$F0#88~9Z%da=by;+T#/u=VF&fO&kr^kf<AB]sU,I5$Ng&Pz;0i&QD&vM=Yl:BM;nJ_xJ]U7&Kf&30,3f|Z9*dC)je_jA&Q4&Kp$NH(Yz#6S&Id%Ib=KX,AD=KV%dP}tW&Pk^+E_Ni=cq,3R}VZ(Si=b+}rv;0j}rZ]uA,/w(Sx&Jv$w9&4d&wE,NJ$Gy=J/]Ls#7k<ZQ<Y/&uj]Ov$PM;v3,2F&+u:up=On&3e,Jv;90=J+&Qm]6q}bK#+d~8Y(h2]hA;99&AS=I/}qB&dQ}yJ-VM}Vl&ui,iB&G3|Dc]7d=eQ%dX%JC_1L~4d^NP;vJ&/1)ZI#7N]9X[bQ&PL=0L(UZ,Lm&kc&IR}n7(iR<AQ<dg=33=vN}ft}au]7I,Ba=x9=dR~6R&Tq=Xi,3d$Nr&Bc}DI&ku&vf]Dn,/F&iD,Ll&Nw=0y&I7=Ls=/A&tU=Qe}Ua&uk&+F=g4=gh=Vj#+1&Qn}Uy*44#5F,Pc&Rz*Xn=oh=5W;0n_Nf(iE<Y7=vr=Zu]oz#5Z%mI=kN=Bv_Jp(T2;vt_Ml<FS&uI=L/&6P]64$M7}86<bo%QX(SI%IY&VK=Al&Ux;vv;ut*E/%uh<ZE|O3,M2(yc]yu=Wk&tp:Ex}hr,Cl&WE)+Z=8U}I2_4Q,hA_si=iw=OM=tM=yZ%Ia=U7;wT}b+;uo=Za}yS!5x}HD}fb#5O_dA;Nv%uB(yB;01(Sf}Fk;v7}Pt#8v<mZ#7L,/r&Pl~4w&f5=Ph$Fw_LF&8m,bL=yJ&BH}p/*Jn}tU~5Q;wB(h6]Df]8p^+B;E4&Wc=d+;Ea&bw$8C&FN,DM=Yf}mP~5w=fT#6V=mC=Fi=AV}jB&AN}lW}aH#/D)dZ;hl;vE}/7,CJ;31&w8,hj%u9_Js=jJ&4M~8k=TN&eC}nL&uc-wi&lX}dj=Mv=e2#6u=cr$uq$6G]8W}Jb:nm=Yg<b3(UA;vX&6n&xF=KT,jC,De&R8&oY=Zv&oB]7/=Z2&Oa}bf,hh(4h^tZ&72&Nx;D2&xL~5h~40)ZG)h+=OJ&RA]Bv$yB=Oq=df,AQ%Jn}OJ;11,3z&Tl&tj;v+^Hv,Dh(id=s+]7N&N3)9Q~8f,S4=uW=w4&uX,LX&3d]CJ&yp&8x<b2_do&lP=y/<cy_dG=Oi=7R(VH(lt_1T,Iq_AA;12^6T%k6#8K[B1{oO<AU[Bt;1b$9S&Ps<8T=St{bY,jB(Zp&63&Uv$9V,PM]6v&Af}zW[bW_oq}sm}nB&Kq&gC&ff_eq_2m&5F&TI}rf}Gf;Zr_z9;ER&jk}iz_sn<BN~+n&vo=Vi%97|ZR=Wc,WE&6t]6z%85(ly#84=KY)6m_5/=aX,N3}Tm&he&6K]tR_B2-I3;u/&hU&lH<AP=iB&IA=XL;/5&Nh=wv<BH#79=vS=zl<AA=0X_RG}Bw&9p$NW,AX&kP_Lp&/Z(Tc]Mu}hs#6I}5B&cI<bq&H9#6m=K9}vH(Y1(Y0#4B&w6,/9&gG<bE,/O=zb}I4_l8<B/;wL%Qo<HO[Mq=XX}0v&BP&F4(mG}0i}nm,EC=9u{I3,xG&/9=JY*DK&hR)BX=EI=cx=b/{6k}yX%A+&wa}Xb=la;wi^lL;0t}jo&Qb=xg=XB}iO<qo{bR=NV&8f=a0&Jy;0v=uK)HK;vN#6h&jB(h/%ud&NI%wY.X7=Pt}Cu-uL&Gs_hl%mH,tm]78=Lb^Q0#7Y=1u<Bt&+Q=Co_RH,w3;1e}ux<aU;ui}U3&Q5%bt]63&UQ|0l&uL}O7&3o,AV&dm|Nj(Xt*5+(Uu&Hh(p7(UF=VR=Bp^Jl&Hd[ix)9/=Iq]C8<67]66}mB%6f}bb}JI]8T$HA}db=YM&pa=2J}tS&Y0=PS&y4=cX$6E,hX,XP&nR;04,FQ&l0&Vm_Dv#5Y~8Z=Bi%MA]6x=JO:+p,Az&9q,Hj~6/}SD=K1:EJ}nA;Qo#/E]9R,Ie&6X%W3]61&v4=xX_MC=0q;06(Xq=fs}IG}Dv=0l}o7$iZ;9v&LH&DP-7a&OY,SZ,Kz,Cv&dh=fx|Nh,F/~7q=XF&w+;9n&Gw;0h}Z7<7O&JK(S7&LS<AD<ac=wo<Dt&zw%4B=4v#8P;9o~6p*vV=Tm,Or&I6=1q}nY=P0=gq&Bl&Uu,Ch%yb}UY=zh}dh}rl(T4_xk(YA#8R*xH,IN}Jn]7V}C4&Ty}j3]7p=cL=3h&wW%Qv<Z3=f0&RI&+S(ic_zq}oN&/Y=z1;Td=LW=0e=OI(Vc,+b^ju(UL;0r:Za%8v=Rp=zw&58&73&wK}qX]6y&8E)a2}WR=wP^ur&nQ<cH}Re=Aq&wk}Q0&+q=PP,Gc|/d^k5,Fw]8Y}Pg]p3=ju=ed}r5_yf&Cs]7z$/G<Cm&Jp&54_1G_gP_Ll}JZ;0u]k8_7k(Sg]65{9i=LN&Sx&WK,iW&fD&Lk{9a}Em-9c#8N&io=sy]8d&nT&IK(lx#7/$lW(Td<s8~49,3o<7Y=MW(T+_Jr&Wd,iL}Ct=xh&5V;v4&8n%Kx=iF&l2_0B{B+,If(J0,Lv;u8=Kx-vB=HC&vS=Z6&fU&vE^xK;3D=4h=MR#45:Jw;0d}iw=LU}I5=I0]gB*im,K9}GU,1k_4U&Tt=Vs(iX&lU(TF#7y,ZO}oA&m5#5P}PN}Uz=hM<B1&FB<aG,e6~7T<tP(UQ_ZT=wu&F8)aQ]iN,1r_Lo&/g:CD}84{J1_Ki&Na&3n$jz&FE=dc;uv;va}in}ll=fv(h1&3h}fp=Cy}BM(+E~8m}lo%v7=hC(T6$cj=BQ=Bw(DR,2j=Ks,NS|F+;00=fU=70}Mb(YU;+G&m7&hr=Sk%Co]t+(X5_Jw}0r}gC(AS-IP&QK<Z2#8Q$WC]WX}T2&pG_Ka,HC=R4&/N;Z+;ch(C7,D4$3p_Mk&B2$8D=n9%Ky#5z(CT&QJ#7B]DC]gW}nf~5M;Iw#80}Tc_1F#4Z-aC}Hl=ph=fz,/3=aW}JM}nn;DG;vm}wn,4P}T3;wx&RG$u+}zK=0b;+J_Ek{re<aZ=AS}yY#5D]7q,Cp}xN=VP*2C}GZ}aG~+m_Cs=OY#6r]6g<GS}LC(UB=3A=Bo}Jy<c4}Is;1P<AG}Op<Z1}ld}nS=1Z,yM&95&98=CJ(4t:2L$Hk=Zo}Vc;+I}np&N1}9y=iv}CO*7p=jL)px]tb^zh&GS&Vl%v/;vR=14=zJ&49|/f]hF}WG;03=8P}o/&Gg&rp;DB,Kv}Ji&Pb;aA^ll(4j%yt}+K$Ht#4y&hY]7Y<F1,eN}bG(Uh%6Z]t5%G7;+F_RE;it}tL=LS&Da=Xx(S+(4f=8G=yI}cJ}WP=37=jS}pX}hd)fp<A8=Jt~+o$HJ=M6}iX=g9}CS=dv=Cj(mP%Kd,xq|+9&LD(4/=Xm&QP=Lc}LX&fL;+K=Op(lu=Qs.qC:+e&L+=Jj#8w;SL]7S(b+#4I=c1&nG_Lf&uH;+R)ZV<bV%B/,TE&0H&Jq&Ah%OF&Ss(p2,Wv&I3=Wl}Vq;1L&lJ#9b_1H=8r=b8=JH(SZ=hD=J2#7U,/U#/X~6P,FU<eL=jx,mG=hG=CE&PU=Se(qX&LY=X6=y4&tk&QQ&tf=4g&xI}W+&mZ=Dc#7w}Lg;DA;wQ_Kb(cJ=hR%yX&Yb,hw{bX_4X;EP;1W_2M}Uc=b5(YF,CM&Tp^OJ{DD]6s=vF=Yo~8q}XH}Fu%P5(SJ=Qt;MO]s8<F3&B3&8T(Ul-BS*dw&dR<87}/8]62$PZ]Lx<Au}9Q]7c=ja=KR,Go,Us&v6(qk}pG&G2=ev^GM%w4&H4]7F&dv]J6}Ew:9w=sj-ZL}Ym$+h(Ut(Um~4n=Xs(U7%eE=Qc_JR<CA#6t<Fv|/I,IS,EG<F2(Xy$/n<Fa(h9}+9_2o&N4#7X<Zq|+f_Dp=dt&na,Ca=NJ)jY=8C=YG=s6&Q+<DO}D3=xB&R1(lw;Qn<bF(Cu|/B}HV=SS&n7,10&u0]Dm%A6^4Q=WR(TD=Xo<GH,Rj(l8)bP&n/=LM&CF,F5&ml=PJ;0k=LG=tq,Rh,D6@4i=1p&+9=YC%er_Mh;nI;0q=Fw]80=xq=FM$Gv;v6&nc;wK%H2&Kj;vs,AA=YP,66}bI(qR~5U=6q~4b$Ni=K5.X3$So&Iu(p+]8G=Cf=RY(TS_O3(iH&57=fE=Dg_Do#9z#7H;FK{qd_2k%JR}en&gh_z8;Rx}9p<cN_Ne,DO;LN_7o~/p=NF=5Y}gN<ce<C1,QE]Wv=3u<BC}GK]yq}DY&u/_hj=II(pz&rC,jV&+Z}ut=NQ;Cg-SR_ZS,+o=u/;Oy_RK_QF(Fx&xP}Wr&TA,Uh&g1=yr{ax[VF$Pg(YB;Ox=Vy;+W(Sp}XV%dd&33(l/]l4#4Y}OE=6c=bw(A7&9t%wd&N/&mo,JH&Qe)fm=Ao}fu=tH", au = { zh_cn: null, zh_tw: null }, iu = { zh_cn: "0x17bcc4d8547e5a7135e365d1ab443aaae95e76d8230c2782c67305d4f21497a1", zh_tw: "0x51e720e90c7b87bec1d70eb6e74a21a449bd3ec9c020b01d3a40ed991b60ce5d" }, su = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        function uu(e3) {
          if (null != au[e3]) return au[e3];
          for (var t3 = [], r3 = 0, n2 = 0; n2 < 2048; n2++) {
            var o2 = "~!@#$%^&*_-=[]{}|;:,.()<>?".indexOf(ou[3 * n2]), a2 = [228 + (o2 >> 2), 128 + su.indexOf(ou[3 * n2 + 1]), 128 + su.indexOf(ou[3 * n2 + 2])];
            if ("zh_tw" === e3) for (var i2 = o2 % 4; i2 < 3; i2++) a2[i2] = su.indexOf("FAZDC6BALcLZCA+GBARCW8wNCcDDZ8LVFBOqqDUiou+M42TFAyERXFb7EjhP+vmBFpFrUpfDV2F7eB+eCltCHJFWLFCED+pWTojEIHFXc3aFn4F68zqjEuKidS1QBVPDEhE7NA4mhMF7oThD49ot3FgtzHFCK0acW1x8DH1EmLoIlrWFBLE+y5+NA3Cx65wJHTaEZVaK1mWAmPGxgYCdxwOjTDIt/faOEhTl1vqNsKtJCOhJWuio2g07KLZEQsFBUpNtwEByBgxFslFheFbiEPvi61msDvApxCzB6rBCzox7joYA5UdDc+Cb4FSgIabpXFAj3bjkmFAxCZE+mD/SFf/0ELecYCt3nLoxC6WEZf2tKDB4oZvrEmqFkKk7BwILA7gtYBpsTq//D4jD0F0wEB9pyQ1BD5Ba0oYHDI+sbDFhvrHXdDHfgFEIJLi5r8qercNFBgFLC4bo5ERJtamWBDFy73KCEb6M8VpmEt330ygCTK58EIIFkYgF84gtGA9Uyh3m68iVrFbWFbcbqiCYHZ9J1jeRPbL8yswhMiDbhEhdNoSwFbZrLT740ABEqgCkO8J1BLd1VhKKR4sD1yUo0z+FF59Mvg71CFbyEhbHSFBKEIKyoQNgQppq9T0KAqePu0ZFGrXOHdKJqkoTFhYvpDNyuuznrN84thJbsCoO6Cu6Xlvntvy0QYuAExQEYtTUBf3CoCqwgGFZ4u1HJFzDVwEy3cjcpV4QvsPaBC3rCGyCF23o4K3pp2gberGgFEJEHo4nHICtyKH2ZqyxhN05KBBJIQlKh/Oujv/DH32VrlqFdIFC7Fz9Ct4kaqFME0UETLprnN9kfy+kFmtQBB0+5CFu0N9Ij8l/VvJDh2oq3hT6EzjTHKFN7ZjZwoTsAZ4Exsko6Fpa6WC+sduz8jyrLpegTv2h1EBeYpLpm2czQW0KoCcS0bCVXCmuWJDBjN1nQNLdF58SFJ0h7i3pC3oEOKy/FjBklL70XvBEEIWp2yZ04xObzAWDDJG7f+DbqBEA7LyiR95j7MDVdDViz2RE5vWlBMv5e4+VfhP3aXNPhvLSynb9O2x4uFBV+3jqu6d5pCG28/sETByvmu/+IJ0L3wb4rj9DNOLBF6XPIODr4L19U9RRofAG6Nxydi8Bki8BhGJbBAJKzbJxkZSlF9Q2Cu8oKqggB9hBArwLLqEBWEtFowy8XK8bEyw9snT+BeyFk1ZCSrdmgfEwFePTgCjELBEnIbjaDDPJm36rG9pztcEzT8dGk23SBhXBB1H4z+OWze0ooFzz8pDBYFvp9j9tvFByf9y4EFdVnz026CGR5qMr7fxMHN8UUdlyJAzlTBDRC28k+L4FB8078ljyD91tUj1ocnTs8vdEf7znbzm+GIjEZnoZE5rnLL700Xc7yHfz05nWxy03vBB9YGHYOWxgMQGBCR24CVYNE1hpfKxN0zKnfJDmmMgMmBWqNbjfSyFCBWSCGCgR8yFXiHyEj+VtD1FB3FpC1zI0kFbzifiKTLm9yq5zFmur+q8FHqjoOBWsBPiDbnCC2ErunV6cJ6TygXFYHYp7MKN9RUlSIS8/xBAGYLzeqUnBF4QbsTuUkUqGs6CaiDWKWjQK9EJkjpkTmNCPYXL"[r3++]) + (0 == i2 ? 228 : 128);
            t3.push(It(new Uint8Array(a2)));
          }
          if (St(t3.join("\n") + "\n") !== iu[e3]) throw new Error("BIP39 Wordlist for ".concat(e3, " (Chinese) FAILED"));
          return au[e3] = t3, t3;
        }
        var cu = {}, lu = function(e3) {
          A(o2, e3);
          var t3, r3, n2 = (t3 = o2, r3 = nu(), function() {
            var e4, n3 = C(t3);
            if (r3) {
              var o3 = C(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return W(this, e4);
          });
          function o2(e4) {
            return h(this, o2), n2.call(this, "zh_" + e4);
          }
          return b(o2, [{ key: "getWord", value: function(e4) {
            var t4 = uu(this.locale);
            return Pe(e4 >= 0 && e4 < t4.length, "invalid word index: ".concat(e4), "index", e4), t4[e4];
          } }, { key: "getWordIndex", value: function(e4) {
            return uu(this.locale).indexOf(e4);
          } }, { key: "split", value: function(e4) {
            return (e4 = e4.replace(/(?:\u3000| )+/g, "")).split("");
          } }], [{ key: "wordlist", value: function(e4) {
            return null == cu[e4] && (cu[e4] = new o2(e4)), cu[e4];
          } }]), o2;
        }(Ut), du = { cz: ws.wordlist(), en: Qt.wordlist(), es: ks.wordlist(), fr: Ls.wordlist(), it: qs.wordlist(), pt: ru.wordlist(), ja: js.wordlist(), ko: Ks.wordlist(), zh_cn: lu.wordlist("cn"), zh_tw: lu.wordlist("tw") };
        function pu(e3) {
          var t3 = fu();
          return function() {
            var r3, n2 = F()(e3);
            if (t3) {
              var o2 = F()(this).constructor;
              r3 = Reflect.construct(n2, arguments, o2);
            } else r3 = n2.apply(this, arguments);
            return B()(this, r3);
          };
        }
        function fu() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (fu = function() {
            return !!e3;
          })();
        }
        function gu(e3, t3) {
          yu(e3, t3), t3.add(e3);
        }
        function hu(e3, t3, r3) {
          yu(e3, t3), t3.set(e3, r3);
        }
        function yu(e3, t3) {
          if (t3.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
        }
        function bu(e3, t3, r3) {
          return function(e4, t4, r4) {
            if ("function" == typeof e4 ? e4 === t4 : e4.has(t4)) return arguments.length < 3 ? t4 : r4;
            throw new TypeError("Private element is not present on this object");
          }(t3, e3), r3;
        }
        function Tu(e3) {
          var t3 = /* @__PURE__ */ new Set();
          return e3.forEach(function(e4) {
            return t3.add(e4);
          }), Object.freeze(t3);
        }
        var vu = "constant external internal payable private public pure view", mu = Tu(vu.split(" ")), Au = "constructor error event fallback function receive struct", Pu = Tu(Au.split(" ")), Wu = "calldata memory storage payable indexed", Bu = Tu(Wu.split(" ")), Cu = Tu([Au, Wu, "tuple returns", vu].join(" ").split(" ")), Fu = { "(": "OPEN_PAREN", ")": "CLOSE_PAREN", "[": "OPEN_BRACKET", "]": "CLOSE_BRACKET", ",": "COMMA", "@": "AT" }, wu = new RegExp("^(\\s*)"), Iu = new RegExp("^([0-9]+)"), Mu = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"), Eu = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"), Ru = new RegExp("^(trcToken|address|bool|bytes([0-9]*)|string|u?int([0-9]*))$"), Ou = /* @__PURE__ */ new WeakMap(), ku = /* @__PURE__ */ new WeakMap(), Su = /* @__PURE__ */ new WeakSet(), Nu = function() {
          function e3(t3) {
            y()(this, e3), gu(this, Su), hu(this, Ou, { writable: true, value: void 0 }), hu(this, ku, { writable: true, value: void 0 }), ce()(this, Ou, 0), ce()(this, ku, t3.slice());
          }
          return T()(e3, [{ key: "offset", get: function() {
            return de()(this, Ou);
          } }, { key: "length", get: function() {
            return de()(this, ku).length - de()(this, Ou);
          } }, { key: "clone", value: function() {
            return new e3(de()(this, ku));
          } }, { key: "reset", value: function() {
            ce()(this, Ou, 0);
          } }, { key: "popKeyword", value: function(e4) {
            var t3 = this.peek();
            if ("KEYWORD" !== t3.type || !e4.has(t3.text)) throw new Error("expected keyword ".concat(t3.text));
            return this.pop().text;
          } }, { key: "popType", value: function(e4) {
            if (this.peek().type !== e4) throw new Error("expected ".concat(e4, "; got ").concat(JSON.stringify(this.peek())));
            return this.pop().text;
          } }, { key: "popParen", value: function() {
            var e4 = this.peek();
            if ("OPEN_PAREN" !== e4.type) throw new Error("bad start");
            var t3 = bu(this, Su, Lu).call(this, de()(this, Ou) + 1, e4.match + 1);
            return ce()(this, Ou, e4.match + 1), t3;
          } }, { key: "popParams", value: function() {
            var e4 = this.peek();
            if ("OPEN_PAREN" !== e4.type) throw new Error("bad start");
            for (var t3 = []; de()(this, Ou) < e4.match - 1; ) {
              var r3 = this.peek().linkNext;
              t3.push(bu(this, Su, Lu).call(this, de()(this, Ou) + 1, r3)), ce()(this, Ou, r3);
            }
            return ce()(this, Ou, e4.match + 1), t3;
          } }, { key: "peek", value: function() {
            if (de()(this, Ou) >= de()(this, ku).length) throw new Error("out-of-bounds");
            return de()(this, ku)[de()(this, Ou)];
          } }, { key: "peekKeyword", value: function(e4) {
            var t3 = this.peekType("KEYWORD");
            return null != t3 && e4.has(t3) ? t3 : null;
          } }, { key: "peekType", value: function(e4) {
            if (0 === this.length) return null;
            var t3 = this.peek();
            return t3.type === e4 ? t3.text : null;
          } }, { key: "pop", value: function() {
            var e4, t3 = this.peek();
            return ce()(this, Ou, (e4 = de()(this, Ou), ++e4)), t3;
          } }, { key: "toString", value: function() {
            for (var e4 = [], t3 = de()(this, Ou); t3 < de()(this, ku).length; t3++) {
              var r3 = de()(this, ku)[t3];
              e4.push("".concat(r3.type, ":").concat(r3.text));
            }
            return "<TokenString ".concat(e4.join(" "), ">");
          } }]), e3;
        }();
        function Lu() {
          var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
          return new Nu(de()(this, ku).slice(e3, t3).map(function(t4) {
            return Object.freeze(Object.assign({}, t4, { match: t4.match - e3, linkBack: t4.linkBack - e3, linkNext: t4.linkNext - e3 }));
          }));
        }
        function Du(e3) {
          for (var t3 = [], r3 = function(t4) {
            var r4 = a2 < e3.length ? JSON.stringify(e3[a2]) : "$EOI";
            throw new Error("invalid token ".concat(r4, " at ").concat(a2, ": ").concat(t4));
          }, n2 = [], o2 = [], a2 = 0; a2 < e3.length; ) {
            var i2 = e3.substring(a2), s2 = i2.match(wu);
            s2 && (a2 += s2[1].length, i2 = e3.substring(a2));
            var u2 = { depth: n2.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset: a2, value: -1 };
            t3.push(u2);
            var c2 = Fu[i2[0]] || "";
            if (c2) {
              if (u2.type = c2, u2.text = i2[0], a2++, "OPEN_PAREN" === c2) n2.push(t3.length - 1), o2.push(t3.length - 1);
              else if ("CLOSE_PAREN" == c2) 0 === n2.length && r3("no matching open bracket"), u2.match = n2.pop(), t3[u2.match].match = t3.length - 1, u2.depth--, u2.linkBack = o2.pop(), t3[u2.linkBack].linkNext = t3.length - 1;
              else if ("COMMA" === c2) u2.linkBack = o2.pop(), t3[u2.linkBack].linkNext = t3.length - 1, o2.push(t3.length - 1);
              else if ("OPEN_BRACKET" === c2) u2.type = "BRACKET";
              else if ("CLOSE_BRACKET" === c2) {
                var l2 = t3.pop().text;
                if (t3.length > 0 && "NUMBER" === t3[t3.length - 1].type) {
                  var d2 = t3.pop().text;
                  l2 = d2 + l2, t3[t3.length - 1].value = Ze(d2);
                }
                if (0 === t3.length || "BRACKET" !== t3[t3.length - 1].type) throw new Error("missing opening bracket");
                t3[t3.length - 1].text += l2;
              }
            } else if (s2 = i2.match(Mu)) {
              if (u2.text = s2[1], a2 += u2.text.length, Cu.has(u2.text)) {
                u2.type = "KEYWORD";
                continue;
              }
              if (u2.text.match(Ru)) {
                u2.type = "TYPE";
                continue;
              }
              u2.type = "ID";
            } else {
              if (!(s2 = i2.match(Iu))) throw new Error("unexpected token ".concat(JSON.stringify(i2[0]), " at position ").concat(a2));
              u2.text = s2[1], u2.type = "NUMBER", a2 += u2.text.length;
            }
          }
          return new Nu(t3.map(function(e4) {
            return Object.freeze(e4);
          }));
        }
        function Uu(e3, t3) {
          var r3 = [];
          for (var n2 in t3.keys()) e3.has(n2) && r3.push(n2);
          if (r3.length > 1) throw new Error("conflicting types: ".concat(r3.join(", ")));
        }
        function xu(e3, t3) {
          if (t3.peekKeyword(Pu)) {
            var r3 = t3.pop().text;
            if (r3 !== e3) throw new Error("expected ".concat(e3, ", got ").concat(r3));
          }
          return t3.popType("ID");
        }
        function Ju(e3, t3) {
          for (var r3 = /* @__PURE__ */ new Set(); ; ) {
            var n2 = e3.peekType("KEYWORD");
            if (null == n2 || t3 && !t3.has(n2)) break;
            if (e3.pop(), r3.has(n2)) throw new Error("duplicate keywords: ".concat(JSON.stringify(n2)));
            r3.add(n2);
          }
          return Object.freeze(r3);
        }
        function _u(e3) {
          var t3 = Ju(e3, mu);
          return Uu(t3, Tu("constant payable nonpayable".split(" "))), Uu(t3, Tu("pure view payable nonpayable".split(" "))), t3.has("view") ? "view" : t3.has("pure") ? "pure" : t3.has("payable") ? "payable" : t3.has("nonpayable") ? "nonpayable" : t3.has("constant") ? "view" : "nonpayable";
        }
        function zu(e3, t3) {
          return e3.popParams().map(function(e4) {
            return nc.from(e4, t3);
          });
        }
        function Gu(e3) {
          if (e3.peekType("AT")) {
            if (e3.pop(), e3.peekType("NUMBER")) return je(e3.pop().text);
            throw new Error("invalid gas");
          }
          return null;
        }
        function ju(e3) {
          if (e3.length) throw new Error("unexpected tokens: ".concat(e3.toString()));
        }
        var Vu = new RegExp(/^(.*)\[([0-9]*)\]$/);
        function Xu(e3) {
          var t3 = e3.match(Ru);
          if (Pe(t3, "invalid type", "type", e3), "uint" === e3) return "uint256";
          if ("int" === e3) return "int256";
          if (t3[2]) {
            var r3 = parseInt(t3[2]);
            Pe(0 !== r3 && r3 <= 32, "invalid bytes length", "type", e3);
          } else if (t3[3]) {
            var n2 = parseInt(t3[3]);
            Pe(0 !== n2 && n2 <= 256 && n2 % 8 == 0, "invalid numeric width", "type", e3);
          }
          return e3;
        }
        var Hu = {}, $u = Symbol.for("_ethers_internal"), Zu = "_ParamTypeInternal", Ku = "_ErrorInternal", Qu = "_EventInternal", Yu = "_ConstructorInternal", qu = "_FallbackInternal", ec = "_FunctionInternal", tc = "_StructInternal", rc = /* @__PURE__ */ new WeakSet(), nc = function() {
          function e3(t4, r3, n2, o2, a2, i2, s2, u2) {
            if (y()(this, e3), gu(this, rc), I()(this, "name", void 0), I()(this, "type", void 0), I()(this, "baseType", void 0), I()(this, "indexed", void 0), I()(this, "components", void 0), I()(this, "arrayLength", void 0), I()(this, "arrayChildren", void 0), Fe(t4, Hu, "ParamType"), Object.defineProperty(this, $u, { value: Zu }), i2 && (i2 = Object.freeze(i2.slice())), "array" === o2) {
              if (null == s2 || null == u2) throw new Error("");
            } else if (null != s2 || null != u2) throw new Error("");
            if ("tuple" === o2) null == i2 && (i2 = Object.freeze([]));
            else if (null != i2) throw new Error("");
            be(this, { name: r3, type: n2, baseType: o2, indexed: a2, components: i2, arrayLength: s2, arrayChildren: u2 });
          }
          var t3;
          return T()(e3, [{ key: "format", value: function(e4) {
            if (null == e4 && (e4 = "sighash"), "json" === e4) {
              var t4 = { type: "tuple" === this.baseType ? "tuple" : this.type, name: this.name || void 0 };
              return "boolean" == typeof this.indexed && (t4.indexed = this.indexed), this.isTuple() && (t4.components = this.components.map(function(t5) {
                return JSON.parse(t5.format(e4));
              })), JSON.stringify(t4);
            }
            var r3 = "";
            return this.isArray() ? (r3 += this.arrayChildren.format(e4), r3 += "[".concat(this.arrayLength < 0 ? "" : String(this.arrayLength), "]")) : this.isTuple() ? ("sighash" !== e4 && (r3 += this.type), r3 += "(" + this.components.map(function(t5) {
              return t5.format(e4);
            }).join("full" === e4 ? ", " : ",") + ")") : r3 += this.type, "sighash" !== e4 && (true === this.indexed && (r3 += " indexed"), "full" === e4 && this.name && (r3 += " " + this.name)), r3;
          } }, { key: "isArray", value: function() {
            return "array" === this.baseType;
          } }, { key: "isTuple", value: function() {
            return "tuple" === this.baseType;
          } }, { key: "isIndexable", value: function() {
            return null != this.indexed;
          } }, { key: "walk", value: function(e4, t4) {
            if (this.isArray()) {
              if (!Array.isArray(e4)) throw new Error("invalid array value");
              if (-1 !== this.arrayLength && e4.length !== this.arrayLength) throw new Error("array is wrong length");
              var r3 = this;
              return e4.map(function(e5) {
                return r3.arrayChildren.walk(e5, t4);
              });
            }
            if (this.isTuple()) {
              if (!Array.isArray(e4)) throw new Error("invalid tuple value");
              if (e4.length !== this.components.length) throw new Error("array is wrong length");
              var n2 = this;
              return e4.map(function(e5, r4) {
                return n2.components[r4].walk(e5, t4);
              });
            }
            return t4(this.type, e4);
          } }, { key: "walkAsync", value: (t3 = p()(E().mark(function e4(t4, r3) {
            var n2, o2;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (n2 = [], o2 = [t4], bu(this, rc, oc).call(this, n2, t4, r3, function(e6) {
                    o2[0] = e6;
                  }), !n2.length) {
                    e5.next = 6;
                    break;
                  }
                  return e5.next = 6, Promise.all(n2);
                case 6:
                  return e5.abrupt("return", o2[0]);
                case 7:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, r3) {
            return t3.apply(this, arguments);
          }) }], [{ key: "from", value: function(t4, r3) {
            if (e3.isParamType(t4)) return t4;
            if ("string" == typeof t4) return e3.from(Du(t4), r3);
            if (t4 instanceof Nu) {
              var n2 = "", o2 = "", a2 = null;
              Ju(t4, Tu(["tuple"])).has("tuple") || t4.peekType("OPEN_PAREN") ? (o2 = "tuple", a2 = t4.popParams().map(function(t5) {
                return e3.from(t5);
              }), n2 = "tuple(".concat(a2.map(function(e4) {
                return e4.format();
              }).join(","), ")")) : o2 = n2 = Xu(t4.popType("TYPE"));
              for (var i2 = null, s2 = null; t4.length && t4.peekType("BRACKET"); ) {
                var u2 = t4.pop();
                i2 = new e3(Hu, "", n2, o2, null, a2, s2, i2), s2 = u2.value, n2 += u2.text, o2 = "array", a2 = null;
              }
              var c2 = null;
              if (Ju(t4, Bu).has("indexed")) {
                if (!r3) throw new Error("");
                c2 = true;
              }
              var l2 = t4.peekType("ID") ? t4.pop().text : "";
              if (t4.length) throw new Error("leftover tokens");
              return new e3(Hu, l2, n2, o2, c2, a2, s2, i2);
            }
            var d2 = t4.name;
            Pe(!d2 || "string" == typeof d2 && d2.match(Eu), "invalid name", "obj.name", d2);
            var p2 = t4.indexed;
            null != p2 && (Pe(r3, "parameter cannot be indexed", "obj.indexed", t4.indexed), p2 = !!p2);
            var f2 = t4.type, g2 = f2.match(Vu);
            if (g2) {
              var h2 = parseInt(g2[2] || "-1"), y2 = e3.from({ type: g2[1], components: t4.components });
              return new e3(Hu, d2 || "", f2, "array", p2, null, h2, y2);
            }
            if ("tuple" === f2 || f2.startsWith("tuple(") || f2.startsWith("(")) {
              var b2 = null != t4.components ? t4.components.map(function(t5) {
                return e3.from(t5);
              }) : null;
              return new e3(Hu, d2 || "", f2, "tuple", p2, b2, null, null);
            }
            return f2 = Xu(t4.type), new e3(Hu, d2 || "", f2, f2, p2, null, null, null);
          } }, { key: "isParamType", value: function(e4) {
            return e4 && e4[$u] === Zu;
          } }]), e3;
        }();
        function oc(e3, t3, r3, n2) {
          if (this.isArray()) {
            if (!Array.isArray(t3)) throw new Error("invalid array value");
            if (-1 !== this.arrayLength && t3.length !== this.arrayLength) throw new Error("array is wrong length");
            var o2 = this.arrayChildren, a2 = t3.slice();
            return a2.forEach(function(t4, n3) {
              bu(o2, rc, oc).call(o2, e3, t4, r3, function(e4) {
                a2[n3] = e4;
              });
            }), void n2(a2);
          }
          if (this.isTuple()) {
            var i2, s2 = this.components;
            if (Array.isArray(t3)) i2 = t3.slice();
            else {
              if (null == t3 || "object" !== g()(t3)) throw new Error("invalid tuple value");
              i2 = s2.map(function(e4) {
                if (!e4.name) throw new Error("cannot use object value with unnamed components");
                if (!(e4.name in t3)) throw new Error("missing value for component ".concat(e4.name));
                return t3[e4.name];
              });
            }
            if (i2.length !== this.components.length) throw new Error("array is wrong length");
            return i2.forEach(function(t4, n3) {
              var o3;
              bu(o3 = s2[n3], rc, oc).call(o3, e3, t4, r3, function(e4) {
                i2[n3] = e4;
              });
            }), void n2(i2);
          }
          var u2 = r3(this.type, t3);
          u2.then ? e3.push(p()(E().mark(function e4() {
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.t0 = n2, e5.next = 3, u2;
                case 3:
                  e5.t1 = e5.sent, (0, e5.t0)(e5.t1);
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4);
          }))()) : n2(u2);
        }
        var ac = function() {
          function e3(t3, r3, n2) {
            y()(this, e3), I()(this, "type", void 0), I()(this, "inputs", void 0), Fe(t3, Hu, "Fragment"), be(this, { type: r3, inputs: n2 = Object.freeze(n2.slice()) });
          }
          return T()(e3, null, [{ key: "from", value: function(t3) {
            if ("string" == typeof t3) {
              try {
                e3.from(JSON.parse(t3));
              } catch (e4) {
              }
              return e3.from(Du(t3));
            }
            if (t3 instanceof Nu) switch (t3.peekKeyword(Pu)) {
              case "constructor":
                return lc.from(t3);
              case "error":
                return uc.from(t3);
              case "event":
                return cc.from(t3);
              case "fallback":
              case "receive":
                return dc.from(t3);
              case "function":
                return pc.from(t3);
              case "struct":
                return fc.from(t3);
            }
            else if ("object" === g()(t3)) {
              switch (t3.type) {
                case "constructor":
                  return lc.from(t3);
                case "error":
                  return uc.from(t3);
                case "event":
                  return cc.from(t3);
                case "fallback":
                case "receive":
                  return dc.from(t3);
                case "function":
                  return pc.from(t3);
                case "struct":
                  return fc.from(t3);
              }
              Ae(false, "unsupported type: ".concat(t3.type), "UNSUPPORTED_OPERATION", { operation: "Fragment.from" });
            }
            Pe(false, "unsupported frgament object", "obj", t3);
          } }, { key: "isConstructor", value: function(e4) {
            return lc.isFragment(e4);
          } }, { key: "isError", value: function(e4) {
            return uc.isFragment(e4);
          } }, { key: "isEvent", value: function(e4) {
            return cc.isFragment(e4);
          } }, { key: "isFunction", value: function(e4) {
            return pc.isFragment(e4);
          } }, { key: "isStruct", value: function(e4) {
            return fc.isFragment(e4);
          } }]), e3;
        }(), ic = function(e3) {
          P()(r3, e3);
          var t3 = pu(r3);
          function r3(e4, n2, o2, a2) {
            var i2;
            return y()(this, r3), i2 = t3.call(this, e4, n2, a2), I()(m()(i2), "name", void 0), Pe("string" == typeof o2 && o2.match(Eu), "invalid identifier", "name", o2), a2 = Object.freeze(a2.slice()), be(m()(i2), { name: o2 }), i2;
          }
          return T()(r3);
        }(ac);
        function sc(e3, t3) {
          return "(" + t3.map(function(t4) {
            return t4.format(e3);
          }).join("full" === e3 ? ", " : ",") + ")";
        }
        var uc = function(e3) {
          P()(r3, e3);
          var t3 = pu(r3);
          function r3(e4, n2, o2) {
            var a2;
            return y()(this, r3), a2 = t3.call(this, e4, "error", n2, o2), Object.defineProperty(m()(a2), $u, { value: Ku }), a2;
          }
          return T()(r3, [{ key: "selector", get: function() {
            return St(this.format("sighash")).substring(0, 10);
          } }, { key: "format", value: function(e4) {
            if (null == e4 && (e4 = "sighash"), "json" === e4) return JSON.stringify({ type: "error", name: this.name, inputs: this.inputs.map(function(t5) {
              return JSON.parse(t5.format(e4));
            }) });
            var t4 = [];
            return "sighash" !== e4 && t4.push("error"), t4.push(this.name + sc(e4, this.inputs)), t4.join(" ");
          } }], [{ key: "from", value: function(e4) {
            if (r3.isFragment(e4)) return e4;
            if ("string" == typeof e4) return r3.from(Du(e4));
            if (e4 instanceof Nu) {
              var t4 = xu("error", e4), n2 = zu(e4);
              return ju(e4), new r3(Hu, t4, n2);
            }
            return new r3(Hu, e4.name, e4.inputs ? e4.inputs.map(nc.from) : []);
          } }, { key: "isFragment", value: function(e4) {
            return e4 && e4[$u] === Ku;
          } }]), r3;
        }(ic), cc = function(e3) {
          P()(r3, e3);
          var t3 = pu(r3);
          function r3(e4, n2, o2, a2) {
            var i2;
            return y()(this, r3), i2 = t3.call(this, e4, "event", n2, o2), I()(m()(i2), "anonymous", void 0), Object.defineProperty(m()(i2), $u, { value: Qu }), be(m()(i2), { anonymous: a2 }), i2;
          }
          return T()(r3, [{ key: "topicHash", get: function() {
            return St(this.format("sighash"));
          } }, { key: "format", value: function(e4) {
            if (null == e4 && (e4 = "sighash"), "json" === e4) return JSON.stringify({ type: "event", anonymous: this.anonymous, name: this.name, inputs: this.inputs.map(function(t5) {
              return JSON.parse(t5.format(e4));
            }) });
            var t4 = [];
            return "sighash" !== e4 && t4.push("event"), t4.push(this.name + sc(e4, this.inputs)), "sighash" !== e4 && this.anonymous && t4.push("anonymous"), t4.join(" ");
          } }], [{ key: "getTopicHash", value: function(e4, t4) {
            return t4 = (t4 || []).map(function(e5) {
              return nc.from(e5);
            }), new r3(Hu, e4, t4, false).topicHash;
          } }, { key: "from", value: function(e4) {
            if (r3.isFragment(e4)) return e4;
            if ("string" == typeof e4) return r3.from(Du(e4));
            if (e4 instanceof Nu) {
              var t4 = xu("event", e4), n2 = zu(e4, true), o2 = !!Ju(e4, Tu(["anonymous"])).has("anonymous");
              return ju(e4), new r3(Hu, t4, n2, o2);
            }
            return new r3(Hu, e4.name, e4.inputs ? e4.inputs.map(function(e5) {
              return nc.from(e5, true);
            }) : [], !!e4.anonymous);
          } }, { key: "isFragment", value: function(e4) {
            return e4 && e4[$u] === Qu;
          } }]), r3;
        }(ic), lc = function(e3) {
          P()(r3, e3);
          var t3 = pu(r3);
          function r3(e4, n2, o2, a2, i2) {
            var s2;
            return y()(this, r3), s2 = t3.call(this, e4, n2, o2), I()(m()(s2), "payable", void 0), I()(m()(s2), "gas", void 0), Object.defineProperty(m()(s2), $u, { value: Yu }), be(m()(s2), { payable: a2, gas: i2 }), s2;
          }
          return T()(r3, [{ key: "format", value: function(e4) {
            if (Ae(null != e4 && "sighash" !== e4, "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" }), "json" === e4) return JSON.stringify({ type: "constructor", stateMutability: this.payable ? "payable" : "undefined", payable: this.payable, gas: null != this.gas ? this.gas : void 0, inputs: this.inputs.map(function(t5) {
              return JSON.parse(t5.format(e4));
            }) });
            var t4 = ["constructor".concat(sc(e4, this.inputs))];
            return t4.push(this.payable ? "payable" : "nonpayable"), null != this.gas && t4.push("@".concat(this.gas.toString())), t4.join(" ");
          } }], [{ key: "from", value: function(e4) {
            if (r3.isFragment(e4)) return e4;
            if ("string" == typeof e4) return r3.from(Du(e4));
            if (e4 instanceof Nu) {
              Ju(e4, Tu(["constructor"]));
              var t4 = zu(e4), n2 = !!Ju(e4, Tu(["payable"])).has("payable"), o2 = Gu(e4);
              return ju(e4), new r3(Hu, "constructor", t4, n2, o2);
            }
            return new r3(Hu, "constructor", e4.inputs ? e4.inputs.map(nc.from) : [], !!e4.payable, null != e4.gas ? e4.gas : null);
          } }, { key: "isFragment", value: function(e4) {
            return e4 && e4[$u] === Yu;
          } }]), r3;
        }(ac), dc = function(e3) {
          P()(r3, e3);
          var t3 = pu(r3);
          function r3(e4, n2, o2) {
            var a2;
            return y()(this, r3), a2 = t3.call(this, e4, "fallback", n2), I()(m()(a2), "payable", void 0), Object.defineProperty(m()(a2), $u, { value: qu }), be(m()(a2), { payable: o2 }), a2;
          }
          return T()(r3, [{ key: "format", value: function(e4) {
            var t4 = 0 === this.inputs.length ? "receive" : "fallback";
            if ("json" === e4) {
              var r4 = this.payable ? "payable" : "nonpayable";
              return JSON.stringify({ type: t4, stateMutability: r4 });
            }
            return "".concat(t4, "()").concat(this.payable ? " payable" : "");
          } }], [{ key: "from", value: function(e4) {
            if (r3.isFragment(e4)) return e4;
            if ("string" == typeof e4) return r3.from(Du(e4));
            if (e4 instanceof Nu) {
              var t4 = e4.toString();
              if (Pe(e4.peekKeyword(Tu(["fallback", "receive"])), "type must be fallback or receive", "obj", t4), "receive" === e4.popKeyword(Tu(["fallback", "receive"]))) {
                var n2 = zu(e4);
                return Pe(0 === n2.length, "receive cannot have arguments", "obj.inputs", n2), Ju(e4, Tu(["payable"])), ju(e4), new r3(Hu, [], true);
              }
              var o2 = zu(e4);
              o2.length ? Pe(1 === o2.length && "bytes" === o2[0].type, "invalid fallback inputs", "obj.inputs", o2.map(function(e5) {
                return e5.format("minimal");
              }).join(", ")) : o2 = [nc.from("bytes")];
              var a2 = _u(e4);
              if (Pe("nonpayable" === a2 || "payable" === a2, "fallback cannot be constants", "obj.stateMutability", a2), Ju(e4, Tu(["returns"])).has("returns")) {
                var i2 = zu(e4);
                Pe(1 === i2.length && "bytes" === i2[0].type, "invalid fallback outputs", "obj.outputs", i2.map(function(e5) {
                  return e5.format("minimal");
                }).join(", "));
              }
              return ju(e4), new r3(Hu, o2, "payable" === a2);
            }
            if ("receive" === e4.type) return new r3(Hu, [], true);
            if ("fallback" === e4.type) {
              var s2 = [nc.from("bytes")], u2 = "payable" === e4.stateMutability;
              return new r3(Hu, s2, u2);
            }
            Pe(false, "invalid fallback description", "obj", e4);
          } }, { key: "isFragment", value: function(e4) {
            return e4 && e4[$u] === qu;
          } }]), r3;
        }(ac), pc = function(e3) {
          P()(r3, e3);
          var t3 = pu(r3);
          function r3(e4, n2, o2, a2, i2, s2) {
            var u2;
            y()(this, r3), u2 = t3.call(this, e4, "function", n2, a2), I()(m()(u2), "constant", void 0), I()(m()(u2), "outputs", void 0), I()(m()(u2), "stateMutability", void 0), I()(m()(u2), "payable", void 0), I()(m()(u2), "gas", void 0), Object.defineProperty(m()(u2), $u, { value: ec }), i2 = Object.freeze(i2.slice());
            var c2 = "view" === o2 || "pure" === o2, l2 = "payable" === o2;
            return be(m()(u2), { constant: c2, gas: s2, outputs: i2, payable: l2, stateMutability: o2 }), u2;
          }
          return T()(r3, [{ key: "selector", get: function() {
            return St(this.format("sighash")).substring(0, 10);
          } }, { key: "format", value: function(e4) {
            if (null == e4 && (e4 = "sighash"), "json" === e4) return JSON.stringify({ type: "function", name: this.name, constant: this.constant, stateMutability: "nonpayable" !== this.stateMutability ? this.stateMutability : void 0, payable: this.payable, gas: null != this.gas ? this.gas : void 0, inputs: this.inputs.map(function(t5) {
              return JSON.parse(t5.format(e4));
            }), outputs: this.outputs.map(function(t5) {
              return JSON.parse(t5.format(e4));
            }) });
            var t4 = [];
            return "sighash" !== e4 && t4.push("function"), t4.push(this.name + sc(e4, this.inputs)), "sighash" !== e4 && ("nonpayable" !== this.stateMutability && t4.push(this.stateMutability), this.outputs && this.outputs.length && (t4.push("returns"), t4.push(sc(e4, this.outputs))), null != this.gas && t4.push("@".concat(this.gas.toString()))), t4.join(" ");
          } }], [{ key: "getSelector", value: function(e4, t4) {
            return t4 = (t4 || []).map(function(e5) {
              return nc.from(e5);
            }), new r3(Hu, e4, "view", t4, [], null).selector;
          } }, { key: "from", value: function(e4) {
            if (r3.isFragment(e4)) return e4;
            if ("string" == typeof e4) return r3.from(Du(e4));
            if (e4 instanceof Nu) {
              var t4 = xu("function", e4), n2 = zu(e4), o2 = _u(e4), a2 = [];
              Ju(e4, Tu(["returns"])).has("returns") && (a2 = zu(e4));
              var i2 = Gu(e4);
              return ju(e4), new r3(Hu, t4, o2, n2, a2, i2);
            }
            return new r3(Hu, e4.name, e4.stateMutability, e4.inputs ? e4.inputs.map(nc.from) : [], e4.outputs ? e4.outputs.map(nc.from) : [], null != e4.gas ? e4.gas : null);
          } }, { key: "isFragment", value: function(e4) {
            return e4 && e4[$u] === ec;
          } }]), r3;
        }(ic), fc = function(e3) {
          P()(r3, e3);
          var t3 = pu(r3);
          function r3(e4, n2, o2) {
            var a2;
            return y()(this, r3), a2 = t3.call(this, e4, "struct", n2, o2), Object.defineProperty(m()(a2), $u, { value: tc }), a2;
          }
          return T()(r3, [{ key: "format", value: function() {
            throw new Error("@TODO");
          } }], [{ key: "from", value: function(e4) {
            if ("string" == typeof e4) return r3.from(Du(e4));
            if (e4 instanceof Nu) {
              var t4 = xu("struct", e4), n2 = zu(e4);
              return ju(e4), new r3(Hu, t4, n2);
            }
            return new r3(Hu, e4.name, e4.inputs ? e4.inputs.map(nc.from) : []);
          } }, { key: "isFragment", value: function(e4) {
            return e4 && e4[$u] === tc;
          } }]), r3;
        }(ic);
        function gc(e3, t3) {
          var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
          if (!r3) {
            if (Array.isArray(e3) || (r3 = function(e4, t4) {
              if (e4) {
                if ("string" == typeof e4) return hc(e4, t4);
                var r4 = {}.toString.call(e4).slice(8, -1);
                return "Object" === r4 && e4.constructor && (r4 = e4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? hc(e4, t4) : void 0;
              }
            }(e3)) || t3 && e3 && "number" == typeof e3.length) {
              r3 && (e3 = r3);
              var n2 = 0, o2 = function() {
              };
              return { s: o2, n: function() {
                return n2 >= e3.length ? { done: true } : { done: false, value: e3[n2++] };
              }, e: function(e4) {
                throw e4;
              }, f: o2 };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var a2, i2 = true, s2 = false;
          return { s: function() {
            r3 = r3.call(e3);
          }, n: function() {
            var e4 = r3.next();
            return i2 = e4.done, e4;
          }, e: function(e4) {
            s2 = true, a2 = e4;
          }, f: function() {
            try {
              i2 || null == r3.return || r3.return();
            } finally {
              if (s2) throw a2;
            }
          } };
        }
        function hc(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n2 = Array(t3); r3 < t3; r3++) n2[r3] = e3[r3];
          return n2;
        }
        function yc(e3, t3) {
          Tc(e3, t3), t3.add(e3);
        }
        function bc(e3, t3, r3) {
          Tc(e3, t3), t3.set(e3, r3);
        }
        function Tc(e3, t3) {
          if (t3.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
        }
        function vc(e3, t3, r3) {
          return function(e4, t4, r4) {
            if ("function" == typeof e4 ? e4 === t4 : e4.has(t4)) return arguments.length < 3 ? t4 : r4;
            throw new TypeError("Private element is not present on this object");
          }(t3, e3), r3;
        }
        var mc = T()(function e3(t3, r3, n2) {
          y()(this, e3), I()(this, "fragment", void 0), I()(this, "name", void 0), I()(this, "signature", void 0), I()(this, "topic", void 0), I()(this, "args", void 0);
          var o2 = t3.name, a2 = t3.format();
          be(this, { fragment: t3, name: o2, signature: a2, topic: r3, args: n2 });
        }), Ac = T()(function e3(t3, r3, n2, o2) {
          y()(this, e3), I()(this, "fragment", void 0), I()(this, "name", void 0), I()(this, "args", void 0), I()(this, "signature", void 0), I()(this, "selector", void 0), I()(this, "value", void 0);
          var a2 = t3.name, i2 = t3.format();
          be(this, { fragment: t3, name: a2, args: n2, signature: i2, selector: r3, value: o2 });
        }), Pc = T()(function e3(t3, r3, n2) {
          y()(this, e3), I()(this, "fragment", void 0), I()(this, "name", void 0), I()(this, "args", void 0), I()(this, "signature", void 0), I()(this, "selector", void 0);
          var o2 = t3.name, a2 = t3.format();
          be(this, { fragment: t3, name: o2, args: n2, signature: a2, selector: r3 });
        }), Wc = function() {
          function e3(t3) {
            y()(this, e3), I()(this, "hash", void 0), I()(this, "_isIndexed", void 0), be(this, { hash: t3, _isIndexed: true });
          }
          return T()(e3, null, [{ key: "isIndexed", value: function(e4) {
            return !(!e4 || !e4._isIndexed);
          } }]), e3;
        }(), Bc = { 0: "generic panic", 1: "assert(false)", 17: "arithmetic overflow", 18: "division or modulo by zero", 33: "enum overflow", 34: "invalid encoded storage byte array accessed", 49: "out-of-bounds array access; popping on an empty array", 50: "out-of-bounds access of an array or bytesN", 65: "out of memory", 81: "uninitialized function" }, Cc = { "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: function(e3) {
          return "reverted with reason string ".concat(JSON.stringify(e3));
        } }, "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"], reason: function(e3) {
          var t3 = "unknown panic code";
          return e3 >= 0 && e3 <= 255 && Bc[e3.toString()] && (t3 = Bc[e3.toString()]), "reverted with panic code 0x".concat(e3.toString(16), " (").concat(t3, ")");
        } } }, Fc = /* @__PURE__ */ new WeakMap(), wc = /* @__PURE__ */ new WeakMap(), Ic = /* @__PURE__ */ new WeakMap(), Mc = /* @__PURE__ */ new WeakMap(), Ec = /* @__PURE__ */ new WeakSet(), Rc = /* @__PURE__ */ new WeakSet(), Oc = function() {
          function e3(t3) {
            var r3 = this;
            y()(this, e3), yc(this, Rc), yc(this, Ec), I()(this, "fragments", void 0), I()(this, "deploy", void 0), I()(this, "fallback", void 0), I()(this, "receive", void 0), bc(this, Fc, { writable: true, value: void 0 }), bc(this, wc, { writable: true, value: void 0 }), bc(this, Ic, { writable: true, value: void 0 }), bc(this, Mc, { writable: true, value: void 0 });
            var n2;
            n2 = "string" == typeof t3 ? JSON.parse(t3) : t3, ce()(this, Ic, /* @__PURE__ */ new Map()), ce()(this, Fc, /* @__PURE__ */ new Map()), ce()(this, wc, /* @__PURE__ */ new Map());
            var o2, a2 = [], i2 = gc(n2);
            try {
              for (i2.s(); !(o2 = i2.n()).done; ) {
                var s2 = o2.value;
                try {
                  a2.push(ac.from(s2));
                } catch (e4) {
                  console.log("EE", e4);
                }
              }
            } catch (e4) {
              i2.e(e4);
            } finally {
              i2.f();
            }
            be(this, { fragments: Object.freeze(a2) });
            var u2 = null, c2 = false;
            ce()(this, Mc, this.getAbiCoder()), this.fragments.forEach(function(e4, t4) {
              var n3;
              switch (e4.type) {
                case "constructor":
                  return r3.deploy ? void console.log("duplicate definition - constructor") : void be(r3, { deploy: e4 });
                case "fallback":
                  return void (0 === e4.inputs.length ? c2 = true : (Pe(!u2 || e4.payable !== u2.payable, "conflicting fallback fragments", "fragments[".concat(t4, "]"), e4), c2 = (u2 = e4).payable));
                case "function":
                  n3 = de()(r3, Ic);
                  break;
                case "event":
                  n3 = de()(r3, wc);
                  break;
                case "error":
                  n3 = de()(r3, Fc);
                  break;
                default:
                  return;
              }
              var o3 = e4.format();
              n3.has(o3) || n3.set(o3, e4);
            }), this.deploy || be(this, { deploy: lc.from("constructor()") }), be(this, { fallback: u2, receive: c2 });
          }
          return T()(e3, [{ key: "format", value: function(e4) {
            var t3 = e4 ? "minimal" : "full";
            return this.fragments.map(function(e5) {
              return e5.format(t3);
            });
          } }, { key: "formatJson", value: function() {
            var e4 = this.fragments.map(function(e5) {
              return e5.format("json");
            });
            return JSON.stringify(e4.map(function(e5) {
              return JSON.parse(e5);
            }));
          } }, { key: "getAbiCoder", value: function() {
            return Ao.defaultAbiCoder();
          } }, { key: "getFunctionName", value: function(e4) {
            var t3 = vc(this, Ec, kc).call(this, e4, null, false);
            return Pe(t3, "no matching function", "key", e4), t3.name;
          } }, { key: "getFunction", value: function(e4, t3) {
            return vc(this, Ec, kc).call(this, e4, t3 || null, true);
          } }, { key: "forEachFunction", value: function(e4) {
            var t3 = Array.from(de()(this, Ic).keys());
            t3.sort(function(e5, t4) {
              return e5.localeCompare(t4);
            });
            for (var r3 = 0; r3 < t3.length; r3++) {
              var n2 = t3[r3];
              e4(de()(this, Ic).get(n2), r3);
            }
          } }, { key: "getEventName", value: function(e4) {
            var t3 = vc(this, Rc, Sc).call(this, e4, null, false);
            return Pe(t3, "no matching event", "key", e4), t3.name;
          } }, { key: "getEvent", value: function(e4, t3) {
            return vc(this, Rc, Sc).call(this, e4, t3 || null, true);
          } }, { key: "forEachEvent", value: function(e4) {
            var t3 = Array.from(de()(this, wc).keys());
            t3.sort(function(e5, t4) {
              return e5.localeCompare(t4);
            });
            for (var r3 = 0; r3 < t3.length; r3++) {
              var n2 = t3[r3];
              e4(de()(this, wc).get(n2), r3);
            }
          } }, { key: "getError", value: function(e4, t3) {
            if (Ee(e4)) {
              var r3 = e4.toLowerCase();
              if (Cc[r3]) return uc.from(Cc[r3].signature);
              var n2, o2 = gc(de()(this, Fc).values());
              try {
                for (o2.s(); !(n2 = o2.n()).done; ) {
                  var a2 = n2.value;
                  if (r3 === a2.selector) return a2;
                }
              } catch (e5) {
                o2.e(e5);
              } finally {
                o2.f();
              }
              return null;
            }
            if (-1 === e4.indexOf("(")) {
              var i2, s2 = [], u2 = gc(de()(this, Fc));
              try {
                for (u2.s(); !(i2 = u2.n()).done; ) {
                  var c2 = wo()(i2.value, 2), l2 = c2[0], d2 = c2[1];
                  l2.split("(")[0] === e4 && s2.push(d2);
                }
              } catch (e5) {
                u2.e(e5);
              } finally {
                u2.f();
              }
              if (0 === s2.length) return "Error" === e4 ? uc.from("error Error(string)") : "Panic" === e4 ? uc.from("error Panic(uint256)") : null;
              if (s2.length > 1) {
                var p2 = s2.map(function(e5) {
                  return JSON.stringify(e5.format());
                }).join(", ");
                Pe(false, "ambiguous error description (i.e. ".concat(p2, ")"), "name", e4);
              }
              return s2[0];
            }
            return "Error(string)" === (e4 = uc.from(e4).format()) ? uc.from("error Error(string)") : "Panic(uint256)" === e4 ? uc.from("error Panic(uint256)") : de()(this, Fc).get(e4) || null;
          } }, { key: "forEachError", value: function(e4) {
            var t3 = Array.from(de()(this, Fc).keys());
            t3.sort(function(e5, t4) {
              return e5.localeCompare(t4);
            });
            for (var r3 = 0; r3 < t3.length; r3++) {
              var n2 = t3[r3];
              e4(de()(this, Fc).get(n2), r3);
            }
          } }, { key: "_decodeParams", value: function(e4, t3) {
            return de()(this, Mc).decode(e4, t3);
          } }, { key: "_encodeParams", value: function(e4, t3) {
            return de()(this, Mc).encode(e4, t3);
          } }, { key: "encodeDeploy", value: function(e4) {
            return this._encodeParams(this.deploy.inputs, e4 || []);
          } }, { key: "decodeErrorResult", value: function(e4, t3) {
            if ("string" == typeof e4) {
              var r3 = this.getError(e4);
              Pe(r3, "unknown error", "fragment", e4), e4 = r3;
            }
            return Pe(Le(t3, 0, 4) === e4.selector, "data signature does not match error ".concat(e4.name, "."), "data", t3), this._decodeParams(e4.inputs, Le(t3, 4));
          } }, { key: "encodeErrorResult", value: function(e4, t3) {
            if ("string" == typeof e4) {
              var r3 = this.getError(e4);
              Pe(r3, "unknown error", "fragment", e4), e4 = r3;
            }
            return Se([e4.selector, this._encodeParams(e4.inputs, t3 || [])]);
          } }, { key: "decodeFunctionData", value: function(e4, t3) {
            if ("string" == typeof e4) {
              var r3 = this.getFunction(e4);
              Pe(r3, "unknown function", "fragment", e4), e4 = r3;
            }
            return Pe(Le(t3, 0, 4) === e4.selector, "data signature does not match function ".concat(e4.name, "."), "data", t3), this._decodeParams(e4.inputs, Le(t3, 4));
          } }, { key: "encodeFunctionData", value: function(e4, t3) {
            if ("string" == typeof e4) {
              var r3 = this.getFunction(e4);
              Pe(r3, "unknown function", "fragment", e4), e4 = r3;
            }
            return Se([e4.selector, this._encodeParams(e4.inputs, t3 || [])]);
          } }, { key: "decodeFunctionResult", value: function(e4, t3) {
            if ("string" == typeof e4) {
              var r3 = this.getFunction(e4);
              Pe(r3, "unknown function", "fragment", e4), e4 = r3;
            }
            var n2 = "invalid length for result data", o2 = Me(t3);
            if (o2.length % 32 == 0) try {
              return de()(this, Mc).decode(e4.outputs, o2);
            } catch (e5) {
              n2 = "could not decode result data";
            }
            Ae(false, n2, "BAD_DATA", { value: ke(o2), info: { method: e4.name, signature: e4.format() } });
          } }, { key: "makeError", value: function(e4, t3) {
            var r3 = Ie(e4, "data"), n2 = Ao.getBuiltinCallException("call", t3, r3);
            if (n2.message.startsWith("execution reverted (unknown custom error)")) {
              var o2 = ke(r3.slice(0, 4)), a2 = this.getError(o2);
              if (a2) try {
                var i2 = de()(this, Mc).decode(a2.inputs, r3.slice(4));
                n2.revert = { name: a2.name, signature: a2.format(), args: i2 }, n2.reason = n2.revert.signature, n2.message = "execution reverted: ".concat(n2.reason);
              } catch (e5) {
                n2.message = "execution reverted (coult not decode custom error)";
              }
            }
            var s2 = this.parseTransaction(t3);
            return s2 && (n2.invocation = { method: s2.name, signature: s2.signature, args: s2.args }), n2;
          } }, { key: "encodeFunctionResult", value: function(e4, t3) {
            if ("string" == typeof e4) {
              var r3 = this.getFunction(e4);
              Pe(r3, "unknown function", "fragment", e4), e4 = r3;
            }
            return ke(de()(this, Mc).encode(e4.outputs, t3 || []));
          } }, { key: "encodeFilterTopics", value: function(e4, t3) {
            var r3 = this;
            if ("string" == typeof e4) {
              var n2 = this.getEvent(e4);
              Pe(n2, "unknown event", "eventFragment", e4), e4 = n2;
            }
            Ae(t3.length <= e4.inputs.length, "too many arguments for ".concat(e4.format()), "UNEXPECTED_ARGUMENT", { count: t3.length, expectedCount: e4.inputs.length });
            var o2 = [];
            e4.anonymous || o2.push(e4.topicHash);
            var a2 = function(e5, t4) {
              return "string" === e5.type ? St(t4) : "bytes" === e5.type ? kt(ke(t4)) : ("bool" === e5.type && "boolean" == typeof t4 && (t4 = t4 ? "0x01" : "0x00"), e5.type.match(/^u?int/) && (t4 = Ke(t4)), "address" === e5.type && de()(r3, Mc).encode(["address"], [t4]), De(ke(t4), 32));
            };
            for (t3.forEach(function(t4, r4) {
              var n3 = e4.inputs[r4];
              n3.indexed ? null == t4 ? o2.push(null) : "array" === n3.baseType || "tuple" === n3.baseType ? Pe(false, "filtering with tuples or arrays not supported", "contract." + n3.name, t4) : Array.isArray(t4) ? o2.push(t4.map(function(e5) {
                return a2(n3, e5);
              })) : o2.push(a2(n3, t4)) : Pe(null == t4, "cannot filter non-indexed parameters; must be null", "contract." + n3.name, t4);
            }); o2.length && null === o2[o2.length - 1]; ) o2.pop();
            return o2;
          } }, { key: "encodeEventLog", value: function(e4, t3) {
            var r3 = this;
            if ("string" == typeof e4) {
              var n2 = this.getEvent(e4);
              Pe(n2, "unknown event", "eventFragment", e4), e4 = n2;
            }
            var o2 = [], a2 = [], i2 = [];
            return e4.anonymous || o2.push(e4.topicHash), Pe(t3.length === e4.inputs.length, "event arguments/values mismatch", "values", t3), e4.inputs.forEach(function(e5, n3) {
              var s2 = t3[n3];
              if (e5.indexed) if ("string" === e5.type) o2.push(St(s2));
              else if ("bytes" === e5.type) o2.push(kt(s2));
              else {
                if ("tuple" === e5.baseType || "array" === e5.baseType) throw new Error("not implemented");
                o2.push(de()(r3, Mc).encode([e5.type], [s2]));
              }
              else a2.push(e5), i2.push(s2);
            }), { data: de()(this, Mc).encode(a2, i2), topics: o2 };
          } }, { key: "decodeEventLog", value: function(e4, t3, r3) {
            if ("string" == typeof e4) {
              var n2 = this.getEvent(e4);
              Pe(n2, "unknown event", "eventFragment", e4), e4 = n2;
            }
            if (null != r3 && !e4.anonymous) {
              var o2 = e4.topicHash;
              Pe(Ee(r3[0], 32) && r3[0].toLowerCase() === o2, "fragment/topic mismatch", "topics[0]", r3[0]), r3 = r3.slice(1);
            }
            var a2 = [], i2 = [], s2 = [];
            e4.inputs.forEach(function(e5, t4) {
              e5.indexed ? "string" === e5.type || "bytes" === e5.type || "tuple" === e5.baseType || "array" === e5.baseType ? (a2.push(nc.from({ type: "bytes32", name: e5.name })), s2.push(true)) : (a2.push(e5), s2.push(false)) : (i2.push(e5), s2.push(false));
            });
            var u2 = null != r3 ? de()(this, Mc).decode(a2, Se(r3)) : null, c2 = de()(this, Mc).decode(i2, t3, true), l2 = [], d2 = [], p2 = 0, f2 = 0;
            return e4.inputs.forEach(function(e5, t4) {
              var r4 = null;
              if (e5.indexed) if (null == u2) r4 = new Wc(null);
              else if (s2[t4]) r4 = new Wc(u2[f2++]);
              else try {
                r4 = u2[f2++];
              } catch (e6) {
                r4 = e6;
              }
              else try {
                r4 = c2[p2++];
              } catch (e6) {
                r4 = e6;
              }
              l2.push(r4), d2.push(e5.name || null);
            }), Dr.fromItems(l2, d2);
          } }, { key: "parseTransaction", value: function(e4) {
            var t3 = Ie(e4.data, "tx.data"), r3 = je(null != e4.value ? e4.value : 0, "tx.value"), n2 = this.getFunction(ke(t3.slice(0, 4)));
            if (!n2) return null;
            var o2 = de()(this, Mc).decode(n2.inputs, t3.slice(4));
            return new Ac(n2, n2.selector, o2, r3);
          } }, { key: "parseCallResult", value: function(e4) {
            throw new Error("@TODO");
          } }, { key: "parseLog", value: function(e4) {
            var t3 = this.getEvent(e4.topics[0]);
            return !t3 || t3.anonymous ? null : new mc(t3, t3.topicHash, this.decodeEventLog(t3, e4.data, e4.topics));
          } }, { key: "parseError", value: function(e4) {
            var t3 = ke(e4), r3 = this.getError(Le(t3, 0, 4));
            if (!r3) return null;
            var n2 = de()(this, Mc).decode(r3.inputs, Le(t3, 4));
            return new Pc(r3, r3.selector, n2);
          } }], [{ key: "from", value: function(t3) {
            return t3 instanceof e3 ? t3 : "string" == typeof t3 ? new e3(JSON.parse(t3)) : "function" == typeof t3.format ? new e3(t3.format("json")) : new e3(t3);
          } }]), e3;
        }();
        function kc(e3, t3, r3) {
          if (Ee(e3)) {
            var n2, o2 = e3.toLowerCase(), a2 = gc(de()(this, Ic).values());
            try {
              for (a2.s(); !(n2 = a2.n()).done; ) {
                var i2 = n2.value;
                if (o2 === i2.selector) return i2;
              }
            } catch (e4) {
              a2.e(e4);
            } finally {
              a2.f();
            }
            return null;
          }
          if (-1 === e3.indexOf("(")) {
            var s2, u2 = [], c2 = gc(de()(this, Ic));
            try {
              for (c2.s(); !(s2 = c2.n()).done; ) {
                var l2 = wo()(s2.value, 2), d2 = l2[0], p2 = l2[1];
                d2.split("(")[0] === e3 && u2.push(p2);
              }
            } catch (e4) {
              c2.e(e4);
            } finally {
              c2.f();
            }
            if (t3) {
              var f2 = t3.length > 0 ? t3[t3.length - 1] : null, h2 = t3.length, y2 = true;
              sn.isTyped(f2) && "overrides" === f2.type && (y2 = false, h2--);
              for (var b2 = u2.length - 1; b2 >= 0; b2--) {
                var T2 = u2[b2].inputs.length;
                T2 === h2 || y2 && T2 === h2 - 1 || u2.splice(b2, 1);
              }
              for (var v2 = u2.length - 1; v2 >= 0; v2--) for (var m2 = u2[v2].inputs, A2 = 0; A2 < t3.length; A2++) if (sn.isTyped(t3[A2])) {
                if (A2 >= m2.length) {
                  if ("overrides" === t3[A2].type) continue;
                  u2.splice(v2, 1);
                  break;
                }
                if (t3[A2].type !== m2[A2].baseType) {
                  u2.splice(v2, 1);
                  break;
                }
              }
            }
            if (1 === u2.length && t3 && t3.length !== u2[0].inputs.length) {
              var P2 = t3[t3.length - 1];
              (null == P2 || Array.isArray(P2) || "object" !== g()(P2)) && u2.splice(0, 1);
            }
            if (0 === u2.length) return null;
            if (u2.length > 1 && r3) {
              var W2 = u2.map(function(e4) {
                return JSON.stringify(e4.format());
              }).join(", ");
              Pe(false, "ambiguous function description (i.e. matches ".concat(W2, ")"), "key", e3);
            }
            return u2[0];
          }
          return de()(this, Ic).get(pc.from(e3).format()) || null;
        }
        function Sc(e3, t3, r3) {
          if (Ee(e3)) {
            var n2, o2 = e3.toLowerCase(), a2 = gc(de()(this, wc).values());
            try {
              for (a2.s(); !(n2 = a2.n()).done; ) {
                var i2 = n2.value;
                if (o2 === i2.topicHash) return i2;
              }
            } catch (e4) {
              a2.e(e4);
            } finally {
              a2.f();
            }
            return null;
          }
          if (-1 === e3.indexOf("(")) {
            var s2, u2 = [], c2 = gc(de()(this, wc));
            try {
              for (c2.s(); !(s2 = c2.n()).done; ) {
                var l2 = wo()(s2.value, 2), d2 = l2[0], p2 = l2[1];
                d2.split("(")[0] === e3 && u2.push(p2);
              }
            } catch (e4) {
              c2.e(e4);
            } finally {
              c2.f();
            }
            if (t3) {
              for (var f2 = u2.length - 1; f2 >= 0; f2--) u2[f2].inputs.length < t3.length && u2.splice(f2, 1);
              for (var g2 = u2.length - 1; g2 >= 0; g2--) for (var h2 = u2[g2].inputs, y2 = 0; y2 < t3.length; y2++) if (sn.isTyped(t3[y2]) && t3[y2].type !== h2[y2].baseType) {
                u2.splice(g2, 1);
                break;
              }
            }
            if (0 === u2.length) return null;
            if (u2.length > 1 && r3) {
              var b2 = u2.map(function(e4) {
                return JSON.stringify(e4.format());
              }).join(", ");
              Pe(false, "ambiguous event description (i.e. matches ".concat(b2, ")"), "key", e3);
            }
            return u2[0];
          }
          return de()(this, wc).get(cc.from(e3).format()) || null;
        }
        var Nc = function(e3) {
          return dt.from(e3);
        }, Lc = function(e3) {
          return dt.from(e3).serialized;
        }, Dc = function(e3) {
          return Ie(e3);
        }, Uc = { sighash: "sighash", minimal: "minimal", full: "full", json: "json" }, xc = rr.isValidMnemonic;
        function Jc(e3, t3) {
          var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
          if (!r3) {
            if (Array.isArray(e3) || (r3 = function(e4, t4) {
              if (e4) {
                if ("string" == typeof e4) return _c(e4, t4);
                var r4 = {}.toString.call(e4).slice(8, -1);
                return "Object" === r4 && e4.constructor && (r4 = e4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? _c(e4, t4) : void 0;
              }
            }(e3)) || t3 && e3 && "number" == typeof e3.length) {
              r3 && (e3 = r3);
              var n2 = 0, o2 = function() {
              };
              return { s: o2, n: function() {
                return n2 >= e3.length ? { done: true } : { done: false, value: e3[n2++] };
              }, e: function(e4) {
                throw e4;
              }, f: o2 };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var a2, i2 = true, s2 = false;
          return { s: function() {
            r3 = r3.call(e3);
          }, n: function() {
            var e4 = r3.next();
            return i2 = e4.done, e4;
          }, e: function(e4) {
            s2 = true, a2 = e4;
          }, f: function() {
            try {
              i2 || null == r3.return || r3.return();
            } finally {
              if (s2) throw a2;
            }
          } };
        }
        function _c(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n2 = Array(t3); r3 < t3; r3++) n2[r3] = e3[r3];
          return n2;
        }
        function zc(e3, t3, r3) {
          Gc(e3, t3), t3.set(e3, r3);
        }
        function Gc(e3, t3) {
          if (t3.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
        }
        ir.register(function(e3, t3, r3) {
          return ir._(e3, Buffer.from(t3), Buffer.from(r3));
        });
        var jc = new Uint8Array(32);
        jc.fill(0);
        var Vc = BigInt(-1), Xc = BigInt(0), Hc = BigInt(1), $c = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), Zc = Ke(Hc, 32), Kc = Ke(Xc, 32), Qc = { name: "string", version: "string", chainId: "uint256", verifyingContract: "address", salt: "bytes32" }, Yc = ["name", "version", "chainId", "verifyingContract", "salt"];
        function qc(e3) {
          return function(t3) {
            return Pe("string" == typeof t3, "invalid domain value for ".concat(JSON.stringify(e3)), "domain.".concat(e3), t3), t3;
          };
        }
        var el = { name: qc("name"), version: qc("version"), chainId: function(e3) {
          return je(e3, "domain.chainId");
        }, verifyingContract: function(e3) {
          try {
            return (t3 = e3, Qp.address.toHex(t3)).toLowerCase();
          } catch (e4) {
          }
          var t3;
          Pe(false, 'invalid domain value "verifyingContract"', "domain.verifyingContract", e3);
        }, salt: function(e3) {
          var t3 = Ie(e3, "domain.salt");
          return Pe(32 === t3.length, 'invalid domain value "salt"', "domain.salt", e3), ke(t3);
        } };
        function tl(e3) {
          var t3 = e3.match(/^(u?)int(\d*)$/);
          if (t3) {
            var r3 = "" === t3[1], n2 = parseInt(t3[2] || "256");
            Pe(n2 % 8 == 0 && 0 !== n2 && n2 <= 256 && (null == t3[2] || t3[2] === String(n2)), "invalid numeric width", "type", e3);
            var o2 = Ge($c, r3 ? n2 - 1 : n2), a2 = r3 ? (o2 + Hc) * Vc : Xc;
            return function(t4) {
              var n3 = je(t4, "value");
              return Pe(n3 >= a2 && n3 <= o2, "value out-of-bounds for ".concat(e3), "value", n3), Ke(r3 ? ze(n3, 256) : n3, 32);
            };
          }
          var i2 = e3.match(/^bytes(\d+)$/);
          if (i2) {
            var s2 = parseInt(i2[1]);
            return Pe(0 !== s2 && s2 <= 32 && i2[1] === String(s2), "invalid bytes width", "type", e3), function(t4) {
              return Pe(Ie(t4).length === s2, "invalid length for ".concat(e3), "value", t4), function(e4) {
                var t5 = Ie(e4), r4 = t5.length % 32;
                return r4 ? Se([t5, jc.slice(r4)]) : ke(t5);
              }(t4);
            };
          }
          switch (e3) {
            case "trcToken":
              return tl("uint256");
            case "address":
              return function(e4) {
                return De((t4 = e4, Qp.address.toHex(t4).replace(V, "0x")), 32);
                var t4;
              };
            case "bool":
              return function(e4) {
                return e4 ? Zc : Kc;
              };
            case "bytes":
              return function(e4) {
                return kt(e4);
              };
            case "string":
              return function(e4) {
                return St(e4);
              };
          }
          return null;
        }
        function rl(e3, t3) {
          return "".concat(e3, "(").concat(t3.map(function(e4) {
            var t4 = e4.name;
            return e4.type + " " + t4;
          }).join(","), ")");
        }
        var nl = /* @__PURE__ */ new WeakMap(), ol = /* @__PURE__ */ new WeakMap(), al = /* @__PURE__ */ new WeakMap(), il = /* @__PURE__ */ new WeakSet(), sl = function() {
          function e3(t3) {
            var r3;
            y()(this, e3), Gc(this, r3 = il), r3.add(this), I()(this, "primaryType", void 0), zc(this, nl, { writable: true, value: void 0 }), zc(this, ol, { writable: true, value: void 0 }), zc(this, al, { writable: true, value: void 0 }), ce()(this, nl, JSON.stringify(t3)), ce()(this, ol, /* @__PURE__ */ new Map()), ce()(this, al, /* @__PURE__ */ new Map());
            var n2 = /* @__PURE__ */ new Map(), o2 = /* @__PURE__ */ new Map(), a2 = /* @__PURE__ */ new Map();
            for (var i2 in Object.keys(t3).forEach(function(e4) {
              n2.set(e4, /* @__PURE__ */ new Set()), o2.set(e4, []), a2.set(e4, /* @__PURE__ */ new Set());
            }), t3) {
              var s2, u2 = /* @__PURE__ */ new Set(), c2 = Jc(t3[i2]);
              try {
                for (c2.s(); !(s2 = c2.n()).done; ) {
                  var l2 = s2.value;
                  Pe(!u2.has(l2.name), "duplicate variable name ".concat(JSON.stringify(l2.name), " in ").concat(JSON.stringify(i2)), "types", t3), u2.add(l2.name);
                  var d2 = l2.type.match(/^([^\x5b]*)(\x5b|$)/)[1] || null;
                  Pe(d2 !== i2, "circular type reference to ".concat(JSON.stringify(d2)), "types", t3), tl(d2) || (Pe(o2.has(d2), "unknown type ".concat(JSON.stringify(d2)), "types", t3), o2.get(d2).push(i2), n2.get(i2).add(d2));
                }
              } catch (e4) {
                c2.e(e4);
              } finally {
                c2.f();
              }
            }
            var p2 = Array.from(o2.keys()).filter(function(e4) {
              return 0 === o2.get(e4).length;
            });
            Pe(0 !== p2.length, "missing primary type", "types", t3), Pe(1 === p2.length, "ambiguous primary types or unused types: ".concat(p2.map(function(e4) {
              return JSON.stringify(e4);
            }).join(", ")), "types", t3), be(this, { primaryType: p2[0] }), function e4(r4, i3) {
              Pe(!i3.has(r4), "circular type reference to ".concat(JSON.stringify(r4)), "types", t3), i3.add(r4);
              var s3, u3 = Jc(n2.get(r4));
              try {
                for (u3.s(); !(s3 = u3.n()).done; ) {
                  var c3 = s3.value;
                  if (o2.has(c3)) {
                    e4(c3, i3);
                    var l3, d3 = Jc(i3);
                    try {
                      for (d3.s(); !(l3 = d3.n()).done; ) {
                        var p3 = l3.value;
                        a2.get(p3).add(c3);
                      }
                    } catch (e5) {
                      d3.e(e5);
                    } finally {
                      d3.f();
                    }
                  }
                }
              } catch (e5) {
                u3.e(e5);
              } finally {
                u3.f();
              }
              i3.delete(r4);
            }(this.primaryType, /* @__PURE__ */ new Set());
            var f2, g2 = Jc(a2);
            try {
              for (g2.s(); !(f2 = g2.n()).done; ) {
                var h2 = wo()(f2.value, 2), b2 = h2[0], T2 = h2[1], v2 = Array.from(T2);
                v2.sort(), de()(this, ol).set(b2, rl(b2, t3[b2]) + v2.map(function(e4) {
                  return rl(e4, t3[e4]);
                }).join(""));
              }
            } catch (e4) {
              g2.e(e4);
            } finally {
              g2.f();
            }
          }
          return T()(e3, [{ key: "types", get: function() {
            return JSON.parse(de()(this, nl));
          } }, { key: "getEncoder", value: function(e4) {
            var t3, r3, n2, o2 = de()(this, al).get(e4);
            return o2 || (o2 = (t3 = this, r3 = il, n2 = ul, function(e5, t4, r4) {
              if ("function" == typeof e5 ? e5 === t4 : e5.has(t4)) return arguments.length < 3 ? t4 : r4;
              throw new TypeError("Private element is not present on this object");
            }(r3, t3), n2).call(this, e4), de()(this, al).set(e4, o2)), o2;
          } }, { key: "encodeType", value: function(e4) {
            var t3 = de()(this, ol).get(e4);
            return Pe(t3, "unknown type: ".concat(JSON.stringify(e4)), "name", e4), t3;
          } }, { key: "encodeData", value: function(e4, t3) {
            return this.getEncoder(e4)(t3);
          } }, { key: "hashStruct", value: function(e4, t3) {
            return kt(this.encodeData(e4, t3));
          } }, { key: "encode", value: function(e4) {
            return this.encodeData(this.primaryType, e4);
          } }, { key: "hash", value: function(e4) {
            return this.hashStruct(this.primaryType, e4);
          } }, { key: "_visit", value: function(e4, t3, r3) {
            var n2 = this;
            if (tl(e4)) return r3(e4, t3);
            var o2 = e4.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (o2) return Pe(!o2[3] || parseInt(o2[3]) === t3.length, "array length mismatch; expected length ".concat(parseInt(o2[3])), "value", t3), t3.map(function(e5) {
              return n2._visit(o2[1], e5, r3);
            });
            var a2 = this.types[e4];
            if (a2) return a2.reduce(function(e5, o3) {
              var a3 = o3.name, i2 = o3.type;
              return e5[a3] = n2._visit(i2, t3[a3], r3), e5;
            }, {});
            Pe(false, "unknown type: ".concat(e4), "type", e4);
          } }, { key: "visit", value: function(e4, t3) {
            return this._visit(this.primaryType, e4, t3);
          } }], [{ key: "from", value: function(t3) {
            return new e3(t3);
          } }, { key: "getPrimaryType", value: function(t3) {
            return e3.from(t3).primaryType;
          } }, { key: "hashStruct", value: function(t3, r3, n2) {
            return e3.from(r3).hashStruct(t3, n2);
          } }, { key: "hashDomain", value: function(t3) {
            var r3 = [];
            for (var n2 in t3) if (null != t3[n2]) {
              var o2 = Qc[n2];
              Pe(o2, "invalid typed-data domain key: ".concat(JSON.stringify(n2)), "domain", t3), r3.push({ name: n2, type: o2 });
            }
            return r3.sort(function(e4, t4) {
              return Yc.indexOf(e4.name) - Yc.indexOf(t4.name);
            }), e3.hashStruct("EIP712Domain", { EIP712Domain: r3 }, t3);
          } }, { key: "encode", value: function(t3, r3, n2) {
            return Se(["0x1901", e3.hashDomain(t3), e3.from(r3).hash(n2)]);
          } }, { key: "hash", value: function(t3, r3, n2) {
            return kt(e3.encode(t3, r3, n2));
          } }, { key: "getPayload", value: function(t3, r3, n2) {
            e3.hashDomain(t3);
            var o2 = {}, a2 = [];
            Yc.forEach(function(e4) {
              var r4 = t3[e4];
              null != r4 && (o2[e4] = el[e4](r4), a2.push({ name: e4, type: Qc[e4] }));
            });
            var i2 = e3.from(r3), s2 = Object.assign({}, r3);
            return Pe(null == s2.EIP712Domain, "types must not contain EIP712Domain type", "types.EIP712Domain", r3), s2.EIP712Domain = a2, i2.encode(n2), { types: s2, domain: o2, primaryType: i2.primaryType, message: i2.visit(n2, function(e4, t4) {
              if (e4.match(/^bytes(\d*)/)) return ke(Ie(t4));
              if (e4.match(/^u?int/)) return je(t4).toString();
              switch (e4) {
                case "trcToken":
                  return je(t4).toString();
                case "address":
                  return t4.toLowerCase();
                case "bool":
                  return !!t4;
                case "string":
                  return Pe("string" == typeof t4, "invalid string", "value", t4), t4;
              }
              Pe(false, "unsupported type", "type", e4);
            }) };
          } }]), e3;
        }();
        function ul(e3) {
          var t3 = this, r3 = tl(e3);
          if (r3) return r3;
          var n2 = e3.match(/^(.*)(\x5b(\d*)\x5d)$/);
          if (n2) {
            var o2 = n2[1], a2 = this.getEncoder(o2);
            return function(e4) {
              Pe(!n2[3] || parseInt(n2[3]) === e4.length, "array length mismatch; expected length ".concat(parseInt(n2[3])), "value", e4);
              var r4 = e4.map(a2);
              return de()(t3, ol).has(o2) && (r4 = r4.map(kt)), kt(Se(r4));
            };
          }
          var i2 = this.types[e3];
          if (i2) {
            var s2 = St(de()(this, ol).get(e3));
            return function(e4) {
              var r4 = i2.map(function(r5) {
                var n3 = r5.name, o3 = r5.type, a3 = t3.getEncoder(o3)(e4[n3]);
                return de()(t3, ol).has(o3) ? kt(a3) : a3;
              });
              return r4.unshift(s2), Se(r4);
            };
          }
          Pe(false, "unknown type: ".concat(e3), "type", e3);
        }
        const cl = require_secp256k12();
        function ll(e3) {
          var t3 = Il(e3), r3 = Il(t3).slice(0, 4);
          return ie(r3 = e3.concat(r3));
        }
        function dl(e3) {
          if ("string" != typeof e3) return false;
          if (e3.length <= 4) return false;
          var t3 = se(e3);
          if (e3.length <= 4) return false;
          var r3 = t3.length - 4, n2 = t3.slice(r3), o2 = Il(t3 = t3.slice(0, r3)), a2 = Il(o2).slice(0, 4);
          if (n2[0] == a2[0] && n2[1] == a2[1] && n2[2] == a2[2] && n2[3] == a2[3]) return t3;
          throw new Error("Invalid address provided");
        }
        function pl(e3, t3) {
          "string" == typeof e3 && (e3 = Y(e3));
          var r3 = wl(Y(t3.txID), e3);
          return Array.isArray(t3.signature) ? t3.signature.includes(r3) || t3.signature.push(r3) : t3.signature = [r3], t3;
        }
        function fl(e3, t3) {
          e3 = "0x" + e3.replace(/^0x/, ""), t3 = "0x" + t3.replace(/^0x/, "");
          var r3 = mr(Dc(e3), dt.from(t3));
          return G + r3.substring(2);
        }
        function gl(e3) {
          return btoa(String.fromCharCode.apply(String, _()(e3)));
        }
        function hl(e3, t3) {
          return "string" == typeof e3 && (e3 = Y(e3)), wl(Il(t3), e3);
        }
        function yl(e3, t3, r3, n2) {
          var o2 = "0x".concat(n2.replace(/^0x/, "")), a2 = new Tr(o2), i2 = sl.hash(e3, t3, r3), s2 = a2.sign(i2);
          return ["0x", s2.r.substring(2), s2.s.substring(2), Number(s2.v).toString(16)].join("");
        }
        function bl(e3) {
          var t3 = U(e3);
          return proto.protocol.Transaction.deserializeBinary(t3).getRawData().serializeBinary();
        }
        function Tl() {
          var e3 = D(cl.secp256k1.utils.randomPrivateKey());
          return Y(e3 = e3.padStart(64, "0"));
        }
        function vl(e3) {
          65 === e3.length && (e3 = e3.slice(1));
          var t3 = kt(new Uint8Array(e3)).toString().substring(2);
          return Y(G + t3.substring(24));
        }
        function ml(e3) {
          return vl(Fl(e3));
        }
        function Al(e3) {
          var t3 = se(e3);
          if (t3.length <= 4) return false;
          var r3 = t3.slice(0, t3.length - 4), n2 = Il(r3), o2 = Il(n2);
          return o2[0] === t3[r3.length] && o2[1] === t3[r3.length + 1] && o2[2] === t3[r3.length + 2] && o2[3] === t3[r3.length + 3] && r3;
        }
        function Pl(e3) {
          if ("string" != typeof e3) return false;
          if (e3.length !== z) return false;
          var t3 = se(e3);
          if (25 !== t3.length) return false;
          if (t3[0] !== j) return false;
          var r3 = t3.slice(21), n2 = Il(t3 = t3.slice(0, 21)), o2 = Il(n2).slice(0, 4);
          return r3[0] == o2[0] && r3[1] == o2[1] && r3[2] == o2[2] && r3[3] == o2[3];
        }
        function Wl(e3) {
          return ll(vl(Fl(U(e3))));
        }
        function Bl(e3) {
          return D(vl(Fl(U(e3))));
        }
        function Cl(e3) {
          return x(vl(Fl(U(e3))));
        }
        function Fl(e3) {
          var t3 = cl.secp256k1.ProjectivePoint.fromPrivateKey(new Uint8Array(function(e4) {
            return Y(D(e4).padStart(64, "0"));
          }(e3))), r3 = t3.x, n2 = t3.y, o2 = r3.toString(16).padStart(64, "0"), a2 = n2.toString(16).padStart(64, "0");
          return Y("04".concat(o2).concat(a2));
        }
        function wl(e3, t3) {
          var r3 = cl.secp256k1.sign(D(e3), D(t3)), n2 = r3.r.toString(16), o2 = r3.s.toString(16), a2 = r3.recovery + 27;
          return n2.padStart(64, "0") + o2.padStart(64, "0") + S(a2);
        }
        function Il(e3) {
          return Y(vt("0x" + D(e3)).replace(/^0x/, ""));
        }
        function Ml(e3) {
          return ll(ml(U(e3)));
        }
        function El(e3) {
          return ll(ml(Y(e3, arguments.length > 1 && void 0 !== arguments[1] && arguments[1])));
        }
        var Rl = "Invalid tron path provided";
        function Ol() {
          var e3 = Tl(), t3 = Fl(e3), r3 = ml(e3);
          return { privateKey: D(e3), publicKey: D(t3), address: { base58: ll(r3), hex: D(r3) } };
        }
        function kl(e3) {
          if (ip.isObject(e3) || (e3 = {}), e3.path || (e3.path = X), !String(e3.path).match(/^m\/44\'\/195\'/)) throw new Error(Rl);
          var t3 = gs.createRandom(e3.password, e3.path, e3.wordlist);
          return { mnemonic: t3.mnemonic, privateKey: t3.privateKey, publicKey: t3.signingKey.publicKey, address: El(t3.privateKey.replace(/^0x/, "")) };
        }
        function Sl(e3, t3) {
          var r3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
          if (t3 || (t3 = X), !String(t3).match(/^m\/44\'\/195\'/)) throw new Error(Rl);
          var n2 = gs.fromMnemonic(rr.fromPhrase(e3, null, r3), t3);
          return { mnemonic: n2.mnemonic, privateKey: n2.privateKey, publicKey: n2.signingKey.publicKey, address: El(n2.privateKey.replace(/^0x/, "")) };
        }
        const Nl = (init_lib13(), __toCommonJS(lib_exports));
        var Ll = new Nl.AbiCoder();
        function Dl(e3) {
          return Qp.address.toHex(e3).replace(V, "0x");
        }
        function Ul(e3) {
          if ("[object Object]" !== Object.prototype.toString.call(e3) && "[object Array]" !== Object.prototype.toString.call(e3)) return e3;
          var t3, r3 = (t3 = e3, Array.isArray(t3) ? [] : {});
          return Object.keys(e3).forEach(function(t4) {
            return r3[t4] = e3[t4] instanceof Object && !e3[t4]._isBigNumber ? Ul(e3[t4]) : e3[t4];
          }), r3;
        }
        function xl(e3, t3, r3, n2) {
          if (r3 && "boolean" != typeof r3 || (n2 = r3, r3 = t3, t3 = e3, e3 = []), n2 && r3.replace(/^0x/, "").length % 64 == 8 && (r3 = "0x" + r3.replace(/^0x/, "").substring(8)), r3.replace(/^0x/, "").length % 64) throw new Error("The encoded string is not valid. Its length must be a multiple of 64.");
          return t3 = t3.map(function(e4) {
            return /trcToken/.test(e4) && (e4 = e4.replace(/trcToken/, "uint256")), e4;
          }), Ll.decode(t3, r3).reduce(function(r4, n3, o2) {
            return "address" == t3[o2] && (n3 = G + n3.substr(2).toLowerCase()), e3.length ? r4[e3[o2]] = n3 : r4.push(n3), r4;
          }, e3.length ? {} : []);
        }
        function Jl(e3, t3) {
          for (var r3 = 0; r3 < e3.length; r3++) "address" === e3[r3] && (t3[r3] = Qp.address.toHex(t3[r3]).replace(V, "0x"));
          return Ll.encode(e3, t3);
        }
        function _l(e3) {
          var t3 = e3.match(/([a-zA-Z0-9])(\[.*\])/);
          return t3 ? t3[2] : "";
        }
        function zl(e3) {
          return (_l(e3).match(/\]\[/g) || []).length + 1;
        }
        function Gl(e3, t3) {
          var r3 = [], n2 = function e4(t4) {
            if (t4 && 0 === t4.type.indexOf("tuple") && t4.components) {
              var r4 = t4.components.map(function(t5) {
                return e4(t5);
              });
              return "tuple(".concat(r4.join(","), ")").concat(_l(t4.type));
            }
            return /trcToken/.test(t4.type) ? t4.type.replace(/trcToken/, "uint256") : t4.type;
          }, o2 = function e4(t4) {
            return Array.isArray(t4) ? (t4.forEach(function(r4, n3) {
              t4[n3] = e4(r4);
            }), t4) : Dl(t4);
          }, a2 = function e4(t4, r4, n3) {
            n3 > 1 ? r4.length && r4.forEach(function(r5) {
              e4(t4, r5, n3 - 1);
            }) : r4.length && n3 && r4.forEach(function(e5) {
              i2(t4, e5);
            });
          }, i2 = function e4() {
            var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], r4 = arguments.length > 1 ? arguments[1] : void 0;
            t4.length && t4.forEach(function(t5, n3) {
              var i3 = t5.type;
              if (r4[n3]) {
                if ("address" === i3) r4[n3] = Dl(r4[n3]);
                else if ("address[" === i3.match(/^([^\x5b]*)(\x5b|$)/)[0]) o2(r4[n3]);
                else if (0 === i3.indexOf("tuple")) if (_l(i3)) {
                  var s3 = zl(i3);
                  a2(t5.components, r4[n3], s3);
                } else e4(t5.components, r4[n3]);
              }
            });
          };
          if (e3.inputs && e3.inputs.length) for (var s2 = 0; s2 < e3.inputs.length; s2++) {
            var u2 = e3.inputs[s2].type;
            "bool" === u2 && "false" === t3[s2] && (t3[s2] = false), r3.push(0 === u2.indexOf("tuple") ? n2(e3.inputs[s2]) : u2), t3.length < r3.length && t3.push("");
          }
          return i2(e3.inputs, t3), function(e4) {
            for (var t4 = 0; t4 < e4.length; t4++) {
              var r4 = e4[t4];
              /trcToken/.test(r4) && (e4[t4] = r4.replace(/trcToken/, "uint256"));
            }
          }(r3), Ll.encode(r3, t3);
        }
        function jl(e3, t3) {
          var r3 = function e4(t4) {
            return Array.isArray(t4) ? (t4.forEach(function(r4, n3) {
              t4[n3] = e4(r4);
            }), t4) : Qp.address.toHex(t4);
          }, n2 = function e4(t4, r4, n3) {
            n3 > 1 ? r4.length && r4.forEach(function(r5) {
              e4(t4, r5, n3 - 1);
            }) : r4.length && n3 && r4.forEach(function(e5) {
              a2(t4, e5);
            });
          }, o2 = function e4(t4) {
            var r4 = t4.name ? " ".concat(t4.name) : "";
            if (t4 && 0 === t4.type.indexOf("tuple") && t4.components) {
              var n3 = t4.components.map(function(t5) {
                return e4(t5);
              });
              return "tuple(".concat(n3.join(","), ")").concat(_l(t4.type)).concat(r4);
            }
            return /trcToken/.test(t4.type) ? t4.type.replace(/trcToken/, "uint256") + r4 : t4.type + r4;
          }, a2 = function e4() {
            var t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], o3 = arguments.length > 1 ? arguments[1] : void 0;
            t4.length && t4.forEach(function(t5, a3) {
              var i3 = t5.type, s3 = t5.name;
              if (o3[a3]) {
                if ("address" === i3) o3[a3] = Qp.address.toHex(o3[a3]), s3 && (o3[s3] = Qp.address.toHex(o3[s3]));
                else if ("address[" === i3.match(/^([^\x5b]*)(\x5b|$)/)[0]) r3(o3[a3]), s3 && r3(o3[s3]);
                else if (0 === i3.indexOf("tuple")) {
                  if (_l(i3)) {
                    var u3 = zl(i3);
                    n2(t5.components, o3[a3], u3);
                  } else e4(t5.components, o3[a3]);
                  s3 && (o3[s3] = o3[a3]);
                }
              }
            });
          };
          if (e3.outputs && e3.outputs.length > 0) {
            for (var i2 = [], s2 = 0; s2 < e3.outputs.length; s2++) {
              var u2 = e3.outputs[s2].type, c2 = e3.outputs[s2].name ? " ".concat(e3.outputs[s2].name) : "";
              i2.push(0 === u2.indexOf("tuple") ? o2(e3.outputs[s2]) : u2 + c2);
            }
            !function(e4) {
              for (var t4 = 0; t4 < e4.length; t4++) {
                var r4 = e4[t4];
                /^trcToken/.test(r4) && (e4[t4] = r4.replace(/^trcToken/, "uint256"));
              }
            }(i2), t3 && t3.length || (t3 = new Uint8Array(32 * e3.outputs.length));
            var l2 = Ul(Ll.decode(i2, t3));
            return a2(e3.outputs, l2), l2;
          }
          return [];
        }
        var Vl = "TRON Signed Message:\n";
        function Xl(e3) {
          return "string" == typeof e3 && (e3 = wt(e3)), Array.isArray(e3) && (e3 = new Uint8Array(e3)), kt(Se([wt(Vl), wt(String(e3.length)), e3]));
        }
        function Hl(e3, t3) {
          t3.match(/^0x/) || (t3 = "0x" + t3);
          var r3 = new Tr(t3), n2 = Xl(e3), o2 = r3.sign(n2);
          return Lc(o2);
        }
        function $l(e3, t3) {
          return t3.match(/^0x/) || (t3 = "0x" + t3), ll(Y(mr(Xl(e3), t3).replace(/^0x/, G)));
        }
        function Zl(e3, t3) {
          var r3 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r3.push.apply(r3, n2);
          }
          return r3;
        }
        function Kl(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r3 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? Zl(Object(r3), true).forEach(function(t4) {
              I()(e3, t4, r3[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r3)) : Zl(Object(r3)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r3, t4));
            });
          }
          return e3;
        }
        var Ql = r2(962), Yl = r2(37), ql = Yl.Transaction, ed = Yl.Permission, td = Yl.Key, rd = r2(248), nd = rd.TransferContract, od = rd.FreezeBalanceContract, ad = rd.UnfreezeBalanceContract, id2 = rd.WithdrawBalanceContract, sd = rd.FreezeBalanceV2Contract, ud = rd.UnfreezeBalanceV2Contract, cd = rd.WithdrawExpireUnfreezeContract, ld = rd.DelegateResourceContract, dd = rd.UnDelegateResourceContract, pd = r2(540), fd = pd.TransferAssetContract, gd = pd.ParticipateAssetIssueContract, hd = pd.AssetIssueContract, yd = pd.UpdateAssetContract, bd = r2(629), Td = bd.TriggerSmartContract, vd = bd.ClearABIContract, md = bd.UpdateEnergyLimitContract, Ad = bd.UpdateSettingContract, Pd = bd.CreateSmartContract, Wd = bd.SmartContract, Bd = r2(594).ResourceCode, Cd = r2(467), Fd = Cd.WitnessCreateContract, wd = Cd.VoteWitnessContract, Id = r2(521).UpdateBrokerageContract, Md = r2(443), Ed = Md.AccountCreateContract, Rd = Md.AccountUpdateContract, Od = Md.SetAccountIdContract, kd = Md.AccountPermissionUpdateContract, Sd = r2(268), Nd = Sd.ProposalCreateContract, Ld = Sd.ProposalDeleteContract, Dd = Sd.ProposalApproveContract, Ud = r2(351), xd = Ud.ExchangeCreateContract, Jd = Ud.ExchangeInjectContract, _d = Ud.ExchangeWithdrawContract, zd = Ud.ExchangeTransactionContract, Gd = function(e3) {
          return e3 && 0 !== e3.length ? new Uint8Array(Qp.address.toHex(e3).match(/.{1,2}/g).map(function(e4) {
            return parseInt(e4, 16);
          })) : new Uint8Array([]);
        }, jd = function(e3, t3, r3, n2) {
          var o2 = new Ql.Any();
          o2.pack(e3.serializeBinary(), "protocol." + r3);
          var a2 = new ql.Contract();
          a2.setType(t3), a2.setParameter(o2), n2 && a2.setPermissionId(n2);
          var i2 = new ql.raw();
          i2.addContract(a2);
          var s2 = new ql();
          return s2.setRawData(i2), s2;
        }, Vd = function(e3, t3, r3) {
          switch (e3.type) {
            case "TransferContract":
              return function(e4, t4) {
                var r4 = e4.to_address, n2 = e4.owner_address, o2 = e4.amount, a2 = new nd();
                return a2.setToAddress(Gd(r4)), a2.setOwnerAddress(Gd(n2)), a2.setAmount(o2), jd(a2, ql.Contract.ContractType.TRANSFERCONTRACT, "TransferContract", t4.Permission_id);
              }(t3, r3);
            case "TransferAssetContract":
              return function(e4, t4) {
                var r4 = e4.to_address, n2 = e4.owner_address, o2 = e4.amount, a2 = e4.asset_name, i2 = new fd();
                return i2.setToAddress(Gd(r4)), i2.setOwnerAddress(Gd(n2)), i2.setAssetName(Gd(a2.replace(/^0x/, ""))), i2.setAmount(o2), jd(i2, ql.Contract.ContractType.TRANSFERASSETCONTRACT, "TransferAssetContract", t4.Permission_id);
              }(t3, r3);
            case "ParticipateAssetIssueContract":
              return function(e4, t4) {
                var r4 = new gd();
                return r4.setToAddress(Gd(e4.to_address)), r4.setOwnerAddress(Gd(e4.owner_address)), r4.setAssetName(Gd(e4.asset_name.replace(/^0x/, ""))), r4.setAmount(e4.amount), jd(r4, ql.Contract.ContractType.PARTICIPATEASSETISSUECONTRACT, "ParticipateAssetIssueContract", t4.Permission_id);
              }(t3, r3);
            case "TriggerSmartContract":
              return function(e4, t4) {
                var r4 = new Td(), n2 = e4.owner_address, o2 = e4.contract_address, a2 = e4.parameter, i2 = void 0 === a2 ? "" : a2, s2 = e4.function_selector, u2 = e4.call_value, c2 = e4.call_token_value, l2 = e4.token_id, d2 = e4.data;
                if (r4.setOwnerAddress(Gd(n2)), r4.setContractAddress(Gd(o2)), r4.setCallValue(u2), d2) r4.setData(Gd(d2));
                else if (s2) {
                  var p2 = function(e5) {
                    return (arguments.length > 1 && void 0 !== arguments[1] && !arguments[1] ? "" : "0x") + kt(Buffer.from(e5, "utf-8")).toString().substring(2);
                  }(s2).substring(2, 10) + i2;
                  r4.setData(Gd(p2));
                }
                return l2 && r4.setTokenId(l2), c2 && r4.setCallTokenValue(c2), jd(r4, ql.Contract.ContractType.TRIGGERSMARTCONTRACT, "TriggerSmartContract", t4.Permission_id);
              }(t3, r3);
            case "FreezeBalanceContract":
              return function(e4, t4) {
                var r4 = new od(), n2 = e4.owner_address, o2 = e4.frozen_balance, a2 = e4.frozen_duration, i2 = e4.resource, s2 = e4.receiver_address;
                return r4.setOwnerAddress(Gd(n2)), r4.setFrozenBalance(o2), r4.setFrozenDuration(a2), i2 && r4.setResource(Bd[i2]), s2 && r4.setReceiverAddress(Gd(s2)), jd(r4, ql.Contract.ContractType.FREEZEBALANCECONTRACT, "FreezeBalanceContract", t4.Permission_id);
              }(t3, r3);
            case "UnfreezeBalanceContract":
              return function(e4, t4) {
                var r4 = new ad(), n2 = e4.owner_address, o2 = e4.resource, a2 = e4.receiver_address;
                return r4.setOwnerAddress(Gd(n2)), o2 && r4.setResource(Bd[o2]), a2 && r4.setReceiverAddress(Gd(a2)), jd(r4, ql.Contract.ContractType.UNFREEZEBALANCECONTRACT, "UnfreezeBalanceContract", t4.Permission_id);
              }(t3, r3);
            case "WithdrawBalanceContract":
              return function(e4, t4) {
                var r4 = new id2(), n2 = e4.owner_address;
                return r4.setOwnerAddress(Gd(n2)), jd(r4, ql.Contract.ContractType.WITHDRAWBALANCECONTRACT, "WithdrawBalanceContract", t4.Permission_id);
              }(t3, r3);
            case "FreezeBalanceV2Contract":
              return function(e4, t4) {
                var r4 = new sd(), n2 = e4.owner_address, o2 = e4.frozen_balance, a2 = e4.resource;
                return r4.setOwnerAddress(Gd(n2)), r4.setFrozenBalance(o2), r4.setResource(Bd[a2]), jd(r4, ql.Contract.ContractType.FREEZEBALANCEV2CONTRACT, "FreezeBalanceV2Contract", t4.Permission_id);
              }(t3, r3);
            case "CancelAllUnfreezeV2Contract":
              return function(e4, t4) {
                var r4 = new cd(), n2 = e4.owner_address;
                return r4.setOwnerAddress(Gd(n2)), jd(r4, ql.Contract.ContractType.CANCELALLUNFREEZEV2CONTRACT, "CancelAllUnfreezeV2Contract", t4.Permission_id);
              }(t3, r3);
            case "UnfreezeBalanceV2Contract":
              return function(e4, t4) {
                var r4 = new ud(), n2 = e4.owner_address, o2 = e4.unfreeze_balance, a2 = e4.resource;
                return r4.setOwnerAddress(Gd(n2)), r4.setUnfreezeBalance(o2), r4.setResource(Bd[a2]), jd(r4, ql.Contract.ContractType.UNFREEZEBALANCEV2CONTRACT, "UnfreezeBalanceV2Contract", t4.Permission_id);
              }(t3, r3);
            case "DelegateResourceContract":
              return function(e4, t4) {
                var r4 = new ld(), n2 = e4.owner_address, o2 = e4.receiver_address, a2 = e4.balance, i2 = e4.resource, s2 = e4.lock, u2 = void 0 !== s2 && s2, c2 = e4.lock_period;
                return r4.setOwnerAddress(Gd(n2)), r4.setBalance(a2), r4.setResource(Bd[i2]), r4.setLock(u2), r4.setLockPeriod(c2), r4.setReceiverAddress(Gd(o2)), jd(r4, ql.Contract.ContractType.DELEGATERESOURCECONTRACT, "DelegateResourceContract", t4.Permission_id);
              }(t3, r3);
            case "UnDelegateResourceContract":
              return function(e4, t4) {
                var r4 = new dd(), n2 = e4.owner_address, o2 = e4.receiver_address, a2 = e4.balance, i2 = e4.resource;
                return r4.setOwnerAddress(Gd(n2)), r4.setBalance(a2), r4.setResource(Bd[i2]), r4.setReceiverAddress(Gd(o2)), jd(r4, ql.Contract.ContractType.UNDELEGATERESOURCECONTRACT, "UnDelegateResourceContract", t4.Permission_id);
              }(t3, r3);
            case "WithdrawExpireUnfreezeContract":
              return function(e4, t4) {
                var r4 = new cd(), n2 = e4.owner_address;
                return r4.setOwnerAddress(Gd(n2)), jd(r4, ql.Contract.ContractType.WITHDRAWEXPIREUNFREEZECONTRACT, "WithdrawExpireUnfreezeContract", t4.Permission_id);
              }(t3, r3);
            case "WitnessCreateContract":
              return function(e4, t4) {
                var r4 = new Fd(), n2 = e4.owner_address, o2 = e4.url;
                return r4.setOwnerAddress(Gd(n2)), r4.setUrl(Gd(o2.replace(/^0x/, ""))), jd(r4, ql.Contract.ContractType.WITNESSCREATECONTRACT, "WitnessCreateContract", t4.Permission_id);
              }(t3, r3);
            case "VoteWitnessContract":
              return function(e4, t4) {
                var r4 = new wd(), n2 = e4.owner_address, o2 = e4.votes;
                return r4.setOwnerAddress(Gd(n2)), o2.forEach(function(e5) {
                  var t5 = new wd.Vote(), n3 = e5.vote_address, o3 = e5.vote_count;
                  t5.setVoteAddress(Gd(n3));
                  var a2 = parseInt(o3);
                  t5.setVoteCount(a2), r4.addVotes(t5);
                }), jd(r4, ql.Contract.ContractType.VOTEWITNESSCONTRACT, "VoteWitnessContract", t4.Permission_id);
              }(t3, r3);
            case "CreateSmartContract":
              return function(e4, t4) {
                var r4 = null != e4 && e4.new_contract ? Kl(Kl({}, { owner_address: e4.owner_address, call_token_value: e4.call_token_value, token_id: e4.token_id }), e4.new_contract) : e4, n2 = r4.owner_address, o2 = r4.consume_user_resource_percent, a2 = r4.origin_energy_limit, i2 = r4.abi, s2 = r4.bytecode, u2 = void 0 === s2 ? "" : s2, c2 = r4.name, l2 = r4.parameter, d2 = void 0 === l2 ? "" : l2, p2 = r4.call_value, f2 = r4.call_token_value, g2 = r4.token_id, h2 = r4.origin_address, y2 = new Pd();
                y2.setOwnerAddress(Gd(n2)), g2 && y2.setTokenId(g2), f2 && y2.setCallTokenValue(f2);
                var b2 = new Wd();
                if (i2) {
                  var T2;
                  T2 = "string" == typeof i2 ? JSON.parse(i2) : (null == i2 ? void 0 : i2.entrys) || [];
                  var v2 = new Wd.ABI(), m2 = function(e5) {
                    var t5 = new Wd.ABI.Entry.Param(), r5 = e5.indexed, n3 = e5.name, o3 = e5.type;
                    return true === r5 && t5.setIndexed(true), t5.setName(n3), t5.setType(o3), t5;
                  }, A2 = T2.map(function(e5) {
                    var t5 = e5.anonymous, r5 = e5.constant, n3 = e5.name, o3 = e5.inputs, a3 = e5.outputs, i3 = e5.type, s3 = e5.payable, u3 = e5.stateMutability, c3 = new Wd.ABI.Entry();
                    return c3.setAnonymous(t5), c3.setConstant(r5), c3.setName(n3), o3 && c3.setInputsList(o3.map(function(e6) {
                      return m2(e6);
                    })), a3 && c3.setOutputsList(a3.map(function(e6) {
                      return m2(e6);
                    })), i3 && c3.setType(Wd.ABI.Entry.EntryType[i3.toUpperCase()]), c3.setPayable(s3), u3 && c3.setStatemutability(Wd.ABI.Entry.StateMutabilityType[u3.toUpperCase()]), c3;
                  });
                  v2.setEntrysList(A2), b2.setAbi(v2);
                }
                if (p2 && b2.setCallValue(p2), b2.setConsumeUserResourcePercent(o2), b2.setOriginEnergyLimit(a2), h2 || (h2 = n2), b2.setOriginAddress(Gd(h2)), u2) {
                  var P2 = u2.replace(/^0x/, "") + d2.replace(/^0x/, "");
                  b2.setBytecode(Gd(P2));
                }
                return b2.setName(c2), y2.setNewContract(b2), jd(y2, ql.Contract.ContractType.CREATESMARTCONTRACT, "CreateSmartContract", t4.Permission_id);
              }(t3, r3);
            case "ClearABIContract":
              return function(e4, t4) {
                var r4 = e4.contract_address, n2 = e4.owner_address, o2 = new vd();
                return o2.setOwnerAddress(Gd(n2)), o2.setContractAddress(Gd(r4)), jd(o2, ql.Contract.ContractType.CLEARABICONTRACT, "ClearABIContract", t4.Permission_id);
              }(t3, r3);
            case "UpdateBrokerageContract":
              return function(e4, t4) {
                var r4 = e4.brokerage, n2 = e4.owner_address, o2 = new Id();
                return o2.setOwnerAddress(Gd(n2)), o2.setBrokerage(r4), jd(o2, ql.Contract.ContractType.UPDATEBROKERAGECONTRACT, "UpdateBrokerageContract", t4.Permission_id);
              }(t3, r3);
            case "AssetIssueContract":
              return function(e4, t4) {
                var r4 = e4.owner_address, n2 = e4.name, o2 = e4.abbr, a2 = e4.description, i2 = e4.url, s2 = e4.total_supply, u2 = e4.trx_num, c2 = e4.num, l2 = e4.start_time, d2 = e4.end_time, p2 = e4.precision, f2 = e4.free_asset_net_limit, g2 = e4.public_free_asset_net_limit, h2 = e4.public_free_asset_net_usage, y2 = void 0 === h2 ? 0 : h2, b2 = e4.public_latest_free_net_time, T2 = void 0 === b2 ? 0 : b2, v2 = e4.vote_score, m2 = void 0 === v2 ? 0 : v2, A2 = e4.frozen_supply, P2 = new hd();
                if (P2.setOwnerAddress(Gd(r4)), n2 && P2.setName(Gd(n2.replace(/^0x/, ""))), o2 && P2.setAbbr(Gd(o2.replace(/^0x/, ""))), P2.setTotalSupply(s2), P2.setNum(c2), P2.setEndTime(d2), P2.setStartTime(l2), P2.setTrxNum(u2), P2.setVoteScore(m2), p2 && P2.setPrecision(p2), T2 && P2.setPublicLatestFreeNetTime(T2), a2 && P2.setDescription(Gd(a2.replace(/^0x/, ""))), i2 && P2.setUrl(Gd(i2.replace(/^0x/, ""))), P2.setPublicFreeAssetNetUsage(y2), P2.setFreeAssetNetLimit(f2), P2.setPublicFreeAssetNetLimit(g2), A2) {
                  var W2 = new hd.FrozenSupply();
                  W2.setFrozenAmount(A2.length ? A2[0].frozen_amount : A2.frozen_amount), W2.setFrozenDays(A2.length ? A2[0].frozen_days : A2.frozen_days), P2.addFrozenSupply(W2);
                }
                return jd(P2, ql.Contract.ContractType.ASSETISSUECONTRACT, "AssetIssueContract", t4.Permission_id);
              }(t3, r3);
            case "AccountCreateContract":
              return function(e4, t4) {
                var r4 = new Ed(), n2 = e4.account_address, o2 = e4.owner_address;
                return r4.setOwnerAddress(Gd(o2)), r4.setAccountAddress(Gd(n2.replace(/^0x/, ""))), jd(r4, ql.Contract.ContractType.ACCOUNTCREATECONTRACT, "AccountCreateContract", t4.Permission_id);
              }(t3, r3);
            case "AccountUpdateContract":
              return function(e4, t4) {
                var r4 = new Rd(), n2 = e4.account_name, o2 = e4.owner_address;
                return r4.setOwnerAddress(Gd(o2)), r4.setAccountName(Gd(n2.replace(/^0x/, ""))), jd(r4, ql.Contract.ContractType.ACCOUNTUPDATECONTRACT, "AccountUpdateContract", t4.Permission_id);
              }(t3, r3);
            case "SetAccountIdContract":
              return function(e4, t4) {
                var r4 = new Od(), n2 = e4.account_id, o2 = e4.owner_address;
                return r4.setOwnerAddress(Gd(o2)), r4.setAccountId(Gd(n2.replace(/^0x/, ""))), jd(r4, ql.Contract.ContractType.SETACCOUNTIDCONTRACT, "SetAccountIdContract", t4.Permission_id);
              }(t3, r3);
            case "ProposalCreateContract":
              return function(e4, t4) {
                var r4 = new Nd(), n2 = e4.owner_address, o2 = e4.parameters;
                return r4.setOwnerAddress(Gd(n2)), o2.forEach(function(e5) {
                  r4.getParametersMap().set(e5.key, e5.value);
                }), jd(r4, ql.Contract.ContractType.PROPOSALCREATECONTRACT, "ProposalCreateContract", t4.Permission_id);
              }(t3, r3);
            case "ProposalDeleteContract":
              return function(e4, t4) {
                var r4 = new Ld(), n2 = e4.owner_address, o2 = e4.proposal_id;
                return r4.setOwnerAddress(Gd(n2)), r4.setProposalId(o2), jd(r4, ql.Contract.ContractType.PROPOSALDELETECONTRACT, "ProposalDeleteContract", t4.Permission_id);
              }(t3, r3);
            case "ProposalApproveContract":
              return function(e4, t4) {
                var r4 = new Dd(), n2 = e4.owner_address, o2 = e4.proposal_id, a2 = e4.is_add_approval;
                return r4.setOwnerAddress(Gd(n2)), r4.setProposalId(o2), r4.setIsAddApproval(a2), jd(r4, ql.Contract.ContractType.PROPOSALAPPROVECONTRACT, "ProposalApproveContract", t4.Permission_id);
              }(t3, r3);
            case "ExchangeCreateContract":
              return function(e4, t4) {
                var r4 = new xd(), n2 = e4.owner_address, o2 = e4.first_token_id, a2 = e4.first_token_balance, i2 = e4.second_token_id, s2 = e4.second_token_balance;
                return r4.setOwnerAddress(Gd(n2)), r4.setFirstTokenId(Gd(o2.replace(/^0x/, ""))), r4.setFirstTokenBalance(a2), r4.setSecondTokenId(Gd(i2.replace(/^0x/, ""))), r4.setSecondTokenBalance(s2), jd(r4, ql.Contract.ContractType.EXCHANGECREATECONTRACT, "ExchangeCreateContract", t4.Permission_id);
              }(t3, r3);
            case "ExchangeInjectContract":
              return function(e4, t4) {
                var r4 = new Jd(), n2 = e4.owner_address, o2 = e4.exchange_id, a2 = e4.token_id, i2 = e4.quant;
                return r4.setOwnerAddress(Gd(n2)), r4.setExchangeId(o2), r4.setTokenId(Gd(a2.replace(/^0x/, ""))), r4.setQuant(i2), jd(r4, ql.Contract.ContractType.EXCHANGEINJECTCONTRACT, "ExchangeInjectContract", t4.Permission_id);
              }(t3, r3);
            case "ExchangeWithdrawContract":
              return function(e4, t4) {
                var r4 = new _d(), n2 = e4.owner_address, o2 = e4.exchange_id, a2 = e4.token_id, i2 = e4.quant;
                return r4.setOwnerAddress(Gd(n2)), r4.setExchangeId(o2), r4.setTokenId(Gd(a2.replace(/^0x/, ""))), r4.setQuant(i2), jd(r4, ql.Contract.ContractType.EXCHANGEWITHDRAWCONTRACT, "ExchangeWithdrawContract", t4.Permission_id);
              }(t3, r3);
            case "ExchangeTransactionContract":
              return function(e4, t4) {
                var r4 = new zd(), n2 = e4.owner_address, o2 = e4.exchange_id, a2 = e4.token_id, i2 = e4.quant, s2 = e4.expected;
                return r4.setOwnerAddress(Gd(n2)), r4.setExchangeId(o2), r4.setTokenId(Gd(a2.replace(/^0x/, ""))), r4.setQuant(i2), r4.setExpected(s2), jd(r4, ql.Contract.ContractType.EXCHANGETRANSACTIONCONTRACT, "ExchangeTransactionContract", t4.Permission_id);
              }(t3, r3);
            case "UpdateSettingContract":
              return function(e4, t4) {
                var r4 = new Ad(), n2 = e4.owner_address, o2 = e4.contract_address, a2 = e4.consume_user_resource_percent;
                return r4.setOwnerAddress(Gd(n2)), r4.setContractAddress(Gd(o2)), r4.setConsumeUserResourcePercent(a2), jd(r4, ql.Contract.ContractType.UPDATESETTINGCONTRACT, "UpdateSettingContract", t4.Permission_id);
              }(t3, r3);
            case "UpdateEnergyLimitContract":
              return function(e4, t4) {
                var r4 = new md(), n2 = e4.owner_address, o2 = e4.contract_address, a2 = e4.origin_energy_limit;
                return r4.setOwnerAddress(Gd(n2)), r4.setContractAddress(Gd(o2)), r4.setOriginEnergyLimit(a2), jd(r4, ql.Contract.ContractType.UPDATEENERGYLIMITCONTRACT, "UpdateEnergyLimitContract", t4.Permission_id);
              }(t3, r3);
            case "AccountPermissionUpdateContract":
              return function(e4, t4) {
                var r4 = new kd(), n2 = e4.owner_address, o2 = e4.owner, a2 = e4.witness, i2 = e4.actives;
                r4.setOwnerAddress(Gd(n2));
                var s2 = function(e5) {
                  var t5 = new ed(), r5 = e5.type, n3 = e5.id, o3 = e5.permission_name, a3 = e5.threshold, i3 = e5.parentId, s3 = e5.operations, u2 = e5.keys;
                  return t5.setType(function(e6) {
                    return isNaN(e6) ? "Active" === e6 ? 2 : "Witness" === e6 ? 1 : 0 : e6;
                  }(r5)), t5.setId(n3), t5.setPermissionName(o3), t5.setThreshold(a3), i3 && t5.setParentId(i3), s3 && t5.setOperations(Gd(s3)), u2 && t5.setKeysList(u2.map(function(e6) {
                    var t6 = new td();
                    return t6.setAddress(Gd(e6.address)), t6.setWeight(e6.weight), t6;
                  })), t5;
                };
                return o2 && r4.setOwner(s2(o2)), a2 && r4.setWitness(s2(a2)), i2 && (Array.isArray(i2) ? r4.setActivesList(i2.map(function(e5) {
                  return s2(e5);
                })) : r4.setActivesList([s2(i2)])), jd(r4, ql.Contract.ContractType.ACCOUNTPERMISSIONUPDATECONTRACT, "AccountPermissionUpdateContract", t4.Permission_id);
              }(t3, r3);
            case "UpdateAssetContract":
              return function(e4, t4) {
                var r4 = new yd(), n2 = e4.owner_address, o2 = e4.description, a2 = e4.url, i2 = e4.new_limit, s2 = e4.new_public_limit;
                return r4.setOwnerAddress(Gd(n2)), o2 && r4.setDescription(Gd(o2.replace(/^0x/, ""))), a2 && r4.setUrl(Gd(a2.replace(/^0x/, ""))), i2 && r4.setNewLimit(i2), s2 && r4.setNewPublicLimit(s2), jd(r4, ql.Contract.ContractType.UPDATEASSETCONTRACT, "UpdateAssetContract", t4.Permission_id);
              }(t3, r3);
          }
        }, Xd = function(e3) {
          var t3 = e3.raw_data, r3 = t3.contract[0], n2 = r3.parameter.value, o2 = { Permission_id: r3.Permission_id }, a2 = Vd(r3, n2, o2), i2 = a2.getRawData();
          return i2.setRefBlockBytes(Gd(t3.ref_block_bytes)), i2.setRefBlockHash(Gd(t3.ref_block_hash)), t3.data && i2.setData(Gd(t3.data)), t3.fee_limit && i2.setFeeLimit(t3.fee_limit), t3.expiration && i2.setExpiration(t3.expiration), t3.timestamp && i2.setTimestamp(t3.timestamp), a2.setRawData(i2), a2;
        }, Hd = function(e3) {
          var t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = e3.raw_data, o2 = n2.contract[0], a2 = Vd(o2, t3, { Permission_id: null == t3 ? void 0 : t3.Permission_id }), i2 = a2.getRawData();
          return i2.setRefBlockBytes(Gd(n2.ref_block_bytes)), i2.setRefBlockHash(Gd(n2.ref_block_hash)), r3.data && i2.setData(Gd(r3.data.replace(/^0x/, ""))), (r3.fee_limit || t3.fee_limit) && i2.setFeeLimit(r3.fee_limit || t3.fee_limit), n2.expiration && i2.setExpiration(n2.expiration), n2.timestamp && i2.setTimestamp(n2.timestamp), a2.setRawData(i2), a2;
        }, $d = function(e3, t3) {
          var r3 = t3.getRawData().serializeBinary(), n2 = D(r3), o2 = vt(r3);
          return n2.toLowerCase() === e3.raw_data_hex.toLowerCase() && o2.replace(/^0x/, "").toLowerCase() === e3.txID.replace(/^0x/, "").toLowerCase();
        }, Zd = function(e3) {
          return D(e3.getRawData().serializeBinary());
        }, Kd = function(e3) {
          var t3 = Xd(e3);
          return $d(e3, t3);
        }, Qd = function(e3, t3, r3) {
          var n2 = Hd(e3, t3, r3);
          return $d(e3, n2);
        }, Yd = function(e3) {
          return vt(e3.getRawData().serializeBinary());
        };
        const qd = require_validator();
        var ep = r2.n(qd);
        const tp = require_bignumber();
        var rp = r2.n(tp);
        function np(e3, t3) {
          var r3 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r3.push.apply(r3, n2);
          }
          return r3;
        }
        function op(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r3 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? np(Object(r3), true).forEach(function(t4) {
              I()(e3, t4, r3[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r3)) : np(Object(r3)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r3, t4));
            });
          }
          return e3;
        }
        var ap = { isValidURL: function(e3) {
          return "string" == typeof e3 && ep().isURL(e3.toString(), { protocols: ["http", "https"], require_tld: false });
        }, isObject: function(e3) {
          return e3 === Object(e3) && "[object Array]" !== Object.prototype.toString.call(e3);
        }, isArray: function(e3) {
          return Array.isArray(e3);
        }, isJson: function(e3) {
          try {
            return !!JSON.parse(e3);
          } catch (e4) {
            return false;
          }
        }, isBoolean: function(e3) {
          return "boolean" == typeof e3;
        }, isBigNumber: function(e3) {
          return e3 && (e3 instanceof rp() || e3.constructor && "BigNumber" === e3.constructor.name);
        }, isString: function(e3) {
          return "string" == typeof e3 || e3 && e3.constructor && "String" === e3.constructor.name;
        }, isFunction: function(e3) {
          return "function" == typeof e3;
        }, isHex: function(e3) {
          return "string" == typeof e3 && !isNaN(parseInt(e3, 16)) && /^(0x|)[a-fA-F0-9]+$/.test(e3);
        }, isInteger: function(e3) {
          return null !== e3 && Number.isInteger(Number(e3));
        }, hasProperty: function(e3, t3) {
          return Object.prototype.hasOwnProperty.call(e3, t3);
        }, hasProperties: function(e3) {
          for (var t3 = this, r3 = arguments.length, n2 = new Array(r3 > 1 ? r3 - 1 : 0), o2 = 1; o2 < r3; o2++) n2[o2 - 1] = arguments[o2];
          return n2.length && !n2.map(function(r4) {
            return t3.hasProperty(e3, r4);
          }).includes(false);
        }, mapEvent: function(e3) {
          var t3 = { block: e3.block_number, timestamp: e3.block_timestamp, contract: e3.contract_address, name: e3.event_name, transaction: e3.transaction_id, result: e3.result, resourceNode: e3.resource_Node || (e3._unconfirmed ? "fullNode" : "solidityNode") };
          return e3._unconfirmed && (t3.unconfirmed = e3._unconfirmed), e3._fingerprint && (t3.fingerprint = e3._fingerprint), t3;
        }, parseEvent: function(e3, t3) {
          var r3 = t3.inputs;
          if (!e3.result) return e3;
          if (this.isObject(e3.result)) for (var n2 = 0; n2 < r3.length; n2++) {
            var o2 = r3[n2];
            "address" == o2.type && o2.name in e3.result && (e3.result[o2.name] = G + e3.result[o2.name].substr(2).toLowerCase());
          }
          else this.isArray(e3.result) && (e3.result = e3.result.reduce(function(e4, t4, n3) {
            var o3 = r3[n3], a2 = o3.name;
            return "address" == o3.type && (t4 = G + t4.substr(2).toLowerCase()), e4[a2] = t4, e4;
          }, {}));
          return e3;
        }, padLeft: function(e3, t3, r3) {
          for (var n2 = e3.toString(); n2.length < r3; ) n2 = t3 + n2;
          return n2;
        }, isNotNullOrUndefined: function(e3) {
          return null != e3;
        }, sleep: function() {
          var e3 = arguments;
          return p()(E().mark(function t3() {
            var r3;
            return E().wrap(function(t4) {
              for (; ; ) switch (t4.prev = t4.next) {
                case 0:
                  return r3 = e3.length > 0 && void 0 !== e3[0] ? e3[0] : 1e3, t4.abrupt("return", new Promise(function(e4) {
                    return setTimeout(e4, r3);
                  }));
                case 2:
                case "end":
                  return t4.stop();
              }
            }, t3);
          }))();
        } };
        const ip = op(op({}, ap), {}, { code: t2, accounts: s, base58: o, bytes: e2, crypto: i, abi: u, message: c, _TypedDataEncoder: sl, transaction: l, ethersUtils: a });
        var sp = function() {
          function e3(t4) {
            var r3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3e4, n2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], a2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : {}, i2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "/";
            if (y()(this, e3), !ip.isValidURL(t4)) throw new Error("Invalid URL provided to HttpProvider");
            if (isNaN(r3) || r3 < 0) throw new Error("Invalid timeout duration provided");
            if (!ip.isObject(a2)) throw new Error("Invalid headers object provided");
            t4 = t4.replace(/\/+$/, ""), this.host = t4, this.timeout = r3, this.user = n2, this.password = o2, this.headers = a2, this.statusPage = i2, this.instance = O().create({ baseURL: t4, timeout: r3, headers: a2, auth: n2 && { user: n2, password: o2 } });
          }
          var t3;
          return T()(e3, [{ key: "setStatusPage", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "/";
            this.statusPage = e4;
          } }, { key: "isConnected", value: (t3 = p()(E().mark(function e4() {
            var t4, r3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return t4 = r3.length > 0 && void 0 !== r3[0] ? r3[0] : this.statusPage, e5.abrupt("return", this.request(t4).then(function(e6) {
                    return ip.hasProperties(e6, "blockID", "block_header");
                  }).catch(function() {
                    return false;
                  }));
                case 2:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return t3.apply(this, arguments);
          }) }, { key: "request", value: function(e4) {
            var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "get";
            return r3 = r3.toLowerCase(), this.instance.request({ data: "post" == r3 && Object.keys(t4).length ? t4 : null, params: "get" == r3 && t4, url: e4, method: r3 }).then(function(e5) {
              return e5.data;
            });
          } }]), e3;
        }();
        const up = { HttpProvider: sp }, cp = require_eventemitter3();
        var lp = r2.n(cp);
        const dp = require_semver();
        var pp = r2.n(dp);
        const fp = require_injectpromise();
        var gp = r2.n(fp);
        function hp(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n2 = Array(t3); r3 < t3; r3++) n2[r3] = e3[r3];
          return n2;
        }
        var yp, bp = function() {
          function e3() {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (y()(this, e3), !t3 || !t3 instanceof Qp) throw new Error("Expected instance of TronWeb");
            this.tronWeb = t3;
          }
          return T()(e3, [{ key: "invalid", value: function(e4) {
            return e4.msg || "Invalid ".concat(e4.name).concat("address" === e4.type ? " address" : "", " provided");
          } }, { key: "notPositive", value: function(e4) {
            return "".concat(e4.name, " must be a positive integer");
          } }, { key: "notEqual", value: function(e4) {
            return e4.msg || "".concat(e4.names[0], " can not be equal to ").concat(e4.names[1]);
          } }, { key: "notValid", value: function() {
            var e4, t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function() {
            }, r3 = {}, n2 = false, o2 = function(e5, t4) {
              var r4 = "undefined" != typeof Symbol && e5[Symbol.iterator] || e5["@@iterator"];
              if (!r4) {
                if (Array.isArray(e5) || (r4 = function(e6, t5) {
                  if (e6) {
                    if ("string" == typeof e6) return hp(e6, t5);
                    var r5 = {}.toString.call(e6).slice(8, -1);
                    return "Object" === r5 && e6.constructor && (r5 = e6.constructor.name), "Map" === r5 || "Set" === r5 ? Array.from(e6) : "Arguments" === r5 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r5) ? hp(e6, t5) : void 0;
                  }
                }(e5)) || t4 && e5 && "number" == typeof e5.length) {
                  r4 && (e5 = r4);
                  var n3 = 0, o3 = function() {
                  };
                  return { s: o3, n: function() {
                    return n3 >= e5.length ? { done: true } : { done: false, value: e5[n3++] };
                  }, e: function(e6) {
                    throw e6;
                  }, f: o3 };
                }
                throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
              }
              var a3, i3 = true, s3 = false;
              return { s: function() {
                r4 = r4.call(e5);
              }, n: function() {
                var e6 = r4.next();
                return i3 = e6.done, e6;
              }, e: function(e6) {
                s3 = true, a3 = e6;
              }, f: function() {
                try {
                  i3 || null == r4.return || r4.return();
                } finally {
                  if (s3) throw a3;
                }
              } };
            }(arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []);
            try {
              for (o2.s(); !(e4 = o2.n()).done; ) {
                var a2 = e4.value, i2 = a2.name, s2 = a2.names, u2 = a2.value, c2 = a2.type, l2 = a2.gt, d2 = a2.lt, p2 = a2.gte, f2 = a2.lte;
                if (a2.se, !a2.optional || ip.isNotNullOrUndefined(u2) && ("boolean" === c2 || false !== u2)) {
                  switch (r3[a2.name] = a2.value, c2) {
                    case "address":
                      this.tronWeb.isAddress(u2) ? r3[i2] = this.tronWeb.address.toHex(u2) : n2 = true;
                      break;
                    case "integer":
                      (!ip.isInteger(u2) || "number" == typeof l2 && u2 <= a2.gt || "number" == typeof d2 && u2 >= a2.lt || "number" == typeof p2 && u2 < a2.gte || "number" == typeof f2 && u2 > a2.lte) && (n2 = true);
                      break;
                    case "positive-integer":
                      if (!ip.isInteger(u2) || u2 <= 0) return void t3(this.notPositive(a2));
                      break;
                    case "tokenId":
                    case "not-empty-string":
                      ip.isString(u2) && u2.length || (n2 = true);
                      break;
                    case "notEmptyObject":
                      ip.isObject(u2) && Object.keys(u2).length || (n2 = true);
                      break;
                    case "notEqual":
                      if (r3[s2[0]] === r3[s2[1]]) return t3(this.notEqual(a2)), true;
                      break;
                    case "resource":
                      ["BANDWIDTH", "ENERGY"].includes(u2) || (n2 = true);
                      break;
                    case "url":
                      ip.isValidURL(u2) || (n2 = true);
                      break;
                    case "hex":
                      ip.isHex(u2) || (n2 = true);
                      break;
                    case "array":
                      Array.isArray(u2) || (n2 = true);
                      break;
                    case "boolean":
                      ip.isBoolean(u2) || (n2 = true);
                      break;
                    case "string":
                      (!ip.isString(u2) || "number" == typeof l2 && u2.length <= a2.gt || "number" == typeof d2 && u2.length >= a2.lt || "number" == typeof p2 && u2.length < a2.gte || "number" == typeof f2 && u2.length > a2.lte) && (n2 = true);
                  }
                  if (n2) return t3(this.invalid(a2)), true;
                }
              }
            } catch (e5) {
              o2.e(e5);
            } finally {
              o2.f();
            }
            return false;
          } }]), e3;
        }();
        function Tp(e3, t3) {
          var r3 = "undefined" != typeof Symbol && e3[Symbol.iterator] || e3["@@iterator"];
          if (!r3) {
            if (Array.isArray(e3) || (r3 = function(e4, t4) {
              if (e4) {
                if ("string" == typeof e4) return vp(e4, t4);
                var r4 = {}.toString.call(e4).slice(8, -1);
                return "Object" === r4 && e4.constructor && (r4 = e4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(e4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? vp(e4, t4) : void 0;
              }
            }(e3)) || t3 && e3 && "number" == typeof e3.length) {
              r3 && (e3 = r3);
              var n2 = 0, o2 = function() {
              };
              return { s: o2, n: function() {
                return n2 >= e3.length ? { done: true } : { done: false, value: e3[n2++] };
              }, e: function(e4) {
                throw e4;
              }, f: o2 };
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          var a2, i2 = true, s2 = false;
          return { s: function() {
            r3 = r3.call(e3);
          }, n: function() {
            var e4 = r3.next();
            return i2 = e4.done, e4;
          }, e: function(e4) {
            s2 = true, a2 = e4;
          }, f: function() {
            try {
              i2 || null == r3.return || r3.return();
            } finally {
              if (s2) throw a2;
            }
          } };
        }
        function vp(e3, t3) {
          (null == t3 || t3 > e3.length) && (t3 = e3.length);
          for (var r3 = 0, n2 = Array(t3); r3 < t3; r3++) n2[r3] = e3[r3];
          return n2;
        }
        function mp(e3, t3) {
          var r3 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r3.push.apply(r3, n2);
          }
          return r3;
        }
        function Ap(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r3 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? mp(Object(r3), true).forEach(function(t4) {
              I()(e3, t4, r3[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r3)) : mp(Object(r3)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r3, t4));
            });
          }
          return e3;
        }
        function Pp(e3) {
          return Qp.address.toHex(e3);
        }
        function Wp(e3) {
          return yp.tronWeb.fromUtf8(e3).replace(/^0x/, "");
        }
        function Bp(e3) {
          return JSON.parse(JSON.stringify(e3));
        }
        function Cp(e3, t3, r3, n2) {
          return "function" == typeof r3 && (n2 = r3), "function" == typeof t3 && (n2 = t3, t3 = null), e3.Error ? n2(e3.Error) : e3.result && e3.result.message ? n2(yp.tronWeb.toUtf8(e3.result.message)) : Qd(e3, t3, r3) ? n2(null, e3) : n2("Invalid transaction");
        }
        function Fp() {
          var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          if (void 0 === e3.ref_block_bytes && void 0 === e3.ref_block_hash && void 0 === e3.expiration && void 0 === e3.timestamp) return false;
          if ("string" != typeof e3.ref_block_bytes) throw new Error("Invalid ref_block_bytes provided.");
          if ("string" != typeof e3.ref_block_hash) throw new Error("Invalid ref_block_hash provided.");
          if ("number" != typeof e3.expiration) throw new Error("Invalid expiration provided.");
          if ("number" != typeof e3.timestamp) throw new Error("Invalid timestamp provided.");
          return true;
        }
        function wp(e3, t3, r3, n2) {
          return Ip.apply(this, arguments);
        }
        function Ip() {
          return Ip = p()(E().mark(function e3(t3, r3, n2, o2) {
            var a2, i2, s2, u2 = arguments;
            return E().wrap(function(e4) {
              for (; ; ) switch (e4.prev = e4.next) {
                case 0:
                  if (a2 = u2.length > 4 && void 0 !== u2[4] ? u2[4] : {}, e4.t0 = Ap, e4.t1 = Ap, e4.t2 = { contract: [{ parameter: { value: n2, type_url: "type.googleapis.com/protocol.".concat(r3) }, type: r3 }] }, !Fp(a2)) {
                    e4.next = 8;
                    break;
                  }
                  e4.t3 = {}, e4.next = 11;
                  break;
                case 8:
                  return e4.next = 10, t3.fullNode.request("wallet/getblock", { detail: false }, "post").then(function(e5) {
                    return { ref_block_bytes: e5.block_header.raw_data.number.toString(16).slice(-4).padStart(4, "0"), ref_block_hash: e5.blockID.slice(16, 32), expiration: e5.block_header.raw_data.timestamp + 6e4, timestamp: e5.block_header.raw_data.timestamp };
                  });
                case 10:
                  e4.t3 = e4.sent;
                case 11:
                  return e4.t4 = e4.t3, e4.t5 = (0, e4.t1)(e4.t2, e4.t4), e4.t6 = a2, e4.t7 = (0, e4.t0)(e4.t5, e4.t6), i2 = { visible: false, txID: "", raw_data_hex: "", raw_data: e4.t7 }, o2 && (i2.raw_data.contract[0].Permission_id = o2), s2 = Xd(i2), i2.txID = Yd(s2).replace(/^0x/, ""), i2.raw_data_hex = Zd(s2).toLowerCase(), e4.abrupt("return", i2);
                case 21:
                case "end":
                  return e4.stop();
              }
            }, e3);
          })), Ip.apply(this, arguments);
        }
        function Mp(e3) {
          var t3 = {};
          return Fp(null == e3 ? void 0 : e3.blockHeader) && ["ref_block_bytes", "ref_block_hash", "expiration", "timestamp"].forEach(function(r3) {
            t3[r3] = e3.blockHeader[r3];
          }), t3;
        }
        var Ep = function() {
          function e3() {
            var t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (y()(this, e3), !t4 || !t4 instanceof Qp) throw new Error("Expected instance of TronWeb");
            yp = this, this.tronWeb = t4, this.injectPromise = gp()(this), this.validator = new bp(t4);
          }
          var t3, r3, n2, o2, a2;
          return T()(e3, [{ key: "sendTrx", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex, o3 = arguments.length > 3 ? arguments[3] : void 0, a3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            if (ip.isFunction(o3) && (a3 = o3, o3 = {}), ip.isFunction(n3) ? (a3 = n3, n3 = this.tronWeb.defaultAddress.hex) : ip.isObject(n3) && (o3 = n3, n3 = this.tronWeb.defaultAddress.hex), !a3) return this.injectPromise(this.sendTrx, t4, r4, n3, o3);
            if (r4 = parseInt(r4), !this.validator.notValid([{ name: "recipient", type: "address", value: t4 }, { name: "origin", type: "address", value: n3 }, { names: ["recipient", "origin"], type: "notEqual", msg: "Cannot transfer TRX to the same account" }, { name: "amount", type: "integer", gt: 0, value: r4 }], a3)) {
              var i2 = { to_address: Pp(t4), owner_address: Pp(n3), amount: r4 }, s2 = Mp(o3);
              wp(this.tronWeb, "TransferContract", i2, null === (e4 = o3) || void 0 === e4 ? void 0 : e4.permissionId, s2).then(function(e5) {
                return a3(null, e5);
              }).catch(function(e5) {
                return a3(e5);
              });
            }
          } }, { key: "sendToken", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex, a3 = arguments.length > 4 ? arguments[4] : void 0, i2 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
            if (ip.isFunction(a3) && (i2 = a3, a3 = {}), ip.isFunction(o3) ? (i2 = o3, o3 = this.tronWeb.defaultAddress.hex) : ip.isObject(o3) && (a3 = o3, o3 = this.tronWeb.defaultAddress.hex), !i2) return this.injectPromise(this.sendToken, t4, r4, n3, o3, a3);
            if (r4 = parseInt(r4), !this.validator.notValid([{ name: "recipient", type: "address", value: t4 }, { name: "origin", type: "address", value: o3 }, { names: ["recipient", "origin"], type: "notEqual", msg: "Cannot transfer tokens to the same account" }, { name: "amount", type: "integer", gt: 0, value: r4 }, { name: "token ID", type: "tokenId", value: n3 }], i2)) {
              var s2 = { to_address: Pp(t4), owner_address: Pp(o3), asset_name: Wp(n3), amount: parseInt(r4) }, u2 = Mp(a3);
              wp(this.tronWeb, "TransferAssetContract", s2, null === (e4 = a3) || void 0 === e4 ? void 0 : e4.permissionId, u2).then(function(e5) {
                return i2(null, e5);
              }).catch(function(e5) {
                return i2(e5);
              });
            }
          } }, { key: "purchaseToken", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, o3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex, a3 = arguments.length > 4 ? arguments[4] : void 0, i2 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
            if (ip.isFunction(a3) && (i2 = a3, a3 = {}), ip.isFunction(o3) ? (i2 = o3, o3 = this.tronWeb.defaultAddress.hex) : ip.isObject(o3) && (a3 = o3, o3 = this.tronWeb.defaultAddress.hex), !i2) return this.injectPromise(this.purchaseToken, t4, r4, n3, o3, a3);
            if (!this.validator.notValid([{ name: "buyer", type: "address", value: o3 }, { name: "issuer", type: "address", value: t4 }, { names: ["buyer", "issuer"], type: "notEqual", msg: "Cannot purchase tokens from same account" }, { name: "amount", type: "integer", gt: 0, value: n3 }, { name: "token ID", type: "tokenId", value: r4 }], i2)) {
              var s2 = { to_address: Pp(t4), owner_address: Pp(o3), asset_name: Wp(r4), amount: parseInt(n3) }, u2 = Mp(a3);
              wp(this.tronWeb, "ParticipateAssetIssueContract", s2, null === (e4 = a3) || void 0 === e4 ? void 0 : e4.permissionId, u2).then(function(e5) {
                return i2(null, e5);
              }).catch(function(e5) {
                return i2(e5);
              });
            }
          } }, { key: "freezeBalance", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 3, n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "BANDWIDTH", o3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex, a3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : void 0, i2 = arguments.length > 5 ? arguments[5] : void 0, s2 = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
            if (ip.isFunction(i2) && (s2 = i2, i2 = {}), ip.isFunction(a3) ? (s2 = a3, a3 = void 0) : ip.isObject(a3) && (i2 = a3, a3 = void 0), ip.isFunction(o3) ? (s2 = o3, o3 = this.tronWeb.defaultAddress.hex) : ip.isObject(o3) && (i2 = o3, o3 = this.tronWeb.defaultAddress.hex), ip.isFunction(r4) && (s2 = r4, r4 = 3), ip.isFunction(n3) && (s2 = n3, n3 = "BANDWIDTH"), !s2) return this.injectPromise(this.freezeBalance, t4, r4, n3, o3, a3, i2);
            if (!this.validator.notValid([{ name: "origin", type: "address", value: o3 }, { name: "receiver", type: "address", value: a3, optional: true }, { name: "amount", type: "integer", gt: 0, value: t4 }, { name: "duration", type: "integer", gte: 3, value: r4 }, { name: "resource", type: "resource", value: n3, msg: 'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"' }], s2)) {
              var u2 = { owner_address: Pp(o3), frozen_balance: parseInt(t4), frozen_duration: parseInt(r4) };
              "BANDWIDTH" !== n3 && (u2.resource = n3), ip.isNotNullOrUndefined(a3) && Pp(a3) !== Pp(o3) && (u2.receiver_address = Pp(a3));
              var c2 = Mp(i2);
              wp(this.tronWeb, "FreezeBalanceContract", u2, null === (e4 = i2) || void 0 === e4 ? void 0 : e4.permissionId, c2).then(function(e5) {
                return s2(null, e5);
              }).catch(function(e5) {
                return s2(e5);
              });
            }
          } }, { key: "unfreezeBalance", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "BANDWIDTH", r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0, o3 = arguments.length > 3 ? arguments[3] : void 0, a3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            if (ip.isFunction(o3) && (a3 = o3, o3 = {}), ip.isFunction(n3) ? (a3 = n3, n3 = void 0) : ip.isObject(n3) && (o3 = n3, n3 = void 0), ip.isFunction(r4) ? (a3 = r4, r4 = this.tronWeb.defaultAddress.hex) : ip.isObject(r4) && (o3 = r4, r4 = this.tronWeb.defaultAddress.hex), ip.isFunction(t4) && (a3 = t4, t4 = "BANDWIDTH"), !a3) return this.injectPromise(this.unfreezeBalance, t4, r4, n3, o3);
            if (!this.validator.notValid([{ name: "origin", type: "address", value: r4 }, { name: "receiver", type: "address", value: n3, optional: true }, { name: "resource", type: "resource", value: t4, msg: 'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"' }], a3)) {
              var i2 = { owner_address: Pp(r4) };
              "BANDWIDTH" !== t4 && (i2.resource = t4), ip.isNotNullOrUndefined(n3) && Pp(n3) !== Pp(r4) && (i2.receiver_address = Pp(n3));
              var s2 = Mp(o3);
              wp(this.tronWeb, "UnfreezeBalanceContract", i2, null === (e4 = o3) || void 0 === e4 ? void 0 : e4.permissionId, s2).then(function(e5) {
                return a3(null, e5);
              }).catch(function(e5) {
                return a3(e5);
              });
            }
          } }, { key: "freezeBalanceV2", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "BANDWIDTH", n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex, o3 = arguments.length > 3 ? arguments[3] : void 0, a3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            if (ip.isFunction(o3) && (a3 = o3, o3 = {}), ip.isFunction(n3) ? (a3 = n3, n3 = this.tronWeb.defaultAddress.hex) : ip.isObject(n3) && (o3 = n3, n3 = this.tronWeb.defaultAddress.hex), ip.isFunction(r4) ? (a3 = r4, r4 = "BANDWIDTH") : ip.isObject(r4) && (o3 = r4, r4 = "BANDWIDTH"), !a3) return this.injectPromise(this.freezeBalanceV2, t4, r4, n3, o3);
            if (!this.validator.notValid([{ name: "origin", type: "address", value: n3 }, { name: "amount", type: "integer", gt: 0, value: t4 }, { name: "resource", type: "resource", value: r4, msg: 'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"' }], a3)) {
              var i2 = { owner_address: Pp(n3), frozen_balance: parseInt(t4) };
              "BANDWIDTH" !== r4 && (i2.resource = r4);
              var s2 = Mp(o3);
              wp(this.tronWeb, "FreezeBalanceV2Contract", i2, null === (e4 = o3) || void 0 === e4 ? void 0 : e4.permissionId, s2).then(function(e5) {
                return a3(null, e5);
              }).catch(function(e5) {
                return a3(e5);
              });
            }
          } }, { key: "unfreezeBalanceV2", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "BANDWIDTH", n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex, o3 = arguments.length > 3 ? arguments[3] : void 0, a3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            if (ip.isFunction(o3) && (a3 = o3, o3 = {}), ip.isFunction(n3) ? (a3 = n3, n3 = this.tronWeb.defaultAddress.hex) : ip.isObject(n3) && (o3 = n3, n3 = this.tronWeb.defaultAddress.hex), ip.isFunction(r4) ? (a3 = r4, r4 = "BANDWIDTH") : ip.isObject(r4) && (o3 = r4, r4 = "BANDWIDTH"), !a3) return this.injectPromise(this.unfreezeBalanceV2, t4, r4, n3, o3);
            if (!this.validator.notValid([{ name: "origin", type: "address", value: n3 }, { name: "amount", type: "integer", gt: 0, value: t4 }, { name: "resource", type: "resource", value: r4, msg: 'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"' }], a3)) {
              var i2 = { owner_address: Pp(n3), unfreeze_balance: parseInt(t4) };
              "BANDWIDTH" !== r4 && (i2.resource = r4);
              var s2 = Mp(o3);
              wp(this.tronWeb, "UnfreezeBalanceV2Contract", i2, null === (e4 = o3) || void 0 === e4 ? void 0 : e4.permissionId, s2).then(function(e5) {
                return a3(null, e5);
              }).catch(function(e5) {
                return a3(e5);
              });
            }
          } }, { key: "cancelUnfreezeBalanceV2", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, r4 = arguments.length > 1 ? arguments[1] : void 0, n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (ip.isFunction(r4) && (n3 = r4, r4 = {}), ip.isFunction(t4) ? (n3 = t4, r4 = {}, t4 = this.tronWeb.defaultAddress.hex) : ip.isObject(t4) && (r4 = t4, t4 = this.tronWeb.defaultAddress.hex), !n3) return this.injectPromise(this.cancelUnfreezeBalanceV2, t4, r4);
            if (!this.validator.notValid([{ name: "origin", type: "address", value: t4 }], n3)) {
              var o3 = { owner_address: Pp(t4) }, a3 = Mp(r4);
              wp(this.tronWeb, "CancelAllUnfreezeV2Contract", o3, null === (e4 = r4) || void 0 === e4 ? void 0 : e4.permissionId, a3).then(function(e5) {
                return n3(null, e5);
              }).catch(function(e5) {
                return n3(e5);
              });
            }
          } }, { key: "delegateResource", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, r4 = arguments.length > 1 ? arguments[1] : void 0, n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "BANDWIDTH", o3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex, a3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], i2 = arguments.length > 5 ? arguments[5] : void 0, s2 = arguments.length > 6 ? arguments[6] : void 0, u2 = arguments.length > 7 && void 0 !== arguments[7] && arguments[7];
            if (ip.isFunction(s2) && (u2 = s2, s2 = {}), ip.isFunction(i2) ? (u2 = i2, i2 = void 0) : ip.isObject(i2) && (s2 = i2, i2 = void 0), ip.isFunction(a3) ? (u2 = a3, a3 = false) : ip.isObject(a3) && (s2 = a3, a3 = false), ip.isFunction(o3) ? (u2 = o3, o3 = this.tronWeb.defaultAddress.hex) : ip.isObject(o3) && (s2 = o3, o3 = this.tronWeb.defaultAddress.hex), ip.isFunction(n3) ? (u2 = n3, n3 = "BANDWIDTH") : ip.isObject(n3) && (s2 = n3, n3 = "BANDWIDTH"), !u2) return this.injectPromise(this.delegateResource, t4, r4, n3, o3, a3, i2, s2);
            if (!this.validator.notValid([{ name: "amount", type: "integer", gt: 0, value: t4 }, { name: "resource", type: "resource", value: n3, msg: 'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"' }, { name: "receiver", type: "address", value: r4 }, { name: "origin", type: "address", value: o3 }, { name: "lock", type: "boolean", value: a3 }, { name: "lock period", type: "integer", gte: 0, value: i2, optional: true }], u2)) {
              if (Pp(r4) === Pp(o3)) return u2("Receiver address must not be the same as owner address");
              var c2 = { owner_address: Pp(o3), receiver_address: Pp(r4), balance: parseInt(t4) };
              "BANDWIDTH" !== n3 && (c2.resource = n3), a3 && (c2.lock = a3, ip.isNotNullOrUndefined(i2) && (c2.lock_period = i2));
              var l2 = Mp(s2);
              wp(this.tronWeb, "DelegateResourceContract", c2, null === (e4 = s2) || void 0 === e4 ? void 0 : e4.permissionId, l2).then(function(e5) {
                return u2(null, e5);
              }).catch(function(e5) {
                return u2(e5);
              });
            }
          } }, { key: "undelegateResource", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, r4 = arguments.length > 1 ? arguments[1] : void 0, n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "BANDWIDTH", o3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex, a3 = arguments.length > 4 ? arguments[4] : void 0, i2 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
            if (ip.isFunction(a3) && (i2 = a3, a3 = {}), ip.isFunction(o3) ? (i2 = o3, o3 = this.tronWeb.defaultAddress.hex) : ip.isObject(o3) && (a3 = o3, o3 = this.tronWeb.defaultAddress.hex), ip.isFunction(n3) ? (i2 = n3, n3 = "BANDWIDTH") : ip.isObject(n3) && (a3 = n3, n3 = "BANDWIDTH"), !i2) return this.injectPromise(this.undelegateResource, t4, r4, n3, o3, a3);
            if (!this.validator.notValid([{ name: "origin", type: "address", value: o3 }, { name: "receiver", type: "address", value: r4 }, { name: "amount", type: "integer", gt: 0, value: t4 }, { name: "resource", type: "resource", value: n3, msg: 'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"' }], i2)) {
              if (Pp(r4) === Pp(o3)) return i2("Receiver address must not be the same as owner address");
              var s2 = { owner_address: Pp(o3), receiver_address: Pp(r4), balance: parseInt(t4) };
              "BANDWIDTH" !== n3 && (s2.resource = n3);
              var u2 = Mp(a3);
              wp(this.tronWeb, "UnDelegateResourceContract", s2, null === (e4 = a3) || void 0 === e4 ? void 0 : e4.permissionId, u2).then(function(e5) {
                return i2(null, e5);
              }).catch(function(e5) {
                return i2(e5);
              });
            }
          } }, { key: "withdrawExpireUnfreeze", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, r4 = arguments.length > 1 ? arguments[1] : void 0, n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (ip.isFunction(r4) && (n3 = r4, r4 = {}), ip.isFunction(t4) ? (n3 = t4, t4 = this.tronWeb.defaultAddress.hex) : ip.isObject(t4) && (r4 = t4, t4 = this.tronWeb.defaultAddress.hex), !n3) return this.injectPromise(this.withdrawExpireUnfreeze, t4, r4);
            if (!this.validator.notValid([{ name: "origin", type: "address", value: t4 }], n3)) {
              var o3 = { owner_address: Pp(t4) }, a3 = Mp(r4);
              wp(this.tronWeb, "WithdrawExpireUnfreezeContract", o3, null === (e4 = r4) || void 0 === e4 ? void 0 : e4.permissionId, a3).then(function(e5) {
                return n3(null, e5);
              }).catch(function(e5) {
                return n3(e5);
              });
            }
          } }, { key: "withdrawBlockRewards", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, r4 = arguments.length > 1 ? arguments[1] : void 0, n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (ip.isFunction(r4) && (n3 = r4, r4 = {}), ip.isFunction(t4) ? (n3 = t4, t4 = this.tronWeb.defaultAddress.hex) : ip.isObject(t4) && (r4 = t4, t4 = this.tronWeb.defaultAddress.hex), !n3) return this.injectPromise(this.withdrawBlockRewards, t4, r4);
            if (!this.validator.notValid([{ name: "origin", type: "address", value: t4 }], n3)) {
              var o3 = { owner_address: Pp(t4) }, a3 = Mp(r4);
              wp(this.tronWeb, "WithdrawBalanceContract", o3, null === (e4 = r4) || void 0 === e4 ? void 0 : e4.permissionId, a3).then(function(e5) {
                return n3(null, e5);
              }).catch(function(e5) {
                return n3(e5);
              });
            }
          } }, { key: "applyForSR", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 ? arguments[2] : void 0, o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(n3) && (o3 = n3, n3 = {}), ip.isObject(r4) && ip.isValidURL(t4) && (n3 = r4, r4 = t4, t4 = this.tronWeb.defaultAddress.hex), !o3) return this.injectPromise(this.applyForSR, t4, r4, n3);
            if (!this.validator.notValid([{ name: "origin", type: "address", value: t4 }, { name: "url", type: "url", value: r4, msg: "Invalid url provided" }, { name: "url", type: "string", value: r4, lte: 256, msg: "Invalid url provided" }], o3)) {
              var a3 = { owner_address: Pp(t4), url: Wp(r4) }, i2 = Mp(n3);
              wp(this.tronWeb, "WitnessCreateContract", a3, null === (e4 = n3) || void 0 === e4 ? void 0 : e4.permissionId, i2).then(function(e5) {
                return o3(null, e5);
              }).catch(function(e5) {
                return o3(e5);
              });
            }
          } }, { key: "vote", value: function() {
            var e4, t4 = this, r4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, o3 = arguments.length > 2 ? arguments[2] : void 0, a3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(o3) && (a3 = o3, o3 = {}), ip.isFunction(n3) ? (a3 = n3, n3 = this.tronWeb.defaultAddress.hex) : ip.isObject(n3) && (o3 = n3, n3 = this.tronWeb.defaultAddress.hex), !a3) return this.injectPromise(this.vote, r4, n3, o3);
            if (!this.validator.notValid([{ name: "voter", type: "address", value: n3 }, { name: "votes", type: "notEmptyObject", value: r4 }], a3)) {
              var i2 = false;
              if (r4 = Object.entries(r4).map(function(e5) {
                var r5 = wo()(e5, 2), n4 = r5[0], o4 = r5[1];
                if (!i2) return t4.validator.notValid([{ name: "SR", type: "address", value: n4 }, { name: "vote count", type: "integer", gt: 0, value: o4, msg: "Invalid vote count provided for SR: " + n4 }], a3) ? i2 = true : { vote_address: Pp(n4), vote_count: parseInt(o4) };
              }), !i2) {
                var s2 = { owner_address: Pp(n3), votes: r4 }, u2 = Mp(o3);
                wp(this.tronWeb, "VoteWitnessContract", s2, null === (e4 = o3) || void 0 === e4 ? void 0 : e4.permissionId, u2).then(function(e5) {
                  return a3(null, e5);
                }).catch(function(e5) {
                  return a3(e5);
                });
              }
            }
          } }, { key: "createSmartContract", value: function() {
            var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (ip.isFunction(r4) && (n3 = r4, r4 = this.tronWeb.defaultAddress.hex), !n3) return this.injectPromise(this.createSmartContract, t4, r4);
            var o3 = t4.feeLimit || this.tronWeb.feeLimit, a3 = t4.userFeePercentage;
            "number" == typeof a3 || a3 || (a3 = 100);
            var i2 = t4.originEnergyLimit || 1e7, s2 = t4.callValue || 0, u2 = t4.tokenValue, c2 = t4.tokenId || t4.token_id, l2 = t4.abi, d2 = void 0 !== l2 && l2, f2 = t4.bytecode, h2 = void 0 !== f2 && f2, y2 = t4.parameters, b2 = void 0 === y2 ? [] : y2, T2 = t4.name, v2 = void 0 === T2 ? "" : T2;
            if (d2 && ip.isString(d2)) try {
              d2 = JSON.parse(d2);
            } catch (e5) {
              return n3("Invalid options.abi provided");
            }
            if (d2.entrys && (d2 = d2.entrys), !ip.isArray(d2)) return n3("Invalid options.abi provided");
            var m2 = d2.some(function(e5) {
              return "constructor" === e5.type && "payable" === e5.stateMutability.toLowerCase();
            });
            if (!this.validator.notValid([{ name: "bytecode", type: "hex", value: h2 }, { name: "feeLimit", type: "integer", value: o3, gt: 0 }, { name: "callValue", type: "integer", value: s2, gte: 0 }, { name: "userFeePercentage", type: "integer", value: a3, gte: 0, lte: 100 }, { name: "originEnergyLimit", type: "integer", value: i2, gte: 0, lte: 1e7 }, { name: "parameters", type: "array", value: b2 }, { name: "issuer", type: "address", value: r4 }, { name: "tokenValue", type: "integer", value: u2, gte: 0, optional: true }, { name: "tokenId", type: "integer", value: c2, gte: 0, optional: true }], n3)) {
              if (!m2 && (s2 > 0 || u2 > 0)) return n3("When contract is not payable, options.callValue and options.tokenValue must be 0");
              if (t4.rawParameter && ip.isString(t4.rawParameter)) b2 = t4.rawParameter.replace(/^(0x)/, "");
              else if (t4.funcABIV2) b2 = Gl(t4.funcABIV2, t4.parametersV2).replace(/^(0x)/, "");
              else {
                var A2 = d2.find(function(e5) {
                  return "constructor" === e5.type;
                });
                if (void 0 !== A2 && A2) {
                  var P2 = new Nl.AbiCoder(), W2 = [], B2 = [];
                  if (A2 = A2.inputs, b2.length != A2.length) return n3("constructor needs ".concat(A2.length, " but ").concat(b2.length, " provided"));
                  for (var C2 = function() {
                    var e5 = A2[F2].type, t5 = b2[F2];
                    if (!e5 || !ip.isString(e5) || !e5.length) return { v: n3("Invalid parameter type provided: " + e5) };
                    e5.startsWith("address") ? t5 = function e6(t6) {
                      return ip.isArray(t6) ? t6.map(function(t7) {
                        return e6(t7);
                      }) : Pp(t6).replace(V, "0x");
                    }(t5) : /trcToken/.test(e5) && (e5 = e5.replace(/trcToken/, "uint256")), W2.push(e5), B2.push(t5);
                  }, F2 = 0; F2 < b2.length; F2++) {
                    var w2 = C2();
                    if ("object" === g()(w2)) return w2.v;
                  }
                  try {
                    b2 = P2.encode(W2, B2).replace(/^(0x)/, "");
                  } catch (e5) {
                    return n3(e5);
                  }
                } else b2 = "";
              }
              var I2 = { owner_address: Pp(r4), fee_limit: parseInt(o3), call_value: parseInt(s2), consume_user_resource_percent: a3, origin_energy_limit: i2, abi: JSON.stringify(d2), bytecode: h2, parameter: b2, name: v2 };
              ip.isNotNullOrUndefined(u2) && (I2.call_token_value = parseInt(u2)), ip.isNotNullOrUndefined(c2) && (I2.token_id = parseInt(c2)), new Promise(function(e5) {
                var t5, r5 = {};
                r5.owner_address = I2.owner_address, ip.isNotNullOrUndefined(I2.call_token_value) && (r5.call_token_value = I2.call_token_value), ip.isNotNullOrUndefined(I2.token_id) && (r5.token_id = I2.token_id);
                var n4 = r5.new_contract = {};
                I2.abi ? n4.abi = { entrys: JSON.parse(I2.abi) } : n4.abi = {}, I2.call_value && (n4.call_value = I2.call_value), n4.consume_user_resource_percent = I2.consume_user_resource_percent, n4.origin_energy_limit = I2.origin_energy_limit, n4.origin_address = null !== (t5 = I2.origin_address) && void 0 !== t5 ? t5 : I2.owner_address, I2.bytecode + I2.parameter && (n4.bytecode = (I2.bytecode + I2.parameter).replace(/^0x/, "")), ip.isNotNullOrUndefined(I2.name) && (n4.name = I2.name), e5(r5);
              }).then(function() {
                var r5 = p()(E().mark(function r6(n4) {
                  var o4, a4;
                  return E().wrap(function(r7) {
                    for (; ; ) switch (r7.prev = r7.next) {
                      case 0:
                        return o4 = Mp(t4), r7.next = 3, wp(e4.tronWeb, "CreateSmartContract", n4, null == t4 ? void 0 : t4.permissionId, Ap(Ap({}, o4), {}, { fee_limit: I2.fee_limit }));
                      case 3:
                        return (a4 = r7.sent).contract_address = (i3 = I2.owner_address, s3 = a4.txID, "41" + kt(Buffer.from(s3 + i3, "hex")).toString().substring(2).slice(24)), r7.abrupt("return", a4);
                      case 6:
                      case "end":
                        return r7.stop();
                    }
                    var i3, s3;
                  }, r6);
                }));
                return function(e5) {
                  return r5.apply(this, arguments);
                };
              }()).then(function(e5) {
                return n3(null, e5);
              }).catch(function(e5) {
                return n3(e5);
              });
            }
          } }, { key: "triggerSmartContract", value: function() {
            for (var e4, t4 = arguments.length, r4 = new Array(t4), n3 = 0; n3 < t4; n3++) r4[n3] = arguments[n3];
            return "object" !== g()(r4[2]) && (r4[2] = { feeLimit: r4[2], callValue: r4[3] }, r4.splice(3, 1)), null !== (e4 = r4[2]) && void 0 !== e4 && e4.txLocal ? this._triggerSmartContractLocal.apply(this, r4) : this._triggerSmartContract.apply(this, r4);
          } }, { key: "triggerConstantContract", value: function() {
            for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
            return t4[2]._isConstant = true, this._triggerSmartContract.apply(this, t4);
          } }, { key: "triggerConfirmedConstantContract", value: function() {
            for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
            return t4[2]._isConstant = true, t4[2].confirmed = true, this._triggerSmartContract.apply(this, t4);
          } }, { key: "estimateEnergy", value: function() {
            for (var e4 = arguments.length, t4 = new Array(e4), r4 = 0; r4 < e4; r4++) t4[r4] = arguments[r4];
            return t4[2].estimateEnergy = true, this._triggerSmartContract.apply(this, t4);
          } }, { key: "deployConstantContract", value: (a2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3, i2, s2, u2, c2, l2 = this, d2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return r4 = (t4 = d2.length > 0 && void 0 !== d2[0] ? d2[0] : {}).input, n3 = t4.ownerAddress, o3 = t4.tokenId, a3 = t4.tokenValue, i2 = t4.callValue, s2 = void 0 === i2 ? 0 : i2, this.validator.notValid([{ name: "input", type: "not-empty-string", value: r4 }, { name: "callValue", type: "integer", value: s2, gte: 0 }, { name: "owner", type: "address", value: n3 }, { name: "tokenValue", type: "integer", value: a3, gte: 0, optional: true }, { name: "tokenId", type: "integer", value: o3, gte: 0, optional: true }], function(e6) {
                    throw new Error(e6);
                  }), u2 = { data: r4, owner_address: Pp(n3), call_value: s2 }, o3 && (u2.token_id = o3), a3 && (u2.call_token_value = a3), c2 = "wallet".concat(t4.confirmed ? "solidity" : "", "/").concat(t4.estimateEnergy ? "estimateenergy" : "triggerconstantcontract"), e5.abrupt("return", this.tronWeb[t4.confirmed ? "solidityNode" : "fullNode"].request(c2, u2, "post").then(function(e6) {
                    if (e6.Error) throw new Error(e6.Error);
                    if (e6.result && e6.result.message) throw new Error(l2.tronWeb.toUtf8(e6.result.message));
                    return e6;
                  }).then(function(e6) {
                    return e6.energy_used ? { result: e6.result, energy_required: e6.energy_used } : e6;
                  }));
                case 8:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return a2.apply(this, arguments);
          }) }, { key: "_getTriggerSmartContractArgs", value: function(e4, t4, r4, n3, o3, a3, i2, s2, u2) {
            var c2 = { contract_address: Pp(e4), owner_address: Pp(o3) };
            if (t4 && ip.isString(t4)) {
              if (t4 = t4.replace("/s*/g", ""), n3.length) {
                for (var l2 = new Nl.AbiCoder(), d2 = [], p2 = [], f2 = function() {
                  var e5 = n3[g2], t5 = e5.type, r5 = e5.value;
                  if (!t5 || !ip.isString(t5) || !t5.length) throw new Error("Invalid parameter type provided: " + t5);
                  t5.startsWith("address") && (r5 = function e6(t6) {
                    return ip.isArray(t6) ? t6.map(function(t7) {
                      return e6(t7);
                    }) : Pp(t6).replace(V, "0x");
                  }(r5)), d2.push(t5), p2.push(r5);
                }, g2 = 0; g2 < n3.length; g2++) f2();
                d2 = d2.map(function(e5) {
                  return /trcToken/.test(e5) && (e5 = e5.replace(/trcToken/, "uint256")), e5;
                }), n3 = l2.encode(d2, p2).replace(/^(0x)/, "");
              } else n3 = "";
              r4.funcABIV2 && (n3 = Gl(r4.funcABIV2, r4.parametersV2).replace(/^(0x)/, "")), r4.shieldedParameter && ip.isString(r4.shieldedParameter) && (n3 = r4.shieldedParameter.replace(/^(0x)/, "")), r4.rawParameter && ip.isString(r4.rawParameter) && (n3 = r4.rawParameter.replace(/^(0x)/, "")), c2.function_selector = t4, c2.parameter = n3;
            } else r4.input && (c2.data = r4.input);
            return c2.call_value = parseInt(s2), ip.isNotNullOrUndefined(a3) && (c2.call_token_value = parseInt(a3)), ip.isNotNullOrUndefined(i2) && (c2.token_id = parseInt(i2)), r4._isConstant || r4.estimateEnergy || (c2.fee_limit = parseInt(u2)), r4.permissionId && (c2.Permission_id = r4.permissionId), c2;
          } }, { key: "_triggerSmartContractLocal", value: function(e4, t4) {
            var r4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [], o3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex, a3 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
            if (ip.isFunction(o3) && (a3 = o3, o3 = this.tronWeb.defaultAddress.hex), ip.isFunction(n3) && (a3 = n3, n3 = []), !a3) return this.injectPromise(this._triggerSmartContractLocal, e4, t4, r4, n3, o3);
            var i2 = Object.assign({ callValue: 0, feeLimit: this.tronWeb.feeLimit }, r4), s2 = i2.tokenValue, u2 = i2.tokenId, c2 = i2.callValue, l2 = i2.feeLimit;
            if (!this.validator.notValid([{ name: "feeLimit", type: "integer", value: l2, gt: 0 }, { name: "callValue", type: "integer", value: c2, gte: 0 }, { name: "parameters", type: "array", value: n3 }, { name: "contract", type: "address", value: e4 }, { name: "issuer", type: "address", value: o3, optional: true }, { name: "tokenValue", type: "integer", value: s2, gte: 0, optional: true }, { name: "tokenId", type: "integer", value: u2, gte: 0, optional: true }], a3)) {
              var d2;
              try {
                d2 = this._getTriggerSmartContractArgs(e4, t4, r4, n3, o3, s2, u2, c2, l2);
              } catch (e5) {
                return a3(e5);
              }
              d2.function_selector && (d2.data = kt(Buffer.from(d2.function_selector, "utf-8")).toString().substring(2, 10) + d2.parameter);
              var p2 = { data: d2.data, owner_address: d2.owner_address, contract_address: d2.contract_address };
              d2.call_value && (p2.call_value = d2.call_value), d2.call_token_value && (p2.call_token_value = d2.call_token_value), d2.token_id && (p2.token_id = d2.token_id);
              var f2 = Mp(r4);
              wp(this.tronWeb, "TriggerSmartContract", p2, r4.permissionId, Ap(Ap({}, f2), {}, { fee_limit: d2.fee_limit })).then(function(e5) {
                a3(null, { result: { result: true }, transaction: e5 });
              }).catch(function(e5) {
                return a3(e5);
              });
            }
          } }, { key: "_triggerSmartContract", value: function(e4, t4) {
            var r4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [], o3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex, a3 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
            if (ip.isFunction(o3) && (a3 = o3, o3 = this.tronWeb.defaultAddress.hex), ip.isFunction(n3) && (a3 = n3, n3 = []), !a3) return this.injectPromise(this._triggerSmartContract, e4, t4, r4, n3, o3);
            var i2 = Object.assign({ callValue: 0, feeLimit: this.tronWeb.feeLimit }, r4), s2 = i2.tokenValue, u2 = i2.tokenId, c2 = i2.callValue, l2 = i2.feeLimit;
            if (!this.validator.notValid([{ name: "feeLimit", type: "integer", value: l2, gt: 0 }, { name: "callValue", type: "integer", value: c2, gte: 0 }, { name: "parameters", type: "array", value: n3 }, { name: "contract", type: "address", value: e4 }, { name: "issuer", type: "address", value: o3, optional: true }, { name: "tokenValue", type: "integer", value: s2, gte: 0, optional: true }, { name: "tokenId", type: "integer", value: u2, gte: 0, optional: true }], a3)) {
              var d2;
              try {
                d2 = this._getTriggerSmartContractArgs(e4, t4, r4, n3, o3, s2, u2, c2, l2);
              } catch (e5) {
                return a3(e5);
              }
              var p2 = "triggersmartcontract";
              r4._isConstant ? p2 = "triggerconstantcontract" : r4.estimateEnergy && (p2 = "estimateenergy"), p2 = "wallet".concat(r4.confirmed ? "solidity" : "", "/").concat(p2), this.tronWeb[r4.confirmed ? "solidityNode" : "fullNode"].request(p2, d2, "post").then(function(e5) {
                return function(e6, t5, r5, n4) {
                  return e6.Error ? n4(e6.Error) : e6.result && e6.result.message ? n4(yp.tronWeb.toUtf8(e6.result.message)) : r5._isConstant || r5.estimateEnergy || Qd(e6.transaction, t5, r5) ? n4(null, e6) : n4("Invalid transaction");
                }(e5, d2, r4, a3);
              }).catch(function(e5) {
                return a3(e5);
              });
            }
          } }, { key: "clearABI", value: function(e4) {
            var t4, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, n3 = arguments.length > 2 ? arguments[2] : void 0, o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(n3) && (o3 = n3, n3 = {}), ip.isFunction(r4) ? (o3 = r4, r4 = this.tronWeb.defaultAddress.hex) : ip.isObject(r4) && (n3 = r4, r4 = this.tronWeb.defaultAddress.hex), !o3) return this.injectPromise(this.clearABI, e4, r4, n3);
            if (!this.tronWeb.isAddress(e4)) return o3("Invalid contract address provided");
            if (!this.tronWeb.isAddress(r4)) return o3("Invalid owner address provided");
            var a3 = { contract_address: Pp(e4), owner_address: Pp(r4) };
            this.tronWeb.trx.cache.contracts[e4] && delete this.tronWeb.trx.cache.contracts[e4];
            var i2 = Mp(n3);
            wp(this.tronWeb, "ClearABIContract", a3, null === (t4 = n3) || void 0 === t4 ? void 0 : t4.permissionId, i2).then(function(e5) {
              return o3(null, e5);
            }).catch(function(e5) {
              return o3(e5);
            });
          } }, { key: "updateBrokerage", value: function(e4) {
            var t4, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, n3 = arguments.length > 2 ? arguments[2] : void 0, o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(n3) && (o3 = n3, n3 = {}), ip.isFunction(r4) ? (o3 = r4, r4 = this.tronWeb.defaultAddress.hex) : ip.isObject(r4) && (n3 = r4, r4 = this.tronWeb.defaultAddress.hex), !o3) return this.injectPromise(this.updateBrokerage, e4, r4, n3);
            if (!ip.isNotNullOrUndefined(e4)) return o3("Invalid brokerage provided");
            if (!ip.isInteger(e4) || e4 < 0 || e4 > 100) return o3("Brokerage must be an integer between 0 and 100");
            if (!this.tronWeb.isAddress(r4)) return o3("Invalid owner address provided");
            var a3 = { brokerage: parseInt(e4), owner_address: Pp(r4) }, i2 = Mp(n3);
            wp(this.tronWeb, "UpdateBrokerageContract", a3, null === (t4 = n3) || void 0 === t4 ? void 0 : t4.permissionId, i2).then(function(e5) {
              return o3(null, e5);
            }).catch(function(e5) {
              return o3(e5);
            });
          } }, { key: "createToken", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, r4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (ip.isFunction(t4) && (r4 = t4, t4 = this.tronWeb.defaultAddress.hex), !r4) return this.injectPromise(this.createToken, e4, t4);
            var n3 = e4.name, o3 = void 0 !== n3 && n3, a3 = e4.abbreviation, i2 = void 0 !== a3 && a3, s2 = e4.description, u2 = void 0 === s2 ? "" : s2, c2 = e4.url, l2 = void 0 !== c2 && c2, d2 = e4.totalSupply, p2 = void 0 === d2 ? 0 : d2, f2 = e4.trxRatio, g2 = void 0 === f2 ? 1 : f2, h2 = e4.tokenRatio, y2 = void 0 === h2 ? 1 : h2, b2 = e4.saleStart, T2 = void 0 === b2 ? Date.now() : b2, v2 = e4.saleEnd, m2 = void 0 !== v2 && v2, A2 = e4.freeBandwidth, P2 = void 0 === A2 ? 0 : A2, W2 = e4.freeBandwidthLimit, B2 = void 0 === W2 ? 0 : W2, C2 = e4.frozenAmount, F2 = void 0 === C2 ? 0 : C2, w2 = e4.frozenDuration, I2 = void 0 === w2 ? 0 : w2, M2 = e4.voteScore, E2 = e4.precision;
            if (!this.validator.notValid([{ name: "Supply amount", type: "positive-integer", value: p2 }, { name: "TRX ratio", type: "positive-integer", value: g2 }, { name: "Token ratio", type: "positive-integer", value: y2 }, { name: "token abbreviation", type: "string", value: i2, lte: 32, gt: 0 }, { name: "token name", type: "not-empty-string", value: o3 }, { name: "token description", type: "string", value: u2, lte: 200 }, { name: "token url", type: "url", value: l2 }, { name: "token url", type: "string", value: l2, lte: 256 }, { name: "issuer", type: "address", value: t4 }, { name: "sale start timestamp", type: "integer", value: T2, gte: Date.now() }, { name: "sale end timestamp", type: "integer", value: m2, gt: T2 }, { name: "Frozen supply", type: "integer", value: F2, gte: 0 }, { name: "Frozen duration", type: "integer", value: I2, gte: 0 }], r4)) {
              if (ip.isNotNullOrUndefined(M2) && (!ip.isInteger(M2) || M2 <= 0)) return r4("voteScore must be a positive integer greater than 0");
              if (ip.isNotNullOrUndefined(E2) && (!ip.isInteger(E2) || E2 < 0 || E2 > 6)) return r4("precision must be a positive integer >= 0 and <= 6");
              var R2 = { owner_address: Pp(t4), name: Wp(o3), abbr: Wp(i2), description: Wp(u2), url: Wp(l2), total_supply: parseInt(p2), trx_num: parseInt(g2), num: parseInt(y2), start_time: parseInt(T2), end_time: parseInt(m2), frozen_supply: [{ frozen_amount: parseInt(F2), frozen_days: parseInt(I2) }] };
              ["name", "abbr", "description", "url"].forEach(function(e5) {
                R2[e5] || delete R2[e5];
              }), parseInt(F2) > 0 || delete R2.frozen_supply, P2 && !isNaN(parseInt(P2)) && parseInt(P2) >= 0 && (R2.free_asset_net_limit = parseInt(P2)), B2 && !isNaN(parseInt(B2)) && parseInt(B2) >= 0 && (R2.public_free_asset_net_limit = parseInt(B2)), E2 && !isNaN(parseInt(E2)) && (R2.precision = parseInt(E2)), M2 && !isNaN(parseInt(M2)) && (R2.vote_score = parseInt(M2));
              var O2 = Mp(e4);
              wp(this.tronWeb, "AssetIssueContract", R2, null == e4 ? void 0 : e4.permissionId, O2).then(function(e5) {
                return r4(null, e5);
              }).catch(function(e5) {
                return r4(e5);
              });
            }
          } }, { key: "createAccount", value: function(e4) {
            var t4, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, n3 = arguments.length > 2 ? arguments[2] : void 0, o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(n3) && (o3 = n3, n3 = {}), ip.isFunction(r4) ? (o3 = r4, r4 = this.tronWeb.defaultAddress.hex) : ip.isObject(r4) && (n3 = r4, r4 = this.tronWeb.defaultAddress.hex), !o3) return this.injectPromise(this.createAccount, e4, r4, n3);
            if (!this.validator.notValid([{ name: "account", type: "address", value: e4 }, { name: "origin", type: "address", value: r4 }], o3)) {
              var a3 = { owner_address: Pp(r4), account_address: Pp(e4) }, i2 = Mp(n3);
              wp(this.tronWeb, "AccountCreateContract", a3, null === (t4 = n3) || void 0 === t4 ? void 0 : t4.permissionId, i2).then(function(e5) {
                return o3(null, e5);
              }).catch(function(e5) {
                return o3(e5);
              });
            }
          } }, { key: "updateAccount", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, n3 = arguments.length > 2 ? arguments[2] : void 0, o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(n3) && (o3 = n3, n3 = {}), ip.isFunction(r4) ? (o3 = r4, r4 = this.tronWeb.defaultAddress.hex) : ip.isObject(r4) && (n3 = r4, r4 = this.tronWeb.defaultAddress.hex), !o3) return this.injectPromise(this.updateAccount, t4, r4, n3);
            if (!this.validator.notValid([{ name: "Name", type: "string", lte: 200, gt: 0, value: t4, msg: "Invalid accountName" }, { name: "origin", type: "address", value: r4 }], o3)) {
              var a3 = { account_name: Wp(t4), owner_address: Pp(r4) }, i2 = Mp(n3);
              wp(this.tronWeb, "AccountUpdateContract", a3, null === (e4 = n3) || void 0 === e4 ? void 0 : e4.permissionId, i2).then(function(e5) {
                return o3(null, e5);
              }).catch(function(e5) {
                return o3(e5);
              });
            }
          } }, { key: "setAccountId", value: function(e4) {
            var t4, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, n3 = arguments.length > 2 ? arguments[2] : void 0, o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(n3) && (o3 = n3, n3 = {}), ip.isFunction(r4) ? (o3 = r4, r4 = this.tronWeb.defaultAddress.hex) : ip.isObject(r4) && (n3 = r4, r4 = this.tronWeb.defaultAddress.hex), !o3) return this.injectPromise(this.setAccountId, e4, r4, n3);
            if (e4 && ip.isString(e4) && e4.startsWith("0x") && (e4 = e4.slice(2)), !this.validator.notValid([{ name: "accountId", type: "hex", value: e4 }, { name: "accountId", type: "string", lte: 32, gte: 8, value: e4 }, { name: "origin", type: "address", value: r4 }], o3)) {
              var a3 = { account_id: e4, owner_address: Pp(r4) }, i2 = Mp(n3);
              wp(this.tronWeb, "SetAccountIdContract", a3, null === (t4 = n3) || void 0 === t4 ? void 0 : t4.permissionId, i2).then(function(e5) {
                return o3(null, e5);
              }).catch(function(e5) {
                return o3(e5);
              });
            }
          } }, { key: "updateToken", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (ip.isFunction(r4) ? (n3 = r4, r4 = this.tronWeb.defaultAddress.hex) : ip.isObject(r4) && (t4 = r4, r4 = this.tronWeb.defaultAddress.hex), !n3) return this.injectPromise(this.updateToken, t4, r4);
            var o3 = t4, a3 = o3.description, i2 = void 0 === a3 ? "" : a3, s2 = o3.url, u2 = void 0 !== s2 && s2, c2 = o3.freeBandwidth, l2 = void 0 === c2 ? 0 : c2, d2 = o3.freeBandwidthLimit, p2 = void 0 === d2 ? 0 : d2;
            if (!this.validator.notValid([{ name: "token description", type: "string", value: i2, lte: 200 }, { name: "token url", type: "url", value: u2 }, { name: "token url", type: "string", value: u2, lte: 256 }, { name: "issuer", type: "address", value: r4 }], n3)) {
              var f2 = { owner_address: Pp(r4), description: Wp(i2), url: Wp(u2) };
              l2 && !isNaN(parseInt(l2)) && parseInt(l2) >= 0 && (f2.new_limit = parseInt(l2)), p2 && !isNaN(parseInt(p2)) && parseInt(p2) >= 0 && (f2.new_public_limit = parseInt(p2));
              var g2 = Mp(t4);
              wp(this.tronWeb, "UpdateAssetContract", f2, null === (e4 = t4) || void 0 === e4 ? void 0 : e4.permissionId, g2).then(function(e5) {
                return n3(null, e5);
              }).catch(function(e5) {
                return n3(e5);
              });
            }
          } }, { key: "sendAsset", value: function() {
            return this.sendToken.apply(this, arguments);
          } }, { key: "purchaseAsset", value: function() {
            return this.purchaseToken.apply(this, arguments);
          } }, { key: "createAsset", value: function() {
            return this.createToken.apply(this, arguments);
          } }, { key: "updateAsset", value: function() {
            return this.updateToken.apply(this, arguments);
          } }, { key: "createProposal", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, n3 = arguments.length > 2 ? arguments[2] : void 0, o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(n3) && (o3 = n3, n3 = {}), ip.isFunction(r4) ? (o3 = r4, r4 = this.tronWeb.defaultAddress.hex) : ip.isObject(r4) && (n3 = r4, r4 = this.tronWeb.defaultAddress.hex), !o3) return this.injectPromise(this.createProposal, t4, r4, n3);
            if (!this.validator.notValid([{ name: "issuer", type: "address", value: r4 }], o3)) {
              var a3 = "Invalid proposal parameters provided";
              if (!t4) return o3(a3);
              ip.isArray(t4) || (t4 = [t4]);
              var i2, s2 = Tp(t4);
              try {
                for (s2.s(); !(i2 = s2.n()).done; ) {
                  var u2 = i2.value;
                  if (!ip.isObject(u2)) return o3(a3);
                }
              } catch (e5) {
                s2.e(e5);
              } finally {
                s2.f();
              }
              var c2 = { owner_address: Pp(r4), parameters: t4 }, l2 = Mp(n3);
              wp(this.tronWeb, "ProposalCreateContract", c2, null === (e4 = n3) || void 0 === e4 ? void 0 : e4.permissionId, l2).then(function(e5) {
                return o3(null, e5);
              }).catch(function(e5) {
                return o3(e5);
              });
            }
          } }, { key: "deleteProposal", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, n3 = arguments.length > 2 ? arguments[2] : void 0, o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(n3) && (o3 = n3, n3 = {}), ip.isFunction(r4) ? (o3 = r4, r4 = this.tronWeb.defaultAddress.hex) : ip.isObject(r4) && (n3 = r4, r4 = this.tronWeb.defaultAddress.hex), !o3) return this.injectPromise(this.deleteProposal, t4, r4, n3);
            if (!this.validator.notValid([{ name: "issuer", type: "address", value: r4 }, { name: "proposalID", type: "integer", value: t4, gte: 0 }], o3)) {
              var a3 = { owner_address: Pp(r4), proposal_id: parseInt(t4) }, i2 = Mp(n3);
              wp(this.tronWeb, "ProposalDeleteContract", a3, null === (e4 = n3) || void 0 === e4 ? void 0 : e4.permissionId, i2).then(function(e5) {
                return o3(null, e5);
              }).catch(function(e5) {
                return o3(e5);
              });
            }
          } }, { key: "voteProposal", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex, o3 = arguments.length > 3 ? arguments[3] : void 0, a3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            if (ip.isFunction(o3) && (a3 = o3, o3 = {}), ip.isFunction(n3) ? (a3 = n3, n3 = this.tronWeb.defaultAddress.hex) : ip.isObject(n3) && (o3 = n3, n3 = this.tronWeb.defaultAddress.hex), !a3) return this.injectPromise(this.voteProposal, t4, r4, n3, o3);
            if (!this.validator.notValid([{ name: "voter", type: "address", value: n3 }, { name: "proposalID", type: "integer", value: t4, gte: 0 }, { name: "has approval", type: "boolean", value: r4 }], a3)) {
              var i2 = { owner_address: Pp(n3), proposal_id: parseInt(t4), is_add_approval: r4 }, s2 = Mp(o3);
              wp(this.tronWeb, "ProposalApproveContract", i2, null === (e4 = o3) || void 0 === e4 ? void 0 : e4.permissionId, s2).then(function(e5) {
                return a3(null, e5);
              }).catch(function(e5) {
                return a3(e5);
              });
            }
          } }, { key: "createTRXExchange", value: function(e4, t4, r4) {
            var n3, o3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex, a3 = arguments.length > 4 ? arguments[4] : void 0, i2 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
            if (ip.isFunction(a3) && (i2 = a3, a3 = {}), ip.isFunction(o3) ? (i2 = o3, o3 = this.tronWeb.defaultAddress.hex) : ip.isObject(o3) && (a3 = o3, o3 = this.tronWeb.defaultAddress.hex), !i2) return this.injectPromise(this.createTRXExchange, e4, t4, r4, o3, a3);
            if (!this.validator.notValid([{ name: "owner", type: "address", value: o3 }, { name: "token name", type: "not-empty-string", value: e4 }, { name: "token balance", type: "positive-integer", value: t4 }, { name: "trx balance", type: "positive-integer", value: r4 }], i2)) {
              var s2 = { owner_address: Pp(o3), first_token_id: Wp(e4), first_token_balance: t4, second_token_id: "5f", second_token_balance: r4 }, u2 = Mp(a3);
              wp(this.tronWeb, "ExchangeCreateContract", s2, null === (n3 = a3) || void 0 === n3 ? void 0 : n3.permissionId, u2).then(function(e5) {
                return i2(null, e5);
              }).catch(function(e5) {
                return i2(e5);
              });
            }
          } }, { key: "createTokenExchange", value: function(e4, t4, r4, n3) {
            var o3, a3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex, i2 = arguments.length > 5 ? arguments[5] : void 0, s2 = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
            if (ip.isFunction(i2) && (s2 = i2, i2 = {}), ip.isFunction(a3) ? (s2 = a3, a3 = this.tronWeb.defaultAddress.hex) : ip.isObject(a3) && (i2 = a3, a3 = this.tronWeb.defaultAddress.hex), !s2) return this.injectPromise(this.createTokenExchange, e4, t4, r4, n3, a3, i2);
            if (!this.validator.notValid([{ name: "owner", type: "address", value: a3 }, { name: "first token name", type: "not-empty-string", value: e4 }, { name: "second token name", type: "not-empty-string", value: r4 }, { name: "first token balance", type: "positive-integer", value: t4 }, { name: "second token balance", type: "positive-integer", value: n3 }], s2)) {
              var u2 = { owner_address: Pp(a3), first_token_id: Wp(e4), first_token_balance: t4, second_token_id: Wp(r4), second_token_balance: n3 }, c2 = Mp(i2);
              wp(this.tronWeb, "ExchangeCreateContract", u2, null === (o3 = i2) || void 0 === o3 ? void 0 : o3.permissionId, c2).then(function(e5) {
                return s2(null, e5);
              }).catch(function(e5) {
                return s2(e5);
              });
            }
          } }, { key: "injectExchangeTokens", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, o3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex, a3 = arguments.length > 4 ? arguments[4] : void 0, i2 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
            if (ip.isFunction(a3) && (i2 = a3, a3 = {}), ip.isFunction(o3) ? (i2 = o3, o3 = this.tronWeb.defaultAddress.hex) : ip.isObject(o3) && (a3 = o3, o3 = this.tronWeb.defaultAddress.hex), !i2) return this.injectPromise(this.injectExchangeTokens, t4, r4, n3, o3, a3);
            if (!this.validator.notValid([{ name: "owner", type: "address", value: o3 }, { name: "token name", type: "not-empty-string", value: r4 }, { name: "token amount", type: "integer", value: n3, gte: 1 }, { name: "exchangeID", type: "integer", value: t4, gte: 0 }], i2)) {
              var s2 = { owner_address: Pp(o3), exchange_id: parseInt(t4), token_id: Wp(r4), quant: parseInt(n3) }, u2 = Mp(a3);
              wp(this.tronWeb, "ExchangeInjectContract", s2, null === (e4 = a3) || void 0 === e4 ? void 0 : e4.permissionId, u2).then(function(e5) {
                return i2(null, e5);
              }).catch(function(e5) {
                return i2(e5);
              });
            }
          } }, { key: "withdrawExchangeTokens", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, o3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultAddress.hex, a3 = arguments.length > 4 ? arguments[4] : void 0, i2 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
            if (ip.isFunction(a3) && (i2 = a3, a3 = {}), ip.isFunction(o3) ? (i2 = o3, o3 = this.tronWeb.defaultAddress.hex) : ip.isObject(o3) && (a3 = o3, o3 = this.tronWeb.defaultAddress.hex), !i2) return this.injectPromise(this.withdrawExchangeTokens, t4, r4, n3, o3, a3);
            if (!this.validator.notValid([{ name: "owner", type: "address", value: o3 }, { name: "token name", type: "not-empty-string", value: r4 }, { name: "token amount", type: "integer", value: n3, gte: 1 }, { name: "exchangeID", type: "integer", value: t4, gte: 0 }], i2)) {
              var s2 = { owner_address: Pp(o3), exchange_id: parseInt(t4), token_id: Wp(r4), quant: parseInt(n3) }, u2 = Mp(a3);
              wp(this.tronWeb, "ExchangeWithdrawContract", s2, null === (e4 = a3) || void 0 === e4 ? void 0 : e4.permissionId, u2).then(function(e5) {
                return i2(null, e5);
              }).catch(function(e5) {
                return i2(e5);
              });
            }
          } }, { key: "tradeExchangeTokens", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, o3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, a3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.hex, i2 = arguments.length > 5 ? arguments[5] : void 0, s2 = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
            if (ip.isFunction(i2) && (s2 = i2, i2 = {}), ip.isFunction(a3) ? (s2 = a3, a3 = this.tronWeb.defaultAddress.hex) : ip.isObject(a3) && (i2 = a3, a3 = this.tronWeb.defaultAddress.hex), !s2) return this.injectPromise(this.tradeExchangeTokens, t4, r4, n3, o3, a3, i2);
            if (!this.validator.notValid([{ name: "owner", type: "address", value: a3 }, { name: "token name", type: "not-empty-string", value: r4 }, { name: "tokenAmountSold", type: "integer", value: n3, gte: 1 }, { name: "tokenAmountExpected", type: "integer", value: o3, gte: 1 }, { name: "exchangeID", type: "integer", value: t4, gte: 0 }], s2)) {
              var u2 = { owner_address: Pp(a3), exchange_id: parseInt(t4), token_id: this.tronWeb.fromAscii(r4).replace(/^0x/, ""), quant: parseInt(n3), expected: parseInt(o3) }, c2 = Mp(i2);
              wp(this.tronWeb, "ExchangeTransactionContract", u2, null === (e4 = i2) || void 0 === e4 ? void 0 : e4.permissionId, c2).then(function(e5) {
                return s2(null, e5);
              }).catch(function(e5) {
                return s2(e5);
              });
            }
          } }, { key: "updateSetting", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex, o3 = arguments.length > 3 ? arguments[3] : void 0, a3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            if (ip.isFunction(o3) && (a3 = o3, o3 = {}), ip.isFunction(n3) ? (a3 = n3, n3 = this.tronWeb.defaultAddress.hex) : ip.isObject(n3) && (o3 = n3, n3 = this.tronWeb.defaultAddress.hex), !a3) return this.injectPromise(this.updateSetting, t4, r4, n3, o3);
            if (!this.validator.notValid([{ name: "owner", type: "address", value: n3 }, { name: "contract", type: "address", value: t4 }, { name: "userFeePercentage", type: "integer", value: r4, gte: 0, lte: 100 }], a3)) {
              var i2 = { owner_address: Pp(n3), contract_address: Pp(t4), consume_user_resource_percent: r4 }, s2 = Mp(o3);
              wp(this.tronWeb, "UpdateSettingContract", i2, null === (e4 = o3) || void 0 === e4 ? void 0 : e4.permissionId, s2).then(function(e5) {
                return a3(null, e5);
              }).catch(function(e5) {
                return a3(e5);
              });
            }
          } }, { key: "updateEnergyLimit", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.tronWeb.defaultAddress.hex, o3 = arguments.length > 3 ? arguments[3] : void 0, a3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            if (ip.isFunction(o3) && (a3 = o3, o3 = {}), ip.isFunction(n3) ? (a3 = n3, n3 = this.tronWeb.defaultAddress.hex) : ip.isObject(n3) && (o3 = n3, n3 = this.tronWeb.defaultAddress.hex), !a3) return this.injectPromise(this.updateEnergyLimit, t4, r4, n3, o3);
            if (!this.validator.notValid([{ name: "owner", type: "address", value: n3 }, { name: "contract", type: "address", value: t4 }, { name: "originEnergyLimit", type: "integer", value: r4, gte: 0, lte: 1e7 }], a3)) {
              var i2 = { owner_address: Pp(n3), contract_address: Pp(t4), origin_energy_limit: r4 }, s2 = Mp(o3);
              wp(this.tronWeb, "UpdateEnergyLimitContract", i2, null === (e4 = o3) || void 0 === e4 ? void 0 : e4.permissionId, s2).then(function(e5) {
                return a3(null, e5);
              }).catch(function(e5) {
                return a3(e5);
              });
            }
          } }, { key: "checkPermissions", value: function(e4, t4) {
            if (e4) {
              if (e4.type !== t4 || !e4.permission_name || !ip.isString(e4.permission_name) || !ip.isInteger(e4.threshold) || e4.threshold < 1 || !e4.keys) return false;
              var r4, n3 = Tp(e4.keys);
              try {
                for (n3.s(); !(r4 = n3.n()).done; ) {
                  var o3 = r4.value;
                  if (!this.tronWeb.isAddress(o3.address) || !ip.isInteger(o3.weight) || o3.weight > e4.threshold || o3.weight < 1 || 2 === t4 && !e4.operations) return false;
                }
              } catch (e5) {
                n3.e(e5);
              } finally {
                n3.f();
              }
            }
            return true;
          } }, { key: "updateAccountPermissions", value: function() {
            var e4, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], a3 = arguments.length > 4 ? arguments[4] : void 0, i2 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
            if (ip.isFunction(a3) && (i2 = a3, a3 = {}), ip.isFunction(o3) && (i2 = o3, o3 = false), ip.isFunction(n3) && (i2 = n3, n3 = o3 = false), ip.isFunction(r4) && (i2 = r4, r4 = n3 = o3 = false), !i2) return this.injectPromise(this.updateAccountPermissions, t4, r4, n3, o3, a3);
            if (!this.tronWeb.isAddress(t4)) return i2("Invalid ownerAddress provided");
            if (!this.checkPermissions(r4, 0)) return i2("Invalid ownerPermissions provided");
            if (!this.checkPermissions(n3, 1)) return i2("Invalid witnessPermissions provided");
            Array.isArray(o3) || (o3 = [o3]);
            var s2, u2 = Tp(o3);
            try {
              for (u2.s(); !(s2 = u2.n()).done; ) {
                var c2 = s2.value;
                if (!this.checkPermissions(c2, 2)) return i2("Invalid activesPermissions provided");
              }
            } catch (e5) {
              u2.e(e5);
            } finally {
              u2.f();
            }
            var l2 = { owner_address: Pp(t4) };
            if (r4) {
              var d2 = Bp(r4);
              "type" in d2 && delete d2.type, l2.owner = d2;
            }
            if (n3) {
              var p2 = Bp(n3);
              p2.type = "Witness", l2.witness = p2;
            }
            if (o3) {
              var f2 = Bp(o3);
              f2.forEach(function(e5) {
                e5.type = "Active";
              }), l2.actives = f2;
            }
            var g2 = Mp(a3);
            wp(this.tronWeb, "AccountPermissionUpdateContract", l2, null === (e4 = a3) || void 0 === e4 ? void 0 : e4.permissionId, g2).then(function(e5) {
              return i2(null, e5);
            }).catch(function(e5) {
              return i2(e5);
            });
          } }, { key: "newTxID", value: (o2 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (ip.isFunction(r4) && (n3 = r4, r4 = {}), n3) {
                    e5.next = 3;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.newTxID, t4, r4));
                case 3:
                  if (null === (o3 = r4) || void 0 === o3 || !o3.txLocal) {
                    e5.next = 7;
                    break;
                  }
                  return a3 = t4.raw_data.contract[0], wp(this.tronWeb, a3.type, a3.parameter.value, a3.Permission_id, { fee_limit: t4.raw_data.fee_limit, data: t4.raw_data.data, ref_block_bytes: t4.raw_data.ref_block_bytes, ref_block_hash: t4.raw_data.ref_block_hash, expiration: t4.raw_data.expiration, timestamp: t4.raw_data.timestamp }).then(function(e6) {
                    e6.signature = t4.signature, e6.visible = t4.visible, n3(null, e6);
                  }).catch(function(e6) {
                    return n3("Error generating a new transaction id.");
                  }), e5.abrupt("return");
                case 7:
                  this.tronWeb.fullNode.request("wallet/getsignweight", t4, "post").then(function(e6) {
                    return "boolean" == typeof t4.visible && (e6.transaction.transaction.visible = t4.visible), Cp(e6.transaction.transaction, Ap(Ap({}, t4.raw_data.contract[0].parameter.value), {}, { Permission_id: t4.raw_data.contract[0].Permission_id }), { data: t4.raw_data.data, fee_limit: t4.raw_data.fee_limit }, n3);
                  }).catch(function(e6) {
                    return n3("Error generating a new transaction id.");
                  });
                case 8:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, r4) {
            return o2.apply(this, arguments);
          }) }, { key: "alterTransaction", value: (n2 = p()(E().mark(function e4(t4) {
            var r4, n3, o3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (r4 = o3.length > 1 && void 0 !== o3[1] ? o3[1] : {}, n3 = o3.length > 2 && void 0 !== o3[2] && o3[2]) {
                    e5.next = 4;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.alterTransaction, t4, r4));
                case 4:
                  if (!t4.signature) {
                    e5.next = 6;
                    break;
                  }
                  return e5.abrupt("return", n3("You can not extend the expiration of a signed transaction."));
                case 6:
                  if (!r4.data) {
                    e5.next = 12;
                    break;
                  }
                  if ("hex" !== r4.dataFormat && (r4.data = this.tronWeb.toHex(r4.data)), r4.data = r4.data.replace(/^0x/, ""), 0 !== r4.data.length) {
                    e5.next = 11;
                    break;
                  }
                  return e5.abrupt("return", n3("Invalid data provided"));
                case 11:
                  t4.raw_data.data = r4.data;
                case 12:
                  if (!r4.extension) {
                    e5.next = 17;
                    break;
                  }
                  if (r4.extension = parseInt(1e3 * r4.extension), !(isNaN(r4.extension) || t4.raw_data.expiration + r4.extension <= Date.now() + 3e3)) {
                    e5.next = 16;
                    break;
                  }
                  return e5.abrupt("return", n3("Invalid extension provided"));
                case 16:
                  t4.raw_data.expiration += r4.extension;
                case 17:
                  this.newTxID(t4, { txLocal: r4.txLocal }, n3);
                case 18:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return n2.apply(this, arguments);
          }) }, { key: "extendExpiration", value: (r3 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (a3 = i2.length > 3 && void 0 !== i2[3] && i2[3], ip.isFunction(n3) && (a3 = n3, n3 = {}), a3) {
                    e5.next = 4;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.extendExpiration, t4, r4, n3));
                case 4:
                  this.alterTransaction(t4, { extension: r4, txLocal: null === (o3 = n3) || void 0 === o3 ? void 0 : o3.txLocal }, a3);
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, n3) {
            return r3.apply(this, arguments);
          }) }, { key: "addUpdateData", value: (t3 = p()(E().mark(function e4(t4, r4) {
            var n3, o3, a3, i2, s2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (o3 = s2.length > 2 && void 0 !== s2[2] ? s2[2] : "utf8", a3 = s2.length > 3 ? s2[3] : void 0, i2 = s2.length > 4 && void 0 !== s2[4] && s2[4], ip.isFunction(a3) && (i2 = a3, a3 = {}), ip.isFunction(o3) ? (i2 = o3, o3 = "utf8") : ip.isObject(o3) && (a3 = o3, o3 = "utf8"), i2) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.addUpdateData, t4, r4, o3, a3));
                case 7:
                  this.alterTransaction(t4, { data: r4, dataFormat: o3, txLocal: null === (n3 = a3) || void 0 === n3 ? void 0 : n3.txLocal }, i2);
                case 8:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, r4) {
            return t3.apply(this, arguments);
          }) }]), e3;
        }();
        function Rp(e3, t3) {
          var r3 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r3.push.apply(r3, n2);
          }
          return r3;
        }
        function Op(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r3 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? Rp(Object(r3), true).forEach(function(t4) {
              I()(e3, t4, r3[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r3)) : Rp(Object(r3)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r3, t4));
            });
          }
          return e3;
        }
        var kp = "TRON Signed Message:\n32", Sp = "Ethereum Signed Message:\n32";
        function Np(e3) {
          return Qp.address.toHex(e3);
        }
        var Lp = function() {
          function e3() {
            var t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (y()(this, e3), !t4 || !t4 instanceof Qp) throw new Error("Expected instance of TronWeb");
            this.tronWeb = t4, this.injectPromise = gp()(this), this.cache = { contracts: {} }, this.validator = new bp(t4);
          }
          var t3, r3, n2, o2, a2, i2, s2, u2, c2, l2, d2, f2, g2, h2, b2, v2, m2, A2, P2;
          return T()(e3, [{ key: "_parseToken", value: function(e4) {
            return Op(Op({}, e4), {}, { name: this.tronWeb.toUtf8(e4.name), abbr: e4.abbr && this.tronWeb.toUtf8(e4.abbr), description: e4.description && this.tronWeb.toUtf8(e4.description), url: e4.url && this.tronWeb.toUtf8(e4.url) });
          } }, { key: "getCurrentBlock", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (!e4) return this.injectPromise(this.getCurrentBlock);
            this.tronWeb.fullNode.request("wallet/getnowblock").then(function(t4) {
              e4(null, t4);
            }).catch(function(t4) {
              return e4(t4);
            });
          } }, { key: "getConfirmedCurrentBlock", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (!e4) return this.injectPromise(this.getConfirmedCurrentBlock);
            this.tronWeb.solidityNode.request("walletsolidity/getnowblock").then(function(t4) {
              e4(null, t4);
            }).catch(function(t4) {
              return e4(t4);
            });
          } }, { key: "getBlock", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock, t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return ip.isFunction(e4) && (t4 = e4, e4 = this.tronWeb.defaultBlock), t4 ? false === e4 ? t4("No block identifier provided") : ("earliest" == e4 && (e4 = 0), "latest" == e4 ? this.getCurrentBlock(t4) : isNaN(e4) && ip.isHex(e4) ? this.getBlockByHash(e4, t4) : void this.getBlockByNumber(e4, t4)) : this.injectPromise(this.getBlock, e4);
          } }, { key: "getBlockByHash", value: function(e4) {
            var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (!t4) return this.injectPromise(this.getBlockByHash, e4);
            this.tronWeb.fullNode.request("wallet/getblockbyid", { value: e4 }, "post").then(function(e5) {
              if (!Object.keys(e5).length) return t4("Block not found");
              t4(null, e5);
            }).catch(function(e5) {
              return t4(e5);
            });
          } }, { key: "getBlockByNumber", value: function(e4) {
            var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return t4 ? !ip.isInteger(e4) || e4 < 0 ? t4("Invalid block number provided") : void this.tronWeb.fullNode.request("wallet/getblockbynum", { num: parseInt(e4) }, "post").then(function(e5) {
              if (!Object.keys(e5).length) return t4("Block not found");
              t4(null, e5);
            }).catch(function(e5) {
              return t4(e5);
            }) : this.injectPromise(this.getBlockByNumber, e4);
          } }, { key: "getBlockTransactionCount", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock, t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (ip.isFunction(e4) && (t4 = e4, e4 = this.tronWeb.defaultBlock), !t4) return this.injectPromise(this.getBlockTransactionCount, e4);
            this.getBlock(e4).then(function(e5) {
              var r4 = e5.transactions;
              t4(null, (void 0 === r4 ? [] : r4).length);
            }).catch(function(e5) {
              return t4(e5);
            });
          } }, { key: "getTransactionFromBlock", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultBlock, t4 = arguments.length > 1 ? arguments[1] : void 0, r4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (ip.isFunction(t4) && (r4 = t4, t4 = 0), ip.isFunction(e4) && (r4 = e4, e4 = this.tronWeb.defaultBlock), !r4) return this.injectPromise(this.getTransactionFromBlock, e4, t4);
            this.getBlock(e4).then(function(e5) {
              var n3 = e5.transactions, o3 = void 0 !== n3 && n3;
              o3 ? "number" == typeof t4 ? t4 >= 0 && t4 < o3.length ? r4(null, o3[t4]) : r4("Invalid transaction index provided") : r4(null, o3) : r4("Transaction not found in block");
            }).catch(function(e5) {
              return r4(e5);
            });
          } }, { key: "getTransaction", value: function(e4) {
            var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (!t4) return this.injectPromise(this.getTransaction, e4);
            this.tronWeb.fullNode.request("wallet/gettransactionbyid", { value: e4 }, "post").then(function(e5) {
              if (!Object.keys(e5).length) return t4("Transaction not found");
              t4(null, e5);
            }).catch(function(e5) {
              return t4(e5);
            });
          } }, { key: "getConfirmedTransaction", value: function(e4) {
            var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (!t4) return this.injectPromise(this.getConfirmedTransaction, e4);
            this.tronWeb.solidityNode.request("walletsolidity/gettransactionbyid", { value: e4 }, "post").then(function(e5) {
              if (!Object.keys(e5).length) return t4("Transaction not found");
              t4(null, e5);
            }).catch(function(e5) {
              return t4(e5);
            });
          } }, { key: "getUnconfirmedTransactionInfo", value: function(e4) {
            var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return this._getTransactionInfoById(e4, { confirmed: false }, t4);
          } }, { key: "getTransactionInfo", value: function(e4) {
            var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return this._getTransactionInfoById(e4, { confirmed: true }, t4);
          } }, { key: "_getTransactionInfoById", value: function(e4, t4) {
            var r4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (!r4) return this.injectPromise(this._getTransactionInfoById, e4, t4);
            this.tronWeb[t4.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(t4.confirmed ? "solidity" : "", "/gettransactioninfobyid"), { value: e4 }, "post").then(function(e5) {
              r4(null, e5);
            }).catch(function(e5) {
              return r4(e5);
            });
          } }, { key: "getTransactionsToAddress", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 30, r4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            return ip.isFunction(r4) && (n3 = r4, r4 = 0), ip.isFunction(t4) && (n3 = t4, t4 = 30), n3 ? (e4 = this.tronWeb.address.toHex(e4), this.getTransactionsRelated(e4, "to", t4, r4, n3)) : this.injectPromise(this.getTransactionsToAddress, e4, t4, r4);
          } }, { key: "getTransactionsFromAddress", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 30, r4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            return ip.isFunction(r4) && (n3 = r4, r4 = 0), ip.isFunction(t4) && (n3 = t4, t4 = 30), n3 ? (e4 = this.tronWeb.address.toHex(e4), this.getTransactionsRelated(e4, "from", t4, r4, n3)) : this.injectPromise(this.getTransactionsFromAddress, e4, t4, r4);
          } }, { key: "getTransactionsRelated", value: (P2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3, i3, s3, u3, c3, l3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = l3.length > 0 && void 0 !== l3[0] ? l3[0] : this.tronWeb.defaultAddress.hex, r4 = l3.length > 1 && void 0 !== l3[1] ? l3[1] : "all", n3 = l3.length > 2 && void 0 !== l3[2] ? l3[2] : 30, o3 = l3.length > 3 && void 0 !== l3[3] ? l3[3] : 0, a3 = l3.length > 4 && void 0 !== l3[4] && l3[4], ip.isFunction(o3) && (a3 = o3, o3 = 0), ip.isFunction(n3) && (a3 = n3, n3 = 30), ip.isFunction(r4) && (a3 = r4, r4 = "all"), ip.isFunction(t4) && (a3 = t4, t4 = this.tronWeb.defaultAddress.hex), a3) {
                    e5.next = 11;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.getTransactionsRelated, t4, r4, n3, o3));
                case 11:
                  if (["to", "from", "all"].includes(r4)) {
                    e5.next = 13;
                    break;
                  }
                  return e5.abrupt("return", a3('Invalid direction provided: Expected "to", "from" or "all"'));
                case 13:
                  if ("all" != r4) {
                    e5.next = 27;
                    break;
                  }
                  return e5.prev = 14, e5.next = 17, Promise.all([this.getTransactionsRelated(t4, "from", n3, o3), this.getTransactionsRelated(t4, "to", n3, o3)]);
                case 17:
                  return i3 = e5.sent, s3 = wo()(i3, 2), u3 = s3[0], c3 = s3[1], e5.abrupt("return", a3(null, [].concat(_()(u3.map(function(e6) {
                    return e6.direction = "from", e6;
                  })), _()(c3.map(function(e6) {
                    return e6.direction = "to", e6;
                  }))).sort(function(e6, t5) {
                    return t5.raw_data.timestamp - e6.raw_data.timestamp;
                  })));
                case 24:
                  return e5.prev = 24, e5.t0 = e5.catch(14), e5.abrupt("return", a3(e5.t0));
                case 27:
                  if (this.tronWeb.isAddress(t4)) {
                    e5.next = 29;
                    break;
                  }
                  return e5.abrupt("return", a3("Invalid address provided"));
                case 29:
                  if (!(!ip.isInteger(n3) || n3 < 0 || o3 && n3 < 1)) {
                    e5.next = 31;
                    break;
                  }
                  return e5.abrupt("return", a3("Invalid limit provided"));
                case 31:
                  if (ip.isInteger(o3) && !(o3 < 0)) {
                    e5.next = 33;
                    break;
                  }
                  return e5.abrupt("return", a3("Invalid offset provided"));
                case 33:
                  t4 = this.tronWeb.address.toHex(t4), this.tronWeb.solidityNode.request("walletextension/gettransactions".concat(r4, "this"), { account: { address: t4 }, offset: o3, limit: n3 }, "post").then(function(e6) {
                    var t5 = e6.transaction;
                    a3(null, t5);
                  }).catch(function(e6) {
                    return a3(e6);
                  });
                case 35:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[14, 24]]);
          })), function() {
            return P2.apply(this, arguments);
          }) }, { key: "getAccount", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return ip.isFunction(e4) && (t4 = e4, e4 = this.tronWeb.defaultAddress.hex), t4 ? this.tronWeb.isAddress(e4) ? (e4 = this.tronWeb.address.toHex(e4), void this.tronWeb.solidityNode.request("walletsolidity/getaccount", { address: e4 }, "post").then(function(e5) {
              t4(null, e5);
            }).catch(function(e5) {
              return t4(e5);
            })) : t4("Invalid address provided") : this.injectPromise(this.getAccount, e4);
          } }, { key: "getAccountById", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (!t4) return this.injectPromise(this.getAccountById, e4);
            this.getAccountInfoById(e4, { confirmed: true }, t4);
          } }, { key: "getAccountInfoById", value: function(e4, t4, r4) {
            this.validator.notValid([{ name: "accountId", type: "hex", value: e4 }, { name: "accountId", type: "string", lte: 32, gte: 8, value: e4 }], r4) || (e4.startsWith("0x") && (e4 = e4.slice(2)), this.tronWeb[t4.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(t4.confirmed ? "solidity" : "", "/getaccountbyid"), { account_id: e4 }, "post").then(function(e5) {
              r4(null, e5);
            }).catch(function(e5) {
              return r4(e5);
            }));
          } }, { key: "getBalance", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (ip.isFunction(e4) && (t4 = e4, e4 = this.tronWeb.defaultAddress.hex), !t4) return this.injectPromise(this.getBalance, e4);
            this.getAccount(e4).then(function(e5) {
              var r4 = e5.balance;
              t4(null, void 0 === r4 ? 0 : r4);
            }).catch(function(e5) {
              return t4(e5);
            });
          } }, { key: "getUnconfirmedAccount", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return ip.isFunction(e4) && (t4 = e4, e4 = this.tronWeb.defaultAddress.hex), t4 ? this.tronWeb.isAddress(e4) ? (e4 = this.tronWeb.address.toHex(e4), void this.tronWeb.fullNode.request("wallet/getaccount", { address: e4 }, "post").then(function(e5) {
              t4(null, e5);
            }).catch(function(e5) {
              return t4(e5);
            })) : t4("Invalid address provided") : this.injectPromise(this.getUnconfirmedAccount, e4);
          } }, { key: "getUnconfirmedAccountById", value: function(e4) {
            var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (!t4) return this.injectPromise(this.getUnconfirmedAccountById, e4);
            this.getAccountInfoById(e4, { confirmed: false }, t4);
          } }, { key: "getUnconfirmedBalance", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (ip.isFunction(e4) && (t4 = e4, e4 = this.tronWeb.defaultAddress.hex), !t4) return this.injectPromise(this.getUnconfirmedBalance, e4);
            this.getUnconfirmedAccount(e4).then(function(e5) {
              var r4 = e5.balance;
              t4(null, void 0 === r4 ? 0 : r4);
            }).catch(function(e5) {
              return t4(e5);
            });
          } }, { key: "getBandwidth", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return ip.isFunction(e4) && (t4 = e4, e4 = this.tronWeb.defaultAddress.hex), t4 ? this.tronWeb.isAddress(e4) ? (e4 = this.tronWeb.address.toHex(e4), void this.tronWeb.fullNode.request("wallet/getaccountnet", { address: e4 }, "post").then(function(e5) {
              var r4 = e5.freeNetUsed, n3 = void 0 === r4 ? 0 : r4, o3 = e5.freeNetLimit, a3 = void 0 === o3 ? 0 : o3, i3 = e5.NetUsed, s3 = void 0 === i3 ? 0 : i3, u3 = e5.NetLimit;
              t4(null, a3 - n3 + ((void 0 === u3 ? 0 : u3) - s3));
            }).catch(function(e5) {
              return t4(e5);
            })) : t4("Invalid address provided") : this.injectPromise(this.getBandwidth, e4);
          } }, { key: "getTokensIssuedByAddress", value: function() {
            var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return ip.isFunction(t4) && (r4 = t4, t4 = this.tronWeb.defaultAddress.hex), r4 ? this.tronWeb.isAddress(t4) ? (t4 = this.tronWeb.address.toHex(t4), void this.tronWeb.fullNode.request("wallet/getassetissuebyaccount", { address: t4 }, "post").then(function(t5) {
              var n3 = t5.assetIssue, o3 = void 0 !== n3 && n3;
              if (!o3) return r4(null, {});
              var a3 = o3.map(function(t6) {
                return e4._parseToken(t6);
              }).reduce(function(e5, t6) {
                return e5[t6.name] = t6, e5;
              }, {});
              r4(null, a3);
            }).catch(function(e5) {
              return r4(e5);
            })) : r4("Invalid address provided") : this.injectPromise(this.getTokensIssuedByAddress, t4);
          } }, { key: "getTokenFromID", value: function() {
            var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return r4 ? (ip.isInteger(t4) && (t4 = t4.toString()), ip.isString(t4) && t4.length ? void this.tronWeb.fullNode.request("wallet/getassetissuebyname", { value: this.tronWeb.fromUtf8(t4) }, "post").then(function(t5) {
              if (!t5.name) return r4("Token does not exist");
              r4(null, e4._parseToken(t5));
            }).catch(function(e5) {
              return r4(e5);
            }) : r4("Invalid token ID provided")) : this.injectPromise(this.getTokenFromID, t4);
          } }, { key: "listNodes", value: function() {
            var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (!t4) return this.injectPromise(this.listNodes);
            this.tronWeb.fullNode.request("wallet/listnodes").then(function(r4) {
              var n3 = r4.nodes;
              t4(null, (void 0 === n3 ? [] : n3).map(function(t5) {
                var r5 = t5.address, n4 = r5.host, o3 = r5.port;
                return "".concat(e4.tronWeb.toUtf8(n4), ":").concat(o3);
              }));
            }).catch(function(e5) {
              return t4(e5);
            });
          } }, { key: "getBlockRange", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 30, r4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            return ip.isFunction(t4) && (r4 = t4, t4 = 30), ip.isFunction(e4) && (r4 = e4, e4 = 0), r4 ? !ip.isInteger(e4) || e4 < 0 ? r4("Invalid start of range provided") : !ip.isInteger(t4) || t4 < e4 ? r4("Invalid end of range provided") : t4 + 1 - e4 > 100 ? r4("Invalid range size, which should be no more than 100.") : void this.tronWeb.fullNode.request("wallet/getblockbylimitnext", { startNum: parseInt(e4), endNum: parseInt(t4) + 1 }, "post").then(function(e5) {
              var t5 = e5.block;
              r4(null, void 0 === t5 ? [] : t5);
            }).catch(function(e5) {
              return r4(e5);
            }) : this.injectPromise(this.getBlockRange, e4, t4);
          } }, { key: "listSuperRepresentatives", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (!e4) return this.injectPromise(this.listSuperRepresentatives);
            this.tronWeb.fullNode.request("wallet/listwitnesses").then(function(t4) {
              var r4 = t4.witnesses;
              e4(null, void 0 === r4 ? [] : r4);
            }).catch(function(t4) {
              return e4(t4);
            });
          } }, { key: "listTokens", value: function() {
            var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            return ip.isFunction(r4) && (n3 = r4, r4 = 0), ip.isFunction(t4) && (n3 = t4, t4 = 0), n3 ? !ip.isInteger(t4) || t4 < 0 || r4 && t4 < 1 ? n3("Invalid limit provided") : !ip.isInteger(r4) || r4 < 0 ? n3("Invalid offset provided") : t4 ? void this.tronWeb.fullNode.request("wallet/getpaginatedassetissuelist", { offset: parseInt(r4), limit: parseInt(t4) }, "post").then(function(t5) {
              var r5 = t5.assetIssue;
              n3(null, (void 0 === r5 ? [] : r5).map(function(t6) {
                return e4._parseToken(t6);
              }));
            }).catch(function(e5) {
              return n3(e5);
            }) : this.tronWeb.fullNode.request("wallet/getassetissuelist").then(function(t5) {
              var r5 = t5.assetIssue;
              n3(null, (void 0 === r5 ? [] : r5).map(function(t6) {
                return e4._parseToken(t6);
              }));
            }).catch(function(e5) {
              return n3(e5);
            }) : this.injectPromise(this.listTokens, t4, r4);
          } }, { key: "timeUntilNextVoteCycle", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (!e4) return this.injectPromise(this.timeUntilNextVoteCycle);
            this.tronWeb.fullNode.request("wallet/getnextmaintenancetime").then(function(t4) {
              var r4 = t4.num, n3 = void 0 === r4 ? -1 : r4;
              if (-1 == n3) return e4("Failed to get time until next vote cycle");
              e4(null, Math.floor(n3 / 1e3));
            }).catch(function(t4) {
              return e4(t4);
            });
          } }, { key: "getContract", value: function(e4) {
            var t4 = this, r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return r4 ? this.tronWeb.isAddress(e4) ? void (this.cache.contracts[e4] ? r4(null, this.cache.contracts[e4]) : (e4 = this.tronWeb.address.toHex(e4), this.tronWeb.fullNode.request("wallet/getcontract", { value: e4 }).then(function(n3) {
              if (n3.Error) return r4("Contract does not exist");
              t4.cache.contracts[e4] = n3, r4(null, n3);
            }).catch(function(e5) {
              return r4(e5);
            }))) : r4("Invalid contract address provided") : this.injectPromise(this.getContract, e4);
          } }, { key: "ecRecover", value: function(t4) {
            return e3.ecRecover(t4);
          } }, { key: "verifyMessage", value: (A2 = p()(E().mark(function t4() {
            var r4, n3, o3, a3, i3, s3 = arguments;
            return E().wrap(function(t5) {
              for (; ; ) switch (t5.prev = t5.next) {
                case 0:
                  if (r4 = s3.length > 0 && void 0 !== s3[0] && s3[0], n3 = s3.length > 1 && void 0 !== s3[1] && s3[1], o3 = s3.length > 2 && void 0 !== s3[2] ? s3[2] : this.tronWeb.defaultAddress.base58, a3 = !(s3.length > 3 && void 0 !== s3[3]) || s3[3], i3 = s3.length > 4 && void 0 !== s3[4] && s3[4], ip.isFunction(o3) && (i3 = o3, o3 = this.tronWeb.defaultAddress.base58, a3 = true), ip.isFunction(a3) && (i3 = a3, a3 = true), i3) {
                    t5.next = 9;
                    break;
                  }
                  return t5.abrupt("return", this.injectPromise(this.verifyMessage, r4, n3, o3, a3));
                case 9:
                  if (ip.isHex(r4)) {
                    t5.next = 11;
                    break;
                  }
                  return t5.abrupt("return", i3("Expected hex message input"));
                case 11:
                  if (!e3.verifySignature(r4, o3, n3, a3)) {
                    t5.next = 13;
                    break;
                  }
                  return t5.abrupt("return", i3(null, true));
                case 13:
                  i3("Signature does not match");
                case 14:
                case "end":
                  return t5.stop();
              }
            }, t4, this);
          })), function() {
            return A2.apply(this, arguments);
          }) }, { key: "verifyMessageV2", value: function() {
            var t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(n3) && (o3 = n3, n3 = {}), !o3) return this.injectPromise(this.verifyMessageV2, t4, r4, n3);
            try {
              o3(null, e3.verifyMessageV2(t4, r4));
            } catch (e4) {
              o3(e4);
            }
          } }, { key: "verifyTypedData", value: function(t4, r4, n3, o3) {
            var a3 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : this.tronWeb.defaultAddress.base58, i3 = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
            return ip.isFunction(a3) && (i3 = a3, a3 = this.tronWeb.defaultAddress.base58), i3 ? e3.verifyTypedData(t4, r4, n3, o3, a3) ? i3(null, true) : void i3("Signature does not match") : this.injectPromise(this.verifyTypedData, t4, r4, n3, o3, a3);
          } }, { key: "sign", value: (m2 = p()(E().mark(function t4() {
            var r4, n3, o3, a3, i3, s3, u3 = arguments;
            return E().wrap(function(t5) {
              for (; ; ) switch (t5.prev = t5.next) {
                case 0:
                  if (r4 = u3.length > 0 && void 0 !== u3[0] && u3[0], n3 = u3.length > 1 && void 0 !== u3[1] ? u3[1] : this.tronWeb.defaultPrivateKey, o3 = !(u3.length > 2 && void 0 !== u3[2]) || u3[2], a3 = u3.length > 3 && void 0 !== u3[3] && u3[3], i3 = u3.length > 4 && void 0 !== u3[4] && u3[4], ip.isFunction(a3) && (i3 = a3, a3 = false), ip.isFunction(o3) && (i3 = o3, o3 = true, a3 = false), ip.isFunction(n3) && (i3 = n3, n3 = this.tronWeb.defaultPrivateKey, o3 = true, a3 = false), i3) {
                    t5.next = 10;
                    break;
                  }
                  return t5.abrupt("return", this.injectPromise(this.sign, r4, n3, o3, a3));
                case 10:
                  if (!ip.isString(r4)) {
                    t5.next = 21;
                    break;
                  }
                  if (ip.isHex(r4)) {
                    t5.next = 13;
                    break;
                  }
                  return t5.abrupt("return", i3("Expected hex message input"));
                case 13:
                  return t5.prev = 13, s3 = e3.signString(r4, n3, o3), t5.abrupt("return", i3(null, s3));
                case 18:
                  t5.prev = 18, t5.t0 = t5.catch(13), i3(t5.t0);
                case 21:
                  if (ip.isObject(r4)) {
                    t5.next = 23;
                    break;
                  }
                  return t5.abrupt("return", i3("Invalid transaction provided"));
                case 23:
                  if (a3 || !r4.signature) {
                    t5.next = 25;
                    break;
                  }
                  return t5.abrupt("return", i3("Transaction is already signed"));
                case 25:
                  if (t5.prev = 25, a3) {
                    t5.next = 32;
                    break;
                  }
                  if (this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(n3)).toLowerCase() === this.tronWeb.address.toHex(r4.raw_data.contract[0].parameter.value.owner_address)) {
                    t5.next = 30;
                    break;
                  }
                  return t5.abrupt("return", i3("Private key does not match address in transaction"));
                case 30:
                  if (Kd(r4)) {
                    t5.next = 32;
                    break;
                  }
                  return t5.abrupt("return", i3("Invalid transaction"));
                case 32:
                  return t5.abrupt("return", i3(null, ip.crypto.signTransaction(n3, r4)));
                case 35:
                  t5.prev = 35, t5.t1 = t5.catch(25), i3(t5.t1);
                case 38:
                case "end":
                  return t5.stop();
              }
            }, t4, this, [[13, 18], [25, 35]]);
          })), function() {
            return m2.apply(this, arguments);
          }) }, { key: "signMessageV2", value: function(t4) {
            var r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultPrivateKey, n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            if (ip.isFunction(n3) && (o3 = n3, n3 = {}), ip.isFunction(r4) && (o3 = r4, r4 = this.tronWeb.defaultPrivateKey), !o3) return this.injectPromise(this.signMessageV2, t4, r4);
            try {
              return o3(null, e3.signMessageV2(t4, r4));
            } catch (e4) {
              o3(e4);
            }
          } }, { key: "_signTypedData", value: function(t4, r4, n3) {
            var o3 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : this.tronWeb.defaultPrivateKey, a3 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            if (ip.isFunction(o3) && (a3 = o3, o3 = this.tronWeb.defaultPrivateKey), !a3) return this.injectPromise(this._signTypedData, t4, r4, n3, o3);
            try {
              return a3(null, e3._signTypedData(t4, r4, n3, o3));
            } catch (e4) {
              a3(e4);
            }
          } }, { key: "multiSign", value: (v2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3, i3, s3, u3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = u3.length > 0 && void 0 !== u3[0] && u3[0], r4 = u3.length > 1 && void 0 !== u3[1] ? u3[1] : this.tronWeb.defaultPrivateKey, n3 = u3.length > 2 && void 0 !== u3[2] && u3[2], o3 = u3.length > 3 && void 0 !== u3[3] && u3[3], ip.isFunction(n3) && (o3 = n3, n3 = 0), ip.isFunction(r4) && (o3 = r4, r4 = this.tronWeb.defaultPrivateKey, n3 = 0), o3) {
                    e5.next = 8;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.multiSign, t4, r4, n3));
                case 8:
                  if (ip.isObject(t4) && t4.raw_data && t4.raw_data.contract) {
                    e5.next = 10;
                    break;
                  }
                  return e5.abrupt("return", o3("Invalid transaction provided"));
                case 10:
                  if (t4.raw_data.contract[0].Permission_id || !(n3 > 0)) {
                    e5.next = 30;
                    break;
                  }
                  return t4.raw_data.contract[0].Permission_id = n3, a3 = this.tronWeb.address.toHex(this.tronWeb.address.fromPrivateKey(r4)).toLowerCase(), e5.next = 15, this.getSignWeight(t4, n3);
                case 15:
                  if ("PERMISSION_ERROR" !== (i3 = e5.sent).result.code) {
                    e5.next = 18;
                    break;
                  }
                  return e5.abrupt("return", o3(i3.result.message));
                case 18:
                  if (s3 = false, i3.permission.keys.map(function(e6) {
                    e6.address === a3 && (s3 = true);
                  }), s3) {
                    e5.next = 22;
                    break;
                  }
                  return e5.abrupt("return", o3(r4 + " has no permission to sign"));
                case 22:
                  if (!i3.approved_list || -1 == i3.approved_list.indexOf(a3)) {
                    e5.next = 24;
                    break;
                  }
                  return e5.abrupt("return", o3(r4 + " already sign transaction"));
                case 24:
                  if (!i3.transaction || !i3.transaction.transaction) {
                    e5.next = 29;
                    break;
                  }
                  t4 = i3.transaction.transaction, n3 > 0 && (t4.raw_data.contract[0].Permission_id = n3), e5.next = 30;
                  break;
                case 29:
                  return e5.abrupt("return", o3("Invalid transaction provided"));
                case 30:
                  if (e5.prev = 30, Kd(t4)) {
                    e5.next = 33;
                    break;
                  }
                  return e5.abrupt("return", o3("Invalid transaction"));
                case 33:
                  return e5.abrupt("return", o3(null, ip.crypto.signTransaction(r4, t4)));
                case 36:
                  e5.prev = 36, e5.t0 = e5.catch(30), o3(e5.t0);
                case 39:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[30, 36]]);
          })), function() {
            return v2.apply(this, arguments);
          }) }, { key: "getApprovedList", value: (b2 = p()(E().mark(function e4(t4) {
            var r4, n3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (r4 = n3.length > 1 && void 0 !== n3[1] && n3[1]) {
                    e5.next = 3;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.getApprovedList, t4));
                case 3:
                  if (ip.isObject(t4)) {
                    e5.next = 5;
                    break;
                  }
                  return e5.abrupt("return", r4("Invalid transaction provided"));
                case 5:
                  this.tronWeb.fullNode.request("wallet/getapprovedlist", t4, "post").then(function(e6) {
                    r4(null, e6);
                  }).catch(function(e6) {
                    return r4(e6);
                  });
                case 6:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return b2.apply(this, arguments);
          }) }, { key: "getSignWeight", value: (h2 = p()(E().mark(function e4(t4, r4) {
            var n3, o3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (n3 = o3.length > 2 && void 0 !== o3[2] && o3[2], ip.isFunction(r4) && (n3 = r4, r4 = void 0), n3) {
                    e5.next = 4;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.getSignWeight, t4, r4));
                case 4:
                  if (ip.isObject(t4) && t4.raw_data && t4.raw_data.contract) {
                    e5.next = 6;
                    break;
                  }
                  return e5.abrupt("return", n3("Invalid transaction provided"));
                case 6:
                  if (ip.isInteger(r4) ? t4.raw_data.contract[0].Permission_id = parseInt(r4) : "number" != typeof t4.raw_data.contract[0].Permission_id && (t4.raw_data.contract[0].Permission_id = 0), ip.isObject(t4)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return", n3("Invalid transaction provided"));
                case 9:
                  this.tronWeb.fullNode.request("wallet/getsignweight", t4, "post").then(function(e6) {
                    n3(null, e6);
                  }).catch(function(e6) {
                    return n3(e6);
                  });
                case 10:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4) {
            return h2.apply(this, arguments);
          }) }, { key: "sendRawTransaction", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            return ip.isFunction(t4) && (r4 = t4, t4 = {}), r4 ? ip.isObject(e4) ? ip.isObject(t4) ? e4.signature && ip.isArray(e4.signature) ? void this.tronWeb.fullNode.request("wallet/broadcasttransaction", e4, "post").then(function(t5) {
              t5.result && (t5.transaction = e4), r4(null, t5);
            }).catch(function(e5) {
              return r4(e5);
            }) : r4("Transaction is not signed") : r4("Invalid options provided") : r4("Invalid transaction provided") : this.injectPromise(this.sendRawTransaction, e4, t4);
          } }, { key: "sendHexTransaction", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (ip.isFunction(t4) && (r4 = t4, t4 = {}), !r4) return this.injectPromise(this.sendHexTransaction, e4, t4);
            if (!ip.isHex(e4)) return r4("Invalid hex transaction provided");
            if (!ip.isObject(t4)) return r4("Invalid options provided");
            var n3 = { transaction: e4 };
            this.tronWeb.fullNode.request("wallet/broadcasthex", n3, "post").then(function(t5) {
              t5.result && (t5.transaction = JSON.parse(t5.transaction), t5.hexTransaction = e4), r4(null, t5);
            }).catch(function(e5) {
              return r4(e5);
            });
          } }, { key: "sendTransaction", value: (g2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3, i3, s3, u3, c3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = c3.length > 0 && void 0 !== c3[0] && c3[0], r4 = c3.length > 1 && void 0 !== c3[1] && c3[1], n3 = c3.length > 2 && void 0 !== c3[2] ? c3[2] : {}, o3 = c3.length > 3 && void 0 !== c3[3] && c3[3], ip.isFunction(n3) && (o3 = n3, n3 = {}), "string" == typeof n3 && (n3 = { privateKey: n3 }), o3) {
                    e5.next = 8;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.sendTransaction, t4, r4, n3));
                case 8:
                  if (this.tronWeb.isAddress(t4)) {
                    e5.next = 10;
                    break;
                  }
                  return e5.abrupt("return", o3("Invalid recipient provided"));
                case 10:
                  if (ip.isInteger(r4) && !(r4 <= 0)) {
                    e5.next = 12;
                    break;
                  }
                  return e5.abrupt("return", o3("Invalid amount provided"));
                case 12:
                  if ((n3 = Op({ privateKey: this.tronWeb.defaultPrivateKey, address: this.tronWeb.defaultAddress.hex }, n3)).privateKey || n3.address) {
                    e5.next = 15;
                    break;
                  }
                  return e5.abrupt("return", o3("Function requires either a private key or address to be set"));
                case 15:
                  return e5.prev = 15, a3 = n3.privateKey ? this.tronWeb.address.fromPrivateKey(n3.privateKey) : n3.address, e5.next = 19, this.tronWeb.transactionBuilder.sendTrx(t4, r4, a3);
                case 19:
                  return i3 = e5.sent, e5.next = 22, this.sign(i3, n3.privateKey || void 0);
                case 22:
                  return s3 = e5.sent, e5.next = 25, this.sendRawTransaction(s3);
                case 25:
                  return u3 = e5.sent, e5.abrupt("return", o3(null, u3));
                case 29:
                  return e5.prev = 29, e5.t0 = e5.catch(15), e5.abrupt("return", o3(e5.t0));
                case 32:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[15, 29]]);
          })), function() {
            return g2.apply(this, arguments);
          }) }, { key: "sendToken", value: (f2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3, i3, s3, u3, c3, l3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = l3.length > 0 && void 0 !== l3[0] && l3[0], r4 = l3.length > 1 && void 0 !== l3[1] && l3[1], n3 = l3.length > 2 && void 0 !== l3[2] && l3[2], o3 = l3.length > 3 && void 0 !== l3[3] ? l3[3] : {}, a3 = l3.length > 4 && void 0 !== l3[4] && l3[4], ip.isFunction(o3) && (a3 = o3, o3 = {}), "string" == typeof o3 && (o3 = { privateKey: o3 }), a3) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.sendToken, t4, r4, n3, o3));
                case 9:
                  if (this.tronWeb.isAddress(t4)) {
                    e5.next = 11;
                    break;
                  }
                  return e5.abrupt("return", a3("Invalid recipient provided"));
                case 11:
                  if (ip.isInteger(r4) && !(r4 <= 0)) {
                    e5.next = 13;
                    break;
                  }
                  return e5.abrupt("return", a3("Invalid amount provided"));
                case 13:
                  if (ip.isInteger(n3) && (n3 = n3.toString()), ip.isString(n3)) {
                    e5.next = 16;
                    break;
                  }
                  return e5.abrupt("return", a3("Invalid token ID provided"));
                case 16:
                  if ((o3 = Op({ privateKey: this.tronWeb.defaultPrivateKey, address: this.tronWeb.defaultAddress.hex }, o3)).privateKey || o3.address) {
                    e5.next = 19;
                    break;
                  }
                  return e5.abrupt("return", a3("Function requires either a private key or address to be set"));
                case 19:
                  return e5.prev = 19, i3 = o3.privateKey ? this.tronWeb.address.fromPrivateKey(o3.privateKey) : o3.address, e5.next = 23, this.tronWeb.transactionBuilder.sendToken(t4, r4, n3, i3);
                case 23:
                  return s3 = e5.sent, e5.next = 26, this.sign(s3, o3.privateKey || void 0);
                case 26:
                  return u3 = e5.sent, e5.next = 29, this.sendRawTransaction(u3);
                case 29:
                  return c3 = e5.sent, e5.abrupt("return", a3(null, c3));
                case 33:
                  return e5.prev = 33, e5.t0 = e5.catch(19), e5.abrupt("return", a3(e5.t0));
                case 36:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[19, 33]]);
          })), function() {
            return f2.apply(this, arguments);
          }) }, { key: "freezeBalance", value: (d2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3, i3, s3, u3, c3, l3, d3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = d3.length > 0 && void 0 !== d3[0] ? d3[0] : 0, r4 = d3.length > 1 && void 0 !== d3[1] ? d3[1] : 3, n3 = d3.length > 2 && void 0 !== d3[2] ? d3[2] : "BANDWIDTH", o3 = d3.length > 3 && void 0 !== d3[3] ? d3[3] : {}, a3 = d3.length > 4 && void 0 !== d3[4] ? d3[4] : void 0, i3 = d3.length > 5 && void 0 !== d3[5] && d3[5], ip.isFunction(a3) && (i3 = a3, a3 = void 0), ip.isFunction(r4) && (i3 = r4, r4 = 3), ip.isFunction(n3) && (i3 = n3, n3 = "BANDWIDTH"), ip.isFunction(o3) && (i3 = o3, o3 = {}), "string" == typeof o3 && (o3 = { privateKey: o3 }), i3) {
                    e5.next = 13;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.freezeBalance, t4, r4, n3, o3, a3));
                case 13:
                  if (["BANDWIDTH", "ENERGY"].includes(n3)) {
                    e5.next = 15;
                    break;
                  }
                  return e5.abrupt("return", i3('Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"'));
                case 15:
                  if (ip.isInteger(t4) && !(t4 <= 0)) {
                    e5.next = 17;
                    break;
                  }
                  return e5.abrupt("return", i3("Invalid amount provided"));
                case 17:
                  if (ip.isInteger(r4) && !(r4 < 3)) {
                    e5.next = 19;
                    break;
                  }
                  return e5.abrupt("return", i3("Invalid duration provided, minimum of 3 days"));
                case 19:
                  if ((o3 = Op({ privateKey: this.tronWeb.defaultPrivateKey, address: this.tronWeb.defaultAddress.hex }, o3)).privateKey || o3.address) {
                    e5.next = 22;
                    break;
                  }
                  return e5.abrupt("return", i3("Function requires either a private key or address to be set"));
                case 22:
                  return e5.prev = 22, s3 = o3.privateKey ? this.tronWeb.address.fromPrivateKey(o3.privateKey) : o3.address, e5.next = 26, this.tronWeb.transactionBuilder.freezeBalance(t4, r4, n3, s3, a3);
                case 26:
                  return u3 = e5.sent, e5.next = 29, this.sign(u3, o3.privateKey || void 0);
                case 29:
                  return c3 = e5.sent, e5.next = 32, this.sendRawTransaction(c3);
                case 32:
                  return l3 = e5.sent, e5.abrupt("return", i3(null, l3));
                case 36:
                  return e5.prev = 36, e5.t0 = e5.catch(22), e5.abrupt("return", i3(e5.t0));
                case 39:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[22, 36]]);
          })), function() {
            return d2.apply(this, arguments);
          }) }, { key: "unfreezeBalance", value: (l2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3, i3, s3, u3, c3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = c3.length > 0 && void 0 !== c3[0] ? c3[0] : "BANDWIDTH", r4 = c3.length > 1 && void 0 !== c3[1] ? c3[1] : {}, n3 = c3.length > 2 && void 0 !== c3[2] ? c3[2] : void 0, o3 = c3.length > 3 && void 0 !== c3[3] && c3[3], ip.isFunction(n3) && (o3 = n3, n3 = void 0), ip.isFunction(t4) && (o3 = t4, t4 = "BANDWIDTH"), ip.isFunction(r4) && (o3 = r4, r4 = {}), "string" == typeof r4 && (r4 = { privateKey: r4 }), o3) {
                    e5.next = 10;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.unfreezeBalance, t4, r4, n3));
                case 10:
                  if (["BANDWIDTH", "ENERGY"].includes(t4)) {
                    e5.next = 12;
                    break;
                  }
                  return e5.abrupt("return", o3('Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"'));
                case 12:
                  if ((r4 = Op({ privateKey: this.tronWeb.defaultPrivateKey, address: this.tronWeb.defaultAddress.hex }, r4)).privateKey || r4.address) {
                    e5.next = 15;
                    break;
                  }
                  return e5.abrupt("return", o3("Function requires either a private key or address to be set"));
                case 15:
                  return e5.prev = 15, a3 = r4.privateKey ? this.tronWeb.address.fromPrivateKey(r4.privateKey) : r4.address, e5.next = 19, this.tronWeb.transactionBuilder.unfreezeBalance(t4, a3, n3);
                case 19:
                  return i3 = e5.sent, e5.next = 22, this.sign(i3, r4.privateKey || void 0);
                case 22:
                  return s3 = e5.sent, e5.next = 25, this.sendRawTransaction(s3);
                case 25:
                  return u3 = e5.sent, e5.abrupt("return", o3(null, u3));
                case 29:
                  return e5.prev = 29, e5.t0 = e5.catch(15), e5.abrupt("return", o3(e5.t0));
                case 32:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[15, 29]]);
          })), function() {
            return l2.apply(this, arguments);
          }) }, { key: "updateAccount", value: (c2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3, i3, s3, u3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = u3.length > 0 && void 0 !== u3[0] && u3[0], r4 = u3.length > 1 && void 0 !== u3[1] ? u3[1] : {}, n3 = u3.length > 2 && void 0 !== u3[2] && u3[2], ip.isFunction(r4) && (n3 = r4, r4 = {}), "string" == typeof r4 && (r4 = { privateKey: r4 }), n3) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.updateAccount, t4, r4));
                case 7:
                  if (ip.isString(t4) && t4.length) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return", n3("Name must be a string"));
                case 9:
                  if ((r4 = Op({ privateKey: this.tronWeb.defaultPrivateKey, address: this.tronWeb.defaultAddress.hex }, r4)).privateKey || r4.address) {
                    e5.next = 12;
                    break;
                  }
                  return e5.abrupt("return", n3("Function requires either a private key or address to be set"));
                case 12:
                  return e5.prev = 12, o3 = r4.privateKey ? this.tronWeb.address.fromPrivateKey(r4.privateKey) : r4.address, e5.next = 16, this.tronWeb.transactionBuilder.updateAccount(t4, o3);
                case 16:
                  return a3 = e5.sent, e5.next = 19, this.sign(a3, r4.privateKey || void 0);
                case 19:
                  return i3 = e5.sent, e5.next = 22, this.sendRawTransaction(i3);
                case 22:
                  return s3 = e5.sent, e5.abrupt("return", n3(null, s3));
                case 26:
                  return e5.prev = 26, e5.t0 = e5.catch(12), e5.abrupt("return", n3(e5.t0));
                case 29:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[12, 26]]);
          })), function() {
            return c2.apply(this, arguments);
          }) }, { key: "signMessage", value: function() {
            return this.sign.apply(this, arguments);
          } }, { key: "sendAsset", value: function() {
            return this.sendToken.apply(this, arguments);
          } }, { key: "send", value: function() {
            return this.sendTransaction.apply(this, arguments);
          } }, { key: "sendTrx", value: function() {
            return this.sendTransaction.apply(this, arguments);
          } }, { key: "broadcast", value: function() {
            return this.sendRawTransaction.apply(this, arguments);
          } }, { key: "broadcastHex", value: function() {
            return this.sendHexTransaction.apply(this, arguments);
          } }, { key: "signTransaction", value: function() {
            return this.sign.apply(this, arguments);
          } }, { key: "getProposal", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return t4 ? !ip.isInteger(e4) || e4 < 0 ? t4("Invalid proposalID provided") : void this.tronWeb.fullNode.request("wallet/getproposalbyid", { id: parseInt(e4) }, "post").then(function(e5) {
              t4(null, e5);
            }).catch(function(e5) {
              return t4(e5);
            }) : this.injectPromise(this.getProposal, e4);
          } }, { key: "listProposals", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (!e4) return this.injectPromise(this.listProposals);
            this.tronWeb.fullNode.request("wallet/listproposals", {}, "post").then(function(t4) {
              var r4 = t4.proposals;
              e4(null, void 0 === r4 ? [] : r4);
            }).catch(function(t4) {
              return e4(t4);
            });
          } }, { key: "getChainParameters", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (!e4) return this.injectPromise(this.getChainParameters);
            this.tronWeb.fullNode.request("wallet/getchainparameters", {}, "post").then(function(t4) {
              var r4 = t4.chainParameter;
              e4(null, void 0 === r4 ? [] : r4);
            }).catch(function(t4) {
              return e4(t4);
            });
          } }, { key: "getAccountResources", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return t4 ? this.tronWeb.isAddress(e4) ? void this.tronWeb.fullNode.request("wallet/getaccountresource", { address: this.tronWeb.address.toHex(e4) }, "post").then(function(e5) {
              t4(null, e5);
            }).catch(function(e5) {
              return t4(e5);
            }) : t4("Invalid address provided") : this.injectPromise(this.getAccountResources, e4);
          } }, { key: "getDelegatedResourceV2", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.tronWeb.defaultAddress.hex, r4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : { confirmed: true }, n3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            return ip.isFunction(r4) && (n3 = r4, r4 = { confirmed: true }), ip.isFunction(t4) && (n3 = t4, t4 = this.tronWeb.defaultAddress.hex), ip.isFunction(e4) && (n3 = e4, e4 = this.tronWeb.defaultAddress.hex, t4 = this.tronWeb.defaultAddress.hex), n3 ? this.tronWeb.isAddress(e4) && this.tronWeb.isAddress(t4) ? void this.tronWeb[r4.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(r4.confirmed ? "solidity" : "", "/getdelegatedresourcev2"), { fromAddress: Np(e4), toAddress: Np(t4) }, "post").then(function(e5) {
              n3(null, e5);
            }).catch(function(e5) {
              return n3(e5);
            }) : n3("Invalid address provided") : this.injectPromise(this.getDelegatedResourceV2, e4, t4, r4);
          } }, { key: "getDelegatedResourceAccountIndexV2", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { confirmed: true }, r4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            return ip.isFunction(t4) && (r4 = t4, t4 = { confirmed: true }), ip.isFunction(e4) && (r4 = e4, e4 = this.tronWeb.defaultAddress.hex), r4 ? this.tronWeb.isAddress(e4) ? void this.tronWeb[t4.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(t4.confirmed ? "solidity" : "", "/getdelegatedresourceaccountindexv2"), { value: Np(e4) }, "post").then(function(e5) {
              r4(null, e5);
            }).catch(function(e5) {
              return r4(e5);
            }) : r4("Invalid address provided") : this.injectPromise(this.getDelegatedResourceAccountIndexV2, e4, t4);
          } }, { key: "getCanDelegatedMaxSize", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "BANDWIDTH", r4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : { confirmed: true }, n3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            return ip.isFunction(r4) && (n3 = r4, r4 = { confirmed: true }), ip.isFunction(t4) && (n3 = t4, t4 = "BANDWIDTH"), ip.isFunction(e4) && (n3 = e4, e4 = this.tronWeb.defaultAddress.hex), n3 ? this.tronWeb.isAddress(e4) ? void (this.validator.notValid([{ name: "resource", type: "resource", value: t4, msg: 'Invalid resource provided: Expected "BANDWIDTH" or "ENERGY"' }], n3) || this.tronWeb[r4.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(r4.confirmed ? "solidity" : "", "/getcandelegatedmaxsize"), { owner_address: Np(e4), type: "ENERGY" === t4 ? 1 : 0 }, "post").then(function(e5) {
              n3(null, e5);
            }).catch(function(e5) {
              return n3(e5);
            })) : n3("Invalid address provided") : this.injectPromise(this.getCanDelegatedMaxSize, e4, t4, r4);
          } }, { key: "getAvailableUnfreezeCount", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { confirmed: true }, r4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            return ip.isFunction(t4) && (r4 = t4, t4 = { confirmed: true }), ip.isFunction(e4) && (r4 = e4, e4 = this.tronWeb.defaultAddress.hex), r4 ? this.tronWeb.isAddress(e4) ? void this.tronWeb[t4.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(t4.confirmed ? "solidity" : "", "/getavailableunfreezecount"), { owner_address: Np(e4) }, "post").then(function(e5) {
              r4(null, e5);
            }).catch(function(e5) {
              return r4(e5);
            }) : r4("Invalid address provided") : this.injectPromise(this.getAvailableUnfreezeCount, e4, t4);
          } }, { key: "getCanWithdrawUnfreezeAmount", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.tronWeb.defaultAddress.hex, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Date.now(), r4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : { confirmed: true }, n3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            return ip.isFunction(r4) && (n3 = r4, r4 = { confirmed: true }), ip.isFunction(t4) && (n3 = t4, t4 = Date.now()), ip.isFunction(e4) && (n3 = e4, e4 = this.tronWeb.defaultAddress.hex), n3 ? this.tronWeb.isAddress(e4) ? !ip.isInteger(t4) || t4 < 0 ? n3("Invalid timestamp provided") : void this.tronWeb[r4.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(r4.confirmed ? "solidity" : "", "/getcanwithdrawunfreezeamount"), { owner_address: Np(e4), timestamp: t4 }, "post").then(function(e5) {
              n3(null, e5);
            }).catch(function(e5) {
              return n3(e5);
            }) : n3("Invalid address provided") : this.injectPromise(this.getCanWithdrawUnfreezeAmount, e4, t4, r4);
          } }, { key: "getExchangeByID", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return t4 ? !ip.isInteger(e4) || e4 < 0 ? t4("Invalid exchangeID provided") : void this.tronWeb.fullNode.request("wallet/getexchangebyid", { id: e4 }, "post").then(function(e5) {
              t4(null, e5);
            }).catch(function(e5) {
              return t4(e5);
            }) : this.injectPromise(this.getExchangeByID, e4);
          } }, { key: "listExchanges", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (!e4) return this.injectPromise(this.listExchanges);
            this.tronWeb.fullNode.request("wallet/listexchanges", {}, "post").then(function(t4) {
              var r4 = t4.exchanges;
              e4(null, void 0 === r4 ? [] : r4);
            }, "post").catch(function(t4) {
              return e4(t4);
            });
          } }, { key: "listExchangesPaginated", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10, t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, r4 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (ip.isFunction(t4) && (r4 = t4, t4 = 0), ip.isFunction(e4) && (r4 = e4, e4 = 10), !r4) return this.injectPromise(this.listExchangesPaginated, e4, t4);
            this.tronWeb.fullNode.request("wallet/getpaginatedexchangelist", { limit: e4, offset: t4 }, "post").then(function(e5) {
              var t5 = e5.exchanges;
              r4(null, void 0 === t5 ? [] : t5);
            }).catch(function(e5) {
              return r4(e5);
            });
          } }, { key: "getNodeInfo", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (!e4) return this.injectPromise(this.getNodeInfo);
            this.tronWeb.fullNode.request("wallet/getnodeinfo", {}, "post").then(function(t4) {
              e4(null, t4);
            }, "post").catch(function(t4) {
              return e4(t4);
            });
          } }, { key: "getTokenListByName", value: function() {
            var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return r4 ? (ip.isInteger(t4) && (t4 = t4.toString()), ip.isString(t4) && t4.length ? void this.tronWeb.fullNode.request("wallet/getassetissuelistbyname", { value: this.tronWeb.fromUtf8(t4) }, "post").then(function(t5) {
              if (Array.isArray(t5.assetIssue)) r4(null, t5.assetIssue.map(function(t6) {
                return e4._parseToken(t6);
              }));
              else if (!t5.name) return r4("Token does not exist");
              r4(null, e4._parseToken(t5));
            }).catch(function(e5) {
              return r4(e5);
            }) : r4("Invalid token ID provided")) : this.injectPromise(this.getTokenListByName, t4);
          } }, { key: "getTokenByID", value: function() {
            var e4 = this, t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            return r4 ? (ip.isInteger(t4) && (t4 = t4.toString()), ip.isString(t4) && t4.length ? void this.tronWeb.fullNode.request("wallet/getassetissuebyid", { value: t4 }, "post").then(function(t5) {
              if (!t5.name) return r4("Token does not exist");
              r4(null, e4._parseToken(t5));
            }).catch(function(e5) {
              return r4(e5);
            }) : r4("Invalid token ID provided")) : this.injectPromise(this.getTokenByID, t4);
          } }, { key: "getReward", value: (u2 = p()(E().mark(function e4(t4) {
            var r4, n3, o3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return n3 = o3.length > 2 && void 0 !== o3[2] && o3[2], (r4 = o3.length > 1 && void 0 !== o3[1] ? o3[1] : {}).confirmed = true, e5.abrupt("return", this._getReward(t4, r4, n3));
                case 4:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return u2.apply(this, arguments);
          }) }, { key: "getUnconfirmedReward", value: (s2 = p()(E().mark(function e4(t4) {
            var r4, n3, o3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return n3 = o3.length > 2 && void 0 !== o3[2] && o3[2], (r4 = o3.length > 1 && void 0 !== o3[1] ? o3[1] : {}).confirmed = false, e5.abrupt("return", this._getReward(t4, r4, n3));
                case 4:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return s2.apply(this, arguments);
          }) }, { key: "getBrokerage", value: (i2 = p()(E().mark(function e4(t4) {
            var r4, n3, o3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return n3 = o3.length > 2 && void 0 !== o3[2] && o3[2], (r4 = o3.length > 1 && void 0 !== o3[1] ? o3[1] : {}).confirmed = true, e5.abrupt("return", this._getBrokerage(t4, r4, n3));
                case 4:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return i2.apply(this, arguments);
          }) }, { key: "getUnconfirmedBrokerage", value: (a2 = p()(E().mark(function e4(t4) {
            var r4, n3, o3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return n3 = o3.length > 2 && void 0 !== o3[2] && o3[2], (r4 = o3.length > 1 && void 0 !== o3[1] ? o3[1] : {}).confirmed = false, e5.abrupt("return", this._getBrokerage(t4, r4, n3));
                case 4:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4) {
            return a2.apply(this, arguments);
          }) }, { key: "_getReward", value: (o2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = a3.length > 0 && void 0 !== a3[0] ? a3[0] : this.tronWeb.defaultAddress.hex, r4 = a3.length > 1 ? a3[1] : void 0, n3 = a3.length > 2 && void 0 !== a3[2] && a3[2], ip.isFunction(r4) && (n3 = r4, r4 = {}), ip.isFunction(t4) ? (n3 = t4, t4 = this.tronWeb.defaultAddress.hex) : ip.isObject(t4) && (r4 = t4, t4 = this.tronWeb.defaultAddress.hex), n3) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this._getReward, t4, r4));
                case 7:
                  if (!this.validator.notValid([{ name: "origin", type: "address", value: t4 }], n3)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return");
                case 9:
                  o3 = { address: Np(t4) }, this.tronWeb[r4.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(r4.confirmed ? "solidity" : "", "/getReward"), o3, "post").then(function() {
                    var e6 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    if (void 0 === e6.reward) return n3("Not found.");
                    n3(null, e6.reward);
                  }).catch(function(e6) {
                    return n3(e6);
                  });
                case 11:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return o2.apply(this, arguments);
          }) }, { key: "_getBrokerage", value: (n2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = a3.length > 0 && void 0 !== a3[0] ? a3[0] : this.tronWeb.defaultAddress.hex, r4 = a3.length > 1 ? a3[1] : void 0, n3 = a3.length > 2 && void 0 !== a3[2] && a3[2], ip.isFunction(r4) && (n3 = r4, r4 = {}), ip.isFunction(t4) ? (n3 = t4, t4 = this.tronWeb.defaultAddress.hex) : ip.isObject(t4) && (r4 = t4, t4 = this.tronWeb.defaultAddress.hex), n3) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this._getBrokerage, t4, r4));
                case 7:
                  if (!this.validator.notValid([{ name: "origin", type: "address", value: t4 }], n3)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return");
                case 9:
                  o3 = { address: Np(t4) }, this.tronWeb[r4.confirmed ? "solidityNode" : "fullNode"].request("wallet".concat(r4.confirmed ? "solidity" : "", "/getBrokerage"), o3, "post").then(function() {
                    var e6 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    if (void 0 === e6.brokerage) return n3("Not found.");
                    n3(null, e6.brokerage);
                  }).catch(function(e6) {
                    return n3(e6);
                  });
                case 11:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return n2.apply(this, arguments);
          }) }, { key: "getBandwidthPrices", value: (r3 = p()(E().mark(function e4() {
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.abrupt("return", this.tronWeb.fullNode.request("wallet/getbandwidthprices", {}, "post").then(function() {
                    var e6 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    if (void 0 === e6.prices) throw new Error("Not found.");
                    return e6.prices;
                  }));
                case 1:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return r3.apply(this, arguments);
          }) }, { key: "getEnergyPrices", value: (t3 = p()(E().mark(function e4() {
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.abrupt("return", this.tronWeb.fullNode.request("wallet/getenergyprices", {}, "post").then(function() {
                    var e6 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    if (void 0 === e6.prices) throw new Error("Not found.");
                    return e6.prices;
                  }));
                case 1:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return t3.apply(this, arguments);
          }) }], [{ key: "ecRecover", value: function(e4) {
            var t4;
            if (!Kd(e4)) throw new Error("Invalid transaction");
            if (null === (t4 = e4.signature) || void 0 === t4 || !t4.length) throw new Error("Transaction is not signed");
            if (1 === e4.signature.length) {
              var r4 = fl(e4.txID, e4.signature[0]);
              return Qp.address.fromHex(r4);
            }
            return e4.signature.map(function(t5) {
              var r5 = fl(e4.txID, t5);
              return Qp.address.fromHex(r5);
            });
          } }, { key: "verifySignature", value: function(e4, t4, r4) {
            var n3 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
            e4 = e4.replace(/^0x/, "");
            var o3 = [].concat(_()(wt(n3 ? kp : Sp)), _()(ip.code.hexStr2byteArray(e4))), a3 = mr(kt(new Uint8Array(o3)), dt.from("0x".concat(r4.replace(/^0x/, "")))), i3 = G + a3.substr(2);
            return Qp.address.fromHex(i3) == Qp.address.fromHex(t4);
          } }, { key: "verifyMessageV2", value: function(e4, t4) {
            return ip.message.verifyMessage(e4, t4);
          } }, { key: "verifyTypedData", value: function(e4, t4, r4, n3, o3) {
            var a3 = mr(ip._TypedDataEncoder.hash(e4, t4, r4), dt.from("0x".concat(n3.replace(/^0x/, "")))), i3 = G + a3.substr(2);
            return Qp.address.fromHex(i3) == Qp.address.fromHex(o3);
          } }, { key: "signString", value: function(e4, t4) {
            var r4 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
            e4 = e4.replace(/^0x/, "");
            var n3 = "0x".concat(t4.replace(/^0x/, "")), o3 = new Tr(n3), a3 = [].concat(_()(wt(r4 ? kp : Sp)), _()(ip.code.hexStr2byteArray(e4))), i3 = kt(new Uint8Array(a3)), s3 = o3.sign(i3);
            return ["0x", s3.r.substring(2), s3.s.substring(2), Number(s3.v).toString(16)].join("");
          } }, { key: "signMessageV2", value: function(e4, t4) {
            return ip.message.signMessage(e4, t4);
          } }, { key: "_signTypedData", value: function(e4, t4, r4, n3) {
            return ip.crypto._signTypedData(e4, t4, r4, n3);
          } }]), e3;
        }();
        function Dp(e3, t3) {
          var r3 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r3.push.apply(r3, n2);
          }
          return r3;
        }
        function Up(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r3 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? Dp(Object(r3), true).forEach(function(t4) {
              I()(e3, t4, r3[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r3)) : Dp(Object(r3)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r3, t4));
            });
          }
          return e3;
        }
        var xp = function(e3, t3) {
          return jl(e3, t3);
        }, Jp = function() {
          function e3(t4, r4) {
            y()(this, e3), this.tronWeb = t4.tronWeb, this.contract = t4, this.abi = r4, this.name = r4.name || (r4.name = r4.type), this.inputs = r4.inputs || [], this.outputs = r4.outputs || [], this.functionSelector = function(e4) {
              if (e4.stateMutability = e4.stateMutability ? e4.stateMutability.toLowerCase() : "nonpayable", e4.type = e4.type ? e4.type.toLowerCase() : "", "fallback" === e4.type || "receive" === e4.type) return "0x";
              var t5 = new ip.ethersUtils.Interface([e4]);
              return "event" === e4.type ? t5.getEvent(e4.name).format(ip.ethersUtils.FormatTypes.sighash) : t5.getFunction(e4.name).format(ip.ethersUtils.FormatTypes.sighash);
            }(r4), this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8), this.injectPromise = gp()(this), this.defaultOptions = { feeLimit: this.tronWeb.feeLimit, callValue: 0, userFeePercentage: 100, shouldPollResponse: false };
          }
          var t3, r3, n2;
          return T()(e3, [{ key: "decodeInput", value: function(e4) {
            return xp(this.inputs, "0x" + e4);
          } }, { key: "onMethod", value: function() {
            var e4 = this, t4 = "";
            if (this.abi && !/event/i.test(this.abi.type)) {
              for (var r4 = arguments.length, n3 = new Array(r4), o2 = 0; o2 < r4; o2++) n3[o2] = arguments[o2];
              t4 = Gl(this.abi, n3);
            }
            return { call: function() {
              var r5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              return ip.isFunction(r5) && (n4 = r5, r5 = {}), r5 = Up(Up({}, r5), {}, { rawParameter: t4 }), e4._call([], [], r5, n4);
            }, send: function() {
              var r5 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e4.tronWeb.defaultPrivateKey, o3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
              return ip.isFunction(n4) && (o3 = n4, n4 = e4.tronWeb.defaultPrivateKey), ip.isFunction(r5) && (o3 = r5, r5 = {}), r5 = Up(Up({}, r5), {}, { rawParameter: t4 }), e4._send([], [], r5, n4, o3);
            }, watch: function() {
              return e4._watch.apply(e4, arguments);
            } };
          } }, { key: "_call", value: (n2 = p()(E().mark(function e4(t4, r4) {
            var n3, o2, a2, i2, s2 = this, u2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (n3 = u2.length > 2 && void 0 !== u2[2] ? u2[2] : {}, o2 = u2.length > 3 && void 0 !== u2[3] && u2[3], ip.isFunction(n3) && (o2 = n3, n3 = {}), o2) {
                    e5.next = 5;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this._call, t4, r4, n3));
                case 5:
                  if (t4.length === r4.length) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", o2("Invalid argument count provided"));
                case 7:
                  if (this.contract.address) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return", o2("Smart contract is missing address"));
                case 9:
                  if (this.contract.deployed) {
                    e5.next = 11;
                    break;
                  }
                  return e5.abrupt("return", o2("Calling smart contracts requires you to load the contract first"));
                case 11:
                  if (a2 = this.abi.stateMutability, ["pure", "view"].includes(a2.toLowerCase())) {
                    e5.next = 14;
                    break;
                  }
                  return e5.abrupt("return", o2('Methods with state mutability "'.concat(a2, '" must use send()')));
                case 14:
                  n3 = Up(Up(Up({}, this.defaultOptions), {}, { from: this.tronWeb.defaultAddress.hex }, n3), {}, { _isConstant: true }), i2 = r4.map(function(e6, r5) {
                    return { type: t4[r5], value: e6 };
                  }), this.tronWeb.transactionBuilder.triggerSmartContract(this.contract.address, this.functionSelector, n3, i2, !!n3.from && this.tronWeb.address.toHex(n3.from), function(e6, t5) {
                    if (e6) return o2(e6);
                    if (!ip.hasProperty(t5, "constant_result")) return o2("Failed to execute");
                    try {
                      var r5 = t5.constant_result[0].length;
                      if (0 === r5 || r5 % 64 == 8) {
                        var n4 = "The call has been reverted or has thrown an error.";
                        if (0 !== r5) {
                          n4 += " Error message: ";
                          for (var a3 = "", i3 = t5.constant_result[0].substring(8), u3 = 0; u3 < r5 - 8; u3 += 64) a3 += s2.tronWeb.toUtf8(i3.substring(u3, u3 + 64));
                          n4 += a3.replace(/(\u0000|\u000b|\f)+/g, " ").replace(/ +/g, " ").replace(/\s+$/g, "");
                        }
                        return o2(n4);
                      }
                      var c2 = xp(s2.abi, "0x" + t5.constant_result[0]);
                      return 1 === c2.length && 1 === Object.keys(c2).length && (c2 = c2[0]), o2(null, c2);
                    } catch (e7) {
                      return o2(e7);
                    }
                  });
                case 17:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4) {
            return n2.apply(this, arguments);
          }) }, { key: "_send", value: (r3 = p()(E().mark(function e4(t4, r4) {
            var n3, o2, a2, i2, s2, u2, c2, l2, d2, f2, g2, h2 = this, y2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (n3 = y2.length > 2 && void 0 !== y2[2] ? y2[2] : {}, o2 = y2.length > 3 && void 0 !== y2[3] ? y2[3] : this.tronWeb.defaultPrivateKey, a2 = y2.length > 4 && void 0 !== y2[4] && y2[4], ip.isFunction(o2) && (a2 = o2, o2 = this.tronWeb.defaultPrivateKey), ip.isFunction(n3) && (a2 = n3, n3 = {}), a2) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this._send, t4, r4, n3, o2));
                case 7:
                  if (t4.length === r4.length) {
                    e5.next = 9;
                    break;
                  }
                  throw new Error("Invalid argument count provided");
                case 9:
                  if (this.contract.address) {
                    e5.next = 11;
                    break;
                  }
                  return e5.abrupt("return", a2("Smart contract is missing address"));
                case 11:
                  if (this.contract.deployed) {
                    e5.next = 13;
                    break;
                  }
                  return e5.abrupt("return", a2("Calling smart contracts requires you to load the contract first"));
                case 13:
                  if (i2 = this.abi.stateMutability, !["pure", "view"].includes(i2.toLowerCase())) {
                    e5.next = 16;
                    break;
                  }
                  return e5.abrupt("return", a2('Methods with state mutability "'.concat(i2, '" must use call()')));
                case 16:
                  return ["payable"].includes(i2.toLowerCase()) || (n3.callValue = 0), n3 = Up(Up({}, this.defaultOptions), {}, { from: this.tronWeb.defaultAddress.hex }, n3), s2 = r4.map(function(e6, r5) {
                    return { type: t4[r5], value: e6 };
                  }), e5.prev = 19, u2 = o2 ? this.tronWeb.address.fromPrivateKey(o2) : this.tronWeb.defaultAddress.base58, e5.next = 23, this.tronWeb.transactionBuilder.triggerSmartContract(this.contract.address, this.functionSelector, n3, s2, this.tronWeb.address.toHex(u2));
                case 23:
                  if ((c2 = e5.sent).result && c2.result.result) {
                    e5.next = 26;
                    break;
                  }
                  return e5.abrupt("return", a2("Unknown error: " + JSON.stringify(c2, null, 2)));
                case 26:
                  return e5.next = 28, this.tronWeb.trx.sign(c2.transaction, o2);
                case 28:
                  if ((l2 = e5.sent).signature) {
                    e5.next = 33;
                    break;
                  }
                  if (o2) {
                    e5.next = 32;
                    break;
                  }
                  return e5.abrupt("return", a2("Transaction was not signed properly"));
                case 32:
                  return e5.abrupt("return", a2("Invalid private key provided"));
                case 33:
                  return e5.next = 35, this.tronWeb.trx.sendRawTransaction(l2);
                case 35:
                  if (!(d2 = e5.sent).code) {
                    e5.next = 40;
                    break;
                  }
                  return f2 = { error: d2.code, message: d2.code }, d2.message && (f2.message = this.tronWeb.toUtf8(d2.message)), e5.abrupt("return", a2(f2));
                case 40:
                  if (n3.shouldPollResponse) {
                    e5.next = 42;
                    break;
                  }
                  return e5.abrupt("return", a2(null, l2.txID));
                case 42:
                  g2 = function() {
                    var e6 = p()(E().mark(function e7() {
                      var t5, r5, o3, i3 = arguments;
                      return E().wrap(function(e8) {
                        for (; ; ) switch (e8.prev = e8.next) {
                          case 0:
                            if ((t5 = i3.length > 0 && void 0 !== i3[0] ? i3[0] : 0) !== (n3.pollTimes || 20)) {
                              e8.next = 3;
                              break;
                            }
                            return e8.abrupt("return", a2({ error: "Cannot find result in solidity node", transaction: l2 }));
                          case 3:
                            return e8.next = 5, h2.tronWeb.trx.getTransactionInfo(l2.txID);
                          case 5:
                            if (r5 = e8.sent, Object.keys(r5).length) {
                              e8.next = 8;
                              break;
                            }
                            return e8.abrupt("return", setTimeout(function() {
                              g2(t5 + 1);
                            }, 3e3));
                          case 8:
                            if (!r5.result || "FAILED" !== r5.result) {
                              e8.next = 10;
                              break;
                            }
                            return e8.abrupt("return", a2({ error: h2.tronWeb.toUtf8(r5.resMessage), transaction: l2, output: r5 }));
                          case 10:
                            if (ip.hasProperty(r5, "contractResult")) {
                              e8.next = 12;
                              break;
                            }
                            return e8.abrupt("return", a2({ error: "Failed to execute: " + JSON.stringify(r5, null, 2), transaction: l2, output: r5 }));
                          case 12:
                            if (!n3.rawResponse) {
                              e8.next = 14;
                              break;
                            }
                            return e8.abrupt("return", a2(null, r5));
                          case 14:
                            if (1 === (o3 = xp(h2.abi, "0x" + r5.contractResult[0])).length && 1 === Object.keys(o3).length && (o3 = o3[0]), !n3.keepTxID) {
                              e8.next = 18;
                              break;
                            }
                            return e8.abrupt("return", a2(null, [l2.txID, o3]));
                          case 18:
                            return e8.abrupt("return", a2(null, o3));
                          case 19:
                          case "end":
                            return e8.stop();
                        }
                      }, e7);
                    }));
                    return function() {
                      return e6.apply(this, arguments);
                    };
                  }(), g2(), e5.next = 49;
                  break;
                case 46:
                  return e5.prev = 46, e5.t0 = e5.catch(19), e5.abrupt("return", a2(e5.t0));
                case 49:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[19, 46]]);
          })), function(e4, t4) {
            return r3.apply(this, arguments);
          }) }, { key: "_watch", value: (t3 = p()(E().mark(function e4() {
            var t4, r4, n3, o2, a2, i2, s2, u2 = this, c2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = c2.length > 0 && void 0 !== c2[0] ? c2[0] : {}, r4 = c2.length > 1 && void 0 !== c2[1] && c2[1], ip.isFunction(t4) && (r4 = t4, t4 = {}), ip.isFunction(r4)) {
                    e5.next = 5;
                    break;
                  }
                  throw new Error("Expected callback to be provided");
                case 5:
                  if (this.contract.address) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", r4("Smart contract is missing address"));
                case 7:
                  if (this.abi.type && /event/i.test(this.abi.type)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return", r4("Invalid method type for event watching"));
                case 9:
                  if (this.tronWeb.eventServer) {
                    e5.next = 11;
                    break;
                  }
                  return e5.abrupt("return", r4("No event server configured"));
                case 11:
                  return n3 = false, o2 = false, a2 = Date.now() - 1e3, i2 = function() {
                    var e6 = p()(E().mark(function e7() {
                      var r5, n4, i3, s3, c3, l2;
                      return E().wrap(function(e8) {
                        for (; ; ) switch (e8.prev = e8.next) {
                          case 0:
                            return e8.prev = 0, r5 = { since: a2, eventName: u2.name, sort: "block_timestamp", blockNumber: "latest", filters: t4.filters }, t4.size && (r5.size = t4.size), t4.resourceNode && (/full/i.test(t4.resourceNode) ? r5.onlyUnconfirmed = true : r5.onlyConfirmed = true), e8.next = 6, u2.tronWeb.event.getEventsByContractAddress(u2.contract.address, r5);
                          case 6:
                            return n4 = e8.sent, i3 = n4.sort(function(e9, t5) {
                              return t5.block - e9.block;
                            }), s3 = wo()(i3, 1), c3 = s3[0], l2 = n4.filter(function(e9, r6) {
                              return !(t4.resourceNode && e9.resourceNode && t4.resourceNode.toLowerCase() !== e9.resourceNode.toLowerCase() || n4.slice(0, r6).some(function(t5) {
                                return JSON.stringify(t5) == JSON.stringify(e9);
                              }) || o2 && !(e9.block > o2));
                            }), c3 && (o2 = c3.block), e8.abrupt("return", l2);
                          case 13:
                            return e8.prev = 13, e8.t0 = e8.catch(0), e8.abrupt("return", Promise.reject(e8.t0));
                          case 16:
                          case "end":
                            return e8.stop();
                        }
                      }, e7, null, [[0, 13]]);
                    }));
                    return function() {
                      return e6.apply(this, arguments);
                    };
                  }(), s2 = function() {
                    n3 && clearInterval(n3), n3 = setInterval(function() {
                      i2().then(function(e6) {
                        return e6.forEach(function(e7) {
                          r4(null, ip.parseEvent(e7, u2.abi));
                        });
                      }).catch(function(e6) {
                        return r4(e6);
                      });
                    }, 3e3);
                  }, e5.next = 18, i2();
                case 18:
                  return s2(), e5.abrupt("return", { start: s2, stop: function() {
                    n3 && (clearInterval(n3), n3 = false);
                  } });
                case 20:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return t3.apply(this, arguments);
          }) }]), e3;
        }(), _p = function() {
          function e3() {
            var t4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            if (y()(this, e3), !t4 || !t4 instanceof Qp) throw new Error("Expected instance of TronWeb");
            this.tronWeb = t4, this.injectPromise = gp()(this), this.address = n3, this.abi = r4, this.eventListener = false, this.bytecode = false, this.deployed = false, this.lastBlock = false, this.methods = {}, this.methodInstances = {}, this.props = [], this.tronWeb.isAddress(n3) ? this.deployed = true : this.address = false, this.loadAbi(r4);
          }
          var t3, r3, n2, o2;
          return T()(e3, [{ key: "_getEvents", value: (o2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a2, i2, s2 = this, u2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return t4 = u2.length > 0 && void 0 !== u2[0] ? u2[0] : {}, e5.next = 3, this.tronWeb.event.getEventsByContractAddress(this.address, t4);
                case 3:
                  return r4 = e5.sent, n3 = r4.sort(function(e6, t5) {
                    return t5.block - e6.block;
                  }), o3 = wo()(n3, 1), a2 = o3[0], i2 = r4.filter(function(e6, n4) {
                    return !(t4.resourceNode && e6.resourceNode && t4.resourceNode.toLowerCase() !== e6.resourceNode.toLowerCase() || r4.slice(0, n4).some(function(t5) {
                      return JSON.stringify(t5) == JSON.stringify(e6);
                    }) || s2.lastBlock && !(e6.block > s2.lastBlock));
                  }), a2 && (this.lastBlock = a2.block), e5.abrupt("return", i2);
                case 8:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return o2.apply(this, arguments);
          }) }, { key: "_startEventListener", value: (n2 = p()(E().mark(function e4() {
            var t4, r4, n3 = this, o3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = o3.length > 0 && void 0 !== o3[0] ? o3[0] : {}, r4 = o3.length > 1 ? o3[1] : void 0, ip.isFunction(t4) && (r4 = t4, t4 = {}), this.eventListener && clearInterval(this.eventListener), this.tronWeb.eventServer) {
                    e5.next = 6;
                    break;
                  }
                  throw new Error("Event server is not configured");
                case 6:
                  if (this.address) {
                    e5.next = 8;
                    break;
                  }
                  throw new Error("Contract is not configured with an address");
                case 8:
                  return this.eventCallback = r4, e5.next = 11, this._getEvents(t4);
                case 11:
                  this.eventListener = setInterval(function() {
                    n3._getEvents(t4).then(function(e6) {
                      return e6.forEach(function(e7) {
                        n3.eventCallback && n3.eventCallback(e7);
                      });
                    }).catch(function(e6) {
                      console.error("Failed to get event list", e6);
                    });
                  }, 3e3);
                case 12:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return n2.apply(this, arguments);
          }) }, { key: "_stopEventListener", value: function() {
            this.eventListener && (clearInterval(this.eventListener), this.eventListener = false, this.eventCallback = false);
          } }, { key: "hasProperty", value: function(e4) {
            return this.hasOwnProperty(e4) || this.__proto__.hasOwnProperty(e4);
          } }, { key: "loadAbi", value: function(e4) {
            var t4 = this;
            this.abi = e4, this.methods = {}, this.props.forEach(function(e5) {
              return delete t4[e5];
            }), e4.forEach(function(e5) {
              if (e5.type && !/constructor|error/i.test(e5.type)) {
                var r4 = new Jp(t4, e5), n3 = r4.onMethod.bind(r4), o3 = r4.name, a2 = r4.functionSelector, i2 = r4.signature;
                t4.methods[o3] = n3, t4.methods[a2] = n3, t4.methods[i2] = n3, t4.methodInstances[o3] = r4, t4.methodInstances[a2] = r4, t4.methodInstances[i2] = r4, t4.hasProperty(o3) || (t4[o3] = n3, t4.props.push(o3)), t4.hasProperty(a2) || (t4[a2] = n3, t4.props.push(a2)), t4.hasProperty(i2) || (t4[i2] = n3, t4.props.push(i2));
              }
            });
          } }, { key: "decodeInput", value: function(e4) {
            var t4 = e4.substring(0, 8), r4 = e4.substring(8);
            if (!this.methodInstances[t4]) throw new Error("Contract method " + t4 + " not found");
            return { name: this.methodInstances[t4].name, params: this.methodInstances[t4].decodeInput(r4) };
          } }, { key: "new", value: (r3 = p()(E().mark(function e4(t4) {
            var r4, n3, o3, a2, i2, s2, u2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (r4 = u2.length > 1 && void 0 !== u2[1] ? u2[1] : this.tronWeb.defaultPrivateKey, n3 = u2.length > 2 && void 0 !== u2[2] && u2[2], ip.isFunction(r4) && (n3 = r4, r4 = this.tronWeb.defaultPrivateKey), n3) {
                    e5.next = 5;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.new, t4, r4));
                case 5:
                  return e5.prev = 5, o3 = this.tronWeb.address.fromPrivateKey(r4), e5.next = 9, this.tronWeb.transactionBuilder.createSmartContract(t4, o3);
                case 9:
                  return a2 = e5.sent, e5.next = 12, this.tronWeb.trx.sign(a2, r4);
                case 12:
                  return i2 = e5.sent, e5.next = 15, this.tronWeb.trx.sendRawTransaction(i2);
                case 15:
                  if (!(s2 = e5.sent).code) {
                    e5.next = 18;
                    break;
                  }
                  return e5.abrupt("return", n3({ error: s2.code, message: this.tronWeb.toUtf8(s2.message) }));
                case 18:
                  return e5.next = 20, ip.sleep(3e3);
                case 20:
                  return e5.abrupt("return", this.at(i2.contract_address, n3));
                case 23:
                  return e5.prev = 23, e5.t0 = e5.catch(5), e5.abrupt("return", n3(e5.t0));
                case 26:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[5, 23]]);
          })), function(e4) {
            return r3.apply(this, arguments);
          }) }, { key: "at", value: (t3 = p()(E().mark(function e4(t4) {
            var r4, n3, o3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (r4 = o3.length > 1 && void 0 !== o3[1] && o3[1]) {
                    e5.next = 3;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.at, t4));
                case 3:
                  return e5.prev = 3, e5.next = 6, this.tronWeb.trx.getContract(t4);
                case 6:
                  if ((n3 = e5.sent).contract_address) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return", r4("Unknown error: " + JSON.stringify(n3, null, 2)));
                case 9:
                  return this.address = n3.contract_address, this.bytecode = n3.bytecode, this.deployed = true, this.loadAbi(n3.abi && n3.abi.entrys ? n3.abi.entrys : []), e5.abrupt("return", r4(null, this));
                case 16:
                  if (e5.prev = 16, e5.t0 = e5.catch(3), !e5.t0.toString().includes("does not exist")) {
                    e5.next = 20;
                    break;
                  }
                  return e5.abrupt("return", r4("Contract has not been deployed on the network"));
                case 20:
                  return e5.abrupt("return", r4(e5.t0));
                case 21:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[3, 16]]);
          })), function(e4) {
            return t3.apply(this, arguments);
          }) }, { key: "events", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if (ip.isFunction(e4) && (t4 = e4, e4 = {}), !ip.isFunction(t4)) throw new Error("Callback function expected");
            var r4 = this;
            return { start: function() {
              var n3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              return n3 ? (r4._startEventListener(e4, t4).then(function() {
                n3();
              }).catch(function(e5) {
                n3(e5);
              }), this) : (r4._startEventListener(e4, t4), this);
            }, stop: function() {
              r4._stopEventListener();
            } };
          } }]), e3;
        }(), zp = function() {
          function e3() {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (y()(this, e3), !t3 || !t3 instanceof Qp) throw new Error("Expected instance of TronWeb");
            this.tronWeb = t3, this.pluginNoOverride = ["register"], this.disablePlugins = r3.disablePlugins;
          }
          return T()(e3, [{ key: "register", value: function(e4, t3) {
            var r3 = { requires: "0.0.0", components: {} }, n2 = { libs: [], plugged: [], skipped: [] };
            if (this.disablePlugins) return n2.error = "This instance of TronWeb has plugins disabled.", n2;
            var o2 = new e4(this.tronWeb);
            if (ip.isFunction(o2.pluginInterface) && (r3 = o2.pluginInterface(t3)), !pp().satisfies(Qp.version, r3.requires)) throw new Error("The plugin is not compatible with this version of TronWeb");
            if (r3.fullClass) {
              var a2 = o2.constructor.name, i2 = a2.substring(0, 1).toLowerCase() + a2.substring(1);
              a2 !== i2 && (Qp[a2] = e4, this.tronWeb[i2] = o2, n2.libs.push(a2));
            } else for (var s2 in r3.components) if (this.tronWeb.hasOwnProperty(s2)) {
              var u2 = r3.components[s2], c2 = this.tronWeb[s2].pluginNoOverride || [];
              for (var l2 in u2) "constructor" === l2 || this.tronWeb[s2][l2] && (c2.includes(l2) || /^_/.test(l2)) ? n2.skipped.push(l2) : (this.tronWeb[s2][l2] = u2[l2].bind(this.tronWeb[s2]), n2.plugged.push(l2));
            }
            return n2;
          } }]), e3;
        }();
        const Gp = require_querystring_es3();
        var jp = r2.n(Gp), Vp = function() {
          function e3() {
            var t3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (y()(this, e3), !(t3 && t3 instanceof Qp)) throw new Error("Expected instance of TronWeb");
            this.tronWeb = t3, this.injectPromise = gp()(this);
          }
          return T()(e3, [{ key: "setServer", value: function() {
            var e4 = this, t3 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], r3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "healthcheck";
            if (!t3) return this.tronWeb.eventServer = false;
            if (ip.isString(t3) && (t3 = new up.HttpProvider(t3)), !this.tronWeb.isValidProvider(t3)) throw new Error("Invalid event server provided");
            this.tronWeb.eventServer = t3, this.tronWeb.eventServer.isConnected = function() {
              return e4.tronWeb.eventServer.request(r3).then(function() {
                return true;
              }).catch(function() {
                return false;
              });
            };
          } }, { key: "getEventsByContractAddress", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n2 = Object.assign({ sinceTimestamp: 0, eventName: false, blockNumber: false, size: 20, page: 1 }, t3), o2 = n2.sinceTimestamp, a2 = n2.since, i2 = n2.fromTimestamp, s2 = n2.eventName, u2 = n2.blockNumber, c2 = n2.size, l2 = n2.page, d2 = n2.onlyConfirmed, p2 = n2.onlyUnconfirmed, f2 = n2.previousLastEventFingerprint, h2 = n2.previousFingerprint, y2 = n2.fingerprint, b2 = n2.rawResponse, T2 = n2.sort, v2 = n2.filters;
            if (!r3) return this.injectPromise(this.getEventsByContractAddress, e4, t3);
            if (i2 = i2 || o2 || a2, !this.tronWeb.eventServer) return r3("No event server configured");
            var m2 = [];
            if (!this.tronWeb.isAddress(e4)) return r3("Invalid contract address provided");
            if (s2 && !e4) return r3("Usage of event name filtering requires a contract address");
            if (void 0 !== i2 && !ip.isInteger(i2)) return r3("Invalid fromTimestamp provided");
            if (!ip.isInteger(c2)) return r3("Invalid size provided");
            if (c2 > 200 && (console.warn("Defaulting to maximum accepted size: 200"), c2 = 200), !ip.isInteger(l2)) return r3("Invalid page provided");
            if (u2 && !s2) return r3("Usage of block number filtering requires an event name");
            e4 && m2.push(this.tronWeb.address.fromHex(e4)), s2 && m2.push(s2), u2 && m2.push(u2);
            var A2 = { size: c2, page: l2 };
            return "object" === g()(v2) && Object.keys(v2).length > 0 && (A2.filters = JSON.stringify(v2)), i2 && (A2.fromTimestamp = A2.since = i2), d2 && (A2.only_confirmed = d2), p2 && !d2 && (A2.only_unconfirmed = p2), T2 && (A2.sort = T2), (y2 = y2 || h2 || f2) && (A2.fingerprint = y2), this.tronWeb.eventServer.request("event/contract/".concat(m2.join("/"), "?").concat(jp().stringify(A2))).then(function() {
              var e5 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              return e5 ? ip.isArray(e5) ? r3(null, true === b2 ? e5 : e5.map(function(e6) {
                return ip.mapEvent(e6);
              })) : r3(e5) : r3("Unknown error occurred");
            }).catch(function(e5) {
              return r3(e5.response && e5.response.data || e5);
            });
          } }, { key: "getEventsByTransactionID", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
            return ip.isFunction(t3) && (r3 = t3, t3 = {}), r3 ? this.tronWeb.eventServer ? this.tronWeb.eventServer.request("event/transaction/".concat(e4)).then(function() {
              var e5 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              return e5 ? ip.isArray(e5) ? r3(null, true === t3.rawResponse ? e5 : e5.map(function(e6) {
                return ip.mapEvent(e6);
              })) : r3(e5) : r3("Unknown error occurred");
            }).catch(function(e5) {
              return r3(e5.response && e5.response.data || e5);
            }) : r3("No event server configured") : this.injectPromise(this.getEventsByTransactionID, e4, t3);
          } }]), e3;
        }();
        function Xp(e3, t3) {
          var r3 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(e3);
            t3 && (n2 = n2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r3.push.apply(r3, n2);
          }
          return r3;
        }
        function Hp(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r3 = null != arguments[t3] ? arguments[t3] : {};
            t3 % 2 ? Xp(Object(r3), true).forEach(function(t4) {
              I()(e3, t4, r3[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r3)) : Xp(Object(r3)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r3, t4));
            });
          }
          return e3;
        }
        var $p = function() {
          function e3(t4) {
            var r4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], o3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
            y()(this, e3), this.mainchain = n3;
            var a3 = t4.fullHost, i3 = t4.fullNode, s3 = t4.solidityNode, u3 = t4.eventServer, c3 = t4.mainGatewayAddress, l3 = t4.sideGatewayAddress, d3 = t4.sideChainId;
            this.sidechain = new r4(a3 || i3, a3 || s3, a3 || u3, o3), this.isAddress = this.mainchain.isAddress, this.utils = this.mainchain.utils, this.setMainGatewayAddress(c3), this.setSideGatewayAddress(l3), this.setChainId(d3), this.injectPromise = gp()(this), this.validator = new bp(this.sidechain);
            var p2 = this;
            this.sidechain.trx.sign = function() {
              return p2.sign.apply(p2, arguments);
            }, this.sidechain.trx.multiSign = function() {
              return p2.multiSign.apply(p2, arguments);
            }, console.warn("TronWeb: 'tronWeb.sidechain' is deprecated and may be removed in the future. Please use the 'sunweb' sdk instead. For more information, see: https://github.com/tronprotocol/sun-network/tree/develop/js-sdk");
          }
          var t3, r3, n2, o2, a2, i2, s2, u2, c2, l2, d2, f2, g2, h2, b2, v2, m2, A2, P2, W2, B2;
          return T()(e3, [{ key: "setMainGatewayAddress", value: function(e4) {
            if (!this.isAddress(e4)) throw new Error("Invalid main gateway address provided");
            this.mainGatewayAddress = e4;
          } }, { key: "setSideGatewayAddress", value: function(e4) {
            if (!this.isAddress(e4)) throw new Error("Invalid side gateway address provided");
            this.sideGatewayAddress = e4;
          } }, { key: "setChainId", value: function(e4) {
            if (!this.utils.isString(e4) || !e4) throw new Error("Invalid side chainId provided");
            this.chainId = e4;
          } }, { key: "signTransaction", value: function(e4, t4) {
            "string" == typeof e4 && (e4 = this.utils.code.hexStr2byteArray(e4));
            var r4 = this.utils.code.hexStr2byteArray(this.chainId), n3 = this.utils.code.hexStr2byteArray(t4.txID).concat(r4), o3 = this.sidechain.utils.ethersUtils.sha256(n3), a3 = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(o3.replace(/^0x/, "")), e4);
            return Array.isArray(t4.signature) ? t4.signature.includes(a3) || t4.signature.push(a3) : t4.signature = [a3], t4;
          } }, { key: "multiSign", value: (B2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3, i3, s3, u3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = u3.length > 0 && void 0 !== u3[0] && u3[0], r4 = u3.length > 1 && void 0 !== u3[1] ? u3[1] : this.sidechain.defaultPrivateKey, n3 = u3.length > 2 && void 0 !== u3[2] && u3[2], o3 = u3.length > 3 && void 0 !== u3[3] && u3[3], this.utils.isFunction(n3) && (o3 = n3, n3 = 0), this.utils.isFunction(r4) && (o3 = r4, r4 = this.mainchain.defaultPrivateKey, n3 = 0), o3) {
                    e5.next = 8;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.multiSign, t4, r4, n3));
                case 8:
                  if (this.utils.isObject(t4) && t4.raw_data && t4.raw_data.contract) {
                    e5.next = 10;
                    break;
                  }
                  return e5.abrupt("return", o3("Invalid transaction provided"));
                case 10:
                  if (t4.raw_data.contract[0].Permission_id || !(n3 > 0)) {
                    e5.next = 30;
                    break;
                  }
                  return t4.raw_data.contract[0].Permission_id = n3, a3 = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(r4)).toLowerCase(), e5.next = 15, this.sidechain.trx.getSignWeight(t4, n3);
                case 15:
                  if ("PERMISSION_ERROR" !== (i3 = e5.sent).result.code) {
                    e5.next = 18;
                    break;
                  }
                  return e5.abrupt("return", o3(i3.result.message));
                case 18:
                  if (s3 = false, i3.permission.keys.map(function(e6) {
                    e6.address === a3 && (s3 = true);
                  }), s3) {
                    e5.next = 22;
                    break;
                  }
                  return e5.abrupt("return", o3(r4 + " has no permission to sign"));
                case 22:
                  if (!i3.approved_list || -1 == i3.approved_list.indexOf(a3)) {
                    e5.next = 24;
                    break;
                  }
                  return e5.abrupt("return", o3(r4 + " already sign transaction"));
                case 24:
                  if (!i3.transaction || !i3.transaction.transaction) {
                    e5.next = 29;
                    break;
                  }
                  (t4 = i3.transaction.transaction).raw_data.contract[0].Permission_id = n3, e5.next = 30;
                  break;
                case 29:
                  return e5.abrupt("return", o3("Invalid transaction provided"));
                case 30:
                  return e5.prev = 30, e5.abrupt("return", o3(null, this.signTransaction(r4, t4)));
                case 34:
                  e5.prev = 34, e5.t0 = e5.catch(30), o3(e5.t0);
                case 37:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[30, 34]]);
          })), function() {
            return B2.apply(this, arguments);
          }) }, { key: "sign", value: (W2 = p()(E().mark(function e4() {
            var t4, r4, n3, o3, a3, i3, s3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = s3.length > 0 && void 0 !== s3[0] && s3[0], r4 = s3.length > 1 && void 0 !== s3[1] ? s3[1] : this.sidechain.defaultPrivateKey, n3 = !(s3.length > 2 && void 0 !== s3[2]) || s3[2], o3 = s3.length > 3 && void 0 !== s3[3] && s3[3], a3 = s3.length > 4 && void 0 !== s3[4] && s3[4], this.utils.isFunction(o3) && (a3 = o3, o3 = false), this.utils.isFunction(n3) && (a3 = n3, n3 = true, o3 = false), this.utils.isFunction(r4) && (a3 = r4, r4 = this.sidechain.defaultPrivateKey, n3 = true, o3 = false), a3) {
                    e5.next = 10;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.sign, t4, r4, n3, o3));
                case 10:
                  if (!this.utils.isString(t4)) {
                    e5.next = 21;
                    break;
                  }
                  if (this.utils.isHex(t4)) {
                    e5.next = 13;
                    break;
                  }
                  return e5.abrupt("return", a3("Expected hex message input"));
                case 13:
                  return e5.prev = 13, i3 = this.sidechain.trx.signString(t4, r4, n3), e5.abrupt("return", a3(null, i3));
                case 18:
                  e5.prev = 18, e5.t0 = e5.catch(13), a3(e5.t0);
                case 21:
                  if (this.utils.isObject(t4)) {
                    e5.next = 23;
                    break;
                  }
                  return e5.abrupt("return", a3("Invalid transaction provided"));
                case 23:
                  if (o3 || !t4.signature) {
                    e5.next = 25;
                    break;
                  }
                  return e5.abrupt("return", a3("Transaction is already signed"));
                case 25:
                  if (e5.prev = 25, o3) {
                    e5.next = 30;
                    break;
                  }
                  if (this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(r4)).toLowerCase() === this.sidechain.address.toHex(t4.raw_data.contract[0].parameter.value.owner_address)) {
                    e5.next = 30;
                    break;
                  }
                  return e5.abrupt("return", a3("Private key does not match address in transaction"));
                case 30:
                  return e5.abrupt("return", a3(null, this.signTransaction(r4, t4)));
                case 33:
                  e5.prev = 33, e5.t1 = e5.catch(25), a3(e5.t1);
                case 36:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[13, 18], [25, 33]]);
          })), function() {
            return W2.apply(this, arguments);
          }) }, { key: "depositTrx", value: (P2 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i3, s3, u3, c3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (o3 = c3.length > 3 && void 0 !== c3[3] ? c3[3] : {}, a3 = c3.length > 4 && void 0 !== c3[4] ? c3[4] : this.mainchain.defaultPrivateKey, i3 = c3.length > 5 && void 0 !== c3[5] && c3[5], this.utils.isFunction(a3) && (i3 = a3, a3 = this.mainchain.defaultPrivateKey), this.utils.isFunction(o3) && (i3 = o3, o3 = {}), i3) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.depositTrx, t4, r4, n3, o3, a3));
                case 7:
                  if (!this.validator.notValid([{ name: "callValue", type: "integer", value: t4, gte: 0 }, { name: "depositFee", type: "integer", value: r4, gte: 0 }, { name: "feeLimit", type: "integer", value: n3, gte: 0 }], i3)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return");
                case 9:
                  return o3 = Hp({ callValue: Number(t4) + Number(r4), feeLimit: n3 }, o3), e5.prev = 10, e5.next = 13, this.mainchain.contract().at(this.mainGatewayAddress);
                case 13:
                  return s3 = e5.sent, e5.next = 16, s3.depositTRX().send(o3, a3);
                case 16:
                  return u3 = e5.sent, e5.abrupt("return", i3(null, u3));
                case 20:
                  return e5.prev = 20, e5.t0 = e5.catch(10), e5.abrupt("return", i3(e5.t0));
                case 23:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[10, 20]]);
          })), function(e4, t4, r4) {
            return P2.apply(this, arguments);
          }) }, { key: "depositTrc10", value: (A2 = p()(E().mark(function e4(t4, r4, n3, o3) {
            var a3, i3, s3, u3, c3, l3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (a3 = l3.length > 4 && void 0 !== l3[4] ? l3[4] : {}, i3 = l3.length > 5 && void 0 !== l3[5] ? l3[5] : this.mainchain.defaultPrivateKey, s3 = l3.length > 6 && void 0 !== l3[6] && l3[6], this.utils.isFunction(i3) && (s3 = i3, i3 = this.mainchain.defaultPrivateKey), this.utils.isFunction(a3) && (s3 = a3, a3 = {}), s3) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.depositTrc10, t4, r4, n3, o3, a3, i3));
                case 7:
                  if (!this.validator.notValid([{ name: "tokenValue", type: "integer", value: r4, gte: 0 }, { name: "depositFee", type: "integer", value: n3, gte: 0 }, { name: "feeLimit", type: "integer", value: o3, gte: 0 }, { name: "tokenId", type: "integer", value: t4, gte: 0 }], s3)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return");
                case 9:
                  return a3 = Hp(Hp({ tokenId: t4, tokenValue: r4, feeLimit: o3 }, a3), {}, { callValue: n3 }), e5.prev = 10, e5.next = 13, this.mainchain.contract().at(this.mainGatewayAddress);
                case 13:
                  return u3 = e5.sent, e5.next = 16, u3.depositTRC10(t4, r4).send(a3, i3);
                case 16:
                  c3 = e5.sent, s3(null, c3), e5.next = 23;
                  break;
                case 20:
                  return e5.prev = 20, e5.t0 = e5.catch(10), e5.abrupt("return", s3(e5.t0));
                case 23:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[10, 20]]);
          })), function(e4, t4, r4, n3) {
            return A2.apply(this, arguments);
          }) }, { key: "depositTrc", value: (m2 = p()(E().mark(function e4(t4, r4, n3, o3, a3) {
            var i3, s3, u3, c3, l3, d3, p2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (i3 = p2.length > 5 && void 0 !== p2[5] ? p2[5] : {}, s3 = p2.length > 6 && void 0 !== p2[6] ? p2[6] : this.mainchain.defaultPrivateKey, u3 = p2.length > 7 && void 0 !== p2[7] && p2[7], this.utils.isFunction(s3) && (u3 = s3, s3 = this.mainchain.defaultPrivateKey), this.utils.isFunction(i3) && (u3 = i3, i3 = {}), u3) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.depositTrc, t4, r4, n3, o3, a3, i3, s3));
                case 7:
                  if (!this.validator.notValid([{ name: "functionSelector", type: "not-empty-string", value: t4 }, { name: "num", type: "integer", value: r4, gte: 0 }, { name: "fee", type: "integer", value: n3, gte: 0 }, { name: "feeLimit", type: "integer", value: o3, gte: 0 }, { name: "contractAddress", type: "address", value: a3 }], u3)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return");
                case 9:
                  if (i3 = Hp(Hp({ feeLimit: o3 }, i3), {}, { callValue: n3, tokenId: "", tokenValue: 0 }), e5.prev = 10, c3 = null, "approve" !== t4) {
                    e5.next = 21;
                    break;
                  }
                  return e5.next = 15, this.mainchain.contract().at(a3);
                case 15:
                  return l3 = e5.sent, e5.next = 18, l3.approve(this.mainGatewayAddress, r4).send(i3, s3);
                case 18:
                  c3 = e5.sent, e5.next = 44;
                  break;
                case 21:
                  return e5.next = 23, this.mainchain.contract().at(this.mainGatewayAddress);
                case 23:
                  d3 = e5.sent, e5.t0 = t4, e5.next = "depositTRC20" === e5.t0 ? 27 : "depositTRC721" === e5.t0 ? 31 : "retryDeposit" === e5.t0 ? 35 : "retryMapping" === e5.t0 ? 39 : 43;
                  break;
                case 27:
                  return e5.next = 29, d3.depositTRC20(a3, r4).send(i3, s3);
                case 29:
                case 33:
                case 37:
                case 41:
                  return c3 = e5.sent, e5.abrupt("break", 44);
                case 31:
                  return e5.next = 33, d3.depositTRC721(a3, r4).send(i3, s3);
                case 35:
                  return e5.next = 37, d3.retryDeposit(r4).send(i3, s3);
                case 39:
                  return e5.next = 41, d3.retryMapping(r4).send(i3, s3);
                case 43:
                  return e5.abrupt("break", 44);
                case 44:
                  u3(null, c3), e5.next = 50;
                  break;
                case 47:
                  return e5.prev = 47, e5.t1 = e5.catch(10), e5.abrupt("return", u3(e5.t1));
                case 50:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[10, 47]]);
          })), function(e4, t4, r4, n3, o3) {
            return m2.apply(this, arguments);
          }) }, { key: "approveTrc20", value: (v2 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i3, s3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return o3 = s3.length > 3 && void 0 !== s3[3] ? s3[3] : {}, a3 = s3.length > 4 && void 0 !== s3[4] ? s3[4] : this.mainchain.defaultPrivateKey, i3 = s3.length > 5 && void 0 !== s3[5] && s3[5], e5.abrupt("return", this.depositTrc("approve", t4, 0, r4, n3, o3, a3, i3));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, r4) {
            return v2.apply(this, arguments);
          }) }, { key: "approveTrc721", value: (b2 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i3, s3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return o3 = s3.length > 3 && void 0 !== s3[3] ? s3[3] : {}, a3 = s3.length > 4 && void 0 !== s3[4] ? s3[4] : this.mainchain.defaultPrivateKey, i3 = s3.length > 5 && void 0 !== s3[5] && s3[5], e5.abrupt("return", this.depositTrc("approve", t4, 0, r4, n3, o3, a3, i3));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, r4) {
            return b2.apply(this, arguments);
          }) }, { key: "depositTrc20", value: (h2 = p()(E().mark(function e4(t4, r4, n3, o3) {
            var a3, i3, s3, u3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return a3 = u3.length > 4 && void 0 !== u3[4] ? u3[4] : {}, i3 = u3.length > 5 && void 0 !== u3[5] ? u3[5] : this.mainchain.defaultPrivateKey, s3 = u3.length > 6 && void 0 !== u3[6] && u3[6], e5.abrupt("return", this.depositTrc("depositTRC20", t4, r4, n3, o3, a3, i3, s3));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, r4, n3) {
            return h2.apply(this, arguments);
          }) }, { key: "depositTrc721", value: (g2 = p()(E().mark(function e4(t4, r4, n3, o3) {
            var a3, i3, s3, u3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return a3 = u3.length > 4 && void 0 !== u3[4] ? u3[4] : {}, i3 = u3.length > 5 && void 0 !== u3[5] ? u3[5] : this.mainchain.defaultPrivateKey, s3 = u3.length > 6 && void 0 !== u3[6] && u3[6], e5.abrupt("return", this.depositTrc("depositTRC721", t4, r4, n3, o3, a3, i3, s3));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, r4, n3) {
            return g2.apply(this, arguments);
          }) }, { key: "mappingTrc", value: (f2 = p()(E().mark(function e4(t4, r4, n3, o3) {
            var a3, i3, s3, u3, c3, l3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (a3 = l3.length > 4 && void 0 !== l3[4] ? l3[4] : {}, i3 = l3.length > 5 && void 0 !== l3[5] ? l3[5] : this.mainchain.defaultPrivateKey, s3 = l3.length > 6 ? l3[6] : void 0, this.utils.isFunction(i3) && (s3 = i3, i3 = this.mainchain.defaultPrivateKey), this.utils.isFunction(a3) && (s3 = a3, a3 = {}), s3) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.mappingTrc, t4, r4, n3, o3, a3, i3));
                case 7:
                  if (!this.validator.notValid([{ name: "trxHash", type: "not-empty-string", value: t4 }, { name: "mappingFee", type: "integer", value: r4, gte: 0 }, { name: "feeLimit", type: "integer", value: n3, gte: 0 }], s3)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return");
                case 9:
                  return t4 = t4.startsWith("0x") ? t4 : "0x" + t4, a3 = Hp(Hp({ feeLimit: n3 }, a3), {}, { callValue: r4 }), e5.prev = 11, e5.next = 14, this.mainchain.contract().at(this.mainGatewayAddress);
                case 14:
                  if (u3 = e5.sent, c3 = null, "mappingTRC20" !== o3) {
                    e5.next = 22;
                    break;
                  }
                  return e5.next = 19, u3.mappingTRC20(t4).send(a3, i3);
                case 19:
                  c3 = e5.sent, e5.next = 29;
                  break;
                case 22:
                  if ("mappingTRC721" !== o3) {
                    e5.next = 28;
                    break;
                  }
                  return e5.next = 25, u3.mappingTRC721(t4).send(a3, i3);
                case 25:
                  c3 = e5.sent, e5.next = 29;
                  break;
                case 28:
                  s3(new Error("type must be trc20 or trc721"));
                case 29:
                  s3(null, c3), e5.next = 35;
                  break;
                case 32:
                  return e5.prev = 32, e5.t0 = e5.catch(11), e5.abrupt("return", s3(e5.t0));
                case 35:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[11, 32]]);
          })), function(e4, t4, r4, n3) {
            return f2.apply(this, arguments);
          }) }, { key: "mappingTrc20", value: (d2 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i3, s3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return o3 = s3.length > 3 && void 0 !== s3[3] ? s3[3] : {}, a3 = s3.length > 4 && void 0 !== s3[4] ? s3[4] : this.mainchain.defaultPrivateKey, i3 = s3.length > 5 && void 0 !== s3[5] && s3[5], e5.abrupt("return", this.mappingTrc(t4, r4, n3, "mappingTRC20", o3, a3, i3));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, r4) {
            return d2.apply(this, arguments);
          }) }, { key: "mappingTrc721", value: (l2 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i3, s3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return o3 = s3.length > 3 && void 0 !== s3[3] ? s3[3] : {}, a3 = s3.length > 4 && void 0 !== s3[4] ? s3[4] : this.mainchain.defaultPrivateKey, i3 = s3.length > 5 && void 0 !== s3[5] && s3[5], e5.abrupt("return", this.mappingTrc(t4, r4, n3, "mappingTRC721", o3, a3, i3));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, r4) {
            return l2.apply(this, arguments);
          }) }, { key: "withdrawTrx", value: (c2 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i3, s3, u3, c3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (o3 = c3.length > 3 && void 0 !== c3[3] ? c3[3] : {}, a3 = c3.length > 4 && void 0 !== c3[4] ? c3[4] : this.mainchain.defaultPrivateKey, i3 = c3.length > 5 && void 0 !== c3[5] && c3[5], this.utils.isFunction(a3) && (i3 = a3, a3 = this.mainchain.defaultPrivateKey), this.utils.isFunction(o3) && (i3 = o3, o3 = {}), i3) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.withdrawTrx, t4, r4, n3, o3, a3));
                case 7:
                  if (!this.validator.notValid([{ name: "callValue", type: "integer", value: t4, gte: 0 }, { name: "withdrawFee", type: "integer", value: r4, gte: 0 }, { name: "feeLimit", type: "integer", value: n3, gte: 0 }], i3)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return");
                case 9:
                  return o3 = Hp({ callValue: Number(t4) + Number(r4), feeLimit: n3 }, o3), e5.prev = 10, e5.next = 13, this.sidechain.contract().at(this.sideGatewayAddress);
                case 13:
                  return s3 = e5.sent, e5.next = 16, s3.withdrawTRX().send(o3, a3);
                case 16:
                  return u3 = e5.sent, e5.abrupt("return", i3(null, u3));
                case 20:
                  return e5.prev = 20, e5.t0 = e5.catch(10), e5.abrupt("return", i3(e5.t0));
                case 23:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[10, 20]]);
          })), function(e4, t4, r4) {
            return c2.apply(this, arguments);
          }) }, { key: "withdrawTrc10", value: (u2 = p()(E().mark(function e4(t4, r4, n3, o3) {
            var a3, i3, s3, u3, c3, l3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (a3 = l3.length > 4 && void 0 !== l3[4] ? l3[4] : {}, i3 = l3.length > 5 && void 0 !== l3[5] ? l3[5] : this.mainchain.defaultPrivateKey, s3 = l3.length > 6 && void 0 !== l3[6] && l3[6], this.utils.isFunction(i3) && (s3 = i3, i3 = this.mainchain.defaultPrivateKey), this.utils.isFunction(a3) && (s3 = a3, a3 = {}), s3) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.withdrawTrc10, t4, r4, n3, o3, a3, i3));
                case 7:
                  if (!this.validator.notValid([{ name: "tokenId", type: "integer", value: t4, gte: 0 }, { name: "tokenValue", type: "integer", value: r4, gte: 0 }, { name: "withdrawFee", type: "integer", value: n3, gte: 0 }, { name: "feeLimit", type: "integer", value: o3, gte: 0 }], s3)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return");
                case 9:
                  return a3 = Hp({ tokenValue: r4, tokenId: t4, callValue: n3, feeLimit: o3 }, a3), e5.prev = 10, e5.next = 13, this.sidechain.contract().at(this.sideGatewayAddress);
                case 13:
                  return u3 = e5.sent, e5.next = 16, u3.withdrawTRC10(t4, r4).send(a3, i3);
                case 16:
                  return c3 = e5.sent, e5.abrupt("return", s3(null, c3));
                case 20:
                  return e5.prev = 20, e5.t0 = e5.catch(10), e5.abrupt("return", s3(e5.t0));
                case 23:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[10, 20]]);
          })), function(e4, t4, r4, n3) {
            return u2.apply(this, arguments);
          }) }, { key: "withdrawTrc", value: (s2 = p()(E().mark(function e4(t4, r4, n3, o3, a3) {
            var i3, s3, u3, c3, l3, d3, f3, g3, h3, y2, b3 = this, T2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (i3 = T2.length > 5 && void 0 !== T2[5] ? T2[5] : {}, s3 = T2.length > 6 && void 0 !== T2[6] ? T2[6] : this.mainchain.defaultPrivateKey, u3 = T2.length > 7 && void 0 !== T2[7] && T2[7], this.utils.isFunction(s3) && (u3 = s3, s3 = this.mainchain.defaultPrivateKey), this.utils.isFunction(i3) && (u3 = i3, i3 = {}), u3) {
                    e5.next = 7;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.withdrawTrc, t4, r4, n3, o3, a3, i3, s3));
                case 7:
                  if (!this.validator.notValid([{ name: "functionSelector", type: "not-empty-string", value: t4 }, { name: "numOrId", type: "integer", value: r4, gte: 0 }, { name: "withdrawFee", type: "integer", value: n3, gte: 0 }, { name: "feeLimit", type: "integer", value: o3, gte: 0 }, { name: "contractAddress", type: "address", value: a3 }], u3)) {
                    e5.next = 9;
                    break;
                  }
                  return e5.abrupt("return");
                case 9:
                  return i3 = Hp(Hp({ feeLimit: o3 }, i3), {}, { callValue: n3 }), c3 = [{ type: "uint256", value: r4 }], e5.prev = 11, l3 = s3 ? this.sidechain.address.fromPrivateKey(s3) : this.sidechain.defaultAddress.base58, e5.next = 15, this.sidechain.transactionBuilder.triggerSmartContract(a3, t4, i3, c3, this.sidechain.address.toHex(l3));
                case 15:
                  if ((d3 = e5.sent).result && d3.result.result) {
                    e5.next = 18;
                    break;
                  }
                  return e5.abrupt("return", u3("Unknown error: " + JSON.stringify(d3.transaction, null, 2)));
                case 18:
                  return e5.next = 20, this.sidechain.trx.sign(d3.transaction, s3);
                case 20:
                  if ((f3 = e5.sent).signature) {
                    e5.next = 25;
                    break;
                  }
                  if (s3) {
                    e5.next = 24;
                    break;
                  }
                  return e5.abrupt("return", u3("Transaction was not signed properly"));
                case 24:
                  return e5.abrupt("return", u3("Invalid private key provided"));
                case 25:
                  return e5.next = 27, this.sidechain.trx.sendRawTransaction(f3);
                case 27:
                  if (!(g3 = e5.sent).code) {
                    e5.next = 32;
                    break;
                  }
                  return h3 = { error: g3.code, message: g3.code }, g3.message && (h3.message = this.sidechain.toUtf8(g3.message)), e5.abrupt("return", u3(h3));
                case 32:
                  if (i3.shouldPollResponse) {
                    e5.next = 34;
                    break;
                  }
                  return e5.abrupt("return", u3(null, f3.txID));
                case 34:
                  y2 = function() {
                    var e6 = p()(E().mark(function e7() {
                      var t5, r5, n4, o4 = arguments;
                      return E().wrap(function(e8) {
                        for (; ; ) switch (e8.prev = e8.next) {
                          case 0:
                            if (20 != (t5 = o4.length > 0 && void 0 !== o4[0] ? o4[0] : 0)) {
                              e8.next = 3;
                              break;
                            }
                            return e8.abrupt("return", u3({ error: "Cannot find result in solidity node", transaction: f3 }));
                          case 3:
                            return e8.next = 5, b3.sidechain.trx.getTransactionInfo(f3.txID);
                          case 5:
                            if (r5 = e8.sent, Object.keys(r5).length) {
                              e8.next = 8;
                              break;
                            }
                            return e8.abrupt("return", setTimeout(function() {
                              y2(t5 + 1);
                            }, 3e3));
                          case 8:
                            if (!r5.result || "FAILED" != r5.result) {
                              e8.next = 10;
                              break;
                            }
                            return e8.abrupt("return", u3({ error: b3.sidechain.toUtf8(r5.resMessage), transaction: f3, output: r5 }));
                          case 10:
                            if (b3.utils.hasProperty(r5, "contractResult")) {
                              e8.next = 12;
                              break;
                            }
                            return e8.abrupt("return", u3({ error: "Failed to execute: " + JSON.stringify(r5, null, 2), transaction: f3, output: r5 }));
                          case 12:
                            if (!i3.rawResponse) {
                              e8.next = 14;
                              break;
                            }
                            return e8.abrupt("return", u3(null, r5));
                          case 14:
                            return 1 === (n4 = decodeOutput(b3.outputs, "0x" + r5.contractResult[0])).length && (n4 = n4[0]), e8.abrupt("return", u3(null, n4));
                          case 17:
                          case "end":
                            return e8.stop();
                        }
                      }, e7);
                    }));
                    return function() {
                      return e6.apply(this, arguments);
                    };
                  }(), y2(), e5.next = 41;
                  break;
                case 38:
                  return e5.prev = 38, e5.t0 = e5.catch(11), e5.abrupt("return", u3(e5.t0));
                case 41:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[11, 38]]);
          })), function(e4, t4, r4, n3, o3) {
            return s2.apply(this, arguments);
          }) }, { key: "withdrawTrc20", value: (i2 = p()(E().mark(function e4(t4, r4, n3, o3, a3) {
            var i3, s3, u3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return i3 = u3.length > 5 && void 0 !== u3[5] ? u3[5] : this.mainchain.defaultPrivateKey, s3 = u3.length > 6 && void 0 !== u3[6] && u3[6], e5.abrupt("return", this.withdrawTrc("withdrawal(uint256)", t4, r4, n3, o3, a3, i3, s3));
                case 4:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, r4, n3, o3) {
            return i2.apply(this, arguments);
          }) }, { key: "withdrawTrc721", value: (a2 = p()(E().mark(function e4(t4, r4, n3, o3, a3) {
            var i3, s3, u3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return i3 = u3.length > 5 && void 0 !== u3[5] ? u3[5] : this.mainchain.defaultPrivateKey, s3 = u3.length > 6 && void 0 !== u3[6] && u3[6], e5.abrupt("return", this.withdrawTrc("withdrawal(uint256)", t4, r4, n3, o3, a3, i3, s3));
                case 4:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, r4, n3, o3) {
            return a2.apply(this, arguments);
          }) }, { key: "injectFund", value: (o2 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i3, s3, u3, c3, l3, d3, p2 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (o3 = p2.length > 3 && void 0 !== p2[3] ? p2[3] : this.mainchain.defaultPrivateKey, a3 = p2.length > 4 && void 0 !== p2[4] && p2[4], this.utils.isFunction(o3) && (a3 = o3, o3 = this.mainchain.defaultPrivateKey), this.utils.isFunction(n3) && (a3 = n3, n3 = {}), a3) {
                    e5.next = 6;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.injectFund, t4, r4, n3, o3));
                case 6:
                  if (!this.validator.notValid([{ name: "num", type: "integer", value: t4, gte: 0 }, { name: "feeLimit", type: "integer", value: r4, gte: 0 }], a3)) {
                    e5.next = 8;
                    break;
                  }
                  return e5.abrupt("return");
                case 8:
                  return e5.prev = 8, i3 = this.sidechain.address.fromPrivateKey(o3), s3 = this.sidechain.address.toHex(i3), e5.next = 13, this.sidechain.fullNode.request("/wallet/fundinject", { owner_address: s3, amount: t4 }, "post");
                case 13:
                  return u3 = e5.sent, e5.next = 16, this.sidechain.trx.sign(u3, o3);
                case 16:
                  if ((c3 = e5.sent).signature) {
                    e5.next = 21;
                    break;
                  }
                  if (o3) {
                    e5.next = 20;
                    break;
                  }
                  return e5.abrupt("return", a3("Transaction was not signed properly"));
                case 20:
                  return e5.abrupt("return", a3("Invalid private key provided"));
                case 21:
                  return e5.next = 23, this.sidechain.trx.sendRawTransaction(c3);
                case 23:
                  if (!(l3 = e5.sent).code) {
                    e5.next = 28;
                    break;
                  }
                  return d3 = { error: l3.code, message: l3.code }, l3.message && (d3.message = this.mainchain.toUtf8(l3.message)), e5.abrupt("return", a3(d3));
                case 28:
                  return e5.abrupt("return", a3(null, c3.txID));
                case 31:
                  return e5.prev = 31, e5.t0 = e5.catch(8), e5.abrupt("return", a3(e5.t0));
                case 34:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[8, 31]]);
          })), function(e4, t4, r4) {
            return o2.apply(this, arguments);
          }) }, { key: "retryWithdraw", value: (n2 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i3, s3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return o3 = s3.length > 3 && void 0 !== s3[3] ? s3[3] : {}, a3 = s3.length > 4 && void 0 !== s3[4] ? s3[4] : this.sidechain.defaultPrivateKey, i3 = s3.length > 5 && void 0 !== s3[5] && s3[5], e5.abrupt("return", this.withdrawTrc("retryWithdraw(uint256)", t4, r4, n3, this.sideGatewayAddress, o3, a3, i3));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, r4) {
            return n2.apply(this, arguments);
          }) }, { key: "retryDeposit", value: (r3 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i3, s3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return o3 = s3.length > 3 && void 0 !== s3[3] ? s3[3] : {}, a3 = s3.length > 4 && void 0 !== s3[4] ? s3[4] : this.mainchain.defaultPrivateKey, i3 = s3.length > 5 && void 0 !== s3[5] && s3[5], e5.abrupt("return", this.depositTrc("retryDeposit", t4, r4, n3, this.mainGatewayAddress, o3, a3, i3));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, t4, n3) {
            return r3.apply(this, arguments);
          }) }, { key: "retryMapping", value: (t3 = p()(E().mark(function e4(t4, r4, n3) {
            var o3, a3, i3, s3 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return o3 = s3.length > 3 && void 0 !== s3[3] ? s3[3] : {}, a3 = s3.length > 4 && void 0 !== s3[4] ? s3[4] : this.mainchain.defaultPrivateKey, i3 = s3.length > 5 && void 0 !== s3[5] && s3[5], e5.abrupt("return", this.depositTrc("retryMapping", t4, r4, n3, this.mainGatewayAddress, o3, a3, i3));
                case 5:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function(e4, r4, n3) {
            return t3.apply(this, arguments);
          }) }]), e3;
        }();
        function Zp() {
          try {
            var e3 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
          } catch (e4) {
          }
          return (Zp = function() {
            return !!e3;
          })();
        }
        var Kp = "4.7.1", Qp = function(e3) {
          P()(s2, e3);
          var t3, r3, n2, o2, a2, i2 = (t3 = s2, r3 = Zp(), function() {
            var e4, n3 = F()(t3);
            if (r3) {
              var o3 = F()(this).constructor;
              e4 = Reflect.construct(n3, arguments, o3);
            } else e4 = n3.apply(this, arguments);
            return B()(this, e4);
          });
          function s2() {
            var e4, t4, r4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], n3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], o3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], a3 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], u2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
            y()(this, s2), e4 = i2.call(this);
            var c2 = false, l2 = false;
            return "object" === g()(r4) && (r4.fullNode || r4.fullHost) ? (t4 = r4.fullNode || r4.fullHost, a3 = n3, n3 = r4.solidityNode || r4.fullHost, o3 = r4.eventServer || r4.fullHost, c2 = r4.headers || false, l2 = r4.eventHeaders || c2, u2 = r4.privateKey) : t4 = r4, ip.isString(t4) && (t4 = new up.HttpProvider(t4)), ip.isString(n3) && (n3 = new up.HttpProvider(n3)), ip.isString(o3) && (o3 = new up.HttpProvider(o3)), e4.event = new Vp(m()(e4)), e4.transactionBuilder = new Ep(m()(e4)), e4.trx = new Lp(m()(e4)), e4.plugin = new zp(m()(e4), r4), e4.utils = ip, e4.setFullNode(t4), e4.setSolidityNode(n3), e4.setEventServer(o3), e4.providers = up, e4.BigNumber = rp(), e4.defaultBlock = false, e4.defaultPrivateKey = false, e4.defaultAddress = { hex: false, base58: false }, ["sha3", "toHex", "toUtf8", "fromUtf8", "toAscii", "fromAscii", "toDecimal", "fromDecimal", "toSun", "fromSun", "toBigNumber", "isAddress", "createAccount", "address", "version", "createRandom", "fromMnemonic"].forEach(function(t5) {
              e4[t5] = s2[t5];
            }), "object" === g()(a3) && (a3.fullNode || a3.fullHost) ? e4.sidechain = new $p(a3, s2, m()(e4), u2) : u2 = u2 || a3, u2 && e4.setPrivateKey(u2), e4.fullnodeVersion = Kp, e4.feeLimit = 15e7, e4.injectPromise = gp()(m()(e4)), c2 && e4.setFullNodeHeader(c2), l2 && e4.setEventHeader(l2), e4;
          }
          return T()(s2, [{ key: "getFullnodeVersion", value: (a2 = p()(E().mark(function e4() {
            var t4;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return e5.prev = 0, e5.next = 3, this.trx.getNodeInfo();
                case 3:
                  t4 = e5.sent, this.fullnodeVersion = t4.configNodeInfo.codeVersion, 2 === this.fullnodeVersion.split(".").length && (this.fullnodeVersion += ".0"), e5.next = 11;
                  break;
                case 8:
                  e5.prev = 8, e5.t0 = e5.catch(0), this.fullnodeVersion = Kp;
                case 11:
                case "end":
                  return e5.stop();
              }
            }, e4, this, [[0, 8]]);
          })), function() {
            return a2.apply(this, arguments);
          }) }, { key: "setDefaultBlock", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if ([false, "latest", "earliest", 0].includes(e4)) return this.defaultBlock = e4;
            if (!ip.isInteger(e4) || !e4) throw new Error("Invalid block ID provided");
            this.defaultBlock = Math.abs(e4);
          } }, { key: "setPrivateKey", value: function(e4) {
            try {
              this.setAddress(this.address.fromPrivateKey(e4));
            } catch (e5) {
              throw new Error("Invalid private key provided");
            }
            this.defaultPrivateKey = e4, this.emit("privateKeyChanged", e4);
          } }, { key: "setAddress", value: function(e4) {
            if (!this.isAddress(e4)) throw new Error("Invalid address provided");
            var t4 = this.address.toHex(e4), r4 = this.address.fromHex(e4);
            this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== r4 && (this.defaultPrivateKey = false), this.defaultAddress = { hex: t4, base58: r4 }, this.emit("addressChanged", { hex: t4, base58: r4 });
          } }, { key: "fullnodeSatisfies", value: function(e4) {
            return pp().satisfies(this.fullnodeVersion, e4);
          } }, { key: "isValidProvider", value: function(e4) {
            return Object.values(up).some(function(t4) {
              return e4 instanceof t4;
            });
          } }, { key: "setFullNode", value: function(e4) {
            if (ip.isString(e4) && (e4 = new up.HttpProvider(e4)), !this.isValidProvider(e4)) throw new Error("Invalid full node provided");
            this.fullNode = e4, this.fullNode.setStatusPage("wallet/getnowblock");
          } }, { key: "setSolidityNode", value: function(e4) {
            if (ip.isString(e4) && (e4 = new up.HttpProvider(e4)), !this.isValidProvider(e4)) throw new Error("Invalid solidity node provided");
            this.solidityNode = e4, this.solidityNode.setStatusPage("walletsolidity/getnowblock");
          } }, { key: "setEventServer", value: function() {
            var e4;
            (e4 = this.event).setServer.apply(e4, arguments);
          } }, { key: "setHeader", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t4 = new up.HttpProvider(this.fullNode.host, 3e4, false, false, e4), r4 = new up.HttpProvider(this.solidityNode.host, 3e4, false, false, e4), n3 = new up.HttpProvider(this.eventServer.host, 3e4, false, false, e4);
            this.setFullNode(t4), this.setSolidityNode(r4), this.setEventServer(n3);
          } }, { key: "setFullNodeHeader", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t4 = new up.HttpProvider(this.fullNode.host, 3e4, false, false, e4), r4 = new up.HttpProvider(this.solidityNode.host, 3e4, false, false, e4);
            this.setFullNode(t4), this.setSolidityNode(r4);
          } }, { key: "setEventHeader", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t4 = new up.HttpProvider(this.eventServer.host, 3e4, false, false, e4);
            this.setEventServer(t4);
          } }, { key: "currentProviders", value: function() {
            return { fullNode: this.fullNode, solidityNode: this.solidityNode, eventServer: this.eventServer };
          } }, { key: "currentProvider", value: function() {
            return this.currentProviders();
          } }, { key: "getEventResult", value: function() {
            for (var e4, t4 = arguments.length, r4 = new Array(t4), n3 = 0; n3 < t4; n3++) r4[n3] = arguments[n3];
            return "object" !== g()(r4[1]) && (r4[1] = { sinceTimestamp: r4[1] || 0, eventName: r4[2] || false, blockNumber: r4[3] || false, size: r4[4] || 20, page: r4[5] || 1 }, r4.splice(2, 4), ip.isFunction(r4[2]) || (ip.isFunction(r4[1].page) ? (r4[2] = r4[1].page, r4[1].page = 1) : ip.isFunction(r4[1].size) && (r4[2] = r4[1].size, r4[1].size = 20, r4[1].page = 1))), (e4 = this.event).getEventsByContractAddress.apply(e4, r4);
          } }, { key: "getEventByTransactionID", value: function() {
            var e4;
            return (e4 = this.event).getEventsByTransactionID.apply(e4, arguments);
          } }, { key: "contract", value: function() {
            return new _p(this, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], arguments.length > 1 && void 0 !== arguments[1] && arguments[1]);
          } }, { key: "isConnected", value: (o2 = p()(E().mark(function e4() {
            var t4, r4 = arguments;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  if (t4 = r4.length > 0 && void 0 !== r4[0] && r4[0]) {
                    e5.next = 3;
                    break;
                  }
                  return e5.abrupt("return", this.injectPromise(this.isConnected));
                case 3:
                  return e5.t0 = t4, e5.next = 6, this.fullNode.isConnected();
                case 6:
                  return e5.t1 = e5.sent, e5.next = 9, this.solidityNode.isConnected();
                case 9:
                  if (e5.t2 = e5.sent, e5.t3 = this.eventServer, !e5.t3) {
                    e5.next = 15;
                    break;
                  }
                  return e5.next = 14, this.eventServer.isConnected();
                case 14:
                  e5.t3 = e5.sent;
                case 15:
                  return e5.t4 = e5.t3, e5.t5 = { fullNode: e5.t1, solidityNode: e5.t2, eventServer: e5.t4 }, e5.abrupt("return", (0, e5.t0)(null, e5.t5));
                case 18:
                case "end":
                  return e5.stop();
              }
            }, e4, this);
          })), function() {
            return o2.apply(this, arguments);
          }) }], [{ key: "address", get: function() {
            return { fromHex: function(e4) {
              return ip.isHex(e4) ? ip.crypto.getBase58CheckAddress(ip.code.hexStr2byteArray(e4.replace(/^0x/, G))) : e4;
            }, toHex: function(e4) {
              return ip.isHex(e4) ? e4.toLowerCase().replace(/^0x/, G) : ip.code.byteArray2hexStr(ip.crypto.decodeBase58Address(e4)).toLowerCase();
            }, fromPrivateKey: function(e4) {
              var t4 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              try {
                return ip.crypto.pkToAddress(e4, t4);
              } catch (e5) {
                return false;
              }
            } };
          } }, { key: "sha3", value: function(e4) {
            return (arguments.length > 1 && void 0 !== arguments[1] && !arguments[1] ? "" : "0x") + kt(Buffer.from(e4, "utf-8")).toString().substring(2);
          } }, { key: "toHex", value: function(e4) {
            if (ip.isBoolean(e4)) return s2.fromDecimal(+e4);
            if (ip.isBigNumber(e4)) return s2.fromDecimal(e4);
            if ("object" === g()(e4)) return s2.fromUtf8(JSON.stringify(e4));
            if (ip.isString(e4)) {
              if (/^(-|)0x/.test(e4)) return e4;
              if (!isFinite(e4) || /^\s*$/.test(e4)) return s2.fromUtf8(e4);
            }
            var t4 = s2.fromDecimal(e4);
            if ("0xNaN" === t4) throw new Error("The passed value is not convertible to a hex string");
            return t4;
          } }, { key: "toUtf8", value: function(e4) {
            if (ip.isHex(e4)) return e4 = e4.replace(/^0x/, ""), Buffer.from(e4, "hex").toString("utf8");
            throw new Error("The passed value is not a valid hex string");
          } }, { key: "fromUtf8", value: function(e4) {
            if (!ip.isString(e4)) throw new Error("The passed value is not a valid utf-8 string");
            return "0x" + Buffer.from(e4, "utf8").toString("hex");
          } }, { key: "toAscii", value: function(e4) {
            if (ip.isHex(e4)) {
              var t4 = "", r4 = 0, n3 = e4.length;
              for ("0x" === e4.substring(0, 2) && (r4 = 2); r4 < n3; r4 += 2) {
                var o3 = parseInt(e4.substr(r4, 2), 16);
                t4 += String.fromCharCode(o3);
              }
              return t4;
            }
            throw new Error("The passed value is not a valid hex string");
          } }, { key: "fromAscii", value: function(e4, t4) {
            if (!ip.isString(e4)) throw new Error("The passed value is not a valid utf-8 string");
            return "0x" + Buffer.from(e4, "ascii").toString("hex").padEnd(t4, "0");
          } }, { key: "toDecimal", value: function(e4) {
            return s2.toBigNumber(e4).toNumber();
          } }, { key: "fromDecimal", value: function(e4) {
            var t4 = s2.toBigNumber(e4), r4 = t4.toString(16);
            return t4.isLessThan(0) ? "-0x" + r4.substr(1) : "0x" + r4;
          } }, { key: "fromSun", value: function(e4) {
            var t4 = s2.toBigNumber(e4).div(1e6);
            return ip.isBigNumber(e4) ? t4 : t4.toString(10);
          } }, { key: "toSun", value: function(e4) {
            var t4 = s2.toBigNumber(e4).times(1e6);
            return ip.isBigNumber(e4) ? t4 : t4.toString(10);
          } }, { key: "toBigNumber", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
            return ip.isBigNumber(e4) ? e4 : ip.isString(e4) && /^(-|)0x/.test(e4) ? new (rp())(e4.replace("0x", ""), 16) : new (rp())(e4.toString(10), 10);
          } }, { key: "isAddress", value: function() {
            var e4 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (!ip.isString(e4)) return false;
            if (42 === e4.length) try {
              return s2.isAddress(ip.crypto.getBase58CheckAddress(ip.code.hexStr2byteArray(e4)));
            } catch (e5) {
              return false;
            }
            try {
              return ip.crypto.isAddressValid(e4);
            } catch (e5) {
              return false;
            }
          } }, { key: "createAccount", value: (n2 = p()(E().mark(function e4() {
            var t4;
            return E().wrap(function(e5) {
              for (; ; ) switch (e5.prev = e5.next) {
                case 0:
                  return t4 = ip.accounts.generateAccount(), e5.abrupt("return", t4);
                case 2:
                case "end":
                  return e5.stop();
              }
            }, e4);
          })), function() {
            return n2.apply(this, arguments);
          }) }, { key: "createRandom", value: function(e4) {
            return ip.accounts.generateRandom(e4);
          } }, { key: "fromMnemonic", value: function(e4) {
            var t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : X, r4 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
            return ip.accounts.generateAccountWithMnemonic(e4, t4, r4);
          } }]), s2;
        }(lp());
        I()(Qp, "providers", up), I()(Qp, "BigNumber", rp()), I()(Qp, "TransactionBuilder", Ep), I()(Qp, "Trx", Lp), I()(Qp, "Contract", _p), I()(Qp, "Plugin", zp), I()(Qp, "Event", Vp), I()(Qp, "version", "5.3.4"), I()(Qp, "utils", ip);
      })(), module.exports = n.default;
    })();
  }
});
export default require_TronWeb_node();
/*! Bundled license information:

@babel/runtime/helpers/regenerator.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE *)

axios/dist/browser/axios.cjs:
  (*! Axios v1.11.0 Copyright (c) 2025 Matt Zabriskie and contributors *)

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

aes-js/lib.commonjs/aes.js:
  (*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. *)

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)
*/
//# sourceMappingURL=tronweb.js.map
